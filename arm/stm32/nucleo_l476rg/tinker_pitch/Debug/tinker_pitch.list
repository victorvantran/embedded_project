
tinker_pitch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800c148  0800c148  0001c148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c654  0800c654  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c654  0800c654  0001c654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c65c  0800c65c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c660  0800c660  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  200001e4  0800c848  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d20  0800c848  00021d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231cb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea8  00000000  00000000  000433df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00047288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  00048da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055bb  00000000  00000000  0004a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7b8  00000000  00000000  0004fd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112e1b  00000000  00000000  0006b4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e2de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008448  00000000  00000000  0017e334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c130 	.word	0x0800c130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c130 	.word	0x0800c130

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000ea8:	1d39      	adds	r1, r7, #4
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	2201      	movs	r2, #1
 8000eae:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <__io_putchar+0x20>)
 8000eb0:	f005 f98a 	bl	80061c8 <HAL_UART_Transmit>
	return ch;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20001bfc 	.word	0x20001bfc

08000ec4 <HAL_ADC_ConvCpltCallback>:


volatile uint16_t uRawADC = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	//if (hadc == &hadc1)
	//{

		uRawADC = HAL_ADC_GetValue(hadc);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f001 fa8b 	bl	80023e8 <HAL_ADC_GetValue>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000ed8:	801a      	strh	r2, [r3, #0]


  	uint16_t period = uRawADC * 15;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	81fb      	strh	r3, [r7, #14]
  	period = period > 1000 ? period : 1000;
 8000ee8:	89fb      	ldrh	r3, [r7, #14]
 8000eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000eee:	bf38      	it	cc
 8000ef0:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 8000ef4:	81fb      	strh	r3, [r7, #14]
  	period = period < 60000 ? period : 60000;
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000efc:	4293      	cmp	r3, r2
 8000efe:	bf28      	it	cs
 8000f00:	4613      	movcs	r3, r2
 8000f02:	81fb      	strh	r3, [r7, #14]
		TIM1->ARR = (period);
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	62d3      	str	r3, [r2, #44]	; 0x2c
		htim1.Instance->CCR1 = TIM1->ARR/2;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_ADC_ConvCpltCallback+0x64>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0852      	lsrs	r2, r2, #1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34


	//HAL_ADC_Start_IT(hadc); // If continous conversion disabled
	//}
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000200 	.word	0x20000200
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	20001bb0 	.word	0x20001bb0

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fd9c 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f83e 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f9fa 	bl	8001330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3c:	f000 f9c8 	bl	80012d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f40:	f000 f936 	bl	80011b0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f44:	f000 f8be 	bl	80010c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4810      	ldr	r0, [pc, #64]	; (8000f8c <main+0x60>)
 8000f4c:	f004 f8d6 	bl	80050fc <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f50:	f005 fe04 	bl	8006b5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <main+0x64>)
 8000f56:	2100      	movs	r1, #0
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <main+0x68>)
 8000f5a:	f005 fe49 	bl	8006bf0 <osThreadNew>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <main+0x6c>)
 8000f62:	6013      	str	r3, [r2, #0]

  /* creation of tickCaptureTask */
  tickCaptureTaskHandle = osThreadNew(StartTickCaptureTask, NULL, &tickCaptureTask_attributes);
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <main+0x70>)
 8000f66:	2100      	movs	r1, #0
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <main+0x74>)
 8000f6a:	f005 fe41 	bl	8006bf0 <osThreadNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <main+0x78>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of stateTask */
  stateTaskHandle = osThreadNew(StartStateTask, NULL, &stateTask_attributes);
 8000f74:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <main+0x7c>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <main+0x80>)
 8000f7a:	f005 fe39 	bl	8006bf0 <osThreadNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <main+0x84>)
 8000f82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f84:	f005 fe0e 	bl	8006ba4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <main+0x5c>
 8000f8a:	bf00      	nop
 8000f8c:	20001bb0 	.word	0x20001bb0
 8000f90:	0800c1b8 	.word	0x0800c1b8
 8000f94:	080013a9 	.word	0x080013a9
 8000f98:	20001b44 	.word	0x20001b44
 8000f9c:	0800c1dc 	.word	0x0800c1dc
 8000fa0:	080013dd 	.word	0x080013dd
 8000fa4:	20001b40 	.word	0x20001b40
 8000fa8:	0800c200 	.word	0x0800c200
 8000fac:	08001449 	.word	0x08001449
 8000fb0:	20001bac 	.word	0x20001bac

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbe:	2244      	movs	r2, #68	; 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f008 fbd2 	bl	800976c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2288      	movs	r2, #136	; 0x88
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fbc4 	bl	800976c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800100a:	230a      	movs	r3, #10
 800100c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001010:	2307      	movs	r3, #7
 8001012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001026:	4618      	mov	r0, r3
 8001028:	f002 fc64 	bl	80038f4 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001032:	f000 fa6b 	bl	800150c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001054:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001058:	2104      	movs	r1, #4
 800105a:	4618      	mov	r0, r3
 800105c:	f003 f830 	bl	80040c0 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001066:	f000 fa51 	bl	800150c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800106a:	f244 0302 	movw	r3, #16386	; 0x4002
 800106e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001074:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001078:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001082:	2308      	movs	r3, #8
 8001084:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001086:	2307      	movs	r3, #7
 8001088:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001096:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fa48 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010a6:	f000 fa31 	bl	800150c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ae:	f002 fbcb 	bl	8003848 <HAL_PWREx_ControlVoltageScaling>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x108>
  {
    Error_Handler();
 80010b8:	f000 fa28 	bl	800150c <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	37e0      	adds	r7, #224	; 0xe0
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <MX_ADC1_Init+0xe0>)
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <MX_ADC1_Init+0xe4>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_ADC1_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <MX_ADC1_Init+0xe0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_ADC1_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001106:	2204      	movs	r2, #4
 8001108:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_ADC1_Init+0xe0>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001118:	2201      	movs	r2, #1
 800111a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_ADC1_Init+0xe0>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ADC1_Init+0xe0>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC1_Init+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001146:	4817      	ldr	r0, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001148:	f000 fec6 	bl	8001ed8 <HAL_ADC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001152:	f000 f9db 	bl	800150c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4810      	ldr	r0, [pc, #64]	; (80011a4 <MX_ADC1_Init+0xe0>)
 8001162:	f002 f827 	bl	80031b4 <HAL_ADCEx_MultiModeConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800116c:	f000 f9ce 	bl	800150c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_ADC1_Init+0xe8>)
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001174:	2306      	movs	r3, #6
 8001176:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001178:	2307      	movs	r3, #7
 800117a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800117c:	237f      	movs	r3, #127	; 0x7f
 800117e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001180:	2304      	movs	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_ADC1_Init+0xe0>)
 800118e:	f001 fb67 	bl	8002860 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001198:	f000 f9b8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20001b48 	.word	0x20001b48
 80011a8:	50040000 	.word	0x50040000
 80011ac:	14f00020 	.word	0x14f00020

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	222c      	movs	r2, #44	; 0x2c
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 fac5 	bl	800976c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <MX_TIM1_Init+0x118>)
 80011e4:	4a39      	ldr	r2, [pc, #228]	; (80012cc <MX_TIM1_Init+0x11c>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10 - 1;
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <MX_TIM1_Init+0x118>)
 80011ea:	2209      	movs	r2, #9
 80011ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <MX_TIM1_Init+0x118>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40817;
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <MX_TIM1_Init+0x118>)
 80011f6:	f649 7271 	movw	r2, #40817	; 0x9f71
 80011fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <MX_TIM1_Init+0x118>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_TIM1_Init+0x118>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <MX_TIM1_Init+0x118>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800120e:	482e      	ldr	r0, [pc, #184]	; (80012c8 <MX_TIM1_Init+0x118>)
 8001210:	f003 ff1c 	bl	800504c <HAL_TIM_PWM_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 f977 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800122e:	4619      	mov	r1, r3
 8001230:	4825      	ldr	r0, [pc, #148]	; (80012c8 <MX_TIM1_Init+0x118>)
 8001232:	f004 fe57 	bl	8005ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800123c:	f000 f966 	bl	800150c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4818      	ldr	r0, [pc, #96]	; (80012c8 <MX_TIM1_Init+0x118>)
 8001266:	f004 f96f 	bl	8005548 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001270:	f000 f94c 	bl	800150c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM1_Init+0x118>)
 80012aa:	f004 fea3 	bl	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80012b4:	f000 f92a 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM1_Init+0x118>)
 80012ba:	f000 f9bb 	bl	8001634 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3758      	adds	r7, #88	; 0x58
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20001bb0 	.word	0x20001bb0
 80012cc:	40012c00 	.word	0x40012c00

080012d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <MX_USART2_UART_Init+0x5c>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001314:	f004 ff0a 	bl	800612c <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800131e:	f000 f8f5 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20001bfc 	.word	0x20001bfc
 800132c:	40004400 	.word	0x40004400

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1a      	ldr	r2, [pc, #104]	; (80013a4 <MX_GPIO_Init+0x74>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_GPIO_Init+0x74>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <MX_GPIO_Init+0x74>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <MX_GPIO_Init+0x74>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_GPIO_Init+0x74>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]

}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t uData = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	81fb      	strh	r3, [r7, #14]
	htim1.Instance->CCR1 = TIM1->ARR/2;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <StartDefaultTask+0x28>)
 80013b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <StartDefaultTask+0x2c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0852      	lsrs	r2, r2, #1
 80013be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  for(;;)
  {
    HAL_ADC_Start_IT(&hadc1);
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <StartDefaultTask+0x30>)
 80013c2:	f000 fedf 	bl	8002184 <HAL_ADC_Start_IT>
		TIM1->ARR = (period);
		htim1.Instance->CCR1 = TIM1->ARR/2;
		*/


    osDelay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f005 fca4 	bl	8006d14 <osDelay>
    HAL_ADC_Start_IT(&hadc1);
 80013cc:	e7f8      	b.n	80013c0 <StartDefaultTask+0x18>
 80013ce:	bf00      	nop
 80013d0:	40012c00 	.word	0x40012c00
 80013d4:	20001bb0 	.word	0x20001bb0
 80013d8:	20001b48 	.word	0x20001b48

080013dc <StartTickCaptureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTickCaptureTask */
void StartTickCaptureTask(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTickCaptureTask */
	static const TickType_t xFrequency = pdMS_TO_TICKS(50);
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80013e4:	f006 fdec 	bl	8007fc0 <xTaskGetTickCount>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
  	if (numCaptureCheck < MAX_CAPTURE_CHECK)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <StartTickCaptureTask+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b31      	cmp	r3, #49	; 0x31
 80013f2:	d80f      	bhi.n	8001414 <StartTickCaptureTask+0x38>
  	{
  		uint16_t captureRawADC = uRawADC;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <StartTickCaptureTask+0x5c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81fb      	strh	r3, [r7, #14]
  		captureTickPitch[numCaptureCheck] = captureRawADC;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <StartTickCaptureTask+0x58>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <StartTickCaptureTask+0x60>)
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    	numCaptureCheck++;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <StartTickCaptureTask+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <StartTickCaptureTask+0x58>)
 8001412:	701a      	strb	r2, [r3, #0]
  	}
  	printf("Capture Tick: %u\r\n", numCaptureCheck);
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <StartTickCaptureTask+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <StartTickCaptureTask+0x64>)
 800141c:	f008 fe18 	bl	800a050 <iprintf>

    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <StartTickCaptureTask+0x68>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f006 fc04 	bl	8007c38 <vTaskDelayUntil>
  	if (numCaptureCheck < MAX_CAPTURE_CHECK)
 8001430:	e7dc      	b.n	80013ec <StartTickCaptureTask+0x10>
 8001432:	bf00      	nop
 8001434:	20000268 	.word	0x20000268
 8001438:	20000200 	.word	0x20000200
 800143c:	20000204 	.word	0x20000204
 8001440:	0800c170 	.word	0x0800c170
 8001444:	0800c224 	.word	0x0800c224

08001448 <StartStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateTask */
void StartStateTask(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateTask */
	static TickType_t xFrequency = pdMS_TO_TICKS(500);
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8001450:	f006 fdb6 	bl	8007fc0 <xTaskGetTickCount>
 8001454:	4603      	mov	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
  	float fAveragePitch = 0.0;
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  	printf("Checked: %u\r\n", numCaptureCheck);
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <StartStateTask+0x8c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	481c      	ldr	r0, [pc, #112]	; (80014d8 <StartStateTask+0x90>)
 8001466:	f008 fdf3 	bl	800a050 <iprintf>

  	for (uint8_t i = 0; i < numCaptureCheck; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	74fb      	strb	r3, [r7, #19]
 800146e:	e018      	b.n	80014a2 <StartStateTask+0x5a>
  	{
  		fAveragePitch += ((float)captureTickPitch[i])/(numCaptureCheck);
 8001470:	7cfb      	ldrb	r3, [r7, #19]
 8001472:	4a1a      	ldr	r2, [pc, #104]	; (80014dc <StartStateTask+0x94>)
 8001474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <StartStateTask+0x8c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	ed97 7a05 	vldr	s14, [r7, #20]
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	edc7 7a05 	vstr	s15, [r7, #20]
  	for (uint8_t i = 0; i < numCaptureCheck; i++)
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	3301      	adds	r3, #1
 80014a0:	74fb      	strb	r3, [r7, #19]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <StartStateTask+0x8c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	7cfa      	ldrb	r2, [r7, #19]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e1      	bcc.n	8001470 <StartStateTask+0x28>
  	}
  	numCaptureCheck = 0;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <StartStateTask+0x8c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
  	printf("State: %f\r\n", fAveragePitch);
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff f848 	bl	8000548 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <StartStateTask+0x98>)
 80014be:	f008 fdc7 	bl	800a050 <iprintf>

    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <StartStateTask+0x9c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 fbb3 	bl	8007c38 <vTaskDelayUntil>
  {
 80014d2:	e7c1      	b.n	8001458 <StartStateTask+0x10>
 80014d4:	20000268 	.word	0x20000268
 80014d8:	0800c184 	.word	0x0800c184
 80014dc:	20000204 	.word	0x20000204
 80014e0:	0800c194 	.word	0x0800c194
 80014e4:	20000000 	.word	0x20000000

080014e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014fa:	f000 fad7 	bl	8001aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40001000 	.word	0x40001000

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_MspInit+0x4c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	4a10      	ldr	r2, [pc, #64]	; (8001564 <HAL_MspInit+0x4c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6613      	str	r3, [r2, #96]	; 0x60
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_MspInit+0x4c>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_MspInit+0x4c>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_MspInit+0x4c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_MspInit+0x4c>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	210f      	movs	r1, #15
 8001552:	f06f 0001 	mvn.w	r0, #1
 8001556:	f001 ff95 	bl	8003484 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a19      	ldr	r2, [pc, #100]	; (80015ec <HAL_ADC_MspInit+0x84>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d12c      	bne.n	80015e4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 8001590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_ADC_MspInit+0x88>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015be:	230b      	movs	r3, #11
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d0:	f001 ff82 	bl	80034d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	2012      	movs	r0, #18
 80015da:	f001 ff53 	bl	8003484 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 ff6c 	bl	80034bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	50040000 	.word	0x50040000
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_TIM_PWM_MspInit+0x38>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10b      	bne.n	800161e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_TIM_PWM_MspInit+0x3c>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_TIM_PWM_MspInit+0x3c>)
 800160c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001610:	6613      	str	r3, [r2, #96]	; 0x60
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_TIM_PWM_MspInit+0x3c>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40012c00 	.word	0x40012c00
 8001630:	40021000 	.word	0x40021000

08001634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_TIM_MspPostInit+0x68>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d11d      	bne.n	8001692 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f001 ff23 	bl	80034d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_UART_MspInit+0x7c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d128      	bne.n	8001718 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_UART_MspInit+0x80>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001706:	2307      	movs	r3, #7
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f001 fee0 	bl	80034d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40004400 	.word	0x40004400
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	2036      	movs	r0, #54	; 0x36
 800173e:	f001 fea1 	bl	8003484 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001742:	2036      	movs	r0, #54	; 0x36
 8001744:	f001 feba 	bl	80034bc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001748:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <HAL_InitTick+0x9c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_InitTick+0x9c>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_InitTick+0x9c>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001760:	f107 0210 	add.w	r2, r7, #16
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f002 fe4e 	bl	800440c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001770:	f002 fe20 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8001774:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_InitTick+0xa0>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	3b01      	subs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_InitTick+0xa4>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <HAL_InitTick+0xa8>)
 8001788:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_InitTick+0xa4>)
 800178c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001790:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_InitTick+0xa4>)
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_InitTick+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_InitTick+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <HAL_InitTick+0xa4>)
 80017a6:	f003 fb7f 	bl	8004ea8 <HAL_TIM_Base_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d104      	bne.n	80017ba <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_InitTick+0xa4>)
 80017b2:	f003 fbdb 	bl	8004f6c <HAL_TIM_Base_Start_IT>
 80017b6:	4603      	mov	r3, r0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3730      	adds	r7, #48	; 0x30
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	431bde83 	.word	0x431bde83
 80017cc:	20001c80 	.word	0x20001c80
 80017d0:	40001000 	.word	0x40001000

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <NMI_Handler+0x4>

080017da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <MemManage_Handler+0x4>

080017e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001804:	4802      	ldr	r0, [pc, #8]	; (8001810 <ADC1_2_IRQHandler+0x10>)
 8001806:	f000 fdfd 	bl	8002404 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20001b48 	.word	0x20001b48

08001814 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIM6_DAC_IRQHandler+0x10>)
 800181a:	f003 fd75 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20001c80 	.word	0x20001c80

08001828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	return 1;
 800182c:	2301      	movs	r3, #1
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_kill>:

int _kill(int pid, int sig)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001842:	f007 ff5b 	bl	80096fc <__errno>
 8001846:	4603      	mov	r3, r0
 8001848:	2216      	movs	r2, #22
 800184a:	601a      	str	r2, [r3, #0]
	return -1;
 800184c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_exit>:

void _exit (int status)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffe7 	bl	8001838 <_kill>
	while (1) {}		/* Make sure we hang here */
 800186a:	e7fe      	b.n	800186a <_exit+0x12>

0800186c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e00a      	b.n	8001894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800187e:	f3af 8000 	nop.w
 8001882:	4601      	mov	r1, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	60ba      	str	r2, [r7, #8]
 800188a:	b2ca      	uxtb	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf0      	blt.n	800187e <_read+0x12>
	}

return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e009      	b.n	80018cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff faed 	bl	8000ea0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf1      	blt.n	80018b8 <_write+0x12>
	}
	return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_close>:

int _close(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001906:	605a      	str	r2, [r3, #4]
	return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_isatty>:

int _isatty(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f007 fec0 	bl	80096fc <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20018000 	.word	0x20018000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	2000026c 	.word	0x2000026c
 80019b0:	20001d20 	.word	0x20001d20

080019b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <SystemInit+0x5c>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <SystemInit+0x5c>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <SystemInit+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <SystemInit+0x60>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <SystemInit+0x60>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <SystemInit+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <SystemInit+0x60>)
 80019e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80019e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80019e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <SystemInit+0x60>)
 80019ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <SystemInit+0x60>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <SystemInit+0x60>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SystemInit+0x60>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	40021000 	.word	0x40021000

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff ffca 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a22:	e003      	b.n	8001a2c <LoopCopyDataInit>

08001a24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a2a:	3104      	adds	r1, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a34:	d3f6      	bcc.n	8001a24 <CopyDataInit>
	ldr	r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a38:	e002      	b.n	8001a40 <LoopFillZerobss>

08001a3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a3c:	f842 3b04 	str.w	r3, [r2], #4

08001a40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LoopForever+0x16>)
	cmp	r2, r3
 8001a42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a44:	d3f9      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f007 fe5f 	bl	8009708 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff fa6f 	bl	8000f2c <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a50:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a54:	0800c664 	.word	0x0800c664
	ldr	r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a5c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001a60:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001a64:	20001d20 	.word	0x20001d20

08001a68 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC3_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_Init+0x3c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_Init+0x3c>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a82:	2003      	movs	r0, #3
 8001a84:	f001 fcf3 	bl	800346e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f7ff fe4d 	bl	8001728 <HAL_InitTick>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	71fb      	strb	r3, [r7, #7]
 8001a98:	e001      	b.n	8001a9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a9a:	f7ff fd3d 	bl	8001518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20001ccc 	.word	0x20001ccc

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20001ccc 	.word	0x20001ccc

08001aec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	609a      	str	r2, [r3, #8]
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3360      	adds	r3, #96	; 0x60
 8001b66:	461a      	mov	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <LL_ADC_SetOffset+0x44>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	03fff000 	.word	0x03fff000

08001b9c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3360      	adds	r3, #96	; 0x60
 8001baa:	461a      	mov	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3360      	adds	r3, #96	; 0x60
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3330      	adds	r3, #48	; 0x30
 8001c34:	461a      	mov	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	211f      	movs	r1, #31
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	f003 011f 	and.w	r1, r3, #31
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0e5b      	lsrs	r3, r3, #25
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	0d1b      	lsrs	r3, r3, #20
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2107      	movs	r1, #7
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	0d1b      	lsrs	r3, r3, #20
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0318 	and.w	r3, r3, #24
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d1c:	40d9      	lsrs	r1, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	400b      	ands	r3, r1
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	0007ffff 	.word	0x0007ffff

08001d40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <LL_ADC_IsEnabled+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_ADC_IsEnabled+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e136      	b.n	8002160 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fb31 	bl	8001568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff3f 	bl	8001d9c <LL_ADC_IsDeepPowerDownEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff25 	bl	8001d78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff5a 	bl	8001dec <LL_ADC_IsInternalRegulatorEnabled>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff3e 	bl	8001dc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f48:	4b87      	ldr	r3, [pc, #540]	; (8002168 <HAL_ADC_Init+0x290>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	4a87      	ldr	r2, [pc, #540]	; (800216c <HAL_ADC_Init+0x294>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff3c 	bl	8001dec <LL_ADC_IsInternalRegulatorEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff75 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 80cf 	bne.w	800214e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80cb 	bne.w	800214e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff35 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d115      	bne.n	8002004 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd8:	4865      	ldr	r0, [pc, #404]	; (8002170 <HAL_ADC_Init+0x298>)
 8001fda:	f7ff ff2f 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4864      	ldr	r0, [pc, #400]	; (8002174 <HAL_ADC_Init+0x29c>)
 8001fe2:	f7ff ff2b 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	4863      	ldr	r0, [pc, #396]	; (8002178 <HAL_ADC_Init+0x2a0>)
 8001fec:	f7ff ff26 	bl	8001e3c <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4323      	orrs	r3, r4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	485f      	ldr	r0, [pc, #380]	; (800217c <HAL_ADC_Init+0x2a4>)
 8002000:	f7ff fd74 	bl	8001aec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7e5b      	ldrb	r3, [r3, #25]
 8002008:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800200e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002014:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800201a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002022:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d106      	bne.n	8002040 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	3b01      	subs	r3, #1
 8002038:	045b      	lsls	r3, r3, #17
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_ADC_Init+0x2a8>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff08 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 800207a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff15 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002086:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d13d      	bne.n	800210a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d13a      	bne.n	800210a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002098:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020b0:	f023 0302 	bic.w	r3, r3, #2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	69b9      	ldr	r1, [r7, #24]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d118      	bne.n	80020fa <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020de:	4311      	orrs	r1, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ea:	430a      	orrs	r2, r1
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	611a      	str	r2, [r3, #16]
 80020f8:	e007      	b.n	800210a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0201 	bic.w	r2, r2, #1
 8002108:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10c      	bne.n	800212c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f023 010f 	bic.w	r1, r3, #15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
 800212a:	e007      	b.n	800213c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 020f 	bic.w	r2, r2, #15
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f023 0303 	bic.w	r3, r3, #3
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
 800214c:	e007      	b.n	800215e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0210 	orr.w	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800215e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3724      	adds	r7, #36	; 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	20000004 	.word	0x20000004
 800216c:	053e2d63 	.word	0x053e2d63
 8002170:	50040000 	.word	0x50040000
 8002174:	50040100 	.word	0x50040100
 8002178:	50040200 	.word	0x50040200
 800217c:	50040300 	.word	0x50040300
 8002180:	fff0c007 	.word	0xfff0c007

08002184 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	4893      	ldr	r0, [pc, #588]	; (80023dc <HAL_ADC_Start_IT+0x258>)
 800218e:	f7ff fdd7 	bl	8001d40 <LL_ADC_GetMultimode>
 8002192:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fe76 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 8111 	bne.w	80023c8 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_Start_IT+0x30>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e10e      	b.n	80023d2 <HAL_ADC_Start_IT+0x24e>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 ff3f 	bl	8003040 <ADC_Enable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f040 80f8 	bne.w	80023be <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7e      	ldr	r2, [pc, #504]	; (80023e0 <HAL_ADC_Start_IT+0x25c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d002      	beq.n	80021f2 <HAL_ADC_Start_IT+0x6e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e000      	b.n	80021f4 <HAL_ADC_Start_IT+0x70>
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_ADC_Start_IT+0x260>)
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d002      	beq.n	8002202 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f023 0206 	bic.w	r2, r3, #6
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	659a      	str	r2, [r3, #88]	; 0x58
 8002226:	e002      	b.n	800222e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	221c      	movs	r2, #28
 8002234:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 021c 	bic.w	r2, r2, #28
 800224c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d108      	bne.n	8002268 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0208 	orr.w	r2, r2, #8
 8002264:	605a      	str	r2, [r3, #4]
          break;
 8002266:	e008      	b.n	800227a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0204 	orr.w	r2, r2, #4
 8002276:	605a      	str	r2, [r3, #4]
          break;
 8002278:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0210 	orr.w	r2, r2, #16
 8002290:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <HAL_ADC_Start_IT+0x25c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_Start_IT+0x11e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	e000      	b.n	80022a4 <HAL_ADC_Start_IT+0x120>
 80022a2:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_ADC_Start_IT+0x260>)
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d008      	beq.n	80022be <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d002      	beq.n	80022be <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d13b      	bne.n	8002336 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02d      	beq.n	8002328 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d110      	bne.n	8002306 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0220 	bic.w	r2, r2, #32
 80022f2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002302:	605a      	str	r2, [r3, #4]
              break;
 8002304:	e011      	b.n	800232a <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002314:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	605a      	str	r2, [r3, #4]
              break;
 8002326:	e000      	b.n	800232a <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002328:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff fd97 	bl	8001e62 <LL_ADC_REG_StartConversion>
 8002334:	e04c      	b.n	80023d0 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <HAL_ADC_Start_IT+0x25c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d002      	beq.n	8002352 <HAL_ADC_Start_IT+0x1ce>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	e000      	b.n	8002354 <HAL_ADC_Start_IT+0x1d0>
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_ADC_Start_IT+0x260>)
 8002354:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d035      	beq.n	80023ce <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800236a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d110      	bne.n	800239c <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0220 	bic.w	r2, r2, #32
 8002388:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002398:	605a      	str	r2, [r3, #4]
              break;
 800239a:	e019      	b.n	80023d0 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023aa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0220 	orr.w	r2, r2, #32
 80023ba:	605a      	str	r2, [r3, #4]
              break;
 80023bc:	e008      	b.n	80023d0 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
 80023ca:	75fb      	strb	r3, [r7, #23]
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start_IT+0x24c>
        }
 80023ce:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80023d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	50040300 	.word	0x50040300
 80023e0:	50040100 	.word	0x50040100
 80023e4:	50040000 	.word	0x50040000

080023e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002420:	4882      	ldr	r0, [pc, #520]	; (800262c <HAL_ADC_IRQHandler+0x228>)
 8002422:	f7ff fc8d 	bl	8001d40 <LL_ADC_GetMultimode>
 8002426:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d017      	beq.n	8002462 <HAL_ADC_IRQHandler+0x5e>
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d105      	bne.n	8002454 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fea3 	bl	80031a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_ADC_IRQHandler+0x72>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8083 	beq.w	8002588 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d07d      	beq.n	8002588 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d105      	bne.n	80024a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fba8 	bl	8001bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d062      	beq.n	800257a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <HAL_ADC_IRQHandler+0x22c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d002      	beq.n	80024c4 <HAL_ADC_IRQHandler+0xc0>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_IRQHandler+0xc2>
 80024c4:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_ADC_IRQHandler+0x230>)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d008      	beq.n	80024e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d002      	beq.n	80024e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d104      	bne.n	80024ea <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	e00c      	b.n	8002504 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a50      	ldr	r2, [pc, #320]	; (8002630 <HAL_ADC_IRQHandler+0x22c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d002      	beq.n	80024fa <HAL_ADC_IRQHandler+0xf6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	e000      	b.n	80024fc <HAL_ADC_IRQHandler+0xf8>
 80024fa:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <HAL_ADC_IRQHandler+0x230>)
 80024fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d135      	bne.n	800257a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0308 	and.w	r3, r3, #8
 8002518:	2b08      	cmp	r3, #8
 800251a:	d12e      	bne.n	800257a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fcb2 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11a      	bne.n	8002562 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020c 	bic.w	r2, r2, #12
 800253a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d112      	bne.n	800257a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
 8002560:	e00b      	b.n	800257a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f043 0210 	orr.w	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe fca2 	bl	8000ec4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	220c      	movs	r2, #12
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_ADC_IRQHandler+0x198>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 809f 	beq.w	80026e6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8099 	beq.w	80026e6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fb53 	bl	8001c7c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb0e 	bl	8001bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 80025e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a11      	ldr	r2, [pc, #68]	; (8002630 <HAL_ADC_IRQHandler+0x22c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x1f0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e000      	b.n	80025f6 <HAL_ADC_IRQHandler+0x1f2>
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_ADC_IRQHandler+0x230>)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d008      	beq.n	8002610 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d002      	beq.n	8002610 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d104      	bne.n	800261a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	e013      	b.n	8002642 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_ADC_IRQHandler+0x22c>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d009      	beq.n	8002638 <HAL_ADC_IRQHandler+0x234>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_ADC_IRQHandler+0x236>
 800262a:	bf00      	nop
 800262c:	50040300 	.word	0x50040300
 8002630:	50040100 	.word	0x50040100
 8002634:	50040000 	.word	0x50040000
 8002638:	4b7d      	ldr	r3, [pc, #500]	; (8002830 <HAL_ADC_IRQHandler+0x42c>)
 800263a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d047      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_ADC_IRQHandler+0x25e>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03f      	beq.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13a      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d133      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12e      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fc16 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11a      	bne.n	80026c0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002698:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d112      	bne.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
 80026be:	e00b      	b.n	80026d8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fd39 	bl	8003150 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2260      	movs	r2, #96	; 0x60
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d011      	beq.n	8002714 <HAL_ADC_IRQHandler+0x310>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f896 	bl	8002838 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_ADC_IRQHandler+0x340>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fd1f 	bl	8003178 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_ADC_IRQHandler+0x370>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00d      	beq.n	8002774 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 fd11 	bl	800318c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <HAL_ADC_IRQHandler+0x3e8>
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d031      	beq.n	80027ec <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e014      	b.n	80027c0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800279c:	4825      	ldr	r0, [pc, #148]	; (8002834 <HAL_ADC_IRQHandler+0x430>)
 800279e:	f7ff fadd 	bl	8001d5c <LL_ADC_GetMultiDMATransfer>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80027a8:	2301      	movs	r3, #1
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	e008      	b.n	80027c0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10e      	bne.n	80027e4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f834 	bl	800284c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2210      	movs	r2, #16
 80027ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <HAL_ADC_IRQHandler+0x424>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002804:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f043 0208 	orr.w	r2, r3, #8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fc9e 	bl	8003164 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	50040000 	.word	0x50040000
 8002834:	50040300 	.word	0x50040300

08002838 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0b6      	sub	sp, #216	; 0xd8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x22>
 800287e:	2302      	movs	r3, #2
 8002880:	e3c7      	b.n	8003012 <HAL_ADC_ConfigChannel+0x7b2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fafb 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 83a8 	bne.w	8002fec <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	3b02      	subs	r3, #2
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d81b      	bhi.n	80028e6 <HAL_ADC_ConfigChannel+0x86>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_ADC_ConfigChannel+0x54>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028dd 	.word	0x080028dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	220c      	movs	r2, #12
 80028c8:	605a      	str	r2, [r3, #4]
          break;
 80028ca:	e011      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	2212      	movs	r2, #18
 80028d0:	605a      	str	r2, [r3, #4]
          break;
 80028d2:	e00d      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2218      	movs	r2, #24
 80028d8:	605a      	str	r2, [r3, #4]
          break;
 80028da:	e009      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e2:	605a      	str	r2, [r3, #4]
          break;
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2206      	movs	r2, #6
 80028ea:	605a      	str	r2, [r3, #4]
          break;
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	f7ff f991 	bl	8001c24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fabf 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 800290c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff facb 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 800291a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800291e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 81a6 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 81a1 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	461a      	mov	r2, r3
 8002940:	f7ff f9af 	bl	8001ca2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00a      	beq.n	800297c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002976:	f7ff f8ed 	bl	8001b54 <LL_ADC_SetOffset>
 800297a:	e17b      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f90a 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002988:	4603      	mov	r3, r0
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x148>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff f8ff 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	e01e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x186>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f8f4 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029be:	fa93 f3a3 	rbit	r3, r3
 80029c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80029d6:	2320      	movs	r3, #32
 80029d8:	e004      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80029da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x19e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	e018      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e004      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d106      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f8c3 	bl	8001bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f8a7 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x20e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff f89c 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	e01e      	b.n	8002aac <HAL_ADC_ConfigChannel+0x24c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f891 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e004      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002aa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x264>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	e018      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x296>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ad8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e004      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d106      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f860 	bl	8001bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f844 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x2d4>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f839 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 021f 	and.w	r2, r3, #31
 8002b32:	e01e      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x312>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff f82e 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e004      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x32a>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	e016      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x358>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e004      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ffff 	bl	8001bc8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2103      	movs	r1, #3
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe ffe3 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x396>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2103      	movs	r1, #3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe ffd8 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	e017      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x3c6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ffcd 	bl	8001b9c <LL_ADC_GetOffsetChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c08:	fa93 f3a3 	rbit	r3, r3
 8002c0c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	e003      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x3de>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	e011      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x402>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe ffaa 	bl	8001bc8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f8df 	bl	8001e3c <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f040 813f 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	461a      	mov	r2, r3
 8002c94:	f7ff f830 	bl	8001cf8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a8e      	ldr	r2, [pc, #568]	; (8002ed8 <HAL_ADC_ConfigChannel+0x678>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f040 8130 	bne.w	8002f04 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x46c>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b09      	cmp	r3, #9
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e019      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x4a0>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cdc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	bf94      	ite	ls
 8002cfa:	2301      	movls	r3, #1
 8002cfc:	2300      	movhi	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d079      	beq.n	8002df8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x4c0>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	069b      	lsls	r3, r3, #26
 8002d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1e:	e015      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x4ec>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x50c>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	e017      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x53c>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	ea42 0103 	orr.w	r1, r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x562>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	051b      	lsls	r3, r3, #20
 8002dc0:	e018      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x594>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df4:	430b      	orrs	r3, r1
 8002df6:	e080      	b.n	8002efa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x5b4>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e12:	e015      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x5e0>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e003      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3301      	adds	r3, #1
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d109      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x600>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	e017      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x630>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	ea42 0103 	orr.w	r1, r2, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x65c>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b1e      	subs	r3, #30
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eba:	e01d      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x698>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	613b      	str	r3, [r7, #16]
  return result;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d103      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e005      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x684>
 8002ed8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f003 021f 	and.w	r2, r3, #31
 8002eea:	4613      	mov	r3, r2
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	051b      	lsls	r3, r3, #20
 8002ef4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fe fecf 	bl	8001ca2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b44      	ldr	r3, [pc, #272]	; (800301c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d07a      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f10:	4843      	ldr	r0, [pc, #268]	; (8003020 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f12:	f7fe fe11 	bl	8001b38 <LL_ADC_GetCommonPathInternalCh>
 8002f16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a41      	ldr	r2, [pc, #260]	; (8003024 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d12c      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d126      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_ADC_ConfigChannel+0x6e4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a3b      	ldr	r2, [pc, #236]	; (800302c <HAL_ADC_ConfigChannel+0x7cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d15d      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4834      	ldr	r0, [pc, #208]	; (8003020 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f50:	f7fe fddf 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	4a36      	ldr	r2, [pc, #216]	; (8003034 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f6e:	e002      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f7c:	e040      	b.n	8003000 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d118      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x75a>
 8002f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d112      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a23      	ldr	r2, [pc, #140]	; (8003028 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x748>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_ADC_ConfigChannel+0x7cc>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d12d      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	481b      	ldr	r0, [pc, #108]	; (8003020 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fb4:	f7fe fdad 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb8:	e024      	b.n	8003004 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_ADC_ConfigChannel+0x7dc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d120      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d115      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480e      	ldr	r0, [pc, #56]	; (8003020 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fe6:	f7fe fd94 	bl	8001b12 <LL_ADC_SetCommonPathInternalCh>
 8002fea:	e00c      	b.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800300e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003012:	4618      	mov	r0, r3
 8003014:	37d8      	adds	r7, #216	; 0xd8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	80080000 	.word	0x80080000
 8003020:	50040300 	.word	0x50040300
 8003024:	c7520000 	.word	0xc7520000
 8003028:	50040000 	.word	0x50040000
 800302c:	50040200 	.word	0x50040200
 8003030:	20000004 	.word	0x20000004
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	cb840000 	.word	0xcb840000
 800303c:	80000001 	.word	0x80000001

08003040 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fef5 	bl	8001e3c <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d14d      	bne.n	80030f4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	4b28      	ldr	r3, [pc, #160]	; (8003100 <ADC_Enable+0xc0>)
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e039      	b.n	80030f6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fec4 	bl	8001e14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800308c:	f7fe fd22 	bl	8001ad4 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003092:	e028      	b.n	80030e6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fecf 	bl	8001e3c <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d104      	bne.n	80030ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe feb3 	bl	8001e14 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ae:	f7fe fd11 	bl	8001ad4 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d914      	bls.n	80030e6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d00d      	beq.n	80030e6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e007      	b.n	80030f6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d1cf      	bne.n	8003094 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	8000003f 	.word	0x8000003f

08003104 <LL_ADC_IsEnabled>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <LL_ADC_IsEnabled+0x18>
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <LL_ADC_IsEnabled+0x1a>
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_ADC_REG_IsConversionOngoing>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d101      	bne.n	8003142 <LL_ADC_REG_IsConversionOngoing+0x18>
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b09f      	sub	sp, #124	; 0x7c
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e093      	b.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80031da:	2300      	movs	r3, #0
 80031dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80031de:	2300      	movs	r3, #0
 80031e0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a47      	ldr	r2, [pc, #284]	; (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d102      	bne.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e001      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10b      	bne.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e072      	b.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff87 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 800321c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff81 	bl	800312a <LL_ADC_REG_IsConversionOngoing>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d154      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800322e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003230:	2b00      	cmp	r3, #0
 8003232:	d151      	bne.n	80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003236:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02c      	beq.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003252:	035b      	lsls	r3, r3, #13
 8003254:	430b      	orrs	r3, r1
 8003256:	431a      	orrs	r2, r3
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800325c:	4829      	ldr	r0, [pc, #164]	; (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800325e:	f7ff ff51 	bl	8003104 <LL_ADC_IsEnabled>
 8003262:	4604      	mov	r4, r0
 8003264:	4828      	ldr	r0, [pc, #160]	; (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003266:	f7ff ff4d 	bl	8003104 <LL_ADC_IsEnabled>
 800326a:	4603      	mov	r3, r0
 800326c:	431c      	orrs	r4, r3
 800326e:	4828      	ldr	r0, [pc, #160]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003270:	f7ff ff48 	bl	8003104 <LL_ADC_IsEnabled>
 8003274:	4603      	mov	r3, r0
 8003276:	4323      	orrs	r3, r4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d137      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003284:	f023 030f 	bic.w	r3, r3, #15
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	6811      	ldr	r1, [r2, #0]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	430a      	orrs	r2, r1
 8003292:	431a      	orrs	r2, r3
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003298:	e028      	b.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a6:	4817      	ldr	r0, [pc, #92]	; (8003304 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032a8:	f7ff ff2c 	bl	8003104 <LL_ADC_IsEnabled>
 80032ac:	4604      	mov	r4, r0
 80032ae:	4816      	ldr	r0, [pc, #88]	; (8003308 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032b0:	f7ff ff28 	bl	8003104 <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	431c      	orrs	r4, r3
 80032b8:	4815      	ldr	r0, [pc, #84]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032ba:	f7ff ff23 	bl	8003104 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	4323      	orrs	r3, r4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d112      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ce:	f023 030f 	bic.w	r3, r3, #15
 80032d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032d4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d6:	e009      	b.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	377c      	adds	r7, #124	; 0x7c
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}
 8003302:	bf00      	nop
 8003304:	50040000 	.word	0x50040000
 8003308:	50040100 	.word	0x50040100
 800330c:	50040300 	.word	0x50040300
 8003310:	50040200 	.word	0x50040200

08003314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003330:	4013      	ands	r3, r2
 8003332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800333c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003346:	4a04      	ldr	r2, [pc, #16]	; (8003358 <__NVIC_SetPriorityGrouping+0x44>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	60d3      	str	r3, [r2, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <__NVIC_GetPriorityGrouping+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 0307 	and.w	r3, r3, #7
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	db0b      	blt.n	80033a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	f003 021f 	and.w	r2, r3, #31
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <__NVIC_EnableIRQ+0x38>)
 8003392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	2001      	movs	r0, #1
 800339a:	fa00 f202 	lsl.w	r2, r0, r2
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ff4c 	bl	8003314 <__NVIC_SetPriorityGrouping>
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003496:	f7ff ff61 	bl	800335c <__NVIC_GetPriorityGrouping>
 800349a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	6978      	ldr	r0, [r7, #20]
 80034a2:	f7ff ffb1 	bl	8003408 <NVIC_EncodePriority>
 80034a6:	4602      	mov	r2, r0
 80034a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff80 	bl	80033b4 <__NVIC_SetPriority>
}
 80034b4:	bf00      	nop
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff ff54 	bl	8003378 <__NVIC_EnableIRQ>
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e6:	e17f      	b.n	80037e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 8171 	beq.w	80037e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d00b      	beq.n	8003520 <HAL_GPIO_Init+0x48>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003514:	2b11      	cmp	r3, #17
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b12      	cmp	r3, #18
 800351e:	d130      	bne.n	8003582 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003556:	2201      	movs	r2, #1
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 0201 	and.w	r2, r3, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b03      	cmp	r3, #3
 800358c:	d118      	bne.n	80035c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003594:	2201      	movs	r2, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	f003 0201 	and.w	r2, r3, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x128>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80ac 	beq.w	80037e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_GPIO_Init+0x330>)
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	4a5e      	ldr	r2, [pc, #376]	; (8003808 <HAL_GPIO_Init+0x330>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6613      	str	r3, [r2, #96]	; 0x60
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_GPIO_Init+0x330>)
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036a2:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_GPIO_Init+0x334>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036cc:	d025      	beq.n	800371a <HAL_GPIO_Init+0x242>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_GPIO_Init+0x338>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01f      	beq.n	8003716 <HAL_GPIO_Init+0x23e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <HAL_GPIO_Init+0x33c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d019      	beq.n	8003712 <HAL_GPIO_Init+0x23a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4d      	ldr	r2, [pc, #308]	; (8003818 <HAL_GPIO_Init+0x340>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <HAL_GPIO_Init+0x236>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a4c      	ldr	r2, [pc, #304]	; (800381c <HAL_GPIO_Init+0x344>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00d      	beq.n	800370a <HAL_GPIO_Init+0x232>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a4b      	ldr	r2, [pc, #300]	; (8003820 <HAL_GPIO_Init+0x348>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <HAL_GPIO_Init+0x22e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <HAL_GPIO_Init+0x34c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_GPIO_Init+0x22a>
 80036fe:	2306      	movs	r3, #6
 8003700:	e00c      	b.n	800371c <HAL_GPIO_Init+0x244>
 8003702:	2307      	movs	r3, #7
 8003704:	e00a      	b.n	800371c <HAL_GPIO_Init+0x244>
 8003706:	2305      	movs	r3, #5
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x244>
 800370a:	2304      	movs	r3, #4
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x244>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x244>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x244>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x244>
 800371a:	2300      	movs	r3, #0
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800372c:	4937      	ldr	r1, [pc, #220]	; (800380c <HAL_GPIO_Init+0x334>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_GPIO_Init+0x350>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800375e:	4a32      	ldr	r2, [pc, #200]	; (8003828 <HAL_GPIO_Init+0x350>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <HAL_GPIO_Init+0x350>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003788:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_GPIO_Init+0x350>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <HAL_GPIO_Init+0x350>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_GPIO_Init+0x350>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_GPIO_Init+0x350>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037dc:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_GPIO_Init+0x350>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	3301      	adds	r3, #1
 80037e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa22 f303 	lsr.w	r3, r2, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f47f ae78 	bne.w	80034e8 <HAL_GPIO_Init+0x10>
  }
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40010000 	.word	0x40010000
 8003810:	48000400 	.word	0x48000400
 8003814:	48000800 	.word	0x48000800
 8003818:	48000c00 	.word	0x48000c00
 800381c:	48001000 	.word	0x48001000
 8003820:	48001400 	.word	0x48001400
 8003824:	48001800 	.word	0x48001800
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <HAL_PWREx_GetVoltageRange+0x18>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40007000 	.word	0x40007000

08003848 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003856:	d130      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003864:	d038      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003874:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2232      	movs	r2, #50	; 0x32
 800387c:	fb02 f303 	mul.w	r3, r2, r3
 8003880:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388c:	e002      	b.n	8003894 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d102      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d110      	bne.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e00f      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c6:	d007      	beq.n	80038d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000
 80038ec:	20000004 	.word	0x20000004
 80038f0:	431bde83 	.word	0x431bde83

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e3d4      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4ba1      	ldr	r3, [pc, #644]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b9e      	ldr	r3, [pc, #632]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80e4 	beq.w	8003af0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_RCC_OscConfig+0x4a>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	f040 808b 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b01      	cmp	r3, #1
 800393a:	f040 8087 	bne.w	8003a4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800393e:	4b93      	ldr	r3, [pc, #588]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e3ac      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_RCC_OscConfig+0x7c>
 8003966:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396e:	e005      	b.n	800397c <HAL_RCC_OscConfig+0x88>
 8003970:	4b86      	ldr	r3, [pc, #536]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4293      	cmp	r3, r2
 800397e:	d223      	bcs.n	80039c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd73 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e38d      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003994:	4b7d      	ldr	r3, [pc, #500]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a7c      	ldr	r2, [pc, #496]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 800399a:	f043 0308 	orr.w	r3, r3, #8
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b7a      	ldr	r3, [pc, #488]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4977      	ldr	r1, [pc, #476]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b2:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	4972      	ldr	r1, [pc, #456]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
 80039c6:	e025      	b.n	8003a14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c8:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a6f      	ldr	r2, [pc, #444]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	496a      	ldr	r1, [pc, #424]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e6:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	4965      	ldr	r1, [pc, #404]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fd33 	bl	8004470 <RCC_SetFlashLatencyFromMSIRange>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e34d      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a14:	f000 fc36 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b5c      	ldr	r3, [pc, #368]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	495a      	ldr	r1, [pc, #360]	; (8003b90 <HAL_RCC_OscConfig+0x29c>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <HAL_RCC_OscConfig+0x2a0>)
 8003a32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a34:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x2a4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fe75 	bl	8001728 <HAL_InitTick>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d052      	beq.n	8003aee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	e331      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d032      	beq.n	8003aba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a54:	4b4d      	ldr	r3, [pc, #308]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4c      	ldr	r2, [pc, #304]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a60:	f7fe f838 	bl	8001ad4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a68:	f7fe f834 	bl	8001ad4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e31a      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a7a:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	493b      	ldr	r1, [pc, #236]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa4:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	4936      	ldr	r1, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	e01a      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aba:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a33      	ldr	r2, [pc, #204]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003ac0:	f023 0301 	bic.w	r3, r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f805 	bl	8001ad4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ace:	f7fe f801 	bl	8001ad4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e2e7      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x1da>
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d074      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x21a>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	d10e      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d10b      	bne.n	8003b26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d064      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d160      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e2c4      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x24a>
 8003b30:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e01d      	b.n	8003b7a <HAL_RCC_OscConfig+0x286>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x26e>
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x286>
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x298>)
 8003b74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01c      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd ffa7 	bl	8001ad4 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b88:	e011      	b.n	8003bae <HAL_RCC_OscConfig+0x2ba>
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	0800c228 	.word	0x0800c228
 8003b94:	20000004 	.word	0x20000004
 8003b98:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd ff9a 	bl	8001ad4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e280      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4baf      	ldr	r3, [pc, #700]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x2a8>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff8a 	bl	8001ad4 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ff86 	bl	8001ad4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e26c      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd6:	4ba5      	ldr	r3, [pc, #660]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x2d0>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d060      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d005      	beq.n	8003c04 <HAL_RCC_OscConfig+0x310>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d116      	bne.n	8003c32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b99      	ldr	r3, [pc, #612]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x328>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e249      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b93      	ldr	r3, [pc, #588]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	4990      	ldr	r1, [pc, #576]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c30:	e040      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c3a:	4b8c      	ldr	r3, [pc, #560]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a8b      	ldr	r2, [pc, #556]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fd ff45 	bl	8001ad4 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fd ff41 	bl	8001ad4 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e227      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c60:	4b82      	ldr	r3, [pc, #520]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b7f      	ldr	r3, [pc, #508]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	497c      	ldr	r1, [pc, #496]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e018      	b.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a79      	ldr	r2, [pc, #484]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd ff21 	bl	8001ad4 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fd ff1d 	bl	8001ad4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e203      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca8:	4b70      	ldr	r3, [pc, #448]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	4a67      	ldr	r2, [pc, #412]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fefc 	bl	8001ad4 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fd fef8 	bl	8001ad4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1de      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3ec>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d02:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd fedf 	bl	8001ad4 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fedb 	bl	8001ad4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1c1      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80a6 	beq.w	8003e94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d4c:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a43      	ldr	r2, [pc, #268]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
 8003d64:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d74:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <HAL_RCC_OscConfig+0x57c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d118      	bne.n	8003db2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d80:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x57c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <HAL_RCC_OscConfig+0x57c>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fea2 	bl	8001ad4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fd fe9e 	bl	8001ad4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e184      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da6:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCC_OscConfig+0x57c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4d8>
 8003dba:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dca:	e024      	b.n	8003e16 <HAL_RCC_OscConfig+0x522>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b05      	cmp	r3, #5
 8003dd2:	d110      	bne.n	8003df6 <HAL_RCC_OscConfig+0x502>
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	4a20      	ldr	r2, [pc, #128]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df4:	e00f      	b.n	8003e16 <HAL_RCC_OscConfig+0x522>
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	4a1b      	ldr	r2, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fd fe59 	bl	8001ad4 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fd fe55 	bl	8001ad4 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e139      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x578>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ed      	beq.n	8003e26 <HAL_RCC_OscConfig+0x532>
 8003e4a:	e01a      	b.n	8003e82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fe42 	bl	8001ad4 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e52:	e00f      	b.n	8003e74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fd fe3e 	bl	8001ad4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d906      	bls.n	8003e74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e122      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e74:	4b90      	ldr	r3, [pc, #576]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e8      	bne.n	8003e54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e82:	7ffb      	ldrb	r3, [r7, #31]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e88:	4b8b      	ldr	r3, [pc, #556]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	4a8a      	ldr	r2, [pc, #552]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8108 	beq.w	80040ae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	f040 80d0 	bne.w	8004048 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ea8:	4b83      	ldr	r3, [pc, #524]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d130      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d127      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11f      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee8:	2a07      	cmp	r2, #7
 8003eea:	bf14      	ite	ne
 8003eec:	2201      	movne	r2, #1
 8003eee:	2200      	moveq	r2, #0
 8003ef0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f00:	085b      	lsrs	r3, r3, #1
 8003f02:	3b01      	subs	r3, #1
 8003f04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d06e      	beq.n	8003ffc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d069      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f24:	4b64      	ldr	r3, [pc, #400]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f30:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b7      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f40:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5c      	ldr	r2, [pc, #368]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f4c:	f7fd fdc2 	bl	8001ad4 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fdbe 	bl	8001ad4 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0a4      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f66:	4b54      	ldr	r3, [pc, #336]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f72:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b51      	ldr	r3, [pc, #324]	; (80040bc <HAL_RCC_OscConfig+0x7c8>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f82:	3a01      	subs	r2, #1
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	4311      	orrs	r1, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f8c:	0212      	lsls	r2, r2, #8
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f94:	0852      	lsrs	r2, r2, #1
 8003f96:	3a01      	subs	r2, #1
 8003f98:	0552      	lsls	r2, r2, #21
 8003f9a:	4311      	orrs	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fa0:	0852      	lsrs	r2, r2, #1
 8003fa2:	3a01      	subs	r2, #1
 8003fa4:	0652      	lsls	r2, r2, #25
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fac:	0912      	lsrs	r2, r2, #4
 8003fae:	0452      	lsls	r2, r2, #17
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4941      	ldr	r1, [pc, #260]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b3f      	ldr	r3, [pc, #252]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3e      	ldr	r2, [pc, #248]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fc4:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fd0:	f7fd fd80 	bl	8001ad4 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fd7c 	bl	8001ad4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e062      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fea:	4b33      	ldr	r3, [pc, #204]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff6:	e05a      	b.n	80040ae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e059      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ffc:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d152      	bne.n	80040ae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004008:	4b2b      	ldr	r3, [pc, #172]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2a      	ldr	r2, [pc, #168]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a27      	ldr	r2, [pc, #156]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd fd58 	bl	8001ad4 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fd54 	bl	8001ad4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e03a      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x734>
 8004046:	e032      	b.n	80040ae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b0c      	cmp	r3, #12
 800404c:	d02d      	beq.n	80040aa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800406c:	f023 0303 	bic.w	r3, r3, #3
 8004070:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004072:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 8004078:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fd fd27 	bl	8001ad4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fd fd23 	bl	8001ad4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e009      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_RCC_OscConfig+0x7c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x796>
 80040a8:	e001      	b.n	80040ae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40021000 	.word	0x40021000
 80040bc:	f99d808c 	.word	0xf99d808c

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0c8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b66      	ldr	r3, [pc, #408]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d910      	bls.n	8004104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	4961      	ldr	r1, [pc, #388]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b5f      	ldr	r3, [pc, #380]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b0      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d04c      	beq.n	80041aa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d107      	bne.n	8004128 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004118:	4b56      	ldr	r3, [pc, #344]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d121      	bne.n	8004168 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e09e      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d107      	bne.n	8004140 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d115      	bne.n	8004168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e092      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004148:	4b4a      	ldr	r3, [pc, #296]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e086      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e07e      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 0203 	bic.w	r2, r3, #3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	493f      	ldr	r1, [pc, #252]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417a:	f7fd fcab 	bl	8001ad4 <HAL_GetTick>
 800417e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004180:	e00a      	b.n	8004198 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004182:	f7fd fca7 	bl	8001ad4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e066      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 020c 	and.w	r2, r3, #12
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d1eb      	bne.n	8004182 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	492c      	ldr	r1, [pc, #176]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c8:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d210      	bcs.n	80041f8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4924      	ldr	r1, [pc, #144]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1b0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e036      	b.n	8004266 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4918      	ldr	r1, [pc, #96]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4910      	ldr	r1, [pc, #64]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004236:	f000 f825 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800423a:	4602      	mov	r2, r0
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <HAL_RCC_ClockConfig+0x1b4>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	490c      	ldr	r1, [pc, #48]	; (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 8004248:	5ccb      	ldrb	r3, [r1, r3]
 800424a:	f003 031f 	and.w	r3, r3, #31
 800424e:	fa22 f303 	lsr.w	r3, r2, r3
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fa64 	bl	8001728 <HAL_InitTick>
 8004260:	4603      	mov	r3, r0
 8004262:	72fb      	strb	r3, [r7, #11]

  return status;
 8004264:	7afb      	ldrb	r3, [r7, #11]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40022000 	.word	0x40022000
 8004274:	40021000 	.word	0x40021000
 8004278:	0800c228 	.word	0x0800c228
 800427c:	20000004 	.word	0x20000004
 8004280:	20000008 	.word	0x20000008

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004292:	4b3e      	ldr	r3, [pc, #248]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d005      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d121      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d11e      	bne.n	80042f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042b8:	4b34      	ldr	r3, [pc, #208]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e005      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042d4:	4b2d      	ldr	r3, [pc, #180]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042e0:	4a2b      	ldr	r2, [pc, #172]	; (8004390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_RCC_GetSysClockFreq+0x110>)
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e004      	b.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b08      	cmp	r3, #8
 8004306:	d101      	bne.n	800430c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004308:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCC_GetSysClockFreq+0x114>)
 800430a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d134      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0xa6>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d003      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xac>
 8004328:	e005      	b.n	8004336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_RCC_GetSysClockFreq+0x110>)
 800432c:	617b      	str	r3, [r7, #20]
      break;
 800432e:	e005      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_GetSysClockFreq+0x114>)
 8004332:	617b      	str	r3, [r7, #20]
      break;
 8004334:	e002      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	617b      	str	r3, [r7, #20]
      break;
 800433a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	3301      	adds	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	fb02 f203 	mul.w	r2, r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <HAL_RCC_GetSysClockFreq+0x108>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	0e5b      	lsrs	r3, r3, #25
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	3301      	adds	r3, #1
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800437c:	69bb      	ldr	r3, [r7, #24]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	0800c240 	.word	0x0800c240
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200

0800439c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000004 	.word	0x20000004

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043b8:	f7ff fff0 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4904      	ldr	r1, [pc, #16]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40021000 	.word	0x40021000
 80043dc:	0800c238 	.word	0x0800c238

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043e4:	f7ff ffda 	bl	800439c <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4904      	ldr	r1, [pc, #16]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40021000 	.word	0x40021000
 8004408:	0800c238 	.word	0x0800c238

0800440c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	220f      	movs	r2, #15
 800441a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_RCC_GetClockConfig+0x5c>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 0203 	and.w	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <HAL_RCC_GetClockConfig+0x5c>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <HAL_RCC_GetClockConfig+0x5c>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_RCC_GetClockConfig+0x5c>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	08db      	lsrs	r3, r3, #3
 8004446:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <HAL_RCC_GetClockConfig+0x60>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0207 	and.w	r2, r3, #7
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	601a      	str	r2, [r3, #0]
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	40022000 	.word	0x40022000

08004470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004488:	f7ff f9d0 	bl	800382c <HAL_PWREx_GetVoltageRange>
 800448c:	6178      	str	r0, [r7, #20]
 800448e:	e014      	b.n	80044ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4a24      	ldr	r2, [pc, #144]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	; 0x58
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044a8:	f7ff f9c0 	bl	800382c <HAL_PWREx_GetVoltageRange>
 80044ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d10b      	bne.n	80044da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d919      	bls.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2ba0      	cmp	r3, #160	; 0xa0
 80044cc:	d902      	bls.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e013      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	e010      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b80      	cmp	r3, #128	; 0x80
 80044de:	d902      	bls.n	80044e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044e0:	2303      	movs	r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e00a      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d102      	bne.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044ec:	2302      	movs	r3, #2
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e004      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b70      	cmp	r3, #112	; 0x70
 80044f6:	d101      	bne.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f8:	2301      	movs	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f023 0207 	bic.w	r2, r3, #7
 8004504:	4909      	ldr	r1, [pc, #36]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	40022000 	.word	0x40022000

08004530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004538:	2300      	movs	r3, #0
 800453a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800453c:	2300      	movs	r3, #0
 800453e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004548:	2b00      	cmp	r3, #0
 800454a:	d041      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004550:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004554:	d02a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004556:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800455a:	d824      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800455c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004560:	d008      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004562:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004566:	d81e      	bhi.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800456c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004570:	d010      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004572:	e018      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004574:	4b86      	ldr	r3, [pc, #536]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4a85      	ldr	r2, [pc, #532]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004580:	e015      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fabb 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004592:	e00c      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3320      	adds	r3, #32
 8004598:	2100      	movs	r1, #0
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fba6 	bl	8004cec <RCCEx_PLLSAI2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	74fb      	strb	r3, [r7, #19]
      break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10b      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045b4:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c2:	4973      	ldr	r1, [pc, #460]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045ca:	e001      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045cc:	7cfb      	ldrb	r3, [r7, #19]
 80045ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d041      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045e4:	d02a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045ea:	d824      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f0:	d008      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f6:	d81e      	bhi.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004600:	d010      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004602:	e018      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004604:	4b62      	ldr	r3, [pc, #392]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a61      	ldr	r2, [pc, #388]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800460a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004610:	e015      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa73 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004622:	e00c      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3320      	adds	r3, #32
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fb5e 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004634:	e003      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
      break;
 800463a:	e000      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800463c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004644:	4b52      	ldr	r3, [pc, #328]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004652:	494f      	ldr	r1, [pc, #316]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800465a:	e001      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465c:	7cfb      	ldrb	r3, [r7, #19]
 800465e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 80a0 	beq.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004672:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	4a40      	ldr	r2, [pc, #256]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	4b3e      	ldr	r3, [pc, #248]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3a      	ldr	r2, [pc, #232]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b0:	f7fd fa10 	bl	8001ad4 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046b6:	e009      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fd fa0c 	bl	8001ad4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	74fb      	strb	r3, [r7, #19]
        break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046cc:	4b31      	ldr	r3, [pc, #196]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d15c      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046de:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01f      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d019      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	4a20      	ldr	r2, [pc, #128]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd f9cb 	bl	8001ad4 <HAL_GetTick>
 800473e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004740:	e00b      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd f9c7 	bl	8001ad4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d902      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	74fb      	strb	r3, [r7, #19]
            break;
 8004758:	e006      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b0d      	ldr	r3, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ec      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800477e:	4904      	ldr	r1, [pc, #16]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004786:	e009      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
 800478c:	e006      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000
 8004794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	7cfb      	ldrb	r3, [r7, #19]
 800479a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479c:	7c7b      	ldrb	r3, [r7, #17]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b9e      	ldr	r3, [pc, #632]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	4a9d      	ldr	r2, [pc, #628]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ba:	4b98      	ldr	r3, [pc, #608]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f023 0203 	bic.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	4994      	ldr	r1, [pc, #592]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 020c 	bic.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	498c      	ldr	r1, [pc, #560]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047fe:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	4983      	ldr	r1, [pc, #524]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	497b      	ldr	r1, [pc, #492]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	4972      	ldr	r1, [pc, #456]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004864:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	496a      	ldr	r1, [pc, #424]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	4961      	ldr	r1, [pc, #388]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a8:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b6:	4959      	ldr	r1, [pc, #356]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	4950      	ldr	r1, [pc, #320]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ec:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	4948      	ldr	r1, [pc, #288]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	493f      	ldr	r1, [pc, #252]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d028      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004930:	4b3a      	ldr	r3, [pc, #232]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493e:	4937      	ldr	r1, [pc, #220]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800494e:	d106      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a31      	ldr	r2, [pc, #196]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495a:	60d3      	str	r3, [r2, #12]
 800495c:	e011      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004966:	d10c      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8c8 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800497e:	7cfb      	ldrb	r3, [r7, #19]
 8004980:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d028      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800498e:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	491f      	ldr	r1, [pc, #124]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ac:	d106      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	e011      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3304      	adds	r3, #4
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f899 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d02b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fa:	4908      	ldr	r1, [pc, #32]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a16:	60d3      	str	r3, [r2, #12]
 8004a18:	e014      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f867 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02f      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a5e:	4928      	ldr	r1, [pc, #160]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f844 	bl	8004b04 <RCCEx_PLLSAI1_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a86:	7cfb      	ldrb	r3, [r7, #19]
 8004a88:	74bb      	strb	r3, [r7, #18]
 8004a8a:	e011      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3320      	adds	r3, #32
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f925 	bl	8004cec <RCCEx_PLLSAI2_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa6:	7cfb      	ldrb	r3, [r7, #19]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aca:	490d      	ldr	r1, [pc, #52]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00b      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aee:	4904      	ldr	r1, [pc, #16]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004af6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40021000 	.word	0x40021000

08004b04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b75      	ldr	r3, [pc, #468]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d018      	beq.n	8004b50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b1e:	4b72      	ldr	r3, [pc, #456]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d10d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b36:	4b6c      	ldr	r3, [pc, #432]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
       ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d047      	beq.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
 8004b4e:	e044      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d018      	beq.n	8004b8a <RCCEx_PLLSAI1_Config+0x86>
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d825      	bhi.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d002      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0x62>
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d009      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x74>
 8004b64:	e020      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b66:	4b60      	ldr	r3, [pc, #384]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d11d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b76:	e01a      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b78:	4b5b      	ldr	r3, [pc, #364]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b88:	e013      	b.n	8004bb2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b8a:	4b57      	ldr	r3, [pc, #348]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b96:	4b54      	ldr	r3, [pc, #336]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d109      	bne.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ba6:	e006      	b.n	8004bb6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bac:	e004      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bae:	bf00      	nop
 8004bb0:	e002      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d17d      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004be0:	4b41      	ldr	r3, [pc, #260]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc ff72 	bl	8001ad4 <HAL_GetTick>
 8004bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bf2:	e009      	b.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf4:	f7fc ff6e 	bl	8001ad4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d902      	bls.n	8004c08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	73fb      	strb	r3, [r7, #15]
        break;
 8004c06:	e005      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c08:	4b37      	ldr	r3, [pc, #220]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1ef      	bne.n	8004bf4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d160      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d111      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c20:	4b31      	ldr	r3, [pc, #196]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6892      	ldr	r2, [r2, #8]
 8004c30:	0211      	lsls	r1, r2, #8
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68d2      	ldr	r2, [r2, #12]
 8004c36:	0912      	lsrs	r2, r2, #4
 8004c38:	0452      	lsls	r2, r2, #17
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	492a      	ldr	r1, [pc, #168]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]
 8004c42:	e027      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d112      	bne.n	8004c70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c4a:	4b27      	ldr	r3, [pc, #156]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6892      	ldr	r2, [r2, #8]
 8004c5a:	0211      	lsls	r1, r2, #8
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6912      	ldr	r2, [r2, #16]
 8004c60:	0852      	lsrs	r2, r2, #1
 8004c62:	3a01      	subs	r2, #1
 8004c64:	0552      	lsls	r2, r2, #21
 8004c66:	430a      	orrs	r2, r1
 8004c68:	491f      	ldr	r1, [pc, #124]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	610b      	str	r3, [r1, #16]
 8004c6e:	e011      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c70:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6892      	ldr	r2, [r2, #8]
 8004c80:	0211      	lsls	r1, r2, #8
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6952      	ldr	r2, [r2, #20]
 8004c86:	0852      	lsrs	r2, r2, #1
 8004c88:	3a01      	subs	r2, #1
 8004c8a:	0652      	lsls	r2, r2, #25
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	4916      	ldr	r1, [pc, #88]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca0:	f7fc ff18 	bl	8001ad4 <HAL_GetTick>
 8004ca4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ca6:	e009      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca8:	f7fc ff14 	bl	8001ad4 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d902      	bls.n	8004cbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	73fb      	strb	r3, [r7, #15]
          break;
 8004cba:	e005      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	4904      	ldr	r1, [pc, #16]	; (8004ce8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40021000 	.word	0x40021000

08004cec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cfa:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d018      	beq.n	8004d38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d06:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0203 	and.w	r2, r3, #3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10d      	bne.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
       ||
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d1e:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d047      	beq.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
 8004d36:	e044      	b.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d018      	beq.n	8004d72 <RCCEx_PLLSAI2_Config+0x86>
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d825      	bhi.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d002      	beq.n	8004d4e <RCCEx_PLLSAI2_Config+0x62>
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d009      	beq.n	8004d60 <RCCEx_PLLSAI2_Config+0x74>
 8004d4c:	e020      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d4e:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d11d      	bne.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d5e:	e01a      	b.n	8004d96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d70:	e013      	b.n	8004d9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d72:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d7e:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d8e:	e006      	b.n	8004d9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      break;
 8004d94:	e004      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004da6:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	4939      	ldr	r1, [pc, #228]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d167      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a35      	ldr	r2, [pc, #212]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fe7e 	bl	8001ad4 <HAL_GetTick>
 8004dd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dda:	e009      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ddc:	f7fc fe7a 	bl	8001ad4 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	73fb      	strb	r3, [r7, #15]
        break;
 8004dee:	e005      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ef      	bne.n	8004ddc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d14a      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6892      	ldr	r2, [r2, #8]
 8004e18:	0211      	lsls	r1, r2, #8
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	0912      	lsrs	r2, r2, #4
 8004e20:	0452      	lsls	r2, r2, #17
 8004e22:	430a      	orrs	r2, r1
 8004e24:	491f      	ldr	r1, [pc, #124]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	614b      	str	r3, [r1, #20]
 8004e2a:	e011      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	0211      	lsls	r1, r2, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6912      	ldr	r2, [r2, #16]
 8004e42:	0852      	lsrs	r2, r2, #1
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0652      	lsls	r2, r2, #25
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	4916      	ldr	r1, [pc, #88]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a13      	ldr	r2, [pc, #76]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fc fe3a 	bl	8001ad4 <HAL_GetTick>
 8004e60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e62:	e009      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e64:	f7fc fe36 	bl	8001ad4 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d902      	bls.n	8004e78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	73fb      	strb	r3, [r7, #15]
          break;
 8004e76:	e005      	b.n	8004e84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0ef      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8c:	695a      	ldr	r2, [r3, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	4904      	ldr	r1, [pc, #16]	; (8004ea4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e049      	b.n	8004f4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f841 	bl	8004f56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 fc66 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e04f      	b.n	8005024 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a23      	ldr	r2, [pc, #140]	; (8005030 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01d      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fae:	d018      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1f      	ldr	r2, [pc, #124]	; (8005034 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d013      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00e      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_TIM_Base_Start_IT+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d009      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1b      	ldr	r2, [pc, #108]	; (8005040 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d004      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x76>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	; (8005044 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d115      	bne.n	800500e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4b17      	ldr	r3, [pc, #92]	; (8005048 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b06      	cmp	r3, #6
 8004ff2:	d015      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0xb4>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffa:	d011      	beq.n	8005020 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	e008      	b.n	8005020 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e000      	b.n	8005022 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40014000 	.word	0x40014000
 8005048:	00010007 	.word	0x00010007

0800504c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e049      	b.n	80050f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fc fabe 	bl	80015f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f000 fb94 	bl	80057b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_TIM_PWM_Start+0x24>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e03c      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x3e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e02f      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x58>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e022      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x72>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e015      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x8c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e008      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e09c      	b.n	80052dc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xb6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b0:	e023      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xc6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	e01b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xd6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d0:	e013      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xe6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xf6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f0:	e003      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fe48 	bl	8005e98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <HAL_TIM_PWM_Start+0x1e8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <HAL_TIM_PWM_Start+0x1ec>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a32      	ldr	r2, [pc, #200]	; (80052ec <HAL_TIM_PWM_Start+0x1f0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a31      	ldr	r2, [pc, #196]	; (80052f0 <HAL_TIM_PWM_Start+0x1f4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_Start+0x142>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_TIM_PWM_Start+0x144>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005252:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_TIM_PWM_Start+0x1e8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d018      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_TIM_PWM_Start+0x1fc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	; (80052fc <HAL_TIM_PWM_Start+0x200>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_TIM_PWM_Start+0x204>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_TIM_PWM_Start+0x1ec>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_TIM_PWM_Start+0x19e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <HAL_TIM_PWM_Start+0x1f0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d115      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_TIM_PWM_Start+0x208>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d015      	beq.n	80052d8 <HAL_TIM_PWM_Start+0x1dc>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d011      	beq.n	80052d8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	e008      	b.n	80052d8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e000      	b.n	80052da <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40013400 	.word	0x40013400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	00010007 	.word	0x00010007

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa16 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa08 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa19 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f9ec 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f9de 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9ef 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0208 	mvn.w	r2, #8
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f9c2 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9b4 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f9c5 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f998 	bl	800577c <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f98a 	bl	8005768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f99b 	bl	8005790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0201 	mvn.w	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc f82e 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fe26 	bl	8006104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d10e      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fe19 	bl	8006118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f949 	bl	80057a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b20      	cmp	r3, #32
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0220 	mvn.w	r2, #32
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fdd9 	bl	80060f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800555e:	2302      	movs	r3, #2
 8005560:	e0fd      	b.n	800575e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b14      	cmp	r3, #20
 800556e:	f200 80f0 	bhi.w	8005752 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005753 	.word	0x08005753
 8005580:	08005753 	.word	0x08005753
 8005584:	08005753 	.word	0x08005753
 8005588:	0800560d 	.word	0x0800560d
 800558c:	08005753 	.word	0x08005753
 8005590:	08005753 	.word	0x08005753
 8005594:	08005753 	.word	0x08005753
 8005598:	0800564f 	.word	0x0800564f
 800559c:	08005753 	.word	0x08005753
 80055a0:	08005753 	.word	0x08005753
 80055a4:	08005753 	.word	0x08005753
 80055a8:	0800568f 	.word	0x0800568f
 80055ac:	08005753 	.word	0x08005753
 80055b0:	08005753 	.word	0x08005753
 80055b4:	08005753 	.word	0x08005753
 80055b8:	080056d1 	.word	0x080056d1
 80055bc:	08005753 	.word	0x08005753
 80055c0:	08005753 	.word	0x08005753
 80055c4:	08005753 	.word	0x08005753
 80055c8:	08005711 	.word	0x08005711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f98a 	bl	80058ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0208 	orr.w	r2, r2, #8
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	619a      	str	r2, [r3, #24]
      break;
 800560a:	e0a3      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9fa 	bl	8005a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	619a      	str	r2, [r3, #24]
      break;
 800564c:	e082      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fa63 	bl	8005b20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0208 	orr.w	r2, r2, #8
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0204 	bic.w	r2, r2, #4
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      break;
 800568c:	e062      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 facb 	bl	8005c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	61da      	str	r2, [r3, #28]
      break;
 80056ce:	e041      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb14 	bl	8005d04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800570e:	e021      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fb58 	bl	8005dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005750:	e000      	b.n	8005754 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a40      	ldr	r2, [pc, #256]	; (80058cc <TIM_Base_SetConfig+0x114>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d013      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d6:	d00f      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3d      	ldr	r2, [pc, #244]	; (80058d0 <TIM_Base_SetConfig+0x118>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3c      	ldr	r2, [pc, #240]	; (80058d4 <TIM_Base_SetConfig+0x11c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <TIM_Base_SetConfig+0x120>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_Base_SetConfig+0x40>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a3a      	ldr	r2, [pc, #232]	; (80058dc <TIM_Base_SetConfig+0x124>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d108      	bne.n	800580a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2f      	ldr	r2, [pc, #188]	; (80058cc <TIM_Base_SetConfig+0x114>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01f      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d01b      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <TIM_Base_SetConfig+0x118>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d017      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2b      	ldr	r2, [pc, #172]	; (80058d4 <TIM_Base_SetConfig+0x11c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <TIM_Base_SetConfig+0x120>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00f      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <TIM_Base_SetConfig+0x124>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a28      	ldr	r2, [pc, #160]	; (80058e0 <TIM_Base_SetConfig+0x128>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a27      	ldr	r2, [pc, #156]	; (80058e4 <TIM_Base_SetConfig+0x12c>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_Base_SetConfig+0x9a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <TIM_Base_SetConfig+0x130>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a10      	ldr	r2, [pc, #64]	; (80058cc <TIM_Base_SetConfig+0x114>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a12      	ldr	r2, [pc, #72]	; (80058dc <TIM_Base_SetConfig+0x124>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <TIM_Base_SetConfig+0x128>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <TIM_Base_SetConfig+0x12c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0xf8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <TIM_Base_SetConfig+0x130>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d103      	bne.n	80058b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	615a      	str	r2, [r3, #20]
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40013400 	.word	0x40013400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	40014400 	.word	0x40014400
 80058e8:	40014800 	.word	0x40014800

080058ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f023 0302 	bic.w	r3, r3, #2
 8005938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <TIM_OC1_SetConfig+0x10c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_OC1_SetConfig+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <TIM_OC1_SetConfig+0x110>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_OC1_SetConfig+0x80>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <TIM_OC1_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_OC1_SetConfig+0x80>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <TIM_OC1_SetConfig+0x118>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC1_SetConfig+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a28      	ldr	r2, [pc, #160]	; (8005a08 <TIM_OC1_SetConfig+0x11c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f023 0308 	bic.w	r3, r3, #8
 8005972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f023 0304 	bic.w	r3, r3, #4
 8005984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <TIM_OC1_SetConfig+0x10c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_OC1_SetConfig+0xc2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <TIM_OC1_SetConfig+0x110>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_OC1_SetConfig+0xc2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <TIM_OC1_SetConfig+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_OC1_SetConfig+0xc2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <TIM_OC1_SetConfig+0x118>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_OC1_SetConfig+0xc2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <TIM_OC1_SetConfig+0x11c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d111      	bne.n	80059d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800

08005a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f023 0320 	bic.w	r3, r3, #32
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <TIM_OC2_SetConfig+0x100>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC2_SetConfig+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <TIM_OC2_SetConfig+0x104>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10d      	bne.n	8005a94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <TIM_OC2_SetConfig+0x100>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_OC2_SetConfig+0xb0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <TIM_OC2_SetConfig+0x104>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_OC2_SetConfig+0xb0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <TIM_OC2_SetConfig+0x108>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_OC2_SetConfig+0xb0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <TIM_OC2_SetConfig+0x10c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC2_SetConfig+0xb0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <TIM_OC2_SetConfig+0x110>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d113      	bne.n	8005ae4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800

08005b20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <TIM_OC3_SetConfig+0xfc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC3_SetConfig+0x6a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <TIM_OC3_SetConfig+0x100>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d10d      	bne.n	8005ba6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <TIM_OC3_SetConfig+0xfc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00f      	beq.n	8005bce <TIM_OC3_SetConfig+0xae>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <TIM_OC3_SetConfig+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <TIM_OC3_SetConfig+0xae>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <TIM_OC3_SetConfig+0x104>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d007      	beq.n	8005bce <TIM_OC3_SetConfig+0xae>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <TIM_OC3_SetConfig+0x108>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC3_SetConfig+0xae>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <TIM_OC3_SetConfig+0x10c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d113      	bne.n	8005bf6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40013400 	.word	0x40013400
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800

08005c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <TIM_OC4_SetConfig+0xc0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00f      	beq.n	8005cb4 <TIM_OC4_SetConfig+0x84>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <TIM_OC4_SetConfig+0xc4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00b      	beq.n	8005cb4 <TIM_OC4_SetConfig+0x84>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a16      	ldr	r2, [pc, #88]	; (8005cf8 <TIM_OC4_SetConfig+0xc8>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d007      	beq.n	8005cb4 <TIM_OC4_SetConfig+0x84>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <TIM_OC4_SetConfig+0xcc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d003      	beq.n	8005cb4 <TIM_OC4_SetConfig+0x84>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <TIM_OC4_SetConfig+0xd0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d109      	bne.n	8005cc8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <TIM_OC5_SetConfig+0xb4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a16      	ldr	r2, [pc, #88]	; (8005dbc <TIM_OC5_SetConfig+0xb8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <TIM_OC5_SetConfig+0xbc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <TIM_OC5_SetConfig+0xc0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <TIM_OC5_SetConfig+0xc4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d109      	bne.n	8005d92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800

08005dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	051b      	lsls	r3, r3, #20
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <TIM_OC6_SetConfig+0xb8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00f      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <TIM_OC6_SetConfig+0xbc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC6_SetConfig+0xc0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <TIM_OC6_SetConfig+0xc4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC6_SetConfig+0xc8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d109      	bne.n	8005e5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	2201      	movs	r2, #1
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1a      	ldr	r2, [r3, #32]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 031f 	and.w	r3, r3, #31
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
	...

08005ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e068      	b.n	8005fce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d108      	bne.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1a      	ldr	r2, [pc, #104]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10c      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800
 8005fec:	40000c00 	.word	0x40000c00
 8005ff0:	40014000 	.word	0x40014000

08005ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800600c:	2302      	movs	r3, #2
 800600e:	e065      	b.n	80060dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a16      	ldr	r2, [pc, #88]	; (80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d115      	bne.n	80060ca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	051b      	lsls	r3, r3, #20
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400

080060f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e040      	b.n	80061c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fb faa8 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2224      	movs	r2, #36	; 0x24
 8006158:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8c0 	bl	80062f0 <UART_SetConfig>
 8006170:	4603      	mov	r3, r0
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e022      	b.n	80061c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fb3e 	bl	8006804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fbc5 	bl	8006948 <UART_CheckIdleState>
 80061be:	4603      	mov	r3, r0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	; 0x28
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	603b      	str	r3, [r7, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061dc:	2b20      	cmp	r3, #32
 80061de:	f040 8082 	bne.w	80062e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_UART_Transmit+0x26>
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e07a      	b.n	80062e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UART_Transmit+0x38>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e073      	b.n	80062e8 <HAL_UART_Transmit+0x120>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2221      	movs	r2, #33	; 0x21
 8006214:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006216:	f7fb fc5d 	bl	8001ad4 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	88fa      	ldrh	r2, [r7, #6]
 8006220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006234:	d108      	bne.n	8006248 <HAL_UART_Transmit+0x80>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d104      	bne.n	8006248 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	e003      	b.n	8006250 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800624c:	2300      	movs	r3, #0
 800624e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006258:	e02d      	b.n	80062b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fbb8 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e039      	b.n	80062e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	881a      	ldrh	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006286:	b292      	uxth	r2, r2
 8006288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	3302      	adds	r3, #2
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	e008      	b.n	80062a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b292      	uxth	r2, r2
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	3301      	adds	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1cb      	bne.n	800625a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2140      	movs	r1, #64	; 0x40
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 fb84 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e005      	b.n	80062e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2220      	movs	r2, #32
 80062e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
  }
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4313      	orrs	r3, r2
 8006312:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4bad      	ldr	r3, [pc, #692]	; (80065d0 <UART_SetConfig+0x2e0>)
 800631c:	4013      	ands	r3, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	69f9      	ldr	r1, [r7, #28]
 8006324:	430b      	orrs	r3, r1
 8006326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4aa2      	ldr	r2, [pc, #648]	; (80065d4 <UART_SetConfig+0x2e4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d004      	beq.n	8006358 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	4313      	orrs	r3, r2
 8006356:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a99      	ldr	r2, [pc, #612]	; (80065d8 <UART_SetConfig+0x2e8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d121      	bne.n	80063ba <UART_SetConfig+0xca>
 8006376:	4b99      	ldr	r3, [pc, #612]	; (80065dc <UART_SetConfig+0x2ec>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d817      	bhi.n	80063b4 <UART_SetConfig+0xc4>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <UART_SetConfig+0x9c>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063a9 	.word	0x080063a9
 8006394:	080063a3 	.word	0x080063a3
 8006398:	080063af 	.word	0x080063af
 800639c:	2301      	movs	r3, #1
 800639e:	76fb      	strb	r3, [r7, #27]
 80063a0:	e0e7      	b.n	8006572 <UART_SetConfig+0x282>
 80063a2:	2302      	movs	r3, #2
 80063a4:	76fb      	strb	r3, [r7, #27]
 80063a6:	e0e4      	b.n	8006572 <UART_SetConfig+0x282>
 80063a8:	2304      	movs	r3, #4
 80063aa:	76fb      	strb	r3, [r7, #27]
 80063ac:	e0e1      	b.n	8006572 <UART_SetConfig+0x282>
 80063ae:	2308      	movs	r3, #8
 80063b0:	76fb      	strb	r3, [r7, #27]
 80063b2:	e0de      	b.n	8006572 <UART_SetConfig+0x282>
 80063b4:	2310      	movs	r3, #16
 80063b6:	76fb      	strb	r3, [r7, #27]
 80063b8:	e0db      	b.n	8006572 <UART_SetConfig+0x282>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a88      	ldr	r2, [pc, #544]	; (80065e0 <UART_SetConfig+0x2f0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d132      	bne.n	800642a <UART_SetConfig+0x13a>
 80063c4:	4b85      	ldr	r3, [pc, #532]	; (80065dc <UART_SetConfig+0x2ec>)
 80063c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b0c      	cmp	r3, #12
 80063d0:	d828      	bhi.n	8006424 <UART_SetConfig+0x134>
 80063d2:	a201      	add	r2, pc, #4	; (adr r2, 80063d8 <UART_SetConfig+0xe8>)
 80063d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006425 	.word	0x08006425
 80063e8:	08006419 	.word	0x08006419
 80063ec:	08006425 	.word	0x08006425
 80063f0:	08006425 	.word	0x08006425
 80063f4:	08006425 	.word	0x08006425
 80063f8:	08006413 	.word	0x08006413
 80063fc:	08006425 	.word	0x08006425
 8006400:	08006425 	.word	0x08006425
 8006404:	08006425 	.word	0x08006425
 8006408:	0800641f 	.word	0x0800641f
 800640c:	2300      	movs	r3, #0
 800640e:	76fb      	strb	r3, [r7, #27]
 8006410:	e0af      	b.n	8006572 <UART_SetConfig+0x282>
 8006412:	2302      	movs	r3, #2
 8006414:	76fb      	strb	r3, [r7, #27]
 8006416:	e0ac      	b.n	8006572 <UART_SetConfig+0x282>
 8006418:	2304      	movs	r3, #4
 800641a:	76fb      	strb	r3, [r7, #27]
 800641c:	e0a9      	b.n	8006572 <UART_SetConfig+0x282>
 800641e:	2308      	movs	r3, #8
 8006420:	76fb      	strb	r3, [r7, #27]
 8006422:	e0a6      	b.n	8006572 <UART_SetConfig+0x282>
 8006424:	2310      	movs	r3, #16
 8006426:	76fb      	strb	r3, [r7, #27]
 8006428:	e0a3      	b.n	8006572 <UART_SetConfig+0x282>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6d      	ldr	r2, [pc, #436]	; (80065e4 <UART_SetConfig+0x2f4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d120      	bne.n	8006476 <UART_SetConfig+0x186>
 8006434:	4b69      	ldr	r3, [pc, #420]	; (80065dc <UART_SetConfig+0x2ec>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	d013      	beq.n	800646a <UART_SetConfig+0x17a>
 8006442:	2b30      	cmp	r3, #48	; 0x30
 8006444:	d814      	bhi.n	8006470 <UART_SetConfig+0x180>
 8006446:	2b20      	cmp	r3, #32
 8006448:	d009      	beq.n	800645e <UART_SetConfig+0x16e>
 800644a:	2b20      	cmp	r3, #32
 800644c:	d810      	bhi.n	8006470 <UART_SetConfig+0x180>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <UART_SetConfig+0x168>
 8006452:	2b10      	cmp	r3, #16
 8006454:	d006      	beq.n	8006464 <UART_SetConfig+0x174>
 8006456:	e00b      	b.n	8006470 <UART_SetConfig+0x180>
 8006458:	2300      	movs	r3, #0
 800645a:	76fb      	strb	r3, [r7, #27]
 800645c:	e089      	b.n	8006572 <UART_SetConfig+0x282>
 800645e:	2302      	movs	r3, #2
 8006460:	76fb      	strb	r3, [r7, #27]
 8006462:	e086      	b.n	8006572 <UART_SetConfig+0x282>
 8006464:	2304      	movs	r3, #4
 8006466:	76fb      	strb	r3, [r7, #27]
 8006468:	e083      	b.n	8006572 <UART_SetConfig+0x282>
 800646a:	2308      	movs	r3, #8
 800646c:	76fb      	strb	r3, [r7, #27]
 800646e:	e080      	b.n	8006572 <UART_SetConfig+0x282>
 8006470:	2310      	movs	r3, #16
 8006472:	76fb      	strb	r3, [r7, #27]
 8006474:	e07d      	b.n	8006572 <UART_SetConfig+0x282>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5b      	ldr	r2, [pc, #364]	; (80065e8 <UART_SetConfig+0x2f8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d120      	bne.n	80064c2 <UART_SetConfig+0x1d2>
 8006480:	4b56      	ldr	r3, [pc, #344]	; (80065dc <UART_SetConfig+0x2ec>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006486:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800648a:	2bc0      	cmp	r3, #192	; 0xc0
 800648c:	d013      	beq.n	80064b6 <UART_SetConfig+0x1c6>
 800648e:	2bc0      	cmp	r3, #192	; 0xc0
 8006490:	d814      	bhi.n	80064bc <UART_SetConfig+0x1cc>
 8006492:	2b80      	cmp	r3, #128	; 0x80
 8006494:	d009      	beq.n	80064aa <UART_SetConfig+0x1ba>
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d810      	bhi.n	80064bc <UART_SetConfig+0x1cc>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <UART_SetConfig+0x1b4>
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d006      	beq.n	80064b0 <UART_SetConfig+0x1c0>
 80064a2:	e00b      	b.n	80064bc <UART_SetConfig+0x1cc>
 80064a4:	2300      	movs	r3, #0
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e063      	b.n	8006572 <UART_SetConfig+0x282>
 80064aa:	2302      	movs	r3, #2
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e060      	b.n	8006572 <UART_SetConfig+0x282>
 80064b0:	2304      	movs	r3, #4
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	e05d      	b.n	8006572 <UART_SetConfig+0x282>
 80064b6:	2308      	movs	r3, #8
 80064b8:	76fb      	strb	r3, [r7, #27]
 80064ba:	e05a      	b.n	8006572 <UART_SetConfig+0x282>
 80064bc:	2310      	movs	r3, #16
 80064be:	76fb      	strb	r3, [r7, #27]
 80064c0:	e057      	b.n	8006572 <UART_SetConfig+0x282>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a49      	ldr	r2, [pc, #292]	; (80065ec <UART_SetConfig+0x2fc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d125      	bne.n	8006518 <UART_SetConfig+0x228>
 80064cc:	4b43      	ldr	r3, [pc, #268]	; (80065dc <UART_SetConfig+0x2ec>)
 80064ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064da:	d017      	beq.n	800650c <UART_SetConfig+0x21c>
 80064dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e0:	d817      	bhi.n	8006512 <UART_SetConfig+0x222>
 80064e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e6:	d00b      	beq.n	8006500 <UART_SetConfig+0x210>
 80064e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ec:	d811      	bhi.n	8006512 <UART_SetConfig+0x222>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <UART_SetConfig+0x20a>
 80064f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f6:	d006      	beq.n	8006506 <UART_SetConfig+0x216>
 80064f8:	e00b      	b.n	8006512 <UART_SetConfig+0x222>
 80064fa:	2300      	movs	r3, #0
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e038      	b.n	8006572 <UART_SetConfig+0x282>
 8006500:	2302      	movs	r3, #2
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e035      	b.n	8006572 <UART_SetConfig+0x282>
 8006506:	2304      	movs	r3, #4
 8006508:	76fb      	strb	r3, [r7, #27]
 800650a:	e032      	b.n	8006572 <UART_SetConfig+0x282>
 800650c:	2308      	movs	r3, #8
 800650e:	76fb      	strb	r3, [r7, #27]
 8006510:	e02f      	b.n	8006572 <UART_SetConfig+0x282>
 8006512:	2310      	movs	r3, #16
 8006514:	76fb      	strb	r3, [r7, #27]
 8006516:	e02c      	b.n	8006572 <UART_SetConfig+0x282>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <UART_SetConfig+0x2e4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d125      	bne.n	800656e <UART_SetConfig+0x27e>
 8006522:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <UART_SetConfig+0x2ec>)
 8006524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800652c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006530:	d017      	beq.n	8006562 <UART_SetConfig+0x272>
 8006532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006536:	d817      	bhi.n	8006568 <UART_SetConfig+0x278>
 8006538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653c:	d00b      	beq.n	8006556 <UART_SetConfig+0x266>
 800653e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006542:	d811      	bhi.n	8006568 <UART_SetConfig+0x278>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <UART_SetConfig+0x260>
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d006      	beq.n	800655c <UART_SetConfig+0x26c>
 800654e:	e00b      	b.n	8006568 <UART_SetConfig+0x278>
 8006550:	2300      	movs	r3, #0
 8006552:	76fb      	strb	r3, [r7, #27]
 8006554:	e00d      	b.n	8006572 <UART_SetConfig+0x282>
 8006556:	2302      	movs	r3, #2
 8006558:	76fb      	strb	r3, [r7, #27]
 800655a:	e00a      	b.n	8006572 <UART_SetConfig+0x282>
 800655c:	2304      	movs	r3, #4
 800655e:	76fb      	strb	r3, [r7, #27]
 8006560:	e007      	b.n	8006572 <UART_SetConfig+0x282>
 8006562:	2308      	movs	r3, #8
 8006564:	76fb      	strb	r3, [r7, #27]
 8006566:	e004      	b.n	8006572 <UART_SetConfig+0x282>
 8006568:	2310      	movs	r3, #16
 800656a:	76fb      	strb	r3, [r7, #27]
 800656c:	e001      	b.n	8006572 <UART_SetConfig+0x282>
 800656e:	2310      	movs	r3, #16
 8006570:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <UART_SetConfig+0x2e4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	f040 8087 	bne.w	800668c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800657e:	7efb      	ldrb	r3, [r7, #27]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d837      	bhi.n	80065f4 <UART_SetConfig+0x304>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x29c>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065f5 	.word	0x080065f5
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065f5 	.word	0x080065f5
 800659c:	080065bf 	.word	0x080065bf
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065c7 	.word	0x080065c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b0:	f7fd ff00 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80065b4:	6178      	str	r0, [r7, #20]
        break;
 80065b6:	e022      	b.n	80065fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b8:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <UART_SetConfig+0x300>)
 80065ba:	617b      	str	r3, [r7, #20]
        break;
 80065bc:	e01f      	b.n	80065fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065be:	f7fd fe61 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 80065c2:	6178      	str	r0, [r7, #20]
        break;
 80065c4:	e01b      	b.n	80065fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ca:	617b      	str	r3, [r7, #20]
        break;
 80065cc:	e017      	b.n	80065fe <UART_SetConfig+0x30e>
 80065ce:	bf00      	nop
 80065d0:	efff69f3 	.word	0xefff69f3
 80065d4:	40008000 	.word	0x40008000
 80065d8:	40013800 	.word	0x40013800
 80065dc:	40021000 	.word	0x40021000
 80065e0:	40004400 	.word	0x40004400
 80065e4:	40004800 	.word	0x40004800
 80065e8:	40004c00 	.word	0x40004c00
 80065ec:	40005000 	.word	0x40005000
 80065f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	76bb      	strb	r3, [r7, #26]
        break;
 80065fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80f1 	beq.w	80067e8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4413      	add	r3, r2
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	429a      	cmp	r2, r3
 8006614:	d305      	bcc.n	8006622 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	429a      	cmp	r2, r3
 8006620:	d902      	bls.n	8006628 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	76bb      	strb	r3, [r7, #26]
 8006626:	e0df      	b.n	80067e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4618      	mov	r0, r3
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	f04f 0300 	mov.w	r3, #0
 8006638:	020b      	lsls	r3, r1, #8
 800663a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800663e:	0202      	lsls	r2, r0, #8
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	6849      	ldr	r1, [r1, #4]
 8006644:	0849      	lsrs	r1, r1, #1
 8006646:	4608      	mov	r0, r1
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	1814      	adds	r4, r2, r0
 800664e:	eb43 0501 	adc.w	r5, r3, r1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	461a      	mov	r2, r3
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	4620      	mov	r0, r4
 800665e:	4629      	mov	r1, r5
 8006660:	f7fa faa2 	bl	8000ba8 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006672:	d308      	bcc.n	8006686 <UART_SetConfig+0x396>
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667a:	d204      	bcs.n	8006686 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	60da      	str	r2, [r3, #12]
 8006684:	e0b0      	b.n	80067e8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	76bb      	strb	r3, [r7, #26]
 800668a:	e0ad      	b.n	80067e8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006694:	d15c      	bne.n	8006750 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006696:	7efb      	ldrb	r3, [r7, #27]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d828      	bhi.n	80066ee <UART_SetConfig+0x3fe>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <UART_SetConfig+0x3b4>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066ef 	.word	0x080066ef
 80066b4:	080066df 	.word	0x080066df
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	080066ef 	.word	0x080066ef
 80066c4:	080066e7 	.word	0x080066e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c8:	f7fd fe74 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80066cc:	6178      	str	r0, [r7, #20]
        break;
 80066ce:	e013      	b.n	80066f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d0:	f7fd fe86 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 80066d4:	6178      	str	r0, [r7, #20]
        break;
 80066d6:	e00f      	b.n	80066f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066d8:	4b49      	ldr	r3, [pc, #292]	; (8006800 <UART_SetConfig+0x510>)
 80066da:	617b      	str	r3, [r7, #20]
        break;
 80066dc:	e00c      	b.n	80066f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066de:	f7fd fdd1 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 80066e2:	6178      	str	r0, [r7, #20]
        break;
 80066e4:	e008      	b.n	80066f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ea:	617b      	str	r3, [r7, #20]
        break;
 80066ec:	e004      	b.n	80066f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	76bb      	strb	r3, [r7, #26]
        break;
 80066f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d074      	beq.n	80067e8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	005a      	lsls	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b0f      	cmp	r3, #15
 800671a:	d916      	bls.n	800674a <UART_SetConfig+0x45a>
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006722:	d212      	bcs.n	800674a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f023 030f 	bic.w	r3, r3, #15
 800672c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	085b      	lsrs	r3, r3, #1
 8006732:	b29b      	uxth	r3, r3
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	b29a      	uxth	r2, r3
 800673a:	89fb      	ldrh	r3, [r7, #14]
 800673c:	4313      	orrs	r3, r2
 800673e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	89fa      	ldrh	r2, [r7, #14]
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	e04e      	b.n	80067e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	76bb      	strb	r3, [r7, #26]
 800674e:	e04b      	b.n	80067e8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006750:	7efb      	ldrb	r3, [r7, #27]
 8006752:	2b08      	cmp	r3, #8
 8006754:	d827      	bhi.n	80067a6 <UART_SetConfig+0x4b6>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x46c>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fd fe18 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8006784:	6178      	str	r0, [r7, #20]
        break;
 8006786:	e013      	b.n	80067b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd fe2a 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 800678c:	6178      	str	r0, [r7, #20]
        break;
 800678e:	e00f      	b.n	80067b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <UART_SetConfig+0x510>)
 8006792:	617b      	str	r3, [r7, #20]
        break;
 8006794:	e00c      	b.n	80067b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fd fd75 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 800679a:	6178      	str	r0, [r7, #20]
        break;
 800679c:	e008      	b.n	80067b0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	617b      	str	r3, [r7, #20]
        break;
 80067a4:	e004      	b.n	80067b0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	76bb      	strb	r3, [r7, #26]
        break;
 80067ae:	bf00      	nop
    }

    if (pclk != 0U)
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d018      	beq.n	80067e8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085a      	lsrs	r2, r3, #1
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	441a      	add	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b0f      	cmp	r3, #15
 80067d0:	d908      	bls.n	80067e4 <UART_SetConfig+0x4f4>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d204      	bcs.n	80067e4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	e001      	b.n	80067e8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067f4:	7ebb      	ldrb	r3, [r7, #26]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bdb0      	pop	{r4, r5, r7, pc}
 80067fe:	bf00      	nop
 8006800:	00f42400 	.word	0x00f42400

08006804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00a      	beq.n	8006894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01a      	beq.n	800691a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006902:	d10a      	bne.n	800691a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00a      	beq.n	800693c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	605a      	str	r2, [r3, #4]
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006958:	f7fb f8bc 	bl	8001ad4 <HAL_GetTick>
 800695c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	2b08      	cmp	r3, #8
 800696a:	d10e      	bne.n	800698a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f82d 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e023      	b.n	80069d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d10e      	bne.n	80069b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f817 	bl	80069da <UART_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e00d      	b.n	80069d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	603b      	str	r3, [r7, #0]
 80069e6:	4613      	mov	r3, r2
 80069e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ea:	e05e      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f2:	d05a      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f4:	f7fb f86e 	bl	8001ad4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d302      	bcc.n	8006a0a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11b      	bne.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e043      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02c      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5e:	d124      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a68:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e00f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d091      	beq.n	80069ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <__NVIC_SetPriority>:
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db0a      	blt.n	8006afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	490c      	ldr	r1, [pc, #48]	; (8006b20 <__NVIC_SetPriority+0x4c>)
 8006aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af2:	0112      	lsls	r2, r2, #4
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	440b      	add	r3, r1
 8006af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006afc:	e00a      	b.n	8006b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	4908      	ldr	r1, [pc, #32]	; (8006b24 <__NVIC_SetPriority+0x50>)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	3b04      	subs	r3, #4
 8006b0c:	0112      	lsls	r2, r2, #4
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	440b      	add	r3, r1
 8006b12:	761a      	strb	r2, [r3, #24]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	e000e100 	.word	0xe000e100
 8006b24:	e000ed00 	.word	0xe000ed00

08006b28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <SysTick_Handler+0x1c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b30:	f001 fd7c 	bl	800862c <xTaskGetSchedulerState>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b3a:	f002 fb65 	bl	8009208 <xPortSysTickHandler>
  }
}
 8006b3e:	bf00      	nop
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000e010 	.word	0xe000e010

08006b48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	f06f 0004 	mvn.w	r0, #4
 8006b52:	f7ff ffbf 	bl	8006ad4 <__NVIC_SetPriority>
#endif
}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b62:	f3ef 8305 	mrs	r3, IPSR
 8006b66:	603b      	str	r3, [r7, #0]
  return(result);
 8006b68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b6e:	f06f 0305 	mvn.w	r3, #5
 8006b72:	607b      	str	r3, [r7, #4]
 8006b74:	e00c      	b.n	8006b90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <osKernelInitialize+0x44>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <osKernelInitialize+0x44>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b84:	2300      	movs	r3, #0
 8006b86:	607b      	str	r3, [r7, #4]
 8006b88:	e002      	b.n	8006b90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b90:	687b      	ldr	r3, [r7, #4]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000270 	.word	0x20000270

08006ba4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006baa:	f3ef 8305 	mrs	r3, IPSR
 8006bae:	603b      	str	r3, [r7, #0]
  return(result);
 8006bb0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <osKernelStart+0x1a>
    stat = osErrorISR;
 8006bb6:	f06f 0305 	mvn.w	r3, #5
 8006bba:	607b      	str	r3, [r7, #4]
 8006bbc:	e010      	b.n	8006be0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <osKernelStart+0x48>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d109      	bne.n	8006bda <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006bc6:	f7ff ffbf 	bl	8006b48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006bca:	4b08      	ldr	r3, [pc, #32]	; (8006bec <osKernelStart+0x48>)
 8006bcc:	2202      	movs	r2, #2
 8006bce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006bd0:	f001 f8e4 	bl	8007d9c <vTaskStartScheduler>
      stat = osOK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	607b      	str	r3, [r7, #4]
 8006bd8:	e002      	b.n	8006be0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006be0:	687b      	ldr	r3, [r7, #4]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000270 	.word	0x20000270

08006bf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af04      	add	r7, sp, #16
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c00:	f3ef 8305 	mrs	r3, IPSR
 8006c04:	617b      	str	r3, [r7, #20]
  return(result);
 8006c06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d17e      	bne.n	8006d0a <osThreadNew+0x11a>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d07b      	beq.n	8006d0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c12:	2380      	movs	r3, #128	; 0x80
 8006c14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c16:	2318      	movs	r3, #24
 8006c18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d045      	beq.n	8006cb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <osThreadNew+0x48>
        name = attr->name;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <osThreadNew+0x6e>
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b38      	cmp	r3, #56	; 0x38
 8006c50:	d805      	bhi.n	8006c5e <osThreadNew+0x6e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <osThreadNew+0x72>
        return (NULL);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e054      	b.n	8006d0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	089b      	lsrs	r3, r3, #2
 8006c70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <osThreadNew+0xa8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b5b      	cmp	r3, #91	; 0x5b
 8006c80:	d90a      	bls.n	8006c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d006      	beq.n	8006c98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <osThreadNew+0xa8>
        mem = 1;
 8006c92:	2301      	movs	r3, #1
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e010      	b.n	8006cba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10c      	bne.n	8006cba <osThreadNew+0xca>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d108      	bne.n	8006cba <osThreadNew+0xca>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <osThreadNew+0xca>
          mem = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	e001      	b.n	8006cba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d110      	bne.n	8006ce2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cc8:	9202      	str	r2, [sp, #8]
 8006cca:	9301      	str	r3, [sp, #4]
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fe0c 	bl	80078f4 <xTaskCreateStatic>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	e013      	b.n	8006d0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d110      	bne.n	8006d0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fe57 	bl	80079ae <xTaskCreate>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d001      	beq.n	8006d0a <osThreadNew+0x11a>
            hTask = NULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d0a:	693b      	ldr	r3, [r7, #16]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3728      	adds	r7, #40	; 0x28
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1c:	f3ef 8305 	mrs	r3, IPSR
 8006d20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <osDelay+0x1c>
    stat = osErrorISR;
 8006d28:	f06f 0305 	mvn.w	r3, #5
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e007      	b.n	8006d40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fffa 	bl	8007d34 <vTaskDelay>
    }
  }

  return (stat);
 8006d40:	68fb      	ldr	r3, [r7, #12]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4a07      	ldr	r2, [pc, #28]	; (8006d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <vApplicationGetIdleTaskMemory+0x30>)
 8006d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2280      	movs	r2, #128	; 0x80
 8006d68:	601a      	str	r2, [r3, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000274 	.word	0x20000274
 8006d7c:	200002d0 	.word	0x200002d0

08006d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4a07      	ldr	r2, [pc, #28]	; (8006dac <vApplicationGetTimerTaskMemory+0x2c>)
 8006d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a06      	ldr	r2, [pc, #24]	; (8006db0 <vApplicationGetTimerTaskMemory+0x30>)
 8006d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d9e:	601a      	str	r2, [r3, #0]
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	200004d0 	.word	0x200004d0
 8006db0:	2000052c 	.word	0x2000052c

08006db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f103 0208 	add.w	r2, r3, #8
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f103 0208 	add.w	r2, r3, #8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f103 0208 	add.w	r2, r3, #8
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e6c:	d103      	bne.n	8006e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e00c      	b.n	8006e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	e002      	b.n	8006e84 <vListInsert+0x2e>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d2f6      	bcs.n	8006e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685a      	ldr	r2, [r3, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6852      	ldr	r2, [r2, #4]
 8006ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d103      	bne.n	8006efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	1e5a      	subs	r2, r3, #1
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f46:	f002 f8cd 	bl	80090e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f76:	3b01      	subs	r3, #1
 8006f78:	68f9      	ldr	r1, [r7, #12]
 8006f7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	441a      	add	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	22ff      	movs	r2, #255	; 0xff
 8006f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	22ff      	movs	r2, #255	; 0xff
 8006f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d114      	bne.n	8006fc6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01a      	beq.n	8006fda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 f981 	bl	80082b0 <xTaskRemoveFromEventList>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d012      	beq.n	8006fda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <xQueueGenericReset+0xcc>)
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	e009      	b.n	8006fda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3310      	adds	r3, #16
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff fef2 	bl	8006db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3324      	adds	r3, #36	; 0x24
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff feed 	bl	8006db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fda:	f002 f8b3 	bl	8009144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fde:	2301      	movs	r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08e      	sub	sp, #56	; 0x38
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <xQueueGenericCreateStatic+0x52>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <xQueueGenericCreateStatic+0x56>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <xQueueGenericCreateStatic+0x58>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	623b      	str	r3, [r7, #32]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <xQueueGenericCreateStatic+0x7e>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <xQueueGenericCreateStatic+0x82>
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <xQueueGenericCreateStatic+0x84>
 800706e:	2300      	movs	r3, #0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	61fb      	str	r3, [r7, #28]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800708a:	2350      	movs	r3, #80	; 0x50
 800708c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b50      	cmp	r3, #80	; 0x50
 8007092:	d00a      	beq.n	80070aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f805 	bl	80070dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e002      	b.n	80070fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800710a:	2101      	movs	r1, #1
 800710c:	69b8      	ldr	r0, [r7, #24]
 800710e:	f7ff ff05 	bl	8006f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08e      	sub	sp, #56	; 0x38
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <xQueueGenericSend+0x32>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d103      	bne.n	8007164 <xQueueGenericSend+0x40>
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <xQueueGenericSend+0x44>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <xQueueGenericSend+0x46>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <xQueueGenericSend+0x60>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d103      	bne.n	8007192 <xQueueGenericSend+0x6e>
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <xQueueGenericSend+0x72>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <xQueueGenericSend+0x74>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	623b      	str	r3, [r7, #32]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071b2:	f001 fa3b 	bl	800862c <xTaskGetSchedulerState>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <xQueueGenericSend+0x9e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <xQueueGenericSend+0xa2>
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <xQueueGenericSend+0xa4>
 80071c6:	2300      	movs	r3, #0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	61fb      	str	r3, [r7, #28]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e2:	f001 ff7f 	bl	80090e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d302      	bcc.n	80071f8 <xQueueGenericSend+0xd4>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d129      	bne.n	800724c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071fe:	f000 fa0b 	bl	8007618 <prvCopyDataToQueue>
 8007202:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d010      	beq.n	800722e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	3324      	adds	r3, #36	; 0x24
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f84d 	bl	80082b0 <xTaskRemoveFromEventList>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d013      	beq.n	8007244 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800721c:	4b3f      	ldr	r3, [pc, #252]	; (800731c <xQueueGenericSend+0x1f8>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	e00a      	b.n	8007244 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007234:	4b39      	ldr	r3, [pc, #228]	; (800731c <xQueueGenericSend+0x1f8>)
 8007236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007244:	f001 ff7e 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007248:	2301      	movs	r3, #1
 800724a:	e063      	b.n	8007314 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007252:	f001 ff77 	bl	8009144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007256:	2300      	movs	r3, #0
 8007258:	e05c      	b.n	8007314 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800725a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725c:	2b00      	cmp	r3, #0
 800725e:	d106      	bne.n	800726e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4618      	mov	r0, r3
 8007266:	f001 f887 	bl	8008378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800726a:	2301      	movs	r3, #1
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800726e:	f001 ff69 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007272:	f000 fdf9 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007276:	f001 ff35 	bl	80090e4 <vPortEnterCritical>
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007280:	b25b      	sxtb	r3, r3
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007286:	d103      	bne.n	8007290 <xQueueGenericSend+0x16c>
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007296:	b25b      	sxtb	r3, r3
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800729c:	d103      	bne.n	80072a6 <xQueueGenericSend+0x182>
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a6:	f001 ff4d 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072aa:	1d3a      	adds	r2, r7, #4
 80072ac:	f107 0314 	add.w	r3, r7, #20
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f876 	bl	80083a4 <xTaskCheckForTimeOut>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d124      	bne.n	8007308 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072c0:	f000 faa2 	bl	8007808 <prvIsQueueFull>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d018      	beq.n	80072fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	3310      	adds	r3, #16
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4611      	mov	r1, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 ff9c 	bl	8008210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072da:	f000 fa2d 	bl	8007738 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072de:	f000 fdd1 	bl	8007e84 <xTaskResumeAll>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f47f af7c 	bne.w	80071e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <xQueueGenericSend+0x1f8>)
 80072ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	e772      	b.n	80071e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072fe:	f000 fa1b 	bl	8007738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007302:	f000 fdbf 	bl	8007e84 <xTaskResumeAll>
 8007306:	e76c      	b.n	80071e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730a:	f000 fa15 	bl	8007738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800730e:	f000 fdb9 	bl	8007e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007314:	4618      	mov	r0, r3
 8007316:	3738      	adds	r7, #56	; 0x38
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	e000ed04 	.word	0xe000ed04

08007320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b090      	sub	sp, #64	; 0x40
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <xQueueGenericSendFromISR+0x3c>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <xQueueGenericSendFromISR+0x40>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <xQueueGenericSendFromISR+0x42>
 8007360:	2300      	movs	r3, #0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10a      	bne.n	800737c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007378:	bf00      	nop
 800737a:	e7fe      	b.n	800737a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <xQueueGenericSendFromISR+0x6a>
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <xQueueGenericSendFromISR+0x6e>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericSendFromISR+0x70>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	623b      	str	r3, [r7, #32]
}
 80073a6:	bf00      	nop
 80073a8:	e7fe      	b.n	80073a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073aa:	f001 ff7d 	bl	80092a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073ae:	f3ef 8211 	mrs	r2, BASEPRI
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	61fa      	str	r2, [r7, #28]
 80073c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <xQueueGenericSendFromISR+0xbc>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d12f      	bne.n	800743c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073f2:	f000 f911 	bl	8007618 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fe:	d112      	bne.n	8007426 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d016      	beq.n	8007436 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f000 ff4f 	bl	80082b0 <xTaskRemoveFromEventList>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00b      	beq.n	8007436 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e007      	b.n	8007436 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007426:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800742a:	3301      	adds	r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	b25a      	sxtb	r2, r3
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800743a:	e001      	b.n	8007440 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800744a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800744c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800744e:	4618      	mov	r0, r3
 8007450:	3740      	adds	r7, #64	; 0x40
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08c      	sub	sp, #48	; 0x30
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007464:	2300      	movs	r3, #0
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xQueueReceive+0x30>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	623b      	str	r3, [r7, #32]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <xQueueReceive+0x3e>
 800748e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <xQueueReceive+0x42>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <xQueueReceive+0x44>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueReceive+0x5e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61fb      	str	r3, [r7, #28]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b6:	f001 f8b9 	bl	800862c <xTaskGetSchedulerState>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <xQueueReceive+0x6e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueReceive+0x72>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueReceive+0x74>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueReceive+0x8e>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e6:	f001 fdfd 	bl	80090e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d01f      	beq.n	8007536 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fa:	f000 f8f7 	bl	80076ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1e5a      	subs	r2, r3, #1
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	3310      	adds	r3, #16
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fecc 	bl	80082b0 <xTaskRemoveFromEventList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800751e:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <xQueueReceive+0x1bc>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800752e:	f001 fe09 	bl	8009144 <vPortExitCritical>
				return pdPASS;
 8007532:	2301      	movs	r3, #1
 8007534:	e069      	b.n	800760a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753c:	f001 fe02 	bl	8009144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007540:	2300      	movs	r3, #0
 8007542:	e062      	b.n	800760a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754a:	f107 0310 	add.w	r3, r7, #16
 800754e:	4618      	mov	r0, r3
 8007550:	f000 ff12 	bl	8008378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007558:	f001 fdf4 	bl	8009144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755c:	f000 fc84 	bl	8007e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007560:	f001 fdc0 	bl	80090e4 <vPortEnterCritical>
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800756a:	b25b      	sxtb	r3, r3
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007570:	d103      	bne.n	800757a <xQueueReceive+0x122>
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007586:	d103      	bne.n	8007590 <xQueueReceive+0x138>
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007590:	f001 fdd8 	bl	8009144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007594:	1d3a      	adds	r2, r7, #4
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f000 ff01 	bl	80083a4 <xTaskCheckForTimeOut>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d123      	bne.n	80075f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075aa:	f000 f917 	bl	80077dc <prvIsQueueEmpty>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d017      	beq.n	80075e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	3324      	adds	r3, #36	; 0x24
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 fe27 	bl	8008210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c4:	f000 f8b8 	bl	8007738 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075c8:	f000 fc5c 	bl	8007e84 <xTaskResumeAll>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d189      	bne.n	80074e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80075d2:	4b10      	ldr	r3, [pc, #64]	; (8007614 <xQueueReceive+0x1bc>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	e780      	b.n	80074e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e6:	f000 f8a7 	bl	8007738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ea:	f000 fc4b 	bl	8007e84 <xTaskResumeAll>
 80075ee:	e77a      	b.n	80074e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f2:	f000 f8a1 	bl	8007738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075f6:	f000 fc45 	bl	8007e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fc:	f000 f8ee 	bl	80077dc <prvIsQueueEmpty>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f43f af6f 	beq.w	80074e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007608:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800760a:	4618      	mov	r0, r3
 800760c:	3730      	adds	r7, #48	; 0x30
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10d      	bne.n	8007652 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d14d      	bne.n	80076da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f810 	bl	8008668 <xTaskPriorityDisinherit>
 8007648:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	609a      	str	r2, [r3, #8]
 8007650:	e043      	b.n	80076da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d119      	bne.n	800768c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6858      	ldr	r0, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007660:	461a      	mov	r2, r3
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	f002 f874 	bl	8009750 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	d32b      	bcc.n	80076da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
 800768a:	e026      	b.n	80076da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68d8      	ldr	r0, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	461a      	mov	r2, r3
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	f002 f85a 	bl	8009750 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	425b      	negs	r3, r3
 80076a6:	441a      	add	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d207      	bcs.n	80076c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	425b      	negs	r3, r3
 80076c2:	441a      	add	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d105      	bne.n	80076da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80076e2:	697b      	ldr	r3, [r7, #20]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d018      	beq.n	8007730 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	441a      	add	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d303      	bcc.n	8007720 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68d9      	ldr	r1, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	461a      	mov	r2, r3
 800772a:	6838      	ldr	r0, [r7, #0]
 800772c:	f002 f810 	bl	8009750 <memcpy>
	}
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007740:	f001 fcd0 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800774a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800774c:	e011      	b.n	8007772 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3324      	adds	r3, #36	; 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fda8 	bl	80082b0 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007766:	f000 fe7f 	bl	8008468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	3b01      	subs	r3, #1
 800776e:	b2db      	uxtb	r3, r3
 8007770:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dce9      	bgt.n	800774e <prvUnlockQueue+0x16>
 800777a:	e000      	b.n	800777e <prvUnlockQueue+0x46>
					break;
 800777c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	22ff      	movs	r2, #255	; 0xff
 8007782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fcdd 	bl	8009144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800778a:	f001 fcab 	bl	80090e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007794:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007796:	e011      	b.n	80077bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3310      	adds	r3, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fd83 	bl	80082b0 <xTaskRemoveFromEventList>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077b0:	f000 fe5a 	bl	8008468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dce9      	bgt.n	8007798 <prvUnlockQueue+0x60>
 80077c4:	e000      	b.n	80077c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	22ff      	movs	r2, #255	; 0xff
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077d0:	f001 fcb8 	bl	8009144 <vPortExitCritical>
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077e4:	f001 fc7e 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e001      	b.n	80077fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077fa:	f001 fca3 	bl	8009144 <vPortExitCritical>

	return xReturn;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007810:	f001 fc68 	bl	80090e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	429a      	cmp	r2, r3
 800781e:	d102      	bne.n	8007826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e001      	b.n	800782a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800782a:	f001 fc8b 	bl	8009144 <vPortExitCritical>

	return xReturn;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	e014      	b.n	8007872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007848:	4a0f      	ldr	r2, [pc, #60]	; (8007888 <vQueueAddToRegistry+0x50>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007854:	490c      	ldr	r1, [pc, #48]	; (8007888 <vQueueAddToRegistry+0x50>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800785e:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <vQueueAddToRegistry+0x50>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800786a:	e006      	b.n	800787a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b07      	cmp	r3, #7
 8007876:	d9e7      	bls.n	8007848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20001cd0 	.word	0x20001cd0

0800788c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800789c:	f001 fc22 	bl	80090e4 <vPortEnterCritical>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ac:	d103      	bne.n	80078b6 <vQueueWaitForMessageRestricted+0x2a>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078bc:	b25b      	sxtb	r3, r3
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078c2:	d103      	bne.n	80078cc <vQueueWaitForMessageRestricted+0x40>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078cc:	f001 fc3a 	bl	8009144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	3324      	adds	r3, #36	; 0x24
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fcb9 	bl	8008258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078e6:	6978      	ldr	r0, [r7, #20]
 80078e8:	f7ff ff26 	bl	8007738 <prvUnlockQueue>
	}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08e      	sub	sp, #56	; 0x38
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	623b      	str	r3, [r7, #32]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <xTaskCreateStatic+0x46>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	61fb      	str	r3, [r7, #28]
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800793a:	235c      	movs	r3, #92	; 0x5c
 800793c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b5c      	cmp	r3, #92	; 0x5c
 8007942:	d00a      	beq.n	800795a <xTaskCreateStatic+0x66>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61bb      	str	r3, [r7, #24]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800795a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800795c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795e:	2b00      	cmp	r3, #0
 8007960:	d01e      	beq.n	80079a0 <xTaskCreateStatic+0xac>
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	2b00      	cmp	r3, #0
 8007966:	d01b      	beq.n	80079a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007970:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800797a:	2300      	movs	r3, #0
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	9302      	str	r3, [sp, #8]
 8007982:	f107 0314 	add.w	r3, r7, #20
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f850 	bl	8007a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800799a:	f000 f8dd 	bl	8007b58 <prvAddNewTaskToReadyList>
 800799e:	e001      	b.n	80079a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079a4:	697b      	ldr	r3, [r7, #20]
	}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b08c      	sub	sp, #48	; 0x30
 80079b2:	af04      	add	r7, sp, #16
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	4613      	mov	r3, r2
 80079bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fcb0 	bl	8009328 <pvPortMalloc>
 80079c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079d0:	205c      	movs	r0, #92	; 0x5c
 80079d2:	f001 fca9 	bl	8009328 <pvPortMalloc>
 80079d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
 80079e4:	e005      	b.n	80079f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079e6:	6978      	ldr	r0, [r7, #20]
 80079e8:	f001 fd6a 	bl	80094c0 <vPortFree>
 80079ec:	e001      	b.n	80079f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d017      	beq.n	8007a28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	2300      	movs	r3, #0
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68b9      	ldr	r1, [r7, #8]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f80e 	bl	8007a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a1c:	69f8      	ldr	r0, [r7, #28]
 8007a1e:	f000 f89b 	bl	8007b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a22:	2301      	movs	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e002      	b.n	8007a2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3720      	adds	r7, #32
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	461a      	mov	r2, r3
 8007a50:	21a5      	movs	r1, #165	; 0xa5
 8007a52:	f001 fe8b 	bl	800976c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a60:	3b01      	subs	r3, #1
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f023 0307 	bic.w	r3, r3, #7
 8007a6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	617b      	str	r3, [r7, #20]
}
 8007a8c:	bf00      	nop
 8007a8e:	e7fe      	b.n	8007a8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01f      	beq.n	8007ad6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
 8007a9a:	e012      	b.n	8007ac2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	7819      	ldrb	r1, [r3, #0]
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3334      	adds	r3, #52	; 0x34
 8007aac:	460a      	mov	r2, r1
 8007aae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2b0f      	cmp	r3, #15
 8007ac6:	d9e9      	bls.n	8007a9c <prvInitialiseNewTask+0x64>
 8007ac8:	e000      	b.n	8007acc <prvInitialiseNewTask+0x94>
			{
				break;
 8007aca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ad4:	e003      	b.n	8007ade <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b37      	cmp	r3, #55	; 0x37
 8007ae2:	d901      	bls.n	8007ae8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ae4:	2337      	movs	r3, #55	; 0x37
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2200      	movs	r2, #0
 8007af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afc:	3304      	adds	r3, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f978 	bl	8006df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	3318      	adds	r3, #24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f973 	bl	8006df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	2200      	movs	r2, #0
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	68f9      	ldr	r1, [r7, #12]
 8007b36:	69b8      	ldr	r0, [r7, #24]
 8007b38:	f001 f9a6 	bl	8008e88 <pxPortInitialiseStack>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b4e:	bf00      	nop
 8007b50:	3720      	adds	r7, #32
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b60:	f001 fac0 	bl	80090e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b64:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <prvAddNewTaskToReadyList+0xc4>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	4a2c      	ldr	r2, [pc, #176]	; (8007c1c <prvAddNewTaskToReadyList+0xc4>)
 8007b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b6e:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <prvAddNewTaskToReadyList+0xc8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b76:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <prvAddNewTaskToReadyList+0xc8>)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b7c:	4b27      	ldr	r3, [pc, #156]	; (8007c1c <prvAddNewTaskToReadyList+0xc4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d110      	bne.n	8007ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b84:	f000 fc94 	bl	80084b0 <prvInitialiseTaskLists>
 8007b88:	e00d      	b.n	8007ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b8a:	4b26      	ldr	r3, [pc, #152]	; (8007c24 <prvAddNewTaskToReadyList+0xcc>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b92:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <prvAddNewTaskToReadyList+0xc8>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d802      	bhi.n	8007ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ba0:	4a1f      	ldr	r2, [pc, #124]	; (8007c20 <prvAddNewTaskToReadyList+0xc8>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ba6:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <prvAddNewTaskToReadyList+0xd0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3301      	adds	r3, #1
 8007bac:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <prvAddNewTaskToReadyList+0xd0>)
 8007bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bb0:	4b1d      	ldr	r3, [pc, #116]	; (8007c28 <prvAddNewTaskToReadyList+0xd0>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <prvAddNewTaskToReadyList+0xd4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <prvAddNewTaskToReadyList+0x74>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <prvAddNewTaskToReadyList+0xd4>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <prvAddNewTaskToReadyList+0xd8>)
 8007bda:	441a      	add	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7ff f913 	bl	8006e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007be8:	f001 faac 	bl	8009144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <prvAddNewTaskToReadyList+0xcc>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00e      	beq.n	8007c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <prvAddNewTaskToReadyList+0xc8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d207      	bcs.n	8007c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <prvAddNewTaskToReadyList+0xdc>)
 8007c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000e00 	.word	0x20000e00
 8007c20:	2000092c 	.word	0x2000092c
 8007c24:	20000e0c 	.word	0x20000e0c
 8007c28:	20000e1c 	.word	0x20000e1c
 8007c2c:	20000e08 	.word	0x20000e08
 8007c30:	20000930 	.word	0x20000930
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	617b      	str	r3, [r7, #20]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10a      	bne.n	8007c7e <vTaskDelayUntil+0x46>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	613b      	str	r3, [r7, #16]
}
 8007c7a:	bf00      	nop
 8007c7c:	e7fe      	b.n	8007c7c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <vTaskDelayUntil+0xf0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <vTaskDelayUntil+0x64>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60fb      	str	r3, [r7, #12]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007c9c:	f000 f8e4 	bl	8007e68 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007ca0:	4b22      	ldr	r3, [pc, #136]	; (8007d2c <vTaskDelayUntil+0xf4>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4413      	add	r3, r2
 8007cae:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6a3a      	ldr	r2, [r7, #32]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d20b      	bcs.n	8007cd2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d211      	bcs.n	8007ce8 <vTaskDelayUntil+0xb0>
 8007cc4:	69fa      	ldr	r2, [r7, #28]
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d90d      	bls.n	8007ce8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd0:	e00a      	b.n	8007ce8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d303      	bcc.n	8007ce4 <vTaskDelayUntil+0xac>
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d901      	bls.n	8007ce8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fd21 	bl	8008744 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007d02:	f000 f8bf 	bl	8007e84 <xTaskResumeAll>
 8007d06:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <vTaskDelayUntil+0xf8>)
 8007d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d1e:	bf00      	nop
 8007d20:	3728      	adds	r7, #40	; 0x28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000e28 	.word	0x20000e28
 8007d2c:	20000e04 	.word	0x20000e04
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d017      	beq.n	8007d76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d46:	4b13      	ldr	r3, [pc, #76]	; (8007d94 <vTaskDelay+0x60>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00a      	beq.n	8007d64 <vTaskDelay+0x30>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d64:	f000 f880 	bl	8007e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fcea 	bl	8008744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d70:	f000 f888 	bl	8007e84 <xTaskResumeAll>
 8007d74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d107      	bne.n	8007d8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <vTaskDelay+0x64>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d8c:	bf00      	nop
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000e28 	.word	0x20000e28
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007daa:	463a      	mov	r2, r7
 8007dac:	1d39      	adds	r1, r7, #4
 8007dae:	f107 0308 	add.w	r3, r7, #8
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe ffca 	bl	8006d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007db8:	6839      	ldr	r1, [r7, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	9202      	str	r2, [sp, #8]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	460a      	mov	r2, r1
 8007dca:	4921      	ldr	r1, [pc, #132]	; (8007e50 <vTaskStartScheduler+0xb4>)
 8007dcc:	4821      	ldr	r0, [pc, #132]	; (8007e54 <vTaskStartScheduler+0xb8>)
 8007dce:	f7ff fd91 	bl	80078f4 <xTaskCreateStatic>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <vTaskStartScheduler+0xbc>)
 8007dd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007dd8:	4b1f      	ldr	r3, [pc, #124]	; (8007e58 <vTaskStartScheduler+0xbc>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007de0:	2301      	movs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	e001      	b.n	8007dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d102      	bne.n	8007df6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007df0:	f000 fcfc 	bl	80087ec <xTimerCreateTimerTask>
 8007df4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d116      	bne.n	8007e2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	613b      	str	r3, [r7, #16]
}
 8007e0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e10:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <vTaskStartScheduler+0xc0>)
 8007e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e18:	4b11      	ldr	r3, [pc, #68]	; (8007e60 <vTaskStartScheduler+0xc4>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <vTaskStartScheduler+0xc8>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e24:	f001 f8bc 	bl	8008fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e28:	e00e      	b.n	8007e48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e30:	d10a      	bne.n	8007e48 <vTaskStartScheduler+0xac>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	60fb      	str	r3, [r7, #12]
}
 8007e44:	bf00      	nop
 8007e46:	e7fe      	b.n	8007e46 <vTaskStartScheduler+0xaa>
}
 8007e48:	bf00      	nop
 8007e4a:	3718      	adds	r7, #24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	0800c1a0 	.word	0x0800c1a0
 8007e54:	08008481 	.word	0x08008481
 8007e58:	20000e24 	.word	0x20000e24
 8007e5c:	20000e20 	.word	0x20000e20
 8007e60:	20000e0c 	.word	0x20000e0c
 8007e64:	20000e04 	.word	0x20000e04

08007e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e6c:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <vTaskSuspendAll+0x18>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	4a03      	ldr	r2, [pc, #12]	; (8007e80 <vTaskSuspendAll+0x18>)
 8007e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e76:	bf00      	nop
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20000e28 	.word	0x20000e28

08007e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e92:	4b42      	ldr	r3, [pc, #264]	; (8007f9c <xTaskResumeAll+0x118>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	603b      	str	r3, [r7, #0]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007eb0:	f001 f918 	bl	80090e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007eb4:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <xTaskResumeAll+0x118>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	4a38      	ldr	r2, [pc, #224]	; (8007f9c <xTaskResumeAll+0x118>)
 8007ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ebe:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <xTaskResumeAll+0x118>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d162      	bne.n	8007f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ec6:	4b36      	ldr	r3, [pc, #216]	; (8007fa0 <xTaskResumeAll+0x11c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d05e      	beq.n	8007f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ece:	e02f      	b.n	8007f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed0:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <xTaskResumeAll+0x120>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3318      	adds	r3, #24
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe fff3 	bl	8006ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe ffee 	bl	8006ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef0:	4b2d      	ldr	r3, [pc, #180]	; (8007fa8 <xTaskResumeAll+0x124>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d903      	bls.n	8007f00 <xTaskResumeAll+0x7c>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <xTaskResumeAll+0x124>)
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	4a27      	ldr	r2, [pc, #156]	; (8007fac <xTaskResumeAll+0x128>)
 8007f0e:	441a      	add	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7fe ff79 	bl	8006e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4b23      	ldr	r3, [pc, #140]	; (8007fb0 <xTaskResumeAll+0x12c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d302      	bcc.n	8007f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <xTaskResumeAll+0x130>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f30:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <xTaskResumeAll+0x120>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1cb      	bne.n	8007ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f3e:	f000 fb55 	bl	80085ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f42:	4b1d      	ldr	r3, [pc, #116]	; (8007fb8 <xTaskResumeAll+0x134>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d010      	beq.n	8007f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f4e:	f000 f847 	bl	8007fe0 <xTaskIncrementTick>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007f58:	4b16      	ldr	r3, [pc, #88]	; (8007fb4 <xTaskResumeAll+0x130>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1f1      	bne.n	8007f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <xTaskResumeAll+0x134>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f70:	4b10      	ldr	r3, [pc, #64]	; (8007fb4 <xTaskResumeAll+0x130>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d009      	beq.n	8007f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <xTaskResumeAll+0x138>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f8c:	f001 f8da 	bl	8009144 <vPortExitCritical>

	return xAlreadyYielded;
 8007f90:	68bb      	ldr	r3, [r7, #8]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000e28 	.word	0x20000e28
 8007fa0:	20000e00 	.word	0x20000e00
 8007fa4:	20000dc0 	.word	0x20000dc0
 8007fa8:	20000e08 	.word	0x20000e08
 8007fac:	20000930 	.word	0x20000930
 8007fb0:	2000092c 	.word	0x2000092c
 8007fb4:	20000e14 	.word	0x20000e14
 8007fb8:	20000e10 	.word	0x20000e10
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <xTaskGetTickCount+0x1c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fcc:	687b      	ldr	r3, [r7, #4]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000e04 	.word	0x20000e04

08007fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fea:	4b4f      	ldr	r3, [pc, #316]	; (8008128 <xTaskIncrementTick+0x148>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f040 808f 	bne.w	8008112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ff4:	4b4d      	ldr	r3, [pc, #308]	; (800812c <xTaskIncrementTick+0x14c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ffc:	4a4b      	ldr	r2, [pc, #300]	; (800812c <xTaskIncrementTick+0x14c>)
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d120      	bne.n	800804a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008008:	4b49      	ldr	r3, [pc, #292]	; (8008130 <xTaskIncrementTick+0x150>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <xTaskIncrementTick+0x48>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	603b      	str	r3, [r7, #0]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <xTaskIncrementTick+0x46>
 8008028:	4b41      	ldr	r3, [pc, #260]	; (8008130 <xTaskIncrementTick+0x150>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	4b41      	ldr	r3, [pc, #260]	; (8008134 <xTaskIncrementTick+0x154>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a3f      	ldr	r2, [pc, #252]	; (8008130 <xTaskIncrementTick+0x150>)
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	4a3f      	ldr	r2, [pc, #252]	; (8008134 <xTaskIncrementTick+0x154>)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	4b3e      	ldr	r3, [pc, #248]	; (8008138 <xTaskIncrementTick+0x158>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	4a3d      	ldr	r2, [pc, #244]	; (8008138 <xTaskIncrementTick+0x158>)
 8008044:	6013      	str	r3, [r2, #0]
 8008046:	f000 fad1 	bl	80085ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800804a:	4b3c      	ldr	r3, [pc, #240]	; (800813c <xTaskIncrementTick+0x15c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	429a      	cmp	r2, r3
 8008052:	d349      	bcc.n	80080e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008054:	4b36      	ldr	r3, [pc, #216]	; (8008130 <xTaskIncrementTick+0x150>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d104      	bne.n	8008068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <xTaskIncrementTick+0x15c>)
 8008060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008064:	601a      	str	r2, [r3, #0]
					break;
 8008066:	e03f      	b.n	80080e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008068:	4b31      	ldr	r3, [pc, #196]	; (8008130 <xTaskIncrementTick+0x150>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	d203      	bcs.n	8008088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008080:	4a2e      	ldr	r2, [pc, #184]	; (800813c <xTaskIncrementTick+0x15c>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008086:	e02f      	b.n	80080e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe ff1b 	bl	8006ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d004      	beq.n	80080a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	3318      	adds	r3, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe ff12 	bl	8006ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <xTaskIncrementTick+0x160>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d903      	bls.n	80080b8 <xTaskIncrementTick+0xd8>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4a22      	ldr	r2, [pc, #136]	; (8008140 <xTaskIncrementTick+0x160>)
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <xTaskIncrementTick+0x164>)
 80080c6:	441a      	add	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f7fe fe9d 	bl	8006e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <xTaskIncrementTick+0x168>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	429a      	cmp	r2, r3
 80080e0:	d3b8      	bcc.n	8008054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80080e2:	2301      	movs	r3, #1
 80080e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080e6:	e7b5      	b.n	8008054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080e8:	4b17      	ldr	r3, [pc, #92]	; (8008148 <xTaskIncrementTick+0x168>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ee:	4915      	ldr	r1, [pc, #84]	; (8008144 <xTaskIncrementTick+0x164>)
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d901      	bls.n	8008104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008104:	4b11      	ldr	r3, [pc, #68]	; (800814c <xTaskIncrementTick+0x16c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e004      	b.n	800811c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008112:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <xTaskIncrementTick+0x170>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3301      	adds	r3, #1
 8008118:	4a0d      	ldr	r2, [pc, #52]	; (8008150 <xTaskIncrementTick+0x170>)
 800811a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800811c:	697b      	ldr	r3, [r7, #20]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000e28 	.word	0x20000e28
 800812c:	20000e04 	.word	0x20000e04
 8008130:	20000db8 	.word	0x20000db8
 8008134:	20000dbc 	.word	0x20000dbc
 8008138:	20000e18 	.word	0x20000e18
 800813c:	20000e20 	.word	0x20000e20
 8008140:	20000e08 	.word	0x20000e08
 8008144:	20000930 	.word	0x20000930
 8008148:	2000092c 	.word	0x2000092c
 800814c:	20000e14 	.word	0x20000e14
 8008150:	20000e10 	.word	0x20000e10

08008154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800815a:	4b28      	ldr	r3, [pc, #160]	; (80081fc <vTaskSwitchContext+0xa8>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008162:	4b27      	ldr	r3, [pc, #156]	; (8008200 <vTaskSwitchContext+0xac>)
 8008164:	2201      	movs	r2, #1
 8008166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008168:	e041      	b.n	80081ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800816a:	4b25      	ldr	r3, [pc, #148]	; (8008200 <vTaskSwitchContext+0xac>)
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008170:	4b24      	ldr	r3, [pc, #144]	; (8008204 <vTaskSwitchContext+0xb0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	e010      	b.n	800819a <vTaskSwitchContext+0x46>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <vTaskSwitchContext+0x40>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	607b      	str	r3, [r7, #4]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <vTaskSwitchContext+0x3e>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3b01      	subs	r3, #1
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	491b      	ldr	r1, [pc, #108]	; (8008208 <vTaskSwitchContext+0xb4>)
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0e4      	beq.n	8008178 <vTaskSwitchContext+0x24>
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4a13      	ldr	r2, [pc, #76]	; (8008208 <vTaskSwitchContext+0xb4>)
 80081ba:	4413      	add	r3, r2
 80081bc:	60bb      	str	r3, [r7, #8]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	605a      	str	r2, [r3, #4]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	3308      	adds	r3, #8
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d104      	bne.n	80081de <vTaskSwitchContext+0x8a>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	605a      	str	r2, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	4a09      	ldr	r2, [pc, #36]	; (800820c <vTaskSwitchContext+0xb8>)
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	4a06      	ldr	r2, [pc, #24]	; (8008204 <vTaskSwitchContext+0xb0>)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000e28 	.word	0x20000e28
 8008200:	20000e14 	.word	0x20000e14
 8008204:	20000e08 	.word	0x20000e08
 8008208:	20000930 	.word	0x20000930
 800820c:	2000092c 	.word	0x2000092c

08008210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <vTaskPlaceOnEventList+0x44>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3318      	adds	r3, #24
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7fe fe09 	bl	8006e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008244:	2101      	movs	r1, #1
 8008246:	6838      	ldr	r0, [r7, #0]
 8008248:	f000 fa7c 	bl	8008744 <prvAddCurrentTaskToDelayedList>
}
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	2000092c 	.word	0x2000092c

08008258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	617b      	str	r3, [r7, #20]
}
 800827c:	bf00      	nop
 800827e:	e7fe      	b.n	800827e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <vTaskPlaceOnEventListRestricted+0x54>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3318      	adds	r3, #24
 8008286:	4619      	mov	r1, r3
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7fe fdc0 	bl	8006e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	68b8      	ldr	r0, [r7, #8]
 800829e:	f000 fa51 	bl	8008744 <prvAddCurrentTaskToDelayedList>
	}
 80082a2:	bf00      	nop
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	2000092c 	.word	0x2000092c

080082b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
}
 80082d8:	bf00      	nop
 80082da:	e7fe      	b.n	80082da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3318      	adds	r3, #24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fe fdf1 	bl	8006ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e6:	4b1e      	ldr	r3, [pc, #120]	; (8008360 <xTaskRemoveFromEventList+0xb0>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d11d      	bne.n	800832a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fde8 	bl	8006ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <xTaskRemoveFromEventList+0xb4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <xTaskRemoveFromEventList+0x5c>
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	4a16      	ldr	r2, [pc, #88]	; (8008364 <xTaskRemoveFromEventList+0xb4>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <xTaskRemoveFromEventList+0xb8>)
 800831a:	441a      	add	r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe fd73 	bl	8006e0e <vListInsertEnd>
 8008328:	e005      	b.n	8008336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	3318      	adds	r3, #24
 800832e:	4619      	mov	r1, r3
 8008330:	480e      	ldr	r0, [pc, #56]	; (800836c <xTaskRemoveFromEventList+0xbc>)
 8008332:	f7fe fd6c 	bl	8006e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833a:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <xTaskRemoveFromEventList+0xc0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	429a      	cmp	r2, r3
 8008342:	d905      	bls.n	8008350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <xTaskRemoveFromEventList+0xc4>)
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e001      	b.n	8008354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008354:	697b      	ldr	r3, [r7, #20]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	20000e28 	.word	0x20000e28
 8008364:	20000e08 	.word	0x20000e08
 8008368:	20000930 	.word	0x20000930
 800836c:	20000dc0 	.word	0x20000dc0
 8008370:	2000092c 	.word	0x2000092c
 8008374:	20000e14 	.word	0x20000e14

08008378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <vTaskInternalSetTimeOutState+0x24>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <vTaskInternalSetTimeOutState+0x28>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000e18 	.word	0x20000e18
 80083a0:	20000e04 	.word	0x20000e04

080083a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	613b      	str	r3, [r7, #16]
}
 80083c6:	bf00      	nop
 80083c8:	e7fe      	b.n	80083c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80083e6:	f000 fe7d 	bl	80090e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083ea:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <xTaskCheckForTimeOut+0xbc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008402:	d102      	bne.n	800840a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
 8008408:	e023      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <xTaskCheckForTimeOut+0xc0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d007      	beq.n	8008426 <xTaskCheckForTimeOut+0x82>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	429a      	cmp	r2, r3
 800841e:	d302      	bcc.n	8008426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008420:	2301      	movs	r3, #1
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	e015      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	429a      	cmp	r2, r3
 800842e:	d20b      	bcs.n	8008448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff9b 	bl	8008378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e004      	b.n	8008452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800844e:	2301      	movs	r3, #1
 8008450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008452:	f000 fe77 	bl	8009144 <vPortExitCritical>

	return xReturn;
 8008456:	69fb      	ldr	r3, [r7, #28]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20000e04 	.word	0x20000e04
 8008464:	20000e18 	.word	0x20000e18

08008468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <vTaskMissedYield+0x14>)
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	20000e14 	.word	0x20000e14

08008480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008488:	f000 f852 	bl	8008530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <prvIdleTask+0x28>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d9f9      	bls.n	8008488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <prvIdleTask+0x2c>)
 8008496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084a4:	e7f0      	b.n	8008488 <prvIdleTask+0x8>
 80084a6:	bf00      	nop
 80084a8:	20000930 	.word	0x20000930
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084b6:	2300      	movs	r3, #0
 80084b8:	607b      	str	r3, [r7, #4]
 80084ba:	e00c      	b.n	80084d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a12      	ldr	r2, [pc, #72]	; (8008510 <prvInitialiseTaskLists+0x60>)
 80084c8:	4413      	add	r3, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fc72 	bl	8006db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3301      	adds	r3, #1
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b37      	cmp	r3, #55	; 0x37
 80084da:	d9ef      	bls.n	80084bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084dc:	480d      	ldr	r0, [pc, #52]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084de:	f7fe fc69 	bl	8006db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084e2:	480d      	ldr	r0, [pc, #52]	; (8008518 <prvInitialiseTaskLists+0x68>)
 80084e4:	f7fe fc66 	bl	8006db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084e8:	480c      	ldr	r0, [pc, #48]	; (800851c <prvInitialiseTaskLists+0x6c>)
 80084ea:	f7fe fc63 	bl	8006db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ee:	480c      	ldr	r0, [pc, #48]	; (8008520 <prvInitialiseTaskLists+0x70>)
 80084f0:	f7fe fc60 	bl	8006db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084f4:	480b      	ldr	r0, [pc, #44]	; (8008524 <prvInitialiseTaskLists+0x74>)
 80084f6:	f7fe fc5d 	bl	8006db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <prvInitialiseTaskLists+0x78>)
 80084fc:	4a05      	ldr	r2, [pc, #20]	; (8008514 <prvInitialiseTaskLists+0x64>)
 80084fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <prvInitialiseTaskLists+0x7c>)
 8008502:	4a05      	ldr	r2, [pc, #20]	; (8008518 <prvInitialiseTaskLists+0x68>)
 8008504:	601a      	str	r2, [r3, #0]
}
 8008506:	bf00      	nop
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000930 	.word	0x20000930
 8008514:	20000d90 	.word	0x20000d90
 8008518:	20000da4 	.word	0x20000da4
 800851c:	20000dc0 	.word	0x20000dc0
 8008520:	20000dd4 	.word	0x20000dd4
 8008524:	20000dec 	.word	0x20000dec
 8008528:	20000db8 	.word	0x20000db8
 800852c:	20000dbc 	.word	0x20000dbc

08008530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008536:	e019      	b.n	800856c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008538:	f000 fdd4 	bl	80090e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <prvCheckTasksWaitingTermination+0x50>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fcbd 	bl	8006ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3b01      	subs	r3, #1
 8008554:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <prvCheckTasksWaitingTermination+0x54>)
 8008556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008558:	4b0b      	ldr	r3, [pc, #44]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 8008560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008562:	f000 fdef 	bl	8009144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f810 	bl	800858c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <prvCheckTasksWaitingTermination+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e1      	bne.n	8008538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000dd4 	.word	0x20000dd4
 8008584:	20000e00 	.word	0x20000e00
 8008588:	20000de8 	.word	0x20000de8

0800858c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 ff8c 	bl	80094c0 <vPortFree>
				vPortFree( pxTCB );
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 ff89 	bl	80094c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085ae:	e018      	b.n	80085e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d103      	bne.n	80085c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 ff80 	bl	80094c0 <vPortFree>
	}
 80085c0:	e00f      	b.n	80085e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d00a      	beq.n	80085e2 <prvDeleteTCB+0x56>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <prvDeleteTCB+0x54>
	}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <prvResetNextTaskUnblockTime+0x38>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <prvResetNextTaskUnblockTime+0x3c>)
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008604:	e008      	b.n	8008618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008606:	4b07      	ldr	r3, [pc, #28]	; (8008624 <prvResetNextTaskUnblockTime+0x38>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a04      	ldr	r2, [pc, #16]	; (8008628 <prvResetNextTaskUnblockTime+0x3c>)
 8008616:	6013      	str	r3, [r2, #0]
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20000db8 	.word	0x20000db8
 8008628:	20000e20 	.word	0x20000e20

0800862c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008632:	4b0b      	ldr	r3, [pc, #44]	; (8008660 <xTaskGetSchedulerState+0x34>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800863a:	2301      	movs	r3, #1
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	e008      	b.n	8008652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <xTaskGetSchedulerState+0x38>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008648:	2302      	movs	r3, #2
 800864a:	607b      	str	r3, [r7, #4]
 800864c:	e001      	b.n	8008652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800864e:	2300      	movs	r3, #0
 8008650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008652:	687b      	ldr	r3, [r7, #4]
	}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000e0c 	.word	0x20000e0c
 8008664:	20000e28 	.word	0x20000e28

08008668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d056      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800867e:	4b2e      	ldr	r3, [pc, #184]	; (8008738 <xTaskPriorityDisinherit+0xd0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	429a      	cmp	r2, r3
 8008686:	d00a      	beq.n	800869e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	60fb      	str	r3, [r7, #12]
}
 800869a:	bf00      	nop
 800869c:	e7fe      	b.n	800869c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10a      	bne.n	80086bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	60bb      	str	r3, [r7, #8]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c0:	1e5a      	subs	r2, r3, #1
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d02c      	beq.n	800872c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d128      	bne.n	800872c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fbf2 	bl	8006ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d903      	bls.n	800870c <xTaskPriorityDisinherit+0xa4>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	4a0c      	ldr	r2, [pc, #48]	; (800873c <xTaskPriorityDisinherit+0xd4>)
 800870a:	6013      	str	r3, [r2, #0]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	4613      	mov	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4a09      	ldr	r2, [pc, #36]	; (8008740 <xTaskPriorityDisinherit+0xd8>)
 800871a:	441a      	add	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3304      	adds	r3, #4
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f7fe fb73 	bl	8006e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800872c:	697b      	ldr	r3, [r7, #20]
	}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	2000092c 	.word	0x2000092c
 800873c:	20000e08 	.word	0x20000e08
 8008740:	20000930 	.word	0x20000930

08008744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800874e:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008754:	4b20      	ldr	r3, [pc, #128]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3304      	adds	r3, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fbb4 	bl	8006ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008766:	d10a      	bne.n	800877e <prvAddCurrentTaskToDelayedList+0x3a>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d007      	beq.n	800877e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800876e:	4b1a      	ldr	r3, [pc, #104]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4819      	ldr	r0, [pc, #100]	; (80087dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008778:	f7fe fb49 	bl	8006e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800877c:	e026      	b.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008786:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	429a      	cmp	r2, r3
 8008794:	d209      	bcs.n	80087aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008796:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f7fe fb57 	bl	8006e56 <vListInsert>
}
 80087a8:	e010      	b.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b0a      	ldr	r3, [pc, #40]	; (80087d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fe fb4d 	bl	8006e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d202      	bcs.n	80087cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087c6:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6013      	str	r3, [r2, #0]
}
 80087cc:	bf00      	nop
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20000e04 	.word	0x20000e04
 80087d8:	2000092c 	.word	0x2000092c
 80087dc:	20000dec 	.word	0x20000dec
 80087e0:	20000dbc 	.word	0x20000dbc
 80087e4:	20000db8 	.word	0x20000db8
 80087e8:	20000e20 	.word	0x20000e20

080087ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087f6:	f000 fb07 	bl	8008e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087fa:	4b1c      	ldr	r3, [pc, #112]	; (800886c <xTimerCreateTimerTask+0x80>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d021      	beq.n	8008846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800880a:	1d3a      	adds	r2, r7, #4
 800880c:	f107 0108 	add.w	r1, r7, #8
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	4618      	mov	r0, r3
 8008816:	f7fe fab3 	bl	8006d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	9202      	str	r2, [sp, #8]
 8008822:	9301      	str	r3, [sp, #4]
 8008824:	2302      	movs	r3, #2
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	2300      	movs	r3, #0
 800882a:	460a      	mov	r2, r1
 800882c:	4910      	ldr	r1, [pc, #64]	; (8008870 <xTimerCreateTimerTask+0x84>)
 800882e:	4811      	ldr	r0, [pc, #68]	; (8008874 <xTimerCreateTimerTask+0x88>)
 8008830:	f7ff f860 	bl	80078f4 <xTaskCreateStatic>
 8008834:	4603      	mov	r3, r0
 8008836:	4a10      	ldr	r2, [pc, #64]	; (8008878 <xTimerCreateTimerTask+0x8c>)
 8008838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <xTimerCreateTimerTask+0x8c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008842:	2301      	movs	r3, #1
 8008844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	613b      	str	r3, [r7, #16]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008862:	697b      	ldr	r3, [r7, #20]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000e5c 	.word	0x20000e5c
 8008870:	0800c1a8 	.word	0x0800c1a8
 8008874:	080089b1 	.word	0x080089b1
 8008878:	20000e60 	.word	0x20000e60

0800887c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10a      	bne.n	80088aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	623b      	str	r3, [r7, #32]
}
 80088a6:	bf00      	nop
 80088a8:	e7fe      	b.n	80088a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088aa:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <xTimerGenericCommand+0x98>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d02a      	beq.n	8008908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b05      	cmp	r3, #5
 80088c2:	dc18      	bgt.n	80088f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088c4:	f7ff feb2 	bl	800862c <xTaskGetSchedulerState>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d109      	bne.n	80088e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <xTimerGenericCommand+0x98>)
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f107 0110 	add.w	r1, r7, #16
 80088d6:	2300      	movs	r3, #0
 80088d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088da:	f7fe fc23 	bl	8007124 <xQueueGenericSend>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24
 80088e0:	e012      	b.n	8008908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088e2:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <xTimerGenericCommand+0x98>)
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f107 0110 	add.w	r1, r7, #16
 80088ea:	2300      	movs	r3, #0
 80088ec:	2200      	movs	r2, #0
 80088ee:	f7fe fc19 	bl	8007124 <xQueueGenericSend>
 80088f2:	6278      	str	r0, [r7, #36]	; 0x24
 80088f4:	e008      	b.n	8008908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088f6:	4b07      	ldr	r3, [pc, #28]	; (8008914 <xTimerGenericCommand+0x98>)
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	f107 0110 	add.w	r1, r7, #16
 80088fe:	2300      	movs	r3, #0
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	f7fe fd0d 	bl	8007320 <xQueueGenericSendFromISR>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800890a:	4618      	mov	r0, r3
 800890c:	3728      	adds	r7, #40	; 0x28
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000e5c 	.word	0x20000e5c

08008918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af02      	add	r7, sp, #8
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008922:	4b22      	ldr	r3, [pc, #136]	; (80089ac <prvProcessExpiredTimer+0x94>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3304      	adds	r3, #4
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fac9 	bl	8006ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d022      	beq.n	800898a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	699a      	ldr	r2, [r3, #24]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	18d1      	adds	r1, r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	f000 f8d1 	bl	8008af8 <prvInsertTimerInActiveList>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01f      	beq.n	800899c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800895c:	2300      	movs	r3, #0
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	2300      	movs	r3, #0
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	2100      	movs	r1, #0
 8008966:	6978      	ldr	r0, [r7, #20]
 8008968:	f7ff ff88 	bl	800887c <xTimerGenericCommand>
 800896c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d113      	bne.n	800899c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	60fb      	str	r3, [r7, #12]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	b2da      	uxtb	r2, r3
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	6978      	ldr	r0, [r7, #20]
 80089a2:	4798      	blx	r3
}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000e54 	.word	0x20000e54

080089b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f857 	bl	8008a70 <prvGetNextExpireTime>
 80089c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f803 	bl	80089d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80089ce:	f000 f8d5 	bl	8008b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089d2:	e7f1      	b.n	80089b8 <prvTimerTask+0x8>

080089d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80089de:	f7ff fa43 	bl	8007e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089e2:	f107 0308 	add.w	r3, r7, #8
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f866 	bl	8008ab8 <prvSampleTimeNow>
 80089ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d130      	bne.n	8008a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <prvProcessTimerOrBlockTask+0x3c>
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d806      	bhi.n	8008a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a02:	f7ff fa3f 	bl	8007e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff ff85 	bl	8008918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a0e:	e024      	b.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d008      	beq.n	8008a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a16:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <prvProcessTimerOrBlockTask+0x90>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <prvProcessTimerOrBlockTask+0x50>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <prvProcessTimerOrBlockTask+0x52>
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a28:	4b0f      	ldr	r3, [pc, #60]	; (8008a68 <prvProcessTimerOrBlockTask+0x94>)
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7fe ff29 	bl	800788c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a3a:	f7ff fa23 	bl	8007e84 <xTaskResumeAll>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a44:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <prvProcessTimerOrBlockTask+0x98>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
}
 8008a54:	e001      	b.n	8008a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a56:	f7ff fa15 	bl	8007e84 <xTaskResumeAll>
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000e58 	.word	0x20000e58
 8008a68:	20000e5c 	.word	0x20000e5c
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a78:	4b0e      	ldr	r3, [pc, #56]	; (8008ab4 <prvGetNextExpireTime+0x44>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <prvGetNextExpireTime+0x16>
 8008a82:	2201      	movs	r2, #1
 8008a84:	e000      	b.n	8008a88 <prvGetNextExpireTime+0x18>
 8008a86:	2200      	movs	r2, #0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a94:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <prvGetNextExpireTime+0x44>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e001      	b.n	8008aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000e54 	.word	0x20000e54

08008ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ac0:	f7ff fa7e 	bl	8007fc0 <xTaskGetTickCount>
 8008ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <prvSampleTimeNow+0x3c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d205      	bcs.n	8008adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ad0:	f000 f936 	bl	8008d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e002      	b.n	8008ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ae2:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <prvSampleTimeNow+0x3c>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20000e64 	.word	0x20000e64

08008af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d812      	bhi.n	8008b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d302      	bcc.n	8008b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e01b      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <prvInsertTimerInActiveList+0x7c>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	f7fe f98a 	bl	8006e56 <vListInsert>
 8008b42:	e012      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d206      	bcs.n	8008b5a <prvInsertTimerInActiveList+0x62>
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d302      	bcc.n	8008b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e007      	b.n	8008b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvInsertTimerInActiveList+0x80>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7fe f976 	bl	8006e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b6a:	697b      	ldr	r3, [r7, #20]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000e58 	.word	0x20000e58
 8008b78:	20000e54 	.word	0x20000e54

08008b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08e      	sub	sp, #56	; 0x38
 8008b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b82:	e0ca      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	da18      	bge.n	8008bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b8a:	1d3b      	adds	r3, r7, #4
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	61fb      	str	r3, [r7, #28]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	6850      	ldr	r0, [r2, #4]
 8008bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb6:	6892      	ldr	r2, [r2, #8]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f2c0 80aa 	blt.w	8008d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe f977 	bl	8006ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bda:	463b      	mov	r3, r7
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff ff6b 	bl	8008ab8 <prvSampleTimeNow>
 8008be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	f200 8097 	bhi.w	8008d1a <prvProcessReceivedCommands+0x19e>
 8008bec:	a201      	add	r2, pc, #4	; (adr r2, 8008bf4 <prvProcessReceivedCommands+0x78>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c1d 	.word	0x08008c1d
 8008bf8:	08008c1d 	.word	0x08008c1d
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008c91 	.word	0x08008c91
 8008c04:	08008ca5 	.word	0x08008ca5
 8008c08:	08008cef 	.word	0x08008cef
 8008c0c:	08008c1d 	.word	0x08008c1d
 8008c10:	08008c1d 	.word	0x08008c1d
 8008c14:	08008c91 	.word	0x08008c91
 8008c18:	08008ca5 	.word	0x08008ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	18d1      	adds	r1, r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c3c:	f7ff ff5c 	bl	8008af8 <prvInsertTimerInActiveList>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d069      	beq.n	8008d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d05e      	beq.n	8008d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	441a      	add	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6e:	f7ff fe05 	bl	800887c <xTimerGenericCommand>
 8008c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d14f      	bne.n	8008d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	61bb      	str	r3, [r7, #24]
}
 8008c8c:	bf00      	nop
 8008c8e:	e7fe      	b.n	8008c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c96:	f023 0301 	bic.w	r3, r3, #1
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ca2:	e03a      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	617b      	str	r3, [r7, #20]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	18d1      	adds	r1, r2, r3
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce8:	f7ff ff06 	bl	8008af8 <prvInsertTimerInActiveList>
					break;
 8008cec:	e015      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d103      	bne.n	8008d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfe:	f000 fbdf 	bl	80094c0 <vPortFree>
 8008d02:	e00a      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d0a:	f023 0301 	bic.w	r3, r3, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d16:	e000      	b.n	8008d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d1a:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <prvProcessReceivedCommands+0x1c0>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	1d39      	adds	r1, r7, #4
 8008d20:	2200      	movs	r2, #0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fb98 	bl	8007458 <xQueueReceive>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f47f af2a 	bne.w	8008b84 <prvProcessReceivedCommands+0x8>
	}
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	3730      	adds	r7, #48	; 0x30
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000e5c 	.word	0x20000e5c

08008d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d46:	e048      	b.n	8008dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d48:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d52:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fe f8b1 	bl	8006ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d02e      	beq.n	8008dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4413      	add	r3, r2
 8008d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d90e      	bls.n	8008dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d9a:	4b19      	ldr	r3, [pc, #100]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f7fe f856 	bl	8006e56 <vListInsert>
 8008daa:	e016      	b.n	8008dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dac:	2300      	movs	r3, #0
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	2100      	movs	r1, #0
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff fd60 	bl	800887c <xTimerGenericCommand>
 8008dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	603b      	str	r3, [r7, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008dda:	4b09      	ldr	r3, [pc, #36]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1b1      	bne.n	8008d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008de4:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <prvSwitchTimerLists+0xc4>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a04      	ldr	r2, [pc, #16]	; (8008e00 <prvSwitchTimerLists+0xc0>)
 8008df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008df2:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <prvSwitchTimerLists+0xc4>)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	6013      	str	r3, [r2, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000e54 	.word	0x20000e54
 8008e04:	20000e58 	.word	0x20000e58

08008e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e0e:	f000 f969 	bl	80090e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e12:	4b15      	ldr	r3, [pc, #84]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d120      	bne.n	8008e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e1a:	4814      	ldr	r0, [pc, #80]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e1c:	f7fd ffca 	bl	8006db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e20:	4813      	ldr	r0, [pc, #76]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e22:	f7fd ffc7 	bl	8006db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <prvCheckForValidListAndQueue+0x6c>)
 8008e28:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <prvCheckForValidListAndQueue+0x64>)
 8008e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e2c:	4b12      	ldr	r3, [pc, #72]	; (8008e78 <prvCheckForValidListAndQueue+0x70>)
 8008e2e:	4a10      	ldr	r2, [pc, #64]	; (8008e70 <prvCheckForValidListAndQueue+0x68>)
 8008e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <prvCheckForValidListAndQueue+0x74>)
 8008e38:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <prvCheckForValidListAndQueue+0x78>)
 8008e3a:	2110      	movs	r1, #16
 8008e3c:	200a      	movs	r0, #10
 8008e3e:	f7fe f8d5 	bl	8006fec <xQueueGenericCreateStatic>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <prvCheckForValidListAndQueue+0x60>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	490b      	ldr	r1, [pc, #44]	; (8008e84 <prvCheckForValidListAndQueue+0x7c>)
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fcee 	bl	8007838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e5c:	f000 f972 	bl	8009144 <vPortExitCritical>
}
 8008e60:	bf00      	nop
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000e5c 	.word	0x20000e5c
 8008e6c:	20000e2c 	.word	0x20000e2c
 8008e70:	20000e40 	.word	0x20000e40
 8008e74:	20000e54 	.word	0x20000e54
 8008e78:	20000e58 	.word	0x20000e58
 8008e7c:	20000f08 	.word	0x20000f08
 8008e80:	20000e68 	.word	0x20000e68
 8008e84:	0800c1b0 	.word	0x0800c1b0

08008e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b04      	subs	r3, #4
 8008e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3b04      	subs	r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f023 0201 	bic.w	r2, r3, #1
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3b04      	subs	r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eb8:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <pxPortInitialiseStack+0x64>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3b14      	subs	r3, #20
 8008ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f06f 0202 	mvn.w	r2, #2
 8008ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3b20      	subs	r3, #32
 8008edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	08008ef1 	.word	0x08008ef1

08008ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <prvTaskExitError+0x54>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f02:	d00a      	beq.n	8008f1a <prvTaskExitError+0x2a>
	__asm volatile
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	f383 8811 	msr	BASEPRI, r3
 8008f0c:	f3bf 8f6f 	isb	sy
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	60fb      	str	r3, [r7, #12]
}
 8008f16:	bf00      	nop
 8008f18:	e7fe      	b.n	8008f18 <prvTaskExitError+0x28>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f2e:	bf00      	nop
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0fc      	beq.n	8008f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3714      	adds	r7, #20
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr
 8008f44:	20000010 	.word	0x20000010
	...

08008f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <pxCurrentTCBConst2>)
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	6808      	ldr	r0, [r1, #0]
 8008f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	f380 8809 	msr	PSP, r0
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8811 	msr	BASEPRI, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst2>:
 8008f70:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f78:	4808      	ldr	r0, [pc, #32]	; (8008f9c <prvPortStartFirstTask+0x24>)
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f380 8808 	msr	MSP, r0
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8814 	msr	CONTROL, r0
 8008f8a:	b662      	cpsie	i
 8008f8c:	b661      	cpsie	f
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	df00      	svc	0
 8008f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f9a:	bf00      	nop
 8008f9c:	e000ed08 	.word	0xe000ed08

08008fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008fa6:	4b46      	ldr	r3, [pc, #280]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a46      	ldr	r2, [pc, #280]	; (80090c4 <xPortStartScheduler+0x124>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d10a      	bne.n	8008fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008fc6:	4b3e      	ldr	r3, [pc, #248]	; (80090c0 <xPortStartScheduler+0x120>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a3f      	ldr	r2, [pc, #252]	; (80090c8 <xPortStartScheduler+0x128>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d10a      	bne.n	8008fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fe6:	4b39      	ldr	r3, [pc, #228]	; (80090cc <xPortStartScheduler+0x12c>)
 8008fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	22ff      	movs	r2, #255	; 0xff
 8008ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009008:	b2da      	uxtb	r2, r3
 800900a:	4b31      	ldr	r3, [pc, #196]	; (80090d0 <xPortStartScheduler+0x130>)
 800900c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <xPortStartScheduler+0x134>)
 8009010:	2207      	movs	r2, #7
 8009012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009014:	e009      	b.n	800902a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <xPortStartScheduler+0x134>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3b01      	subs	r3, #1
 800901c:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <xPortStartScheduler+0x134>)
 800901e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	005b      	lsls	r3, r3, #1
 8009026:	b2db      	uxtb	r3, r3
 8009028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	d0ef      	beq.n	8009016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009036:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <xPortStartScheduler+0x134>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1c3 0307 	rsb	r3, r3, #7
 800903e:	2b04      	cmp	r3, #4
 8009040:	d00a      	beq.n	8009058 <xPortStartScheduler+0xb8>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	60bb      	str	r3, [r7, #8]
}
 8009054:	bf00      	nop
 8009056:	e7fe      	b.n	8009056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009058:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <xPortStartScheduler+0x134>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <xPortStartScheduler+0x134>)
 8009060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009062:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <xPortStartScheduler+0x134>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <xPortStartScheduler+0x134>)
 800906c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	b2da      	uxtb	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009076:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <xPortStartScheduler+0x138>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a17      	ldr	r2, [pc, #92]	; (80090d8 <xPortStartScheduler+0x138>)
 800907c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009082:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <xPortStartScheduler+0x138>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <xPortStartScheduler+0x138>)
 8009088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800908c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800908e:	f000 f8dd 	bl	800924c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009092:	4b12      	ldr	r3, [pc, #72]	; (80090dc <xPortStartScheduler+0x13c>)
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009098:	f000 f8fc 	bl	8009294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800909c:	4b10      	ldr	r3, [pc, #64]	; (80090e0 <xPortStartScheduler+0x140>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0f      	ldr	r2, [pc, #60]	; (80090e0 <xPortStartScheduler+0x140>)
 80090a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090a8:	f7ff ff66 	bl	8008f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090ac:	f7ff f852 	bl	8008154 <vTaskSwitchContext>
	prvTaskExitError();
 80090b0:	f7ff ff1e 	bl	8008ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	e000ed00 	.word	0xe000ed00
 80090c4:	410fc271 	.word	0x410fc271
 80090c8:	410fc270 	.word	0x410fc270
 80090cc:	e000e400 	.word	0xe000e400
 80090d0:	20000f58 	.word	0x20000f58
 80090d4:	20000f5c 	.word	0x20000f5c
 80090d8:	e000ed20 	.word	0xe000ed20
 80090dc:	20000010 	.word	0x20000010
 80090e0:	e000ef34 	.word	0xe000ef34

080090e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	607b      	str	r3, [r7, #4]
}
 80090fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <vPortEnterCritical+0x58>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3301      	adds	r3, #1
 8009104:	4a0d      	ldr	r2, [pc, #52]	; (800913c <vPortEnterCritical+0x58>)
 8009106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009108:	4b0c      	ldr	r3, [pc, #48]	; (800913c <vPortEnterCritical+0x58>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d10f      	bne.n	8009130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortEnterCritical+0x5c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <vPortEnterCritical+0x4c>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	603b      	str	r3, [r7, #0]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vPortEnterCritical+0x4a>
	}
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	20000010 	.word	0x20000010
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800914a:	4b12      	ldr	r3, [pc, #72]	; (8009194 <vPortExitCritical+0x50>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <vPortExitCritical+0x24>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009168:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <vPortExitCritical+0x50>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3b01      	subs	r3, #1
 800916e:	4a09      	ldr	r2, [pc, #36]	; (8009194 <vPortExitCritical+0x50>)
 8009170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009172:	4b08      	ldr	r3, [pc, #32]	; (8009194 <vPortExitCritical+0x50>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <vPortExitCritical+0x42>
 800917a:	2300      	movs	r3, #0
 800917c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f383 8811 	msr	BASEPRI, r3
}
 8009184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009186:	bf00      	nop
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000010 	.word	0x20000010
	...

080091a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091a0:	f3ef 8009 	mrs	r0, PSP
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4b15      	ldr	r3, [pc, #84]	; (8009200 <pxCurrentTCBConst>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	f01e 0f10 	tst.w	lr, #16
 80091b0:	bf08      	it	eq
 80091b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ba:	6010      	str	r0, [r2, #0]
 80091bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091c4:	f380 8811 	msr	BASEPRI, r0
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	f3bf 8f6f 	isb	sy
 80091d0:	f7fe ffc0 	bl	8008154 <vTaskSwitchContext>
 80091d4:	f04f 0000 	mov.w	r0, #0
 80091d8:	f380 8811 	msr	BASEPRI, r0
 80091dc:	bc09      	pop	{r0, r3}
 80091de:	6819      	ldr	r1, [r3, #0]
 80091e0:	6808      	ldr	r0, [r1, #0]
 80091e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e6:	f01e 0f10 	tst.w	lr, #16
 80091ea:	bf08      	it	eq
 80091ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091f0:	f380 8809 	msr	PSP, r0
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	f3af 8000 	nop.w

08009200 <pxCurrentTCBConst>:
 8009200:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop

08009208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009222:	f7fe fedd 	bl	8007fe0 <xTaskIncrementTick>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <xPortSysTickHandler+0x40>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	2300      	movs	r3, #0
 8009236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	f383 8811 	msr	BASEPRI, r3
}
 800923e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <vPortSetupTimerInterrupt+0x38>)
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <vPortSetupTimerInterrupt+0x3c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <vPortSetupTimerInterrupt+0x40>)
 8009262:	fba2 2303 	umull	r2, r3, r2, r3
 8009266:	099b      	lsrs	r3, r3, #6
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <vPortSetupTimerInterrupt+0x44>)
 800926a:	3b01      	subs	r3, #1
 800926c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <vPortSetupTimerInterrupt+0x34>)
 8009270:	2207      	movs	r2, #7
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	e000e010 	.word	0xe000e010
 8009284:	e000e018 	.word	0xe000e018
 8009288:	20000004 	.word	0x20000004
 800928c:	10624dd3 	.word	0x10624dd3
 8009290:	e000e014 	.word	0xe000e014

08009294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092a4 <vPortEnableVFP+0x10>
 8009298:	6801      	ldr	r1, [r0, #0]
 800929a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800929e:	6001      	str	r1, [r0, #0]
 80092a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092a2:	bf00      	nop
 80092a4:	e000ed88 	.word	0xe000ed88

080092a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092ae:	f3ef 8305 	mrs	r3, IPSR
 80092b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2b0f      	cmp	r3, #15
 80092b8:	d914      	bls.n	80092e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <vPortValidateInterruptPriority+0x70>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4413      	add	r3, r2
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092c4:	4b15      	ldr	r3, [pc, #84]	; (800931c <vPortValidateInterruptPriority+0x74>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	7afa      	ldrb	r2, [r7, #11]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d20a      	bcs.n	80092e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	607b      	str	r3, [r7, #4]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <vPortValidateInterruptPriority+0x78>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <vPortValidateInterruptPriority+0x7c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d90a      	bls.n	800930a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	603b      	str	r3, [r7, #0]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <vPortValidateInterruptPriority+0x60>
	}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000e3f0 	.word	0xe000e3f0
 800931c:	20000f58 	.word	0x20000f58
 8009320:	e000ed0c 	.word	0xe000ed0c
 8009324:	20000f5c 	.word	0x20000f5c

08009328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009330:	2300      	movs	r3, #0
 8009332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009334:	f7fe fd98 	bl	8007e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009338:	4b5b      	ldr	r3, [pc, #364]	; (80094a8 <pvPortMalloc+0x180>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009340:	f000 f920 	bl	8009584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009344:	4b59      	ldr	r3, [pc, #356]	; (80094ac <pvPortMalloc+0x184>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 8093 	bne.w	8009478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01d      	beq.n	8009394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009358:	2208      	movs	r2, #8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d014      	beq.n	8009394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f023 0307 	bic.w	r3, r3, #7
 8009370:	3308      	adds	r3, #8
 8009372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <pvPortMalloc+0x6c>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	617b      	str	r3, [r7, #20]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d06e      	beq.n	8009478 <pvPortMalloc+0x150>
 800939a:	4b45      	ldr	r3, [pc, #276]	; (80094b0 <pvPortMalloc+0x188>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d869      	bhi.n	8009478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80093a4:	4b43      	ldr	r3, [pc, #268]	; (80094b4 <pvPortMalloc+0x18c>)
 80093a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80093a8:	4b42      	ldr	r3, [pc, #264]	; (80094b4 <pvPortMalloc+0x18c>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ae:	e004      	b.n	80093ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d903      	bls.n	80093cc <pvPortMalloc+0xa4>
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1f1      	bne.n	80093b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093cc:	4b36      	ldr	r3, [pc, #216]	; (80094a8 <pvPortMalloc+0x180>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d050      	beq.n	8009478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2208      	movs	r2, #8
 80093dc:	4413      	add	r3, r2
 80093de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	2308      	movs	r3, #8
 80093f2:	005b      	lsls	r3, r3, #1
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d91f      	bls.n	8009438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <pvPortMalloc+0xf8>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	613b      	str	r3, [r7, #16]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	685a      	ldr	r2, [r3, #4]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	1ad2      	subs	r2, r2, r3
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009432:	69b8      	ldr	r0, [r7, #24]
 8009434:	f000 f908 	bl	8009648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <pvPortMalloc+0x188>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1b      	ldr	r2, [pc, #108]	; (80094b0 <pvPortMalloc+0x188>)
 8009444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009446:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <pvPortMalloc+0x188>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <pvPortMalloc+0x190>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	429a      	cmp	r2, r3
 8009450:	d203      	bcs.n	800945a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009452:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <pvPortMalloc+0x188>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <pvPortMalloc+0x190>)
 8009458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	685a      	ldr	r2, [r3, #4]
 800945e:	4b13      	ldr	r3, [pc, #76]	; (80094ac <pvPortMalloc+0x184>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	431a      	orrs	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <pvPortMalloc+0x194>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	4a11      	ldr	r2, [pc, #68]	; (80094bc <pvPortMalloc+0x194>)
 8009476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009478:	f7fe fd04 	bl	8007e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <pvPortMalloc+0x174>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <pvPortMalloc+0x172>
	return pvReturn;
 800949c:	69fb      	ldr	r3, [r7, #28]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3728      	adds	r7, #40	; 0x28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20001b20 	.word	0x20001b20
 80094ac:	20001b34 	.word	0x20001b34
 80094b0:	20001b24 	.word	0x20001b24
 80094b4:	20001b18 	.word	0x20001b18
 80094b8:	20001b28 	.word	0x20001b28
 80094bc:	20001b2c 	.word	0x20001b2c

080094c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d04d      	beq.n	800956e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094d2:	2308      	movs	r3, #8
 80094d4:	425b      	negs	r3, r3
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	4413      	add	r3, r2
 80094da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	4b24      	ldr	r3, [pc, #144]	; (8009578 <vPortFree+0xb8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <vPortFree+0x44>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60fb      	str	r3, [r7, #12]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00a      	beq.n	8009522 <vPortFree+0x62>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	60bb      	str	r3, [r7, #8]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <vPortFree+0xb8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4013      	ands	r3, r2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01e      	beq.n	800956e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11a      	bne.n	800956e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685a      	ldr	r2, [r3, #4]
 800953c:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <vPortFree+0xb8>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	43db      	mvns	r3, r3
 8009542:	401a      	ands	r2, r3
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009548:	f7fe fc8e 	bl	8007e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <vPortFree+0xbc>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4413      	add	r3, r2
 8009556:	4a09      	ldr	r2, [pc, #36]	; (800957c <vPortFree+0xbc>)
 8009558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800955a:	6938      	ldr	r0, [r7, #16]
 800955c:	f000 f874 	bl	8009648 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <vPortFree+0xc0>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a06      	ldr	r2, [pc, #24]	; (8009580 <vPortFree+0xc0>)
 8009568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800956a:	f7fe fc8b 	bl	8007e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800956e:	bf00      	nop
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20001b34 	.word	0x20001b34
 800957c:	20001b24 	.word	0x20001b24
 8009580:	20001b30 	.word	0x20001b30

08009584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800958a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800958e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009590:	4b27      	ldr	r3, [pc, #156]	; (8009630 <prvHeapInit+0xac>)
 8009592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00c      	beq.n	80095b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3307      	adds	r3, #7
 80095a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0307 	bic.w	r3, r3, #7
 80095aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <prvHeapInit+0xac>)
 80095b4:	4413      	add	r3, r2
 80095b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80095bc:	4a1d      	ldr	r2, [pc, #116]	; (8009634 <prvHeapInit+0xb0>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <prvHeapInit+0xb0>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095d0:	2208      	movs	r2, #8
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0307 	bic.w	r3, r3, #7
 80095de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4a15      	ldr	r2, [pc, #84]	; (8009638 <prvHeapInit+0xb4>)
 80095e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095e6:	4b14      	ldr	r3, [pc, #80]	; (8009638 <prvHeapInit+0xb4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <prvHeapInit+0xb4>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009604:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <prvHeapInit+0xb4>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	4a0a      	ldr	r2, [pc, #40]	; (800963c <prvHeapInit+0xb8>)
 8009612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4a09      	ldr	r2, [pc, #36]	; (8009640 <prvHeapInit+0xbc>)
 800961a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <prvHeapInit+0xc0>)
 800961e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009622:	601a      	str	r2, [r3, #0]
}
 8009624:	bf00      	nop
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	20000f60 	.word	0x20000f60
 8009634:	20001b18 	.word	0x20001b18
 8009638:	20001b20 	.word	0x20001b20
 800963c:	20001b28 	.word	0x20001b28
 8009640:	20001b24 	.word	0x20001b24
 8009644:	20001b34 	.word	0x20001b34

08009648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009650:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <prvInsertBlockIntoFreeList+0xac>)
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	e002      	b.n	800965c <prvInsertBlockIntoFreeList+0x14>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d8f7      	bhi.n	8009656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d108      	bne.n	800968a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	441a      	add	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d118      	bne.n	80096d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b15      	ldr	r3, [pc, #84]	; (80096f8 <prvInsertBlockIntoFreeList+0xb0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d00d      	beq.n	80096c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	441a      	add	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e008      	b.n	80096d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <prvInsertBlockIntoFreeList+0xb0>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	e003      	b.n	80096d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d002      	beq.n	80096e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20001b18 	.word	0x20001b18
 80096f8:	20001b20 	.word	0x20001b20

080096fc <__errno>:
 80096fc:	4b01      	ldr	r3, [pc, #4]	; (8009704 <__errno+0x8>)
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	20000014 	.word	0x20000014

08009708 <__libc_init_array>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4d0d      	ldr	r5, [pc, #52]	; (8009740 <__libc_init_array+0x38>)
 800970c:	4c0d      	ldr	r4, [pc, #52]	; (8009744 <__libc_init_array+0x3c>)
 800970e:	1b64      	subs	r4, r4, r5
 8009710:	10a4      	asrs	r4, r4, #2
 8009712:	2600      	movs	r6, #0
 8009714:	42a6      	cmp	r6, r4
 8009716:	d109      	bne.n	800972c <__libc_init_array+0x24>
 8009718:	4d0b      	ldr	r5, [pc, #44]	; (8009748 <__libc_init_array+0x40>)
 800971a:	4c0c      	ldr	r4, [pc, #48]	; (800974c <__libc_init_array+0x44>)
 800971c:	f002 fd08 	bl	800c130 <_init>
 8009720:	1b64      	subs	r4, r4, r5
 8009722:	10a4      	asrs	r4, r4, #2
 8009724:	2600      	movs	r6, #0
 8009726:	42a6      	cmp	r6, r4
 8009728:	d105      	bne.n	8009736 <__libc_init_array+0x2e>
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009730:	4798      	blx	r3
 8009732:	3601      	adds	r6, #1
 8009734:	e7ee      	b.n	8009714 <__libc_init_array+0xc>
 8009736:	f855 3b04 	ldr.w	r3, [r5], #4
 800973a:	4798      	blx	r3
 800973c:	3601      	adds	r6, #1
 800973e:	e7f2      	b.n	8009726 <__libc_init_array+0x1e>
 8009740:	0800c65c 	.word	0x0800c65c
 8009744:	0800c65c 	.word	0x0800c65c
 8009748:	0800c65c 	.word	0x0800c65c
 800974c:	0800c660 	.word	0x0800c660

08009750 <memcpy>:
 8009750:	440a      	add	r2, r1
 8009752:	4291      	cmp	r1, r2
 8009754:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009758:	d100      	bne.n	800975c <memcpy+0xc>
 800975a:	4770      	bx	lr
 800975c:	b510      	push	{r4, lr}
 800975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009766:	4291      	cmp	r1, r2
 8009768:	d1f9      	bne.n	800975e <memcpy+0xe>
 800976a:	bd10      	pop	{r4, pc}

0800976c <memset>:
 800976c:	4402      	add	r2, r0
 800976e:	4603      	mov	r3, r0
 8009770:	4293      	cmp	r3, r2
 8009772:	d100      	bne.n	8009776 <memset+0xa>
 8009774:	4770      	bx	lr
 8009776:	f803 1b01 	strb.w	r1, [r3], #1
 800977a:	e7f9      	b.n	8009770 <memset+0x4>

0800977c <__cvt>:
 800977c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009780:	ec55 4b10 	vmov	r4, r5, d0
 8009784:	2d00      	cmp	r5, #0
 8009786:	460e      	mov	r6, r1
 8009788:	4619      	mov	r1, r3
 800978a:	462b      	mov	r3, r5
 800978c:	bfbb      	ittet	lt
 800978e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009792:	461d      	movlt	r5, r3
 8009794:	2300      	movge	r3, #0
 8009796:	232d      	movlt	r3, #45	; 0x2d
 8009798:	700b      	strb	r3, [r1, #0]
 800979a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097a0:	4691      	mov	r9, r2
 80097a2:	f023 0820 	bic.w	r8, r3, #32
 80097a6:	bfbc      	itt	lt
 80097a8:	4622      	movlt	r2, r4
 80097aa:	4614      	movlt	r4, r2
 80097ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b0:	d005      	beq.n	80097be <__cvt+0x42>
 80097b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097b6:	d100      	bne.n	80097ba <__cvt+0x3e>
 80097b8:	3601      	adds	r6, #1
 80097ba:	2102      	movs	r1, #2
 80097bc:	e000      	b.n	80097c0 <__cvt+0x44>
 80097be:	2103      	movs	r1, #3
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	ab02      	add	r3, sp, #8
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	ec45 4b10 	vmov	d0, r4, r5
 80097cc:	4653      	mov	r3, sl
 80097ce:	4632      	mov	r2, r6
 80097d0:	f000 fce2 	bl	800a198 <_dtoa_r>
 80097d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097d8:	4607      	mov	r7, r0
 80097da:	d102      	bne.n	80097e2 <__cvt+0x66>
 80097dc:	f019 0f01 	tst.w	r9, #1
 80097e0:	d022      	beq.n	8009828 <__cvt+0xac>
 80097e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097e6:	eb07 0906 	add.w	r9, r7, r6
 80097ea:	d110      	bne.n	800980e <__cvt+0x92>
 80097ec:	783b      	ldrb	r3, [r7, #0]
 80097ee:	2b30      	cmp	r3, #48	; 0x30
 80097f0:	d10a      	bne.n	8009808 <__cvt+0x8c>
 80097f2:	2200      	movs	r2, #0
 80097f4:	2300      	movs	r3, #0
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f7 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 80097fe:	b918      	cbnz	r0, 8009808 <__cvt+0x8c>
 8009800:	f1c6 0601 	rsb	r6, r6, #1
 8009804:	f8ca 6000 	str.w	r6, [sl]
 8009808:	f8da 3000 	ldr.w	r3, [sl]
 800980c:	4499      	add	r9, r3
 800980e:	2200      	movs	r2, #0
 8009810:	2300      	movs	r3, #0
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f7 f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800981a:	b108      	cbz	r0, 8009820 <__cvt+0xa4>
 800981c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009820:	2230      	movs	r2, #48	; 0x30
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	454b      	cmp	r3, r9
 8009826:	d307      	bcc.n	8009838 <__cvt+0xbc>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800982c:	1bdb      	subs	r3, r3, r7
 800982e:	4638      	mov	r0, r7
 8009830:	6013      	str	r3, [r2, #0]
 8009832:	b004      	add	sp, #16
 8009834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009838:	1c59      	adds	r1, r3, #1
 800983a:	9103      	str	r1, [sp, #12]
 800983c:	701a      	strb	r2, [r3, #0]
 800983e:	e7f0      	b.n	8009822 <__cvt+0xa6>

08009840 <__exponent>:
 8009840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009842:	4603      	mov	r3, r0
 8009844:	2900      	cmp	r1, #0
 8009846:	bfb8      	it	lt
 8009848:	4249      	neglt	r1, r1
 800984a:	f803 2b02 	strb.w	r2, [r3], #2
 800984e:	bfb4      	ite	lt
 8009850:	222d      	movlt	r2, #45	; 0x2d
 8009852:	222b      	movge	r2, #43	; 0x2b
 8009854:	2909      	cmp	r1, #9
 8009856:	7042      	strb	r2, [r0, #1]
 8009858:	dd2a      	ble.n	80098b0 <__exponent+0x70>
 800985a:	f10d 0407 	add.w	r4, sp, #7
 800985e:	46a4      	mov	ip, r4
 8009860:	270a      	movs	r7, #10
 8009862:	46a6      	mov	lr, r4
 8009864:	460a      	mov	r2, r1
 8009866:	fb91 f6f7 	sdiv	r6, r1, r7
 800986a:	fb07 1516 	mls	r5, r7, r6, r1
 800986e:	3530      	adds	r5, #48	; 0x30
 8009870:	2a63      	cmp	r2, #99	; 0x63
 8009872:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009876:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800987a:	4631      	mov	r1, r6
 800987c:	dcf1      	bgt.n	8009862 <__exponent+0x22>
 800987e:	3130      	adds	r1, #48	; 0x30
 8009880:	f1ae 0502 	sub.w	r5, lr, #2
 8009884:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009888:	1c44      	adds	r4, r0, #1
 800988a:	4629      	mov	r1, r5
 800988c:	4561      	cmp	r1, ip
 800988e:	d30a      	bcc.n	80098a6 <__exponent+0x66>
 8009890:	f10d 0209 	add.w	r2, sp, #9
 8009894:	eba2 020e 	sub.w	r2, r2, lr
 8009898:	4565      	cmp	r5, ip
 800989a:	bf88      	it	hi
 800989c:	2200      	movhi	r2, #0
 800989e:	4413      	add	r3, r2
 80098a0:	1a18      	subs	r0, r3, r0
 80098a2:	b003      	add	sp, #12
 80098a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098ae:	e7ed      	b.n	800988c <__exponent+0x4c>
 80098b0:	2330      	movs	r3, #48	; 0x30
 80098b2:	3130      	adds	r1, #48	; 0x30
 80098b4:	7083      	strb	r3, [r0, #2]
 80098b6:	70c1      	strb	r1, [r0, #3]
 80098b8:	1d03      	adds	r3, r0, #4
 80098ba:	e7f1      	b.n	80098a0 <__exponent+0x60>

080098bc <_printf_float>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	ed2d 8b02 	vpush	{d8}
 80098c4:	b08d      	sub	sp, #52	; 0x34
 80098c6:	460c      	mov	r4, r1
 80098c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098cc:	4616      	mov	r6, r2
 80098ce:	461f      	mov	r7, r3
 80098d0:	4605      	mov	r5, r0
 80098d2:	f001 fb43 	bl	800af5c <_localeconv_r>
 80098d6:	f8d0 a000 	ldr.w	sl, [r0]
 80098da:	4650      	mov	r0, sl
 80098dc:	f7f6 fc78 	bl	80001d0 <strlen>
 80098e0:	2300      	movs	r3, #0
 80098e2:	930a      	str	r3, [sp, #40]	; 0x28
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	f8d8 3000 	ldr.w	r3, [r8]
 80098ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098f0:	3307      	adds	r3, #7
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	f103 0208 	add.w	r2, r3, #8
 80098fa:	f8c8 2000 	str.w	r2, [r8]
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009906:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800990a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800990e:	9307      	str	r3, [sp, #28]
 8009910:	f8cd 8018 	str.w	r8, [sp, #24]
 8009914:	ee08 0a10 	vmov	s16, r0
 8009918:	4b9f      	ldr	r3, [pc, #636]	; (8009b98 <_printf_float+0x2dc>)
 800991a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800991e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009922:	f7f7 f903 	bl	8000b2c <__aeabi_dcmpun>
 8009926:	bb88      	cbnz	r0, 800998c <_printf_float+0xd0>
 8009928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800992c:	4b9a      	ldr	r3, [pc, #616]	; (8009b98 <_printf_float+0x2dc>)
 800992e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009932:	f7f7 f8dd 	bl	8000af0 <__aeabi_dcmple>
 8009936:	bb48      	cbnz	r0, 800998c <_printf_float+0xd0>
 8009938:	2200      	movs	r2, #0
 800993a:	2300      	movs	r3, #0
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7f7 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8009944:	b110      	cbz	r0, 800994c <_printf_float+0x90>
 8009946:	232d      	movs	r3, #45	; 0x2d
 8009948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994c:	4b93      	ldr	r3, [pc, #588]	; (8009b9c <_printf_float+0x2e0>)
 800994e:	4894      	ldr	r0, [pc, #592]	; (8009ba0 <_printf_float+0x2e4>)
 8009950:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009954:	bf94      	ite	ls
 8009956:	4698      	movls	r8, r3
 8009958:	4680      	movhi	r8, r0
 800995a:	2303      	movs	r3, #3
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	9b05      	ldr	r3, [sp, #20]
 8009960:	f023 0204 	bic.w	r2, r3, #4
 8009964:	6022      	str	r2, [r4, #0]
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	9700      	str	r7, [sp, #0]
 800996c:	4633      	mov	r3, r6
 800996e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009970:	4621      	mov	r1, r4
 8009972:	4628      	mov	r0, r5
 8009974:	f000 f9d8 	bl	8009d28 <_printf_common>
 8009978:	3001      	adds	r0, #1
 800997a:	f040 8090 	bne.w	8009a9e <_printf_float+0x1e2>
 800997e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009982:	b00d      	add	sp, #52	; 0x34
 8009984:	ecbd 8b02 	vpop	{d8}
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	4642      	mov	r2, r8
 800998e:	464b      	mov	r3, r9
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f8ca 	bl	8000b2c <__aeabi_dcmpun>
 8009998:	b140      	cbz	r0, 80099ac <_printf_float+0xf0>
 800999a:	464b      	mov	r3, r9
 800999c:	2b00      	cmp	r3, #0
 800999e:	bfbc      	itt	lt
 80099a0:	232d      	movlt	r3, #45	; 0x2d
 80099a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099a6:	487f      	ldr	r0, [pc, #508]	; (8009ba4 <_printf_float+0x2e8>)
 80099a8:	4b7f      	ldr	r3, [pc, #508]	; (8009ba8 <_printf_float+0x2ec>)
 80099aa:	e7d1      	b.n	8009950 <_printf_float+0x94>
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099b2:	9206      	str	r2, [sp, #24]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	d13f      	bne.n	8009a38 <_printf_float+0x17c>
 80099b8:	2306      	movs	r3, #6
 80099ba:	6063      	str	r3, [r4, #4]
 80099bc:	9b05      	ldr	r3, [sp, #20]
 80099be:	6861      	ldr	r1, [r4, #4]
 80099c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099c4:	2300      	movs	r3, #0
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	ab0a      	add	r3, sp, #40	; 0x28
 80099ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099ce:	ab09      	add	r3, sp, #36	; 0x24
 80099d0:	ec49 8b10 	vmov	d0, r8, r9
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	6022      	str	r2, [r4, #0]
 80099d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099dc:	4628      	mov	r0, r5
 80099de:	f7ff fecd 	bl	800977c <__cvt>
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099e6:	2b47      	cmp	r3, #71	; 0x47
 80099e8:	4680      	mov	r8, r0
 80099ea:	d108      	bne.n	80099fe <_printf_float+0x142>
 80099ec:	1cc8      	adds	r0, r1, #3
 80099ee:	db02      	blt.n	80099f6 <_printf_float+0x13a>
 80099f0:	6863      	ldr	r3, [r4, #4]
 80099f2:	4299      	cmp	r1, r3
 80099f4:	dd41      	ble.n	8009a7a <_printf_float+0x1be>
 80099f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80099fa:	fa5f fb8b 	uxtb.w	fp, fp
 80099fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a02:	d820      	bhi.n	8009a46 <_printf_float+0x18a>
 8009a04:	3901      	subs	r1, #1
 8009a06:	465a      	mov	r2, fp
 8009a08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a0c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a0e:	f7ff ff17 	bl	8009840 <__exponent>
 8009a12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a14:	1813      	adds	r3, r2, r0
 8009a16:	2a01      	cmp	r2, #1
 8009a18:	4681      	mov	r9, r0
 8009a1a:	6123      	str	r3, [r4, #16]
 8009a1c:	dc02      	bgt.n	8009a24 <_printf_float+0x168>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	07d2      	lsls	r2, r2, #31
 8009a22:	d501      	bpl.n	8009a28 <_printf_float+0x16c>
 8009a24:	3301      	adds	r3, #1
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d09c      	beq.n	800996a <_printf_float+0xae>
 8009a30:	232d      	movs	r3, #45	; 0x2d
 8009a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a36:	e798      	b.n	800996a <_printf_float+0xae>
 8009a38:	9a06      	ldr	r2, [sp, #24]
 8009a3a:	2a47      	cmp	r2, #71	; 0x47
 8009a3c:	d1be      	bne.n	80099bc <_printf_float+0x100>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1bc      	bne.n	80099bc <_printf_float+0x100>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e7b9      	b.n	80099ba <_printf_float+0xfe>
 8009a46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a4a:	d118      	bne.n	8009a7e <_printf_float+0x1c2>
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	dd0b      	ble.n	8009a6a <_printf_float+0x1ae>
 8009a52:	6121      	str	r1, [r4, #16]
 8009a54:	b913      	cbnz	r3, 8009a5c <_printf_float+0x1a0>
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	07d0      	lsls	r0, r2, #31
 8009a5a:	d502      	bpl.n	8009a62 <_printf_float+0x1a6>
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	440b      	add	r3, r1
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a64:	f04f 0900 	mov.w	r9, #0
 8009a68:	e7de      	b.n	8009a28 <_printf_float+0x16c>
 8009a6a:	b913      	cbnz	r3, 8009a72 <_printf_float+0x1b6>
 8009a6c:	6822      	ldr	r2, [r4, #0]
 8009a6e:	07d2      	lsls	r2, r2, #31
 8009a70:	d501      	bpl.n	8009a76 <_printf_float+0x1ba>
 8009a72:	3302      	adds	r3, #2
 8009a74:	e7f4      	b.n	8009a60 <_printf_float+0x1a4>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e7f2      	b.n	8009a60 <_printf_float+0x1a4>
 8009a7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a80:	4299      	cmp	r1, r3
 8009a82:	db05      	blt.n	8009a90 <_printf_float+0x1d4>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	6121      	str	r1, [r4, #16]
 8009a88:	07d8      	lsls	r0, r3, #31
 8009a8a:	d5ea      	bpl.n	8009a62 <_printf_float+0x1a6>
 8009a8c:	1c4b      	adds	r3, r1, #1
 8009a8e:	e7e7      	b.n	8009a60 <_printf_float+0x1a4>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	bfd4      	ite	le
 8009a94:	f1c1 0202 	rsble	r2, r1, #2
 8009a98:	2201      	movgt	r2, #1
 8009a9a:	4413      	add	r3, r2
 8009a9c:	e7e0      	b.n	8009a60 <_printf_float+0x1a4>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	055a      	lsls	r2, r3, #21
 8009aa2:	d407      	bmi.n	8009ab4 <_printf_float+0x1f8>
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	4642      	mov	r2, r8
 8009aa8:	4631      	mov	r1, r6
 8009aaa:	4628      	mov	r0, r5
 8009aac:	47b8      	blx	r7
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d12c      	bne.n	8009b0c <_printf_float+0x250>
 8009ab2:	e764      	b.n	800997e <_printf_float+0xc2>
 8009ab4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ab8:	f240 80e0 	bls.w	8009c7c <_printf_float+0x3c0>
 8009abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f7f7 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d034      	beq.n	8009b36 <_printf_float+0x27a>
 8009acc:	4a37      	ldr	r2, [pc, #220]	; (8009bac <_printf_float+0x2f0>)
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4631      	mov	r1, r6
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	47b8      	blx	r7
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	f43f af51 	beq.w	800997e <_printf_float+0xc2>
 8009adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	db02      	blt.n	8009aea <_printf_float+0x22e>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	07d8      	lsls	r0, r3, #31
 8009ae8:	d510      	bpl.n	8009b0c <_printf_float+0x250>
 8009aea:	ee18 3a10 	vmov	r3, s16
 8009aee:	4652      	mov	r2, sl
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af41 	beq.w	800997e <_printf_float+0xc2>
 8009afc:	f04f 0800 	mov.w	r8, #0
 8009b00:	f104 091a 	add.w	r9, r4, #26
 8009b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4543      	cmp	r3, r8
 8009b0a:	dc09      	bgt.n	8009b20 <_printf_float+0x264>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	079b      	lsls	r3, r3, #30
 8009b10:	f100 8105 	bmi.w	8009d1e <_printf_float+0x462>
 8009b14:	68e0      	ldr	r0, [r4, #12]
 8009b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b18:	4298      	cmp	r0, r3
 8009b1a:	bfb8      	it	lt
 8009b1c:	4618      	movlt	r0, r3
 8009b1e:	e730      	b.n	8009982 <_printf_float+0xc6>
 8009b20:	2301      	movs	r3, #1
 8009b22:	464a      	mov	r2, r9
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af27 	beq.w	800997e <_printf_float+0xc2>
 8009b30:	f108 0801 	add.w	r8, r8, #1
 8009b34:	e7e6      	b.n	8009b04 <_printf_float+0x248>
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dc39      	bgt.n	8009bb0 <_printf_float+0x2f4>
 8009b3c:	4a1b      	ldr	r2, [pc, #108]	; (8009bac <_printf_float+0x2f0>)
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f af19 	beq.w	800997e <_printf_float+0xc2>
 8009b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b50:	4313      	orrs	r3, r2
 8009b52:	d102      	bne.n	8009b5a <_printf_float+0x29e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d5d8      	bpl.n	8009b0c <_printf_float+0x250>
 8009b5a:	ee18 3a10 	vmov	r3, s16
 8009b5e:	4652      	mov	r2, sl
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f af09 	beq.w	800997e <_printf_float+0xc2>
 8009b6c:	f04f 0900 	mov.w	r9, #0
 8009b70:	f104 0a1a 	add.w	sl, r4, #26
 8009b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b76:	425b      	negs	r3, r3
 8009b78:	454b      	cmp	r3, r9
 8009b7a:	dc01      	bgt.n	8009b80 <_printf_float+0x2c4>
 8009b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7e:	e792      	b.n	8009aa6 <_printf_float+0x1ea>
 8009b80:	2301      	movs	r3, #1
 8009b82:	4652      	mov	r2, sl
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f aef7 	beq.w	800997e <_printf_float+0xc2>
 8009b90:	f109 0901 	add.w	r9, r9, #1
 8009b94:	e7ee      	b.n	8009b74 <_printf_float+0x2b8>
 8009b96:	bf00      	nop
 8009b98:	7fefffff 	.word	0x7fefffff
 8009b9c:	0800c274 	.word	0x0800c274
 8009ba0:	0800c278 	.word	0x0800c278
 8009ba4:	0800c280 	.word	0x0800c280
 8009ba8:	0800c27c 	.word	0x0800c27c
 8009bac:	0800c284 	.word	0x0800c284
 8009bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	bfa8      	it	ge
 8009bb8:	461a      	movge	r2, r3
 8009bba:	2a00      	cmp	r2, #0
 8009bbc:	4691      	mov	r9, r2
 8009bbe:	dc37      	bgt.n	8009c30 <_printf_float+0x374>
 8009bc0:	f04f 0b00 	mov.w	fp, #0
 8009bc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc8:	f104 021a 	add.w	r2, r4, #26
 8009bcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	eba3 0309 	sub.w	r3, r3, r9
 8009bd4:	455b      	cmp	r3, fp
 8009bd6:	dc33      	bgt.n	8009c40 <_printf_float+0x384>
 8009bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	db3b      	blt.n	8009c58 <_printf_float+0x39c>
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	07da      	lsls	r2, r3, #31
 8009be4:	d438      	bmi.n	8009c58 <_printf_float+0x39c>
 8009be6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	eba2 0901 	sub.w	r9, r2, r1
 8009bf2:	4599      	cmp	r9, r3
 8009bf4:	bfa8      	it	ge
 8009bf6:	4699      	movge	r9, r3
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	dc35      	bgt.n	8009c6a <_printf_float+0x3ae>
 8009bfe:	f04f 0800 	mov.w	r8, #0
 8009c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c06:	f104 0a1a 	add.w	sl, r4, #26
 8009c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c0e:	1a9b      	subs	r3, r3, r2
 8009c10:	eba3 0309 	sub.w	r3, r3, r9
 8009c14:	4543      	cmp	r3, r8
 8009c16:	f77f af79 	ble.w	8009b0c <_printf_float+0x250>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4628      	mov	r0, r5
 8009c22:	47b8      	blx	r7
 8009c24:	3001      	adds	r0, #1
 8009c26:	f43f aeaa 	beq.w	800997e <_printf_float+0xc2>
 8009c2a:	f108 0801 	add.w	r8, r8, #1
 8009c2e:	e7ec      	b.n	8009c0a <_printf_float+0x34e>
 8009c30:	4613      	mov	r3, r2
 8009c32:	4631      	mov	r1, r6
 8009c34:	4642      	mov	r2, r8
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d1c0      	bne.n	8009bc0 <_printf_float+0x304>
 8009c3e:	e69e      	b.n	800997e <_printf_float+0xc2>
 8009c40:	2301      	movs	r3, #1
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	9205      	str	r2, [sp, #20]
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f43f ae97 	beq.w	800997e <_printf_float+0xc2>
 8009c50:	9a05      	ldr	r2, [sp, #20]
 8009c52:	f10b 0b01 	add.w	fp, fp, #1
 8009c56:	e7b9      	b.n	8009bcc <_printf_float+0x310>
 8009c58:	ee18 3a10 	vmov	r3, s16
 8009c5c:	4652      	mov	r2, sl
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4628      	mov	r0, r5
 8009c62:	47b8      	blx	r7
 8009c64:	3001      	adds	r0, #1
 8009c66:	d1be      	bne.n	8009be6 <_printf_float+0x32a>
 8009c68:	e689      	b.n	800997e <_printf_float+0xc2>
 8009c6a:	9a05      	ldr	r2, [sp, #20]
 8009c6c:	464b      	mov	r3, r9
 8009c6e:	4442      	add	r2, r8
 8009c70:	4631      	mov	r1, r6
 8009c72:	4628      	mov	r0, r5
 8009c74:	47b8      	blx	r7
 8009c76:	3001      	adds	r0, #1
 8009c78:	d1c1      	bne.n	8009bfe <_printf_float+0x342>
 8009c7a:	e680      	b.n	800997e <_printf_float+0xc2>
 8009c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c7e:	2a01      	cmp	r2, #1
 8009c80:	dc01      	bgt.n	8009c86 <_printf_float+0x3ca>
 8009c82:	07db      	lsls	r3, r3, #31
 8009c84:	d538      	bpl.n	8009cf8 <_printf_float+0x43c>
 8009c86:	2301      	movs	r3, #1
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	f43f ae74 	beq.w	800997e <_printf_float+0xc2>
 8009c96:	ee18 3a10 	vmov	r3, s16
 8009c9a:	4652      	mov	r2, sl
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	47b8      	blx	r7
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	f43f ae6b 	beq.w	800997e <_printf_float+0xc2>
 8009ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cac:	2200      	movs	r2, #0
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f7f6 ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb4:	b9d8      	cbnz	r0, 8009cee <_printf_float+0x432>
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	f108 0201 	add.w	r2, r8, #1
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d10e      	bne.n	8009ce6 <_printf_float+0x42a>
 8009cc8:	e659      	b.n	800997e <_printf_float+0xc2>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae52 	beq.w	800997e <_printf_float+0xc2>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	4543      	cmp	r3, r8
 8009ce4:	dcf1      	bgt.n	8009cca <_printf_float+0x40e>
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cec:	e6dc      	b.n	8009aa8 <_printf_float+0x1ec>
 8009cee:	f04f 0800 	mov.w	r8, #0
 8009cf2:	f104 0a1a 	add.w	sl, r4, #26
 8009cf6:	e7f2      	b.n	8009cde <_printf_float+0x422>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4642      	mov	r2, r8
 8009cfc:	e7df      	b.n	8009cbe <_printf_float+0x402>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	464a      	mov	r2, r9
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f43f ae38 	beq.w	800997e <_printf_float+0xc2>
 8009d0e:	f108 0801 	add.w	r8, r8, #1
 8009d12:	68e3      	ldr	r3, [r4, #12]
 8009d14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d16:	1a5b      	subs	r3, r3, r1
 8009d18:	4543      	cmp	r3, r8
 8009d1a:	dcf0      	bgt.n	8009cfe <_printf_float+0x442>
 8009d1c:	e6fa      	b.n	8009b14 <_printf_float+0x258>
 8009d1e:	f04f 0800 	mov.w	r8, #0
 8009d22:	f104 0919 	add.w	r9, r4, #25
 8009d26:	e7f4      	b.n	8009d12 <_printf_float+0x456>

08009d28 <_printf_common>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	4616      	mov	r6, r2
 8009d2e:	4699      	mov	r9, r3
 8009d30:	688a      	ldr	r2, [r1, #8]
 8009d32:	690b      	ldr	r3, [r1, #16]
 8009d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	bfb8      	it	lt
 8009d3c:	4613      	movlt	r3, r2
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d44:	4607      	mov	r7, r0
 8009d46:	460c      	mov	r4, r1
 8009d48:	b10a      	cbz	r2, 8009d4e <_printf_common+0x26>
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	0699      	lsls	r1, r3, #26
 8009d52:	bf42      	ittt	mi
 8009d54:	6833      	ldrmi	r3, [r6, #0]
 8009d56:	3302      	addmi	r3, #2
 8009d58:	6033      	strmi	r3, [r6, #0]
 8009d5a:	6825      	ldr	r5, [r4, #0]
 8009d5c:	f015 0506 	ands.w	r5, r5, #6
 8009d60:	d106      	bne.n	8009d70 <_printf_common+0x48>
 8009d62:	f104 0a19 	add.w	sl, r4, #25
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	6832      	ldr	r2, [r6, #0]
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	42ab      	cmp	r3, r5
 8009d6e:	dc26      	bgt.n	8009dbe <_printf_common+0x96>
 8009d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d74:	1e13      	subs	r3, r2, #0
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	bf18      	it	ne
 8009d7a:	2301      	movne	r3, #1
 8009d7c:	0692      	lsls	r2, r2, #26
 8009d7e:	d42b      	bmi.n	8009dd8 <_printf_common+0xb0>
 8009d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d84:	4649      	mov	r1, r9
 8009d86:	4638      	mov	r0, r7
 8009d88:	47c0      	blx	r8
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d01e      	beq.n	8009dcc <_printf_common+0xa4>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	68e5      	ldr	r5, [r4, #12]
 8009d92:	6832      	ldr	r2, [r6, #0]
 8009d94:	f003 0306 	and.w	r3, r3, #6
 8009d98:	2b04      	cmp	r3, #4
 8009d9a:	bf08      	it	eq
 8009d9c:	1aad      	subeq	r5, r5, r2
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	6922      	ldr	r2, [r4, #16]
 8009da2:	bf0c      	ite	eq
 8009da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da8:	2500      	movne	r5, #0
 8009daa:	4293      	cmp	r3, r2
 8009dac:	bfc4      	itt	gt
 8009dae:	1a9b      	subgt	r3, r3, r2
 8009db0:	18ed      	addgt	r5, r5, r3
 8009db2:	2600      	movs	r6, #0
 8009db4:	341a      	adds	r4, #26
 8009db6:	42b5      	cmp	r5, r6
 8009db8:	d11a      	bne.n	8009df0 <_printf_common+0xc8>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e008      	b.n	8009dd0 <_printf_common+0xa8>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	47c0      	blx	r8
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d103      	bne.n	8009dd4 <_printf_common+0xac>
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	e7c6      	b.n	8009d66 <_printf_common+0x3e>
 8009dd8:	18e1      	adds	r1, r4, r3
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	2030      	movs	r0, #48	; 0x30
 8009dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009de2:	4422      	add	r2, r4
 8009de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dec:	3302      	adds	r3, #2
 8009dee:	e7c7      	b.n	8009d80 <_printf_common+0x58>
 8009df0:	2301      	movs	r3, #1
 8009df2:	4622      	mov	r2, r4
 8009df4:	4649      	mov	r1, r9
 8009df6:	4638      	mov	r0, r7
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d0e6      	beq.n	8009dcc <_printf_common+0xa4>
 8009dfe:	3601      	adds	r6, #1
 8009e00:	e7d9      	b.n	8009db6 <_printf_common+0x8e>
	...

08009e04 <_printf_i>:
 8009e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	4691      	mov	r9, r2
 8009e0c:	7e27      	ldrb	r7, [r4, #24]
 8009e0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e10:	2f78      	cmp	r7, #120	; 0x78
 8009e12:	4680      	mov	r8, r0
 8009e14:	469a      	mov	sl, r3
 8009e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e1a:	d807      	bhi.n	8009e2c <_printf_i+0x28>
 8009e1c:	2f62      	cmp	r7, #98	; 0x62
 8009e1e:	d80a      	bhi.n	8009e36 <_printf_i+0x32>
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	f000 80d8 	beq.w	8009fd6 <_printf_i+0x1d2>
 8009e26:	2f58      	cmp	r7, #88	; 0x58
 8009e28:	f000 80a3 	beq.w	8009f72 <_printf_i+0x16e>
 8009e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e34:	e03a      	b.n	8009eac <_printf_i+0xa8>
 8009e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e3a:	2b15      	cmp	r3, #21
 8009e3c:	d8f6      	bhi.n	8009e2c <_printf_i+0x28>
 8009e3e:	a001      	add	r0, pc, #4	; (adr r0, 8009e44 <_printf_i+0x40>)
 8009e40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e44:	08009e9d 	.word	0x08009e9d
 8009e48:	08009eb1 	.word	0x08009eb1
 8009e4c:	08009e2d 	.word	0x08009e2d
 8009e50:	08009e2d 	.word	0x08009e2d
 8009e54:	08009e2d 	.word	0x08009e2d
 8009e58:	08009e2d 	.word	0x08009e2d
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009e2d 	.word	0x08009e2d
 8009e64:	08009e2d 	.word	0x08009e2d
 8009e68:	08009e2d 	.word	0x08009e2d
 8009e6c:	08009e2d 	.word	0x08009e2d
 8009e70:	08009fbd 	.word	0x08009fbd
 8009e74:	08009ee1 	.word	0x08009ee1
 8009e78:	08009f9f 	.word	0x08009f9f
 8009e7c:	08009e2d 	.word	0x08009e2d
 8009e80:	08009e2d 	.word	0x08009e2d
 8009e84:	08009fdf 	.word	0x08009fdf
 8009e88:	08009e2d 	.word	0x08009e2d
 8009e8c:	08009ee1 	.word	0x08009ee1
 8009e90:	08009e2d 	.word	0x08009e2d
 8009e94:	08009e2d 	.word	0x08009e2d
 8009e98:	08009fa7 	.word	0x08009fa7
 8009e9c:	680b      	ldr	r3, [r1, #0]
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	600a      	str	r2, [r1, #0]
 8009ea4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009eac:	2301      	movs	r3, #1
 8009eae:	e0a3      	b.n	8009ff8 <_printf_i+0x1f4>
 8009eb0:	6825      	ldr	r5, [r4, #0]
 8009eb2:	6808      	ldr	r0, [r1, #0]
 8009eb4:	062e      	lsls	r6, r5, #24
 8009eb6:	f100 0304 	add.w	r3, r0, #4
 8009eba:	d50a      	bpl.n	8009ed2 <_printf_i+0xce>
 8009ebc:	6805      	ldr	r5, [r0, #0]
 8009ebe:	600b      	str	r3, [r1, #0]
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	da03      	bge.n	8009ecc <_printf_i+0xc8>
 8009ec4:	232d      	movs	r3, #45	; 0x2d
 8009ec6:	426d      	negs	r5, r5
 8009ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ecc:	485e      	ldr	r0, [pc, #376]	; (800a048 <_printf_i+0x244>)
 8009ece:	230a      	movs	r3, #10
 8009ed0:	e019      	b.n	8009f06 <_printf_i+0x102>
 8009ed2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ed6:	6805      	ldr	r5, [r0, #0]
 8009ed8:	600b      	str	r3, [r1, #0]
 8009eda:	bf18      	it	ne
 8009edc:	b22d      	sxthne	r5, r5
 8009ede:	e7ef      	b.n	8009ec0 <_printf_i+0xbc>
 8009ee0:	680b      	ldr	r3, [r1, #0]
 8009ee2:	6825      	ldr	r5, [r4, #0]
 8009ee4:	1d18      	adds	r0, r3, #4
 8009ee6:	6008      	str	r0, [r1, #0]
 8009ee8:	0628      	lsls	r0, r5, #24
 8009eea:	d501      	bpl.n	8009ef0 <_printf_i+0xec>
 8009eec:	681d      	ldr	r5, [r3, #0]
 8009eee:	e002      	b.n	8009ef6 <_printf_i+0xf2>
 8009ef0:	0669      	lsls	r1, r5, #25
 8009ef2:	d5fb      	bpl.n	8009eec <_printf_i+0xe8>
 8009ef4:	881d      	ldrh	r5, [r3, #0]
 8009ef6:	4854      	ldr	r0, [pc, #336]	; (800a048 <_printf_i+0x244>)
 8009ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8009efa:	bf0c      	ite	eq
 8009efc:	2308      	moveq	r3, #8
 8009efe:	230a      	movne	r3, #10
 8009f00:	2100      	movs	r1, #0
 8009f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f06:	6866      	ldr	r6, [r4, #4]
 8009f08:	60a6      	str	r6, [r4, #8]
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	bfa2      	ittt	ge
 8009f0e:	6821      	ldrge	r1, [r4, #0]
 8009f10:	f021 0104 	bicge.w	r1, r1, #4
 8009f14:	6021      	strge	r1, [r4, #0]
 8009f16:	b90d      	cbnz	r5, 8009f1c <_printf_i+0x118>
 8009f18:	2e00      	cmp	r6, #0
 8009f1a:	d04d      	beq.n	8009fb8 <_printf_i+0x1b4>
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f22:	fb03 5711 	mls	r7, r3, r1, r5
 8009f26:	5dc7      	ldrb	r7, [r0, r7]
 8009f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f2c:	462f      	mov	r7, r5
 8009f2e:	42bb      	cmp	r3, r7
 8009f30:	460d      	mov	r5, r1
 8009f32:	d9f4      	bls.n	8009f1e <_printf_i+0x11a>
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d10b      	bne.n	8009f50 <_printf_i+0x14c>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	07df      	lsls	r7, r3, #31
 8009f3c:	d508      	bpl.n	8009f50 <_printf_i+0x14c>
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	6861      	ldr	r1, [r4, #4]
 8009f42:	4299      	cmp	r1, r3
 8009f44:	bfde      	ittt	le
 8009f46:	2330      	movle	r3, #48	; 0x30
 8009f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f4c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009f50:	1b92      	subs	r2, r2, r6
 8009f52:	6122      	str	r2, [r4, #16]
 8009f54:	f8cd a000 	str.w	sl, [sp]
 8009f58:	464b      	mov	r3, r9
 8009f5a:	aa03      	add	r2, sp, #12
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7ff fee2 	bl	8009d28 <_printf_common>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d14c      	bne.n	800a002 <_printf_i+0x1fe>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f6c:	b004      	add	sp, #16
 8009f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f72:	4835      	ldr	r0, [pc, #212]	; (800a048 <_printf_i+0x244>)
 8009f74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	680e      	ldr	r6, [r1, #0]
 8009f7c:	061f      	lsls	r7, r3, #24
 8009f7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f82:	600e      	str	r6, [r1, #0]
 8009f84:	d514      	bpl.n	8009fb0 <_printf_i+0x1ac>
 8009f86:	07d9      	lsls	r1, r3, #31
 8009f88:	bf44      	itt	mi
 8009f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f8e:	6023      	strmi	r3, [r4, #0]
 8009f90:	b91d      	cbnz	r5, 8009f9a <_printf_i+0x196>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	f023 0320 	bic.w	r3, r3, #32
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	e7b0      	b.n	8009f00 <_printf_i+0xfc>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	f043 0320 	orr.w	r3, r3, #32
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	2378      	movs	r3, #120	; 0x78
 8009fa8:	4828      	ldr	r0, [pc, #160]	; (800a04c <_printf_i+0x248>)
 8009faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fae:	e7e3      	b.n	8009f78 <_printf_i+0x174>
 8009fb0:	065e      	lsls	r6, r3, #25
 8009fb2:	bf48      	it	mi
 8009fb4:	b2ad      	uxthmi	r5, r5
 8009fb6:	e7e6      	b.n	8009f86 <_printf_i+0x182>
 8009fb8:	4616      	mov	r6, r2
 8009fba:	e7bb      	b.n	8009f34 <_printf_i+0x130>
 8009fbc:	680b      	ldr	r3, [r1, #0]
 8009fbe:	6826      	ldr	r6, [r4, #0]
 8009fc0:	6960      	ldr	r0, [r4, #20]
 8009fc2:	1d1d      	adds	r5, r3, #4
 8009fc4:	600d      	str	r5, [r1, #0]
 8009fc6:	0635      	lsls	r5, r6, #24
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	d501      	bpl.n	8009fd0 <_printf_i+0x1cc>
 8009fcc:	6018      	str	r0, [r3, #0]
 8009fce:	e002      	b.n	8009fd6 <_printf_i+0x1d2>
 8009fd0:	0671      	lsls	r1, r6, #25
 8009fd2:	d5fb      	bpl.n	8009fcc <_printf_i+0x1c8>
 8009fd4:	8018      	strh	r0, [r3, #0]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	4616      	mov	r6, r2
 8009fdc:	e7ba      	b.n	8009f54 <_printf_i+0x150>
 8009fde:	680b      	ldr	r3, [r1, #0]
 8009fe0:	1d1a      	adds	r2, r3, #4
 8009fe2:	600a      	str	r2, [r1, #0]
 8009fe4:	681e      	ldr	r6, [r3, #0]
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	2100      	movs	r1, #0
 8009fea:	4630      	mov	r0, r6
 8009fec:	f7f6 f8f8 	bl	80001e0 <memchr>
 8009ff0:	b108      	cbz	r0, 8009ff6 <_printf_i+0x1f2>
 8009ff2:	1b80      	subs	r0, r0, r6
 8009ff4:	6060      	str	r0, [r4, #4]
 8009ff6:	6863      	ldr	r3, [r4, #4]
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a000:	e7a8      	b.n	8009f54 <_printf_i+0x150>
 800a002:	6923      	ldr	r3, [r4, #16]
 800a004:	4632      	mov	r2, r6
 800a006:	4649      	mov	r1, r9
 800a008:	4640      	mov	r0, r8
 800a00a:	47d0      	blx	sl
 800a00c:	3001      	adds	r0, #1
 800a00e:	d0ab      	beq.n	8009f68 <_printf_i+0x164>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	079b      	lsls	r3, r3, #30
 800a014:	d413      	bmi.n	800a03e <_printf_i+0x23a>
 800a016:	68e0      	ldr	r0, [r4, #12]
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	4298      	cmp	r0, r3
 800a01c:	bfb8      	it	lt
 800a01e:	4618      	movlt	r0, r3
 800a020:	e7a4      	b.n	8009f6c <_printf_i+0x168>
 800a022:	2301      	movs	r3, #1
 800a024:	4632      	mov	r2, r6
 800a026:	4649      	mov	r1, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	47d0      	blx	sl
 800a02c:	3001      	adds	r0, #1
 800a02e:	d09b      	beq.n	8009f68 <_printf_i+0x164>
 800a030:	3501      	adds	r5, #1
 800a032:	68e3      	ldr	r3, [r4, #12]
 800a034:	9903      	ldr	r1, [sp, #12]
 800a036:	1a5b      	subs	r3, r3, r1
 800a038:	42ab      	cmp	r3, r5
 800a03a:	dcf2      	bgt.n	800a022 <_printf_i+0x21e>
 800a03c:	e7eb      	b.n	800a016 <_printf_i+0x212>
 800a03e:	2500      	movs	r5, #0
 800a040:	f104 0619 	add.w	r6, r4, #25
 800a044:	e7f5      	b.n	800a032 <_printf_i+0x22e>
 800a046:	bf00      	nop
 800a048:	0800c286 	.word	0x0800c286
 800a04c:	0800c297 	.word	0x0800c297

0800a050 <iprintf>:
 800a050:	b40f      	push	{r0, r1, r2, r3}
 800a052:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <iprintf+0x2c>)
 800a054:	b513      	push	{r0, r1, r4, lr}
 800a056:	681c      	ldr	r4, [r3, #0]
 800a058:	b124      	cbz	r4, 800a064 <iprintf+0x14>
 800a05a:	69a3      	ldr	r3, [r4, #24]
 800a05c:	b913      	cbnz	r3, 800a064 <iprintf+0x14>
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 fede 	bl	800ae20 <__sinit>
 800a064:	ab05      	add	r3, sp, #20
 800a066:	9a04      	ldr	r2, [sp, #16]
 800a068:	68a1      	ldr	r1, [r4, #8]
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	4620      	mov	r0, r4
 800a06e:	f001 fbe7 	bl	800b840 <_vfiprintf_r>
 800a072:	b002      	add	sp, #8
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	b004      	add	sp, #16
 800a07a:	4770      	bx	lr
 800a07c:	20000014 	.word	0x20000014

0800a080 <quorem>:
 800a080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	6903      	ldr	r3, [r0, #16]
 800a086:	690c      	ldr	r4, [r1, #16]
 800a088:	42a3      	cmp	r3, r4
 800a08a:	4607      	mov	r7, r0
 800a08c:	f2c0 8081 	blt.w	800a192 <quorem+0x112>
 800a090:	3c01      	subs	r4, #1
 800a092:	f101 0814 	add.w	r8, r1, #20
 800a096:	f100 0514 	add.w	r5, r0, #20
 800a09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0b8:	d331      	bcc.n	800a11e <quorem+0x9e>
 800a0ba:	f04f 0e00 	mov.w	lr, #0
 800a0be:	4640      	mov	r0, r8
 800a0c0:	46ac      	mov	ip, r5
 800a0c2:	46f2      	mov	sl, lr
 800a0c4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0c8:	b293      	uxth	r3, r2
 800a0ca:	fb06 e303 	mla	r3, r6, r3, lr
 800a0ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a0d8:	0c12      	lsrs	r2, r2, #16
 800a0da:	f8dc a000 	ldr.w	sl, [ip]
 800a0de:	fb06 e202 	mla	r2, r6, r2, lr
 800a0e2:	fa13 f38a 	uxtah	r3, r3, sl
 800a0e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0ea:	fa1f fa82 	uxth.w	sl, r2
 800a0ee:	f8dc 2000 	ldr.w	r2, [ip]
 800a0f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a0f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a100:	4581      	cmp	r9, r0
 800a102:	f84c 3b04 	str.w	r3, [ip], #4
 800a106:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a10a:	d2db      	bcs.n	800a0c4 <quorem+0x44>
 800a10c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a110:	b92b      	cbnz	r3, 800a11e <quorem+0x9e>
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	3b04      	subs	r3, #4
 800a116:	429d      	cmp	r5, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	d32e      	bcc.n	800a17a <quorem+0xfa>
 800a11c:	613c      	str	r4, [r7, #16]
 800a11e:	4638      	mov	r0, r7
 800a120:	f001 f9aa 	bl	800b478 <__mcmp>
 800a124:	2800      	cmp	r0, #0
 800a126:	db24      	blt.n	800a172 <quorem+0xf2>
 800a128:	3601      	adds	r6, #1
 800a12a:	4628      	mov	r0, r5
 800a12c:	f04f 0c00 	mov.w	ip, #0
 800a130:	f858 2b04 	ldr.w	r2, [r8], #4
 800a134:	f8d0 e000 	ldr.w	lr, [r0]
 800a138:	b293      	uxth	r3, r2
 800a13a:	ebac 0303 	sub.w	r3, ip, r3
 800a13e:	0c12      	lsrs	r2, r2, #16
 800a140:	fa13 f38e 	uxtah	r3, r3, lr
 800a144:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a152:	45c1      	cmp	r9, r8
 800a154:	f840 3b04 	str.w	r3, [r0], #4
 800a158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a15c:	d2e8      	bcs.n	800a130 <quorem+0xb0>
 800a15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	b922      	cbnz	r2, 800a172 <quorem+0xf2>
 800a168:	3b04      	subs	r3, #4
 800a16a:	429d      	cmp	r5, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	d30a      	bcc.n	800a186 <quorem+0x106>
 800a170:	613c      	str	r4, [r7, #16]
 800a172:	4630      	mov	r0, r6
 800a174:	b003      	add	sp, #12
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d1cc      	bne.n	800a11c <quorem+0x9c>
 800a182:	3c01      	subs	r4, #1
 800a184:	e7c7      	b.n	800a116 <quorem+0x96>
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	3b04      	subs	r3, #4
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d1f0      	bne.n	800a170 <quorem+0xf0>
 800a18e:	3c01      	subs	r4, #1
 800a190:	e7eb      	b.n	800a16a <quorem+0xea>
 800a192:	2000      	movs	r0, #0
 800a194:	e7ee      	b.n	800a174 <quorem+0xf4>
	...

0800a198 <_dtoa_r>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	ed2d 8b02 	vpush	{d8}
 800a1a0:	ec57 6b10 	vmov	r6, r7, d0
 800a1a4:	b095      	sub	sp, #84	; 0x54
 800a1a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1ac:	9105      	str	r1, [sp, #20]
 800a1ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1b8:	b975      	cbnz	r5, 800a1d8 <_dtoa_r+0x40>
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	f000 fed6 	bl	800af6c <malloc>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a1c4:	b920      	cbnz	r0, 800a1d0 <_dtoa_r+0x38>
 800a1c6:	4bb2      	ldr	r3, [pc, #712]	; (800a490 <_dtoa_r+0x2f8>)
 800a1c8:	21ea      	movs	r1, #234	; 0xea
 800a1ca:	48b2      	ldr	r0, [pc, #712]	; (800a494 <_dtoa_r+0x2fc>)
 800a1cc:	f001 fd8e 	bl	800bcec <__assert_func>
 800a1d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1d4:	6005      	str	r5, [r0, #0]
 800a1d6:	60c5      	str	r5, [r0, #12]
 800a1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1da:	6819      	ldr	r1, [r3, #0]
 800a1dc:	b151      	cbz	r1, 800a1f4 <_dtoa_r+0x5c>
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	604a      	str	r2, [r1, #4]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4093      	lsls	r3, r2
 800a1e6:	608b      	str	r3, [r1, #8]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 ff07 	bl	800affc <_Bfree>
 800a1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	1e3b      	subs	r3, r7, #0
 800a1f6:	bfb9      	ittee	lt
 800a1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	9303      	strlt	r3, [sp, #12]
 800a1fe:	2300      	movge	r3, #0
 800a200:	f8c8 3000 	strge.w	r3, [r8]
 800a204:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a208:	4ba3      	ldr	r3, [pc, #652]	; (800a498 <_dtoa_r+0x300>)
 800a20a:	bfbc      	itt	lt
 800a20c:	2201      	movlt	r2, #1
 800a20e:	f8c8 2000 	strlt.w	r2, [r8]
 800a212:	ea33 0309 	bics.w	r3, r3, r9
 800a216:	d11b      	bne.n	800a250 <_dtoa_r+0xb8>
 800a218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a21a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a224:	4333      	orrs	r3, r6
 800a226:	f000 857a 	beq.w	800ad1e <_dtoa_r+0xb86>
 800a22a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a22c:	b963      	cbnz	r3, 800a248 <_dtoa_r+0xb0>
 800a22e:	4b9b      	ldr	r3, [pc, #620]	; (800a49c <_dtoa_r+0x304>)
 800a230:	e024      	b.n	800a27c <_dtoa_r+0xe4>
 800a232:	4b9b      	ldr	r3, [pc, #620]	; (800a4a0 <_dtoa_r+0x308>)
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	9800      	ldr	r0, [sp, #0]
 800a23e:	b015      	add	sp, #84	; 0x54
 800a240:	ecbd 8b02 	vpop	{d8}
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	4b94      	ldr	r3, [pc, #592]	; (800a49c <_dtoa_r+0x304>)
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	3303      	adds	r3, #3
 800a24e:	e7f3      	b.n	800a238 <_dtoa_r+0xa0>
 800a250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a254:	2200      	movs	r2, #0
 800a256:	ec51 0b17 	vmov	r0, r1, d7
 800a25a:	2300      	movs	r3, #0
 800a25c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a260:	f7f6 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a264:	4680      	mov	r8, r0
 800a266:	b158      	cbz	r0, 800a280 <_dtoa_r+0xe8>
 800a268:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a26a:	2301      	movs	r3, #1
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 8551 	beq.w	800ad18 <_dtoa_r+0xb80>
 800a276:	488b      	ldr	r0, [pc, #556]	; (800a4a4 <_dtoa_r+0x30c>)
 800a278:	6018      	str	r0, [r3, #0]
 800a27a:	1e43      	subs	r3, r0, #1
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	e7dd      	b.n	800a23c <_dtoa_r+0xa4>
 800a280:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a284:	aa12      	add	r2, sp, #72	; 0x48
 800a286:	a913      	add	r1, sp, #76	; 0x4c
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 f999 	bl	800b5c0 <__d2b>
 800a28e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a292:	4683      	mov	fp, r0
 800a294:	2d00      	cmp	r5, #0
 800a296:	d07c      	beq.n	800a392 <_dtoa_r+0x1fa>
 800a298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a29e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a2a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a2aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a2ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2b2:	4b7d      	ldr	r3, [pc, #500]	; (800a4a8 <_dtoa_r+0x310>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f5 ffe5 	bl	8000288 <__aeabi_dsub>
 800a2be:	a36e      	add	r3, pc, #440	; (adr r3, 800a478 <_dtoa_r+0x2e0>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f7f6 f998 	bl	80005f8 <__aeabi_dmul>
 800a2c8:	a36d      	add	r3, pc, #436	; (adr r3, 800a480 <_dtoa_r+0x2e8>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f5 ffdd 	bl	800028c <__adddf3>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	460f      	mov	r7, r1
 800a2d8:	f7f6 f924 	bl	8000524 <__aeabi_i2d>
 800a2dc:	a36a      	add	r3, pc, #424	; (adr r3, 800a488 <_dtoa_r+0x2f0>)
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	f7f6 f989 	bl	80005f8 <__aeabi_dmul>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7f5 ffcd 	bl	800028c <__adddf3>
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	f7f6 fc2f 	bl	8000b58 <__aeabi_d2iz>
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	2300      	movs	r3, #0
 800a300:	4630      	mov	r0, r6
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fbea 	bl	8000adc <__aeabi_dcmplt>
 800a308:	b148      	cbz	r0, 800a31e <_dtoa_r+0x186>
 800a30a:	4650      	mov	r0, sl
 800a30c:	f7f6 f90a 	bl	8000524 <__aeabi_i2d>
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	f7f6 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a318:	b908      	cbnz	r0, 800a31e <_dtoa_r+0x186>
 800a31a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a31e:	f1ba 0f16 	cmp.w	sl, #22
 800a322:	d854      	bhi.n	800a3ce <_dtoa_r+0x236>
 800a324:	4b61      	ldr	r3, [pc, #388]	; (800a4ac <_dtoa_r+0x314>)
 800a326:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a332:	f7f6 fbd3 	bl	8000adc <__aeabi_dcmplt>
 800a336:	2800      	cmp	r0, #0
 800a338:	d04b      	beq.n	800a3d2 <_dtoa_r+0x23a>
 800a33a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a33e:	2300      	movs	r3, #0
 800a340:	930e      	str	r3, [sp, #56]	; 0x38
 800a342:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a344:	1b5d      	subs	r5, r3, r5
 800a346:	1e6b      	subs	r3, r5, #1
 800a348:	9304      	str	r3, [sp, #16]
 800a34a:	bf43      	ittte	mi
 800a34c:	2300      	movmi	r3, #0
 800a34e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a352:	9304      	strmi	r3, [sp, #16]
 800a354:	f04f 0800 	movpl.w	r8, #0
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	db3b      	blt.n	800a3d6 <_dtoa_r+0x23e>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a364:	4453      	add	r3, sl
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	2300      	movs	r3, #0
 800a36a:	9306      	str	r3, [sp, #24]
 800a36c:	9b05      	ldr	r3, [sp, #20]
 800a36e:	2b09      	cmp	r3, #9
 800a370:	d869      	bhi.n	800a446 <_dtoa_r+0x2ae>
 800a372:	2b05      	cmp	r3, #5
 800a374:	bfc4      	itt	gt
 800a376:	3b04      	subgt	r3, #4
 800a378:	9305      	strgt	r3, [sp, #20]
 800a37a:	9b05      	ldr	r3, [sp, #20]
 800a37c:	f1a3 0302 	sub.w	r3, r3, #2
 800a380:	bfcc      	ite	gt
 800a382:	2500      	movgt	r5, #0
 800a384:	2501      	movle	r5, #1
 800a386:	2b03      	cmp	r3, #3
 800a388:	d869      	bhi.n	800a45e <_dtoa_r+0x2c6>
 800a38a:	e8df f003 	tbb	[pc, r3]
 800a38e:	4e2c      	.short	0x4e2c
 800a390:	5a4c      	.short	0x5a4c
 800a392:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a396:	441d      	add	r5, r3
 800a398:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a39c:	2b20      	cmp	r3, #32
 800a39e:	bfc1      	itttt	gt
 800a3a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a3a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800a3ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a3b0:	bfda      	itte	le
 800a3b2:	f1c3 0320 	rsble	r3, r3, #32
 800a3b6:	fa06 f003 	lslle.w	r0, r6, r3
 800a3ba:	4318      	orrgt	r0, r3
 800a3bc:	f7f6 f8a2 	bl	8000504 <__aeabi_ui2d>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a3c8:	3d01      	subs	r5, #1
 800a3ca:	9310      	str	r3, [sp, #64]	; 0x40
 800a3cc:	e771      	b.n	800a2b2 <_dtoa_r+0x11a>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7b6      	b.n	800a340 <_dtoa_r+0x1a8>
 800a3d2:	900e      	str	r0, [sp, #56]	; 0x38
 800a3d4:	e7b5      	b.n	800a342 <_dtoa_r+0x1aa>
 800a3d6:	f1ca 0300 	rsb	r3, sl, #0
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	2300      	movs	r3, #0
 800a3de:	eba8 080a 	sub.w	r8, r8, sl
 800a3e2:	930d      	str	r3, [sp, #52]	; 0x34
 800a3e4:	e7c2      	b.n	800a36c <_dtoa_r+0x1d4>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9308      	str	r3, [sp, #32]
 800a3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	dc39      	bgt.n	800a464 <_dtoa_r+0x2cc>
 800a3f0:	f04f 0901 	mov.w	r9, #1
 800a3f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3f8:	464b      	mov	r3, r9
 800a3fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a3fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a400:	2200      	movs	r2, #0
 800a402:	6042      	str	r2, [r0, #4]
 800a404:	2204      	movs	r2, #4
 800a406:	f102 0614 	add.w	r6, r2, #20
 800a40a:	429e      	cmp	r6, r3
 800a40c:	6841      	ldr	r1, [r0, #4]
 800a40e:	d92f      	bls.n	800a470 <_dtoa_r+0x2d8>
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fdb3 	bl	800af7c <_Balloc>
 800a416:	9000      	str	r0, [sp, #0]
 800a418:	2800      	cmp	r0, #0
 800a41a:	d14b      	bne.n	800a4b4 <_dtoa_r+0x31c>
 800a41c:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <_dtoa_r+0x318>)
 800a41e:	4602      	mov	r2, r0
 800a420:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a424:	e6d1      	b.n	800a1ca <_dtoa_r+0x32>
 800a426:	2301      	movs	r3, #1
 800a428:	e7de      	b.n	800a3e8 <_dtoa_r+0x250>
 800a42a:	2300      	movs	r3, #0
 800a42c:	9308      	str	r3, [sp, #32]
 800a42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a430:	eb0a 0903 	add.w	r9, sl, r3
 800a434:	f109 0301 	add.w	r3, r9, #1
 800a438:	2b01      	cmp	r3, #1
 800a43a:	9301      	str	r3, [sp, #4]
 800a43c:	bfb8      	it	lt
 800a43e:	2301      	movlt	r3, #1
 800a440:	e7dd      	b.n	800a3fe <_dtoa_r+0x266>
 800a442:	2301      	movs	r3, #1
 800a444:	e7f2      	b.n	800a42c <_dtoa_r+0x294>
 800a446:	2501      	movs	r5, #1
 800a448:	2300      	movs	r3, #0
 800a44a:	9305      	str	r3, [sp, #20]
 800a44c:	9508      	str	r5, [sp, #32]
 800a44e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a452:	2200      	movs	r2, #0
 800a454:	f8cd 9004 	str.w	r9, [sp, #4]
 800a458:	2312      	movs	r3, #18
 800a45a:	9209      	str	r2, [sp, #36]	; 0x24
 800a45c:	e7cf      	b.n	800a3fe <_dtoa_r+0x266>
 800a45e:	2301      	movs	r3, #1
 800a460:	9308      	str	r3, [sp, #32]
 800a462:	e7f4      	b.n	800a44e <_dtoa_r+0x2b6>
 800a464:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a468:	f8cd 9004 	str.w	r9, [sp, #4]
 800a46c:	464b      	mov	r3, r9
 800a46e:	e7c6      	b.n	800a3fe <_dtoa_r+0x266>
 800a470:	3101      	adds	r1, #1
 800a472:	6041      	str	r1, [r0, #4]
 800a474:	0052      	lsls	r2, r2, #1
 800a476:	e7c6      	b.n	800a406 <_dtoa_r+0x26e>
 800a478:	636f4361 	.word	0x636f4361
 800a47c:	3fd287a7 	.word	0x3fd287a7
 800a480:	8b60c8b3 	.word	0x8b60c8b3
 800a484:	3fc68a28 	.word	0x3fc68a28
 800a488:	509f79fb 	.word	0x509f79fb
 800a48c:	3fd34413 	.word	0x3fd34413
 800a490:	0800c2b5 	.word	0x0800c2b5
 800a494:	0800c2cc 	.word	0x0800c2cc
 800a498:	7ff00000 	.word	0x7ff00000
 800a49c:	0800c2b1 	.word	0x0800c2b1
 800a4a0:	0800c2a8 	.word	0x0800c2a8
 800a4a4:	0800c285 	.word	0x0800c285
 800a4a8:	3ff80000 	.word	0x3ff80000
 800a4ac:	0800c428 	.word	0x0800c428
 800a4b0:	0800c32b 	.word	0x0800c32b
 800a4b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4b6:	9a00      	ldr	r2, [sp, #0]
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	9b01      	ldr	r3, [sp, #4]
 800a4bc:	2b0e      	cmp	r3, #14
 800a4be:	f200 80ad 	bhi.w	800a61c <_dtoa_r+0x484>
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	f000 80aa 	beq.w	800a61c <_dtoa_r+0x484>
 800a4c8:	f1ba 0f00 	cmp.w	sl, #0
 800a4cc:	dd36      	ble.n	800a53c <_dtoa_r+0x3a4>
 800a4ce:	4ac3      	ldr	r2, [pc, #780]	; (800a7dc <_dtoa_r+0x644>)
 800a4d0:	f00a 030f 	and.w	r3, sl, #15
 800a4d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4d8:	ed93 7b00 	vldr	d7, [r3]
 800a4dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a4e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a4e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a4e8:	eef0 8a67 	vmov.f32	s17, s15
 800a4ec:	d016      	beq.n	800a51c <_dtoa_r+0x384>
 800a4ee:	4bbc      	ldr	r3, [pc, #752]	; (800a7e0 <_dtoa_r+0x648>)
 800a4f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4f8:	f7f6 f9a8 	bl	800084c <__aeabi_ddiv>
 800a4fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a500:	f007 070f 	and.w	r7, r7, #15
 800a504:	2503      	movs	r5, #3
 800a506:	4eb6      	ldr	r6, [pc, #728]	; (800a7e0 <_dtoa_r+0x648>)
 800a508:	b957      	cbnz	r7, 800a520 <_dtoa_r+0x388>
 800a50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a50e:	ec53 2b18 	vmov	r2, r3, d8
 800a512:	f7f6 f99b 	bl	800084c <__aeabi_ddiv>
 800a516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51a:	e029      	b.n	800a570 <_dtoa_r+0x3d8>
 800a51c:	2502      	movs	r5, #2
 800a51e:	e7f2      	b.n	800a506 <_dtoa_r+0x36e>
 800a520:	07f9      	lsls	r1, r7, #31
 800a522:	d508      	bpl.n	800a536 <_dtoa_r+0x39e>
 800a524:	ec51 0b18 	vmov	r0, r1, d8
 800a528:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a52c:	f7f6 f864 	bl	80005f8 <__aeabi_dmul>
 800a530:	ec41 0b18 	vmov	d8, r0, r1
 800a534:	3501      	adds	r5, #1
 800a536:	107f      	asrs	r7, r7, #1
 800a538:	3608      	adds	r6, #8
 800a53a:	e7e5      	b.n	800a508 <_dtoa_r+0x370>
 800a53c:	f000 80a6 	beq.w	800a68c <_dtoa_r+0x4f4>
 800a540:	f1ca 0600 	rsb	r6, sl, #0
 800a544:	4ba5      	ldr	r3, [pc, #660]	; (800a7dc <_dtoa_r+0x644>)
 800a546:	4fa6      	ldr	r7, [pc, #664]	; (800a7e0 <_dtoa_r+0x648>)
 800a548:	f006 020f 	and.w	r2, r6, #15
 800a54c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a554:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a560:	1136      	asrs	r6, r6, #4
 800a562:	2300      	movs	r3, #0
 800a564:	2502      	movs	r5, #2
 800a566:	2e00      	cmp	r6, #0
 800a568:	f040 8085 	bne.w	800a676 <_dtoa_r+0x4de>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1d2      	bne.n	800a516 <_dtoa_r+0x37e>
 800a570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	f000 808c 	beq.w	800a690 <_dtoa_r+0x4f8>
 800a578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a57c:	4b99      	ldr	r3, [pc, #612]	; (800a7e4 <_dtoa_r+0x64c>)
 800a57e:	2200      	movs	r2, #0
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 faaa 	bl	8000adc <__aeabi_dcmplt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	f000 8081 	beq.w	800a690 <_dtoa_r+0x4f8>
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d07d      	beq.n	800a690 <_dtoa_r+0x4f8>
 800a594:	f1b9 0f00 	cmp.w	r9, #0
 800a598:	dd3c      	ble.n	800a614 <_dtoa_r+0x47c>
 800a59a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a59e:	9307      	str	r3, [sp, #28]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4b91      	ldr	r3, [pc, #580]	; (800a7e8 <_dtoa_r+0x650>)
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f7f6 f826 	bl	80005f8 <__aeabi_dmul>
 800a5ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5b0:	3501      	adds	r5, #1
 800a5b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a5b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f7f5 ffb2 	bl	8000524 <__aeabi_i2d>
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	4b88      	ldr	r3, [pc, #544]	; (800a7ec <_dtoa_r+0x654>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f7f5 fe5e 	bl	800028c <__adddf3>
 800a5d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d15c      	bne.n	800a69a <_dtoa_r+0x502>
 800a5e0:	4b83      	ldr	r3, [pc, #524]	; (800a7f0 <_dtoa_r+0x658>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	460f      	mov	r7, r1
 800a5f4:	f7f6 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f040 8296 	bne.w	800ab2a <_dtoa_r+0x992>
 800a5fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a602:	4630      	mov	r0, r6
 800a604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a608:	4639      	mov	r1, r7
 800a60a:	f7f6 fa67 	bl	8000adc <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f040 8288 	bne.w	800ab24 <_dtoa_r+0x98c>
 800a614:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a618:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a61c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f2c0 8158 	blt.w	800a8d4 <_dtoa_r+0x73c>
 800a624:	f1ba 0f0e 	cmp.w	sl, #14
 800a628:	f300 8154 	bgt.w	800a8d4 <_dtoa_r+0x73c>
 800a62c:	4b6b      	ldr	r3, [pc, #428]	; (800a7dc <_dtoa_r+0x644>)
 800a62e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a632:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f280 80e3 	bge.w	800a804 <_dtoa_r+0x66c>
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	f300 80df 	bgt.w	800a804 <_dtoa_r+0x66c>
 800a646:	f040 826d 	bne.w	800ab24 <_dtoa_r+0x98c>
 800a64a:	4b69      	ldr	r3, [pc, #420]	; (800a7f0 <_dtoa_r+0x658>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a65a:	f7f6 fa53 	bl	8000b04 <__aeabi_dcmpge>
 800a65e:	9e01      	ldr	r6, [sp, #4]
 800a660:	4637      	mov	r7, r6
 800a662:	2800      	cmp	r0, #0
 800a664:	f040 8243 	bne.w	800aaee <_dtoa_r+0x956>
 800a668:	9d00      	ldr	r5, [sp, #0]
 800a66a:	2331      	movs	r3, #49	; 0x31
 800a66c:	f805 3b01 	strb.w	r3, [r5], #1
 800a670:	f10a 0a01 	add.w	sl, sl, #1
 800a674:	e23f      	b.n	800aaf6 <_dtoa_r+0x95e>
 800a676:	07f2      	lsls	r2, r6, #31
 800a678:	d505      	bpl.n	800a686 <_dtoa_r+0x4ee>
 800a67a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a67e:	f7f5 ffbb 	bl	80005f8 <__aeabi_dmul>
 800a682:	3501      	adds	r5, #1
 800a684:	2301      	movs	r3, #1
 800a686:	1076      	asrs	r6, r6, #1
 800a688:	3708      	adds	r7, #8
 800a68a:	e76c      	b.n	800a566 <_dtoa_r+0x3ce>
 800a68c:	2502      	movs	r5, #2
 800a68e:	e76f      	b.n	800a570 <_dtoa_r+0x3d8>
 800a690:	9b01      	ldr	r3, [sp, #4]
 800a692:	f8cd a01c 	str.w	sl, [sp, #28]
 800a696:	930c      	str	r3, [sp, #48]	; 0x30
 800a698:	e78d      	b.n	800a5b6 <_dtoa_r+0x41e>
 800a69a:	9900      	ldr	r1, [sp, #0]
 800a69c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a69e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6a0:	4b4e      	ldr	r3, [pc, #312]	; (800a7dc <_dtoa_r+0x644>)
 800a6a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6a6:	4401      	add	r1, r0
 800a6a8:	9102      	str	r1, [sp, #8]
 800a6aa:	9908      	ldr	r1, [sp, #32]
 800a6ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a6b0:	eef0 8a67 	vmov.f32	s17, s15
 800a6b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6bc:	2900      	cmp	r1, #0
 800a6be:	d045      	beq.n	800a74c <_dtoa_r+0x5b4>
 800a6c0:	494c      	ldr	r1, [pc, #304]	; (800a7f4 <_dtoa_r+0x65c>)
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	f7f6 f8c2 	bl	800084c <__aeabi_ddiv>
 800a6c8:	ec53 2b18 	vmov	r2, r3, d8
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	9d00      	ldr	r5, [sp, #0]
 800a6d2:	ec41 0b18 	vmov	d8, r0, r1
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7f6 fa3d 	bl	8000b58 <__aeabi_d2iz>
 800a6de:	900c      	str	r0, [sp, #48]	; 0x30
 800a6e0:	f7f5 ff20 	bl	8000524 <__aeabi_i2d>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	f7f5 fdcc 	bl	8000288 <__aeabi_dsub>
 800a6f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6f2:	3330      	adds	r3, #48	; 0x30
 800a6f4:	f805 3b01 	strb.w	r3, [r5], #1
 800a6f8:	ec53 2b18 	vmov	r2, r3, d8
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	460f      	mov	r7, r1
 800a700:	f7f6 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800a704:	2800      	cmp	r0, #0
 800a706:	d165      	bne.n	800a7d4 <_dtoa_r+0x63c>
 800a708:	4632      	mov	r2, r6
 800a70a:	463b      	mov	r3, r7
 800a70c:	4935      	ldr	r1, [pc, #212]	; (800a7e4 <_dtoa_r+0x64c>)
 800a70e:	2000      	movs	r0, #0
 800a710:	f7f5 fdba 	bl	8000288 <__aeabi_dsub>
 800a714:	ec53 2b18 	vmov	r2, r3, d8
 800a718:	f7f6 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 80b9 	bne.w	800a894 <_dtoa_r+0x6fc>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	429d      	cmp	r5, r3
 800a726:	f43f af75 	beq.w	800a614 <_dtoa_r+0x47c>
 800a72a:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <_dtoa_r+0x650>)
 800a72c:	ec51 0b18 	vmov	r0, r1, d8
 800a730:	2200      	movs	r2, #0
 800a732:	f7f5 ff61 	bl	80005f8 <__aeabi_dmul>
 800a736:	4b2c      	ldr	r3, [pc, #176]	; (800a7e8 <_dtoa_r+0x650>)
 800a738:	ec41 0b18 	vmov	d8, r0, r1
 800a73c:	2200      	movs	r2, #0
 800a73e:	4630      	mov	r0, r6
 800a740:	4639      	mov	r1, r7
 800a742:	f7f5 ff59 	bl	80005f8 <__aeabi_dmul>
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	e7c4      	b.n	800a6d6 <_dtoa_r+0x53e>
 800a74c:	ec51 0b17 	vmov	r0, r1, d7
 800a750:	f7f5 ff52 	bl	80005f8 <__aeabi_dmul>
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	9d00      	ldr	r5, [sp, #0]
 800a758:	930c      	str	r3, [sp, #48]	; 0x30
 800a75a:	ec41 0b18 	vmov	d8, r0, r1
 800a75e:	4639      	mov	r1, r7
 800a760:	4630      	mov	r0, r6
 800a762:	f7f6 f9f9 	bl	8000b58 <__aeabi_d2iz>
 800a766:	9011      	str	r0, [sp, #68]	; 0x44
 800a768:	f7f5 fedc 	bl	8000524 <__aeabi_i2d>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4630      	mov	r0, r6
 800a772:	4639      	mov	r1, r7
 800a774:	f7f5 fd88 	bl	8000288 <__aeabi_dsub>
 800a778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a77a:	3330      	adds	r3, #48	; 0x30
 800a77c:	f805 3b01 	strb.w	r3, [r5], #1
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	429d      	cmp	r5, r3
 800a784:	4606      	mov	r6, r0
 800a786:	460f      	mov	r7, r1
 800a788:	f04f 0200 	mov.w	r2, #0
 800a78c:	d134      	bne.n	800a7f8 <_dtoa_r+0x660>
 800a78e:	4b19      	ldr	r3, [pc, #100]	; (800a7f4 <_dtoa_r+0x65c>)
 800a790:	ec51 0b18 	vmov	r0, r1, d8
 800a794:	f7f5 fd7a 	bl	800028c <__adddf3>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d175      	bne.n	800a894 <_dtoa_r+0x6fc>
 800a7a8:	ec53 2b18 	vmov	r2, r3, d8
 800a7ac:	4911      	ldr	r1, [pc, #68]	; (800a7f4 <_dtoa_r+0x65c>)
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f7f5 fd6a 	bl	8000288 <__aeabi_dsub>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	f7f6 f98e 	bl	8000adc <__aeabi_dcmplt>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f43f af27 	beq.w	800a614 <_dtoa_r+0x47c>
 800a7c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7c8:	1e6b      	subs	r3, r5, #1
 800a7ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a7cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7d0:	2b30      	cmp	r3, #48	; 0x30
 800a7d2:	d0f8      	beq.n	800a7c6 <_dtoa_r+0x62e>
 800a7d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a7d8:	e04a      	b.n	800a870 <_dtoa_r+0x6d8>
 800a7da:	bf00      	nop
 800a7dc:	0800c428 	.word	0x0800c428
 800a7e0:	0800c400 	.word	0x0800c400
 800a7e4:	3ff00000 	.word	0x3ff00000
 800a7e8:	40240000 	.word	0x40240000
 800a7ec:	401c0000 	.word	0x401c0000
 800a7f0:	40140000 	.word	0x40140000
 800a7f4:	3fe00000 	.word	0x3fe00000
 800a7f8:	4baf      	ldr	r3, [pc, #700]	; (800aab8 <_dtoa_r+0x920>)
 800a7fa:	f7f5 fefd 	bl	80005f8 <__aeabi_dmul>
 800a7fe:	4606      	mov	r6, r0
 800a800:	460f      	mov	r7, r1
 800a802:	e7ac      	b.n	800a75e <_dtoa_r+0x5c6>
 800a804:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a808:	9d00      	ldr	r5, [sp, #0]
 800a80a:	4642      	mov	r2, r8
 800a80c:	464b      	mov	r3, r9
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	f7f6 f81b 	bl	800084c <__aeabi_ddiv>
 800a816:	f7f6 f99f 	bl	8000b58 <__aeabi_d2iz>
 800a81a:	9002      	str	r0, [sp, #8]
 800a81c:	f7f5 fe82 	bl	8000524 <__aeabi_i2d>
 800a820:	4642      	mov	r2, r8
 800a822:	464b      	mov	r3, r9
 800a824:	f7f5 fee8 	bl	80005f8 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fd2a 	bl	8000288 <__aeabi_dsub>
 800a834:	9e02      	ldr	r6, [sp, #8]
 800a836:	9f01      	ldr	r7, [sp, #4]
 800a838:	3630      	adds	r6, #48	; 0x30
 800a83a:	f805 6b01 	strb.w	r6, [r5], #1
 800a83e:	9e00      	ldr	r6, [sp, #0]
 800a840:	1bae      	subs	r6, r5, r6
 800a842:	42b7      	cmp	r7, r6
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	d137      	bne.n	800a8ba <_dtoa_r+0x722>
 800a84a:	f7f5 fd1f 	bl	800028c <__adddf3>
 800a84e:	4642      	mov	r2, r8
 800a850:	464b      	mov	r3, r9
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	f7f6 f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800a85a:	b9c8      	cbnz	r0, 800a890 <_dtoa_r+0x6f8>
 800a85c:	4642      	mov	r2, r8
 800a85e:	464b      	mov	r3, r9
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f6 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 800a868:	b110      	cbz	r0, 800a870 <_dtoa_r+0x6d8>
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	07d9      	lsls	r1, r3, #31
 800a86e:	d40f      	bmi.n	800a890 <_dtoa_r+0x6f8>
 800a870:	4620      	mov	r0, r4
 800a872:	4659      	mov	r1, fp
 800a874:	f000 fbc2 	bl	800affc <_Bfree>
 800a878:	2300      	movs	r3, #0
 800a87a:	702b      	strb	r3, [r5, #0]
 800a87c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a87e:	f10a 0001 	add.w	r0, sl, #1
 800a882:	6018      	str	r0, [r3, #0]
 800a884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a886:	2b00      	cmp	r3, #0
 800a888:	f43f acd8 	beq.w	800a23c <_dtoa_r+0xa4>
 800a88c:	601d      	str	r5, [r3, #0]
 800a88e:	e4d5      	b.n	800a23c <_dtoa_r+0xa4>
 800a890:	f8cd a01c 	str.w	sl, [sp, #28]
 800a894:	462b      	mov	r3, r5
 800a896:	461d      	mov	r5, r3
 800a898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a89c:	2a39      	cmp	r2, #57	; 0x39
 800a89e:	d108      	bne.n	800a8b2 <_dtoa_r+0x71a>
 800a8a0:	9a00      	ldr	r2, [sp, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d1f7      	bne.n	800a896 <_dtoa_r+0x6fe>
 800a8a6:	9a07      	ldr	r2, [sp, #28]
 800a8a8:	9900      	ldr	r1, [sp, #0]
 800a8aa:	3201      	adds	r2, #1
 800a8ac:	9207      	str	r2, [sp, #28]
 800a8ae:	2230      	movs	r2, #48	; 0x30
 800a8b0:	700a      	strb	r2, [r1, #0]
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	3201      	adds	r2, #1
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e78c      	b.n	800a7d4 <_dtoa_r+0x63c>
 800a8ba:	4b7f      	ldr	r3, [pc, #508]	; (800aab8 <_dtoa_r+0x920>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f7f5 fe9b 	bl	80005f8 <__aeabi_dmul>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	f7f6 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d09b      	beq.n	800a80a <_dtoa_r+0x672>
 800a8d2:	e7cd      	b.n	800a870 <_dtoa_r+0x6d8>
 800a8d4:	9a08      	ldr	r2, [sp, #32]
 800a8d6:	2a00      	cmp	r2, #0
 800a8d8:	f000 80c4 	beq.w	800aa64 <_dtoa_r+0x8cc>
 800a8dc:	9a05      	ldr	r2, [sp, #20]
 800a8de:	2a01      	cmp	r2, #1
 800a8e0:	f300 80a8 	bgt.w	800aa34 <_dtoa_r+0x89c>
 800a8e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	f000 80a0 	beq.w	800aa2c <_dtoa_r+0x894>
 800a8ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8f0:	9e06      	ldr	r6, [sp, #24]
 800a8f2:	4645      	mov	r5, r8
 800a8f4:	9a04      	ldr	r2, [sp, #16]
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	441a      	add	r2, r3
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	4498      	add	r8, r3
 800a8fe:	9204      	str	r2, [sp, #16]
 800a900:	f000 fc38 	bl	800b174 <__i2b>
 800a904:	4607      	mov	r7, r0
 800a906:	2d00      	cmp	r5, #0
 800a908:	dd0b      	ble.n	800a922 <_dtoa_r+0x78a>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dd08      	ble.n	800a922 <_dtoa_r+0x78a>
 800a910:	42ab      	cmp	r3, r5
 800a912:	9a04      	ldr	r2, [sp, #16]
 800a914:	bfa8      	it	ge
 800a916:	462b      	movge	r3, r5
 800a918:	eba8 0803 	sub.w	r8, r8, r3
 800a91c:	1aed      	subs	r5, r5, r3
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	9304      	str	r3, [sp, #16]
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	b1fb      	cbz	r3, 800a966 <_dtoa_r+0x7ce>
 800a926:	9b08      	ldr	r3, [sp, #32]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 809f 	beq.w	800aa6c <_dtoa_r+0x8d4>
 800a92e:	2e00      	cmp	r6, #0
 800a930:	dd11      	ble.n	800a956 <_dtoa_r+0x7be>
 800a932:	4639      	mov	r1, r7
 800a934:	4632      	mov	r2, r6
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fcd8 	bl	800b2ec <__pow5mult>
 800a93c:	465a      	mov	r2, fp
 800a93e:	4601      	mov	r1, r0
 800a940:	4607      	mov	r7, r0
 800a942:	4620      	mov	r0, r4
 800a944:	f000 fc2c 	bl	800b1a0 <__multiply>
 800a948:	4659      	mov	r1, fp
 800a94a:	9007      	str	r0, [sp, #28]
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fb55 	bl	800affc <_Bfree>
 800a952:	9b07      	ldr	r3, [sp, #28]
 800a954:	469b      	mov	fp, r3
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	1b9a      	subs	r2, r3, r6
 800a95a:	d004      	beq.n	800a966 <_dtoa_r+0x7ce>
 800a95c:	4659      	mov	r1, fp
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fcc4 	bl	800b2ec <__pow5mult>
 800a964:	4683      	mov	fp, r0
 800a966:	2101      	movs	r1, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fc03 	bl	800b174 <__i2b>
 800a96e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a970:	2b00      	cmp	r3, #0
 800a972:	4606      	mov	r6, r0
 800a974:	dd7c      	ble.n	800aa70 <_dtoa_r+0x8d8>
 800a976:	461a      	mov	r2, r3
 800a978:	4601      	mov	r1, r0
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fcb6 	bl	800b2ec <__pow5mult>
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	2b01      	cmp	r3, #1
 800a984:	4606      	mov	r6, r0
 800a986:	dd76      	ble.n	800aa76 <_dtoa_r+0x8de>
 800a988:	2300      	movs	r3, #0
 800a98a:	9306      	str	r3, [sp, #24]
 800a98c:	6933      	ldr	r3, [r6, #16]
 800a98e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a992:	6918      	ldr	r0, [r3, #16]
 800a994:	f000 fb9e 	bl	800b0d4 <__hi0bits>
 800a998:	f1c0 0020 	rsb	r0, r0, #32
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	4418      	add	r0, r3
 800a9a0:	f010 001f 	ands.w	r0, r0, #31
 800a9a4:	f000 8086 	beq.w	800aab4 <_dtoa_r+0x91c>
 800a9a8:	f1c0 0320 	rsb	r3, r0, #32
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	dd7f      	ble.n	800aab0 <_dtoa_r+0x918>
 800a9b0:	f1c0 001c 	rsb	r0, r0, #28
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	4403      	add	r3, r0
 800a9b8:	4480      	add	r8, r0
 800a9ba:	4405      	add	r5, r0
 800a9bc:	9304      	str	r3, [sp, #16]
 800a9be:	f1b8 0f00 	cmp.w	r8, #0
 800a9c2:	dd05      	ble.n	800a9d0 <_dtoa_r+0x838>
 800a9c4:	4659      	mov	r1, fp
 800a9c6:	4642      	mov	r2, r8
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fce9 	bl	800b3a0 <__lshift>
 800a9ce:	4683      	mov	fp, r0
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd05      	ble.n	800a9e2 <_dtoa_r+0x84a>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fce0 	bl	800b3a0 <__lshift>
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d069      	beq.n	800aabc <_dtoa_r+0x924>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4658      	mov	r0, fp
 800a9ec:	f000 fd44 	bl	800b478 <__mcmp>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	da63      	bge.n	800aabc <_dtoa_r+0x924>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	220a      	movs	r2, #10
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fb20 	bl	800b040 <__multadd>
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa06:	4683      	mov	fp, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 818f 	beq.w	800ad2c <_dtoa_r+0xb94>
 800aa0e:	4639      	mov	r1, r7
 800aa10:	2300      	movs	r3, #0
 800aa12:	220a      	movs	r2, #10
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fb13 	bl	800b040 <__multadd>
 800aa1a:	f1b9 0f00 	cmp.w	r9, #0
 800aa1e:	4607      	mov	r7, r0
 800aa20:	f300 808e 	bgt.w	800ab40 <_dtoa_r+0x9a8>
 800aa24:	9b05      	ldr	r3, [sp, #20]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	dc50      	bgt.n	800aacc <_dtoa_r+0x934>
 800aa2a:	e089      	b.n	800ab40 <_dtoa_r+0x9a8>
 800aa2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa32:	e75d      	b.n	800a8f0 <_dtoa_r+0x758>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	1e5e      	subs	r6, r3, #1
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	42b3      	cmp	r3, r6
 800aa3c:	bfbf      	itttt	lt
 800aa3e:	9b06      	ldrlt	r3, [sp, #24]
 800aa40:	9606      	strlt	r6, [sp, #24]
 800aa42:	1af2      	sublt	r2, r6, r3
 800aa44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800aa46:	bfb6      	itet	lt
 800aa48:	189b      	addlt	r3, r3, r2
 800aa4a:	1b9e      	subge	r6, r3, r6
 800aa4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	bfb8      	it	lt
 800aa52:	2600      	movlt	r6, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	bfb5      	itete	lt
 800aa58:	eba8 0503 	sublt.w	r5, r8, r3
 800aa5c:	9b01      	ldrge	r3, [sp, #4]
 800aa5e:	2300      	movlt	r3, #0
 800aa60:	4645      	movge	r5, r8
 800aa62:	e747      	b.n	800a8f4 <_dtoa_r+0x75c>
 800aa64:	9e06      	ldr	r6, [sp, #24]
 800aa66:	9f08      	ldr	r7, [sp, #32]
 800aa68:	4645      	mov	r5, r8
 800aa6a:	e74c      	b.n	800a906 <_dtoa_r+0x76e>
 800aa6c:	9a06      	ldr	r2, [sp, #24]
 800aa6e:	e775      	b.n	800a95c <_dtoa_r+0x7c4>
 800aa70:	9b05      	ldr	r3, [sp, #20]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	dc18      	bgt.n	800aaa8 <_dtoa_r+0x910>
 800aa76:	9b02      	ldr	r3, [sp, #8]
 800aa78:	b9b3      	cbnz	r3, 800aaa8 <_dtoa_r+0x910>
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa80:	b9a3      	cbnz	r3, 800aaac <_dtoa_r+0x914>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa88:	0d1b      	lsrs	r3, r3, #20
 800aa8a:	051b      	lsls	r3, r3, #20
 800aa8c:	b12b      	cbz	r3, 800aa9a <_dtoa_r+0x902>
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	3301      	adds	r3, #1
 800aa92:	9304      	str	r3, [sp, #16]
 800aa94:	f108 0801 	add.w	r8, r8, #1
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9306      	str	r3, [sp, #24]
 800aa9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f47f af74 	bne.w	800a98c <_dtoa_r+0x7f4>
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	e779      	b.n	800a99c <_dtoa_r+0x804>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	e7f6      	b.n	800aa9a <_dtoa_r+0x902>
 800aaac:	9b02      	ldr	r3, [sp, #8]
 800aaae:	e7f4      	b.n	800aa9a <_dtoa_r+0x902>
 800aab0:	d085      	beq.n	800a9be <_dtoa_r+0x826>
 800aab2:	4618      	mov	r0, r3
 800aab4:	301c      	adds	r0, #28
 800aab6:	e77d      	b.n	800a9b4 <_dtoa_r+0x81c>
 800aab8:	40240000 	.word	0x40240000
 800aabc:	9b01      	ldr	r3, [sp, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	dc38      	bgt.n	800ab34 <_dtoa_r+0x99c>
 800aac2:	9b05      	ldr	r3, [sp, #20]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	dd35      	ble.n	800ab34 <_dtoa_r+0x99c>
 800aac8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	d10d      	bne.n	800aaee <_dtoa_r+0x956>
 800aad2:	4631      	mov	r1, r6
 800aad4:	464b      	mov	r3, r9
 800aad6:	2205      	movs	r2, #5
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fab1 	bl	800b040 <__multadd>
 800aade:	4601      	mov	r1, r0
 800aae0:	4606      	mov	r6, r0
 800aae2:	4658      	mov	r0, fp
 800aae4:	f000 fcc8 	bl	800b478 <__mcmp>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	f73f adbd 	bgt.w	800a668 <_dtoa_r+0x4d0>
 800aaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf0:	9d00      	ldr	r5, [sp, #0]
 800aaf2:	ea6f 0a03 	mvn.w	sl, r3
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	4631      	mov	r1, r6
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fa7d 	bl	800affc <_Bfree>
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	f43f aeb4 	beq.w	800a870 <_dtoa_r+0x6d8>
 800ab08:	f1b8 0f00 	cmp.w	r8, #0
 800ab0c:	d005      	beq.n	800ab1a <_dtoa_r+0x982>
 800ab0e:	45b8      	cmp	r8, r7
 800ab10:	d003      	beq.n	800ab1a <_dtoa_r+0x982>
 800ab12:	4641      	mov	r1, r8
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fa71 	bl	800affc <_Bfree>
 800ab1a:	4639      	mov	r1, r7
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fa6d 	bl	800affc <_Bfree>
 800ab22:	e6a5      	b.n	800a870 <_dtoa_r+0x6d8>
 800ab24:	2600      	movs	r6, #0
 800ab26:	4637      	mov	r7, r6
 800ab28:	e7e1      	b.n	800aaee <_dtoa_r+0x956>
 800ab2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ab2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ab30:	4637      	mov	r7, r6
 800ab32:	e599      	b.n	800a668 <_dtoa_r+0x4d0>
 800ab34:	9b08      	ldr	r3, [sp, #32]
 800ab36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f000 80fd 	beq.w	800ad3a <_dtoa_r+0xba2>
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	dd05      	ble.n	800ab50 <_dtoa_r+0x9b8>
 800ab44:	4639      	mov	r1, r7
 800ab46:	462a      	mov	r2, r5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 fc29 	bl	800b3a0 <__lshift>
 800ab4e:	4607      	mov	r7, r0
 800ab50:	9b06      	ldr	r3, [sp, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d05c      	beq.n	800ac10 <_dtoa_r+0xa78>
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fa0f 	bl	800af7c <_Balloc>
 800ab5e:	4605      	mov	r5, r0
 800ab60:	b928      	cbnz	r0, 800ab6e <_dtoa_r+0x9d6>
 800ab62:	4b80      	ldr	r3, [pc, #512]	; (800ad64 <_dtoa_r+0xbcc>)
 800ab64:	4602      	mov	r2, r0
 800ab66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ab6a:	f7ff bb2e 	b.w	800a1ca <_dtoa_r+0x32>
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	3202      	adds	r2, #2
 800ab72:	0092      	lsls	r2, r2, #2
 800ab74:	f107 010c 	add.w	r1, r7, #12
 800ab78:	300c      	adds	r0, #12
 800ab7a:	f7fe fde9 	bl	8009750 <memcpy>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4629      	mov	r1, r5
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fc0c 	bl	800b3a0 <__lshift>
 800ab88:	9b00      	ldr	r3, [sp, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	444b      	add	r3, r9
 800ab92:	9307      	str	r3, [sp, #28]
 800ab94:	9b02      	ldr	r3, [sp, #8]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	46b8      	mov	r8, r7
 800ab9c:	9306      	str	r3, [sp, #24]
 800ab9e:	4607      	mov	r7, r0
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	4631      	mov	r1, r6
 800aba4:	3b01      	subs	r3, #1
 800aba6:	4658      	mov	r0, fp
 800aba8:	9302      	str	r3, [sp, #8]
 800abaa:	f7ff fa69 	bl	800a080 <quorem>
 800abae:	4603      	mov	r3, r0
 800abb0:	3330      	adds	r3, #48	; 0x30
 800abb2:	9004      	str	r0, [sp, #16]
 800abb4:	4641      	mov	r1, r8
 800abb6:	4658      	mov	r0, fp
 800abb8:	9308      	str	r3, [sp, #32]
 800abba:	f000 fc5d 	bl	800b478 <__mcmp>
 800abbe:	463a      	mov	r2, r7
 800abc0:	4681      	mov	r9, r0
 800abc2:	4631      	mov	r1, r6
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fc73 	bl	800b4b0 <__mdiff>
 800abca:	68c2      	ldr	r2, [r0, #12]
 800abcc:	9b08      	ldr	r3, [sp, #32]
 800abce:	4605      	mov	r5, r0
 800abd0:	bb02      	cbnz	r2, 800ac14 <_dtoa_r+0xa7c>
 800abd2:	4601      	mov	r1, r0
 800abd4:	4658      	mov	r0, fp
 800abd6:	f000 fc4f 	bl	800b478 <__mcmp>
 800abda:	9b08      	ldr	r3, [sp, #32]
 800abdc:	4602      	mov	r2, r0
 800abde:	4629      	mov	r1, r5
 800abe0:	4620      	mov	r0, r4
 800abe2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800abe6:	f000 fa09 	bl	800affc <_Bfree>
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abee:	9d01      	ldr	r5, [sp, #4]
 800abf0:	ea43 0102 	orr.w	r1, r3, r2
 800abf4:	9b06      	ldr	r3, [sp, #24]
 800abf6:	430b      	orrs	r3, r1
 800abf8:	9b08      	ldr	r3, [sp, #32]
 800abfa:	d10d      	bne.n	800ac18 <_dtoa_r+0xa80>
 800abfc:	2b39      	cmp	r3, #57	; 0x39
 800abfe:	d029      	beq.n	800ac54 <_dtoa_r+0xabc>
 800ac00:	f1b9 0f00 	cmp.w	r9, #0
 800ac04:	dd01      	ble.n	800ac0a <_dtoa_r+0xa72>
 800ac06:	9b04      	ldr	r3, [sp, #16]
 800ac08:	3331      	adds	r3, #49	; 0x31
 800ac0a:	9a02      	ldr	r2, [sp, #8]
 800ac0c:	7013      	strb	r3, [r2, #0]
 800ac0e:	e774      	b.n	800aafa <_dtoa_r+0x962>
 800ac10:	4638      	mov	r0, r7
 800ac12:	e7b9      	b.n	800ab88 <_dtoa_r+0x9f0>
 800ac14:	2201      	movs	r2, #1
 800ac16:	e7e2      	b.n	800abde <_dtoa_r+0xa46>
 800ac18:	f1b9 0f00 	cmp.w	r9, #0
 800ac1c:	db06      	blt.n	800ac2c <_dtoa_r+0xa94>
 800ac1e:	9905      	ldr	r1, [sp, #20]
 800ac20:	ea41 0909 	orr.w	r9, r1, r9
 800ac24:	9906      	ldr	r1, [sp, #24]
 800ac26:	ea59 0101 	orrs.w	r1, r9, r1
 800ac2a:	d120      	bne.n	800ac6e <_dtoa_r+0xad6>
 800ac2c:	2a00      	cmp	r2, #0
 800ac2e:	ddec      	ble.n	800ac0a <_dtoa_r+0xa72>
 800ac30:	4659      	mov	r1, fp
 800ac32:	2201      	movs	r2, #1
 800ac34:	4620      	mov	r0, r4
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	f000 fbb2 	bl	800b3a0 <__lshift>
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4683      	mov	fp, r0
 800ac40:	f000 fc1a 	bl	800b478 <__mcmp>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	dc02      	bgt.n	800ac50 <_dtoa_r+0xab8>
 800ac4a:	d1de      	bne.n	800ac0a <_dtoa_r+0xa72>
 800ac4c:	07da      	lsls	r2, r3, #31
 800ac4e:	d5dc      	bpl.n	800ac0a <_dtoa_r+0xa72>
 800ac50:	2b39      	cmp	r3, #57	; 0x39
 800ac52:	d1d8      	bne.n	800ac06 <_dtoa_r+0xa6e>
 800ac54:	9a02      	ldr	r2, [sp, #8]
 800ac56:	2339      	movs	r3, #57	; 0x39
 800ac58:	7013      	strb	r3, [r2, #0]
 800ac5a:	462b      	mov	r3, r5
 800ac5c:	461d      	mov	r5, r3
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac64:	2a39      	cmp	r2, #57	; 0x39
 800ac66:	d050      	beq.n	800ad0a <_dtoa_r+0xb72>
 800ac68:	3201      	adds	r2, #1
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e745      	b.n	800aafa <_dtoa_r+0x962>
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	dd03      	ble.n	800ac7a <_dtoa_r+0xae2>
 800ac72:	2b39      	cmp	r3, #57	; 0x39
 800ac74:	d0ee      	beq.n	800ac54 <_dtoa_r+0xabc>
 800ac76:	3301      	adds	r3, #1
 800ac78:	e7c7      	b.n	800ac0a <_dtoa_r+0xa72>
 800ac7a:	9a01      	ldr	r2, [sp, #4]
 800ac7c:	9907      	ldr	r1, [sp, #28]
 800ac7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac82:	428a      	cmp	r2, r1
 800ac84:	d02a      	beq.n	800acdc <_dtoa_r+0xb44>
 800ac86:	4659      	mov	r1, fp
 800ac88:	2300      	movs	r3, #0
 800ac8a:	220a      	movs	r2, #10
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 f9d7 	bl	800b040 <__multadd>
 800ac92:	45b8      	cmp	r8, r7
 800ac94:	4683      	mov	fp, r0
 800ac96:	f04f 0300 	mov.w	r3, #0
 800ac9a:	f04f 020a 	mov.w	r2, #10
 800ac9e:	4641      	mov	r1, r8
 800aca0:	4620      	mov	r0, r4
 800aca2:	d107      	bne.n	800acb4 <_dtoa_r+0xb1c>
 800aca4:	f000 f9cc 	bl	800b040 <__multadd>
 800aca8:	4680      	mov	r8, r0
 800acaa:	4607      	mov	r7, r0
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	3301      	adds	r3, #1
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	e775      	b.n	800aba0 <_dtoa_r+0xa08>
 800acb4:	f000 f9c4 	bl	800b040 <__multadd>
 800acb8:	4639      	mov	r1, r7
 800acba:	4680      	mov	r8, r0
 800acbc:	2300      	movs	r3, #0
 800acbe:	220a      	movs	r2, #10
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 f9bd 	bl	800b040 <__multadd>
 800acc6:	4607      	mov	r7, r0
 800acc8:	e7f0      	b.n	800acac <_dtoa_r+0xb14>
 800acca:	f1b9 0f00 	cmp.w	r9, #0
 800acce:	9a00      	ldr	r2, [sp, #0]
 800acd0:	bfcc      	ite	gt
 800acd2:	464d      	movgt	r5, r9
 800acd4:	2501      	movle	r5, #1
 800acd6:	4415      	add	r5, r2
 800acd8:	f04f 0800 	mov.w	r8, #0
 800acdc:	4659      	mov	r1, fp
 800acde:	2201      	movs	r2, #1
 800ace0:	4620      	mov	r0, r4
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	f000 fb5c 	bl	800b3a0 <__lshift>
 800ace8:	4631      	mov	r1, r6
 800acea:	4683      	mov	fp, r0
 800acec:	f000 fbc4 	bl	800b478 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dcb2      	bgt.n	800ac5a <_dtoa_r+0xac2>
 800acf4:	d102      	bne.n	800acfc <_dtoa_r+0xb64>
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	07db      	lsls	r3, r3, #31
 800acfa:	d4ae      	bmi.n	800ac5a <_dtoa_r+0xac2>
 800acfc:	462b      	mov	r3, r5
 800acfe:	461d      	mov	r5, r3
 800ad00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad04:	2a30      	cmp	r2, #48	; 0x30
 800ad06:	d0fa      	beq.n	800acfe <_dtoa_r+0xb66>
 800ad08:	e6f7      	b.n	800aafa <_dtoa_r+0x962>
 800ad0a:	9a00      	ldr	r2, [sp, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d1a5      	bne.n	800ac5c <_dtoa_r+0xac4>
 800ad10:	f10a 0a01 	add.w	sl, sl, #1
 800ad14:	2331      	movs	r3, #49	; 0x31
 800ad16:	e779      	b.n	800ac0c <_dtoa_r+0xa74>
 800ad18:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <_dtoa_r+0xbd0>)
 800ad1a:	f7ff baaf 	b.w	800a27c <_dtoa_r+0xe4>
 800ad1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f47f aa86 	bne.w	800a232 <_dtoa_r+0x9a>
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <_dtoa_r+0xbd4>)
 800ad28:	f7ff baa8 	b.w	800a27c <_dtoa_r+0xe4>
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	dc03      	bgt.n	800ad3a <_dtoa_r+0xba2>
 800ad32:	9b05      	ldr	r3, [sp, #20]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	f73f aec9 	bgt.w	800aacc <_dtoa_r+0x934>
 800ad3a:	9d00      	ldr	r5, [sp, #0]
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4658      	mov	r0, fp
 800ad40:	f7ff f99e 	bl	800a080 <quorem>
 800ad44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ad48:	f805 3b01 	strb.w	r3, [r5], #1
 800ad4c:	9a00      	ldr	r2, [sp, #0]
 800ad4e:	1aaa      	subs	r2, r5, r2
 800ad50:	4591      	cmp	r9, r2
 800ad52:	ddba      	ble.n	800acca <_dtoa_r+0xb32>
 800ad54:	4659      	mov	r1, fp
 800ad56:	2300      	movs	r3, #0
 800ad58:	220a      	movs	r2, #10
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 f970 	bl	800b040 <__multadd>
 800ad60:	4683      	mov	fp, r0
 800ad62:	e7eb      	b.n	800ad3c <_dtoa_r+0xba4>
 800ad64:	0800c32b 	.word	0x0800c32b
 800ad68:	0800c284 	.word	0x0800c284
 800ad6c:	0800c2a8 	.word	0x0800c2a8

0800ad70 <std>:
 800ad70:	2300      	movs	r3, #0
 800ad72:	b510      	push	{r4, lr}
 800ad74:	4604      	mov	r4, r0
 800ad76:	e9c0 3300 	strd	r3, r3, [r0]
 800ad7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad7e:	6083      	str	r3, [r0, #8]
 800ad80:	8181      	strh	r1, [r0, #12]
 800ad82:	6643      	str	r3, [r0, #100]	; 0x64
 800ad84:	81c2      	strh	r2, [r0, #14]
 800ad86:	6183      	str	r3, [r0, #24]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	305c      	adds	r0, #92	; 0x5c
 800ad8e:	f7fe fced 	bl	800976c <memset>
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <std+0x38>)
 800ad94:	6263      	str	r3, [r4, #36]	; 0x24
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <std+0x3c>)
 800ad98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad9a:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <std+0x40>)
 800ad9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <std+0x44>)
 800ada0:	6224      	str	r4, [r4, #32]
 800ada2:	6323      	str	r3, [r4, #48]	; 0x30
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	bf00      	nop
 800ada8:	0800bac1 	.word	0x0800bac1
 800adac:	0800bae3 	.word	0x0800bae3
 800adb0:	0800bb1b 	.word	0x0800bb1b
 800adb4:	0800bb3f 	.word	0x0800bb3f

0800adb8 <_cleanup_r>:
 800adb8:	4901      	ldr	r1, [pc, #4]	; (800adc0 <_cleanup_r+0x8>)
 800adba:	f000 b8af 	b.w	800af1c <_fwalk_reent>
 800adbe:	bf00      	nop
 800adc0:	0800be55 	.word	0x0800be55

0800adc4 <__sfmoreglue>:
 800adc4:	b570      	push	{r4, r5, r6, lr}
 800adc6:	1e4a      	subs	r2, r1, #1
 800adc8:	2568      	movs	r5, #104	; 0x68
 800adca:	4355      	muls	r5, r2
 800adcc:	460e      	mov	r6, r1
 800adce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800add2:	f000 fcb1 	bl	800b738 <_malloc_r>
 800add6:	4604      	mov	r4, r0
 800add8:	b140      	cbz	r0, 800adec <__sfmoreglue+0x28>
 800adda:	2100      	movs	r1, #0
 800addc:	e9c0 1600 	strd	r1, r6, [r0]
 800ade0:	300c      	adds	r0, #12
 800ade2:	60a0      	str	r0, [r4, #8]
 800ade4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ade8:	f7fe fcc0 	bl	800976c <memset>
 800adec:	4620      	mov	r0, r4
 800adee:	bd70      	pop	{r4, r5, r6, pc}

0800adf0 <__sfp_lock_acquire>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__sfp_lock_acquire+0x8>)
 800adf2:	f000 b8b8 	b.w	800af66 <__retarget_lock_acquire_recursive>
 800adf6:	bf00      	nop
 800adf8:	20001d18 	.word	0x20001d18

0800adfc <__sfp_lock_release>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__sfp_lock_release+0x8>)
 800adfe:	f000 b8b3 	b.w	800af68 <__retarget_lock_release_recursive>
 800ae02:	bf00      	nop
 800ae04:	20001d18 	.word	0x20001d18

0800ae08 <__sinit_lock_acquire>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__sinit_lock_acquire+0x8>)
 800ae0a:	f000 b8ac 	b.w	800af66 <__retarget_lock_acquire_recursive>
 800ae0e:	bf00      	nop
 800ae10:	20001d13 	.word	0x20001d13

0800ae14 <__sinit_lock_release>:
 800ae14:	4801      	ldr	r0, [pc, #4]	; (800ae1c <__sinit_lock_release+0x8>)
 800ae16:	f000 b8a7 	b.w	800af68 <__retarget_lock_release_recursive>
 800ae1a:	bf00      	nop
 800ae1c:	20001d13 	.word	0x20001d13

0800ae20 <__sinit>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	4604      	mov	r4, r0
 800ae24:	f7ff fff0 	bl	800ae08 <__sinit_lock_acquire>
 800ae28:	69a3      	ldr	r3, [r4, #24]
 800ae2a:	b11b      	cbz	r3, 800ae34 <__sinit+0x14>
 800ae2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae30:	f7ff bff0 	b.w	800ae14 <__sinit_lock_release>
 800ae34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae38:	6523      	str	r3, [r4, #80]	; 0x50
 800ae3a:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <__sinit+0x68>)
 800ae3c:	4a13      	ldr	r2, [pc, #76]	; (800ae8c <__sinit+0x6c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae42:	42a3      	cmp	r3, r4
 800ae44:	bf04      	itt	eq
 800ae46:	2301      	moveq	r3, #1
 800ae48:	61a3      	streq	r3, [r4, #24]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f000 f820 	bl	800ae90 <__sfp>
 800ae50:	6060      	str	r0, [r4, #4]
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f81c 	bl	800ae90 <__sfp>
 800ae58:	60a0      	str	r0, [r4, #8]
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 f818 	bl	800ae90 <__sfp>
 800ae60:	2200      	movs	r2, #0
 800ae62:	60e0      	str	r0, [r4, #12]
 800ae64:	2104      	movs	r1, #4
 800ae66:	6860      	ldr	r0, [r4, #4]
 800ae68:	f7ff ff82 	bl	800ad70 <std>
 800ae6c:	68a0      	ldr	r0, [r4, #8]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	2109      	movs	r1, #9
 800ae72:	f7ff ff7d 	bl	800ad70 <std>
 800ae76:	68e0      	ldr	r0, [r4, #12]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	2112      	movs	r1, #18
 800ae7c:	f7ff ff78 	bl	800ad70 <std>
 800ae80:	2301      	movs	r3, #1
 800ae82:	61a3      	str	r3, [r4, #24]
 800ae84:	e7d2      	b.n	800ae2c <__sinit+0xc>
 800ae86:	bf00      	nop
 800ae88:	0800c270 	.word	0x0800c270
 800ae8c:	0800adb9 	.word	0x0800adb9

0800ae90 <__sfp>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	4607      	mov	r7, r0
 800ae94:	f7ff ffac 	bl	800adf0 <__sfp_lock_acquire>
 800ae98:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <__sfp+0x84>)
 800ae9a:	681e      	ldr	r6, [r3, #0]
 800ae9c:	69b3      	ldr	r3, [r6, #24]
 800ae9e:	b913      	cbnz	r3, 800aea6 <__sfp+0x16>
 800aea0:	4630      	mov	r0, r6
 800aea2:	f7ff ffbd 	bl	800ae20 <__sinit>
 800aea6:	3648      	adds	r6, #72	; 0x48
 800aea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aeac:	3b01      	subs	r3, #1
 800aeae:	d503      	bpl.n	800aeb8 <__sfp+0x28>
 800aeb0:	6833      	ldr	r3, [r6, #0]
 800aeb2:	b30b      	cbz	r3, 800aef8 <__sfp+0x68>
 800aeb4:	6836      	ldr	r6, [r6, #0]
 800aeb6:	e7f7      	b.n	800aea8 <__sfp+0x18>
 800aeb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aebc:	b9d5      	cbnz	r5, 800aef4 <__sfp+0x64>
 800aebe:	4b16      	ldr	r3, [pc, #88]	; (800af18 <__sfp+0x88>)
 800aec0:	60e3      	str	r3, [r4, #12]
 800aec2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aec6:	6665      	str	r5, [r4, #100]	; 0x64
 800aec8:	f000 f84c 	bl	800af64 <__retarget_lock_init_recursive>
 800aecc:	f7ff ff96 	bl	800adfc <__sfp_lock_release>
 800aed0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aed4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aed8:	6025      	str	r5, [r4, #0]
 800aeda:	61a5      	str	r5, [r4, #24]
 800aedc:	2208      	movs	r2, #8
 800aede:	4629      	mov	r1, r5
 800aee0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aee4:	f7fe fc42 	bl	800976c <memset>
 800aee8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aef0:	4620      	mov	r0, r4
 800aef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef4:	3468      	adds	r4, #104	; 0x68
 800aef6:	e7d9      	b.n	800aeac <__sfp+0x1c>
 800aef8:	2104      	movs	r1, #4
 800aefa:	4638      	mov	r0, r7
 800aefc:	f7ff ff62 	bl	800adc4 <__sfmoreglue>
 800af00:	4604      	mov	r4, r0
 800af02:	6030      	str	r0, [r6, #0]
 800af04:	2800      	cmp	r0, #0
 800af06:	d1d5      	bne.n	800aeb4 <__sfp+0x24>
 800af08:	f7ff ff78 	bl	800adfc <__sfp_lock_release>
 800af0c:	230c      	movs	r3, #12
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	e7ee      	b.n	800aef0 <__sfp+0x60>
 800af12:	bf00      	nop
 800af14:	0800c270 	.word	0x0800c270
 800af18:	ffff0001 	.word	0xffff0001

0800af1c <_fwalk_reent>:
 800af1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af20:	4606      	mov	r6, r0
 800af22:	4688      	mov	r8, r1
 800af24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af28:	2700      	movs	r7, #0
 800af2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af2e:	f1b9 0901 	subs.w	r9, r9, #1
 800af32:	d505      	bpl.n	800af40 <_fwalk_reent+0x24>
 800af34:	6824      	ldr	r4, [r4, #0]
 800af36:	2c00      	cmp	r4, #0
 800af38:	d1f7      	bne.n	800af2a <_fwalk_reent+0xe>
 800af3a:	4638      	mov	r0, r7
 800af3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af40:	89ab      	ldrh	r3, [r5, #12]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d907      	bls.n	800af56 <_fwalk_reent+0x3a>
 800af46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af4a:	3301      	adds	r3, #1
 800af4c:	d003      	beq.n	800af56 <_fwalk_reent+0x3a>
 800af4e:	4629      	mov	r1, r5
 800af50:	4630      	mov	r0, r6
 800af52:	47c0      	blx	r8
 800af54:	4307      	orrs	r7, r0
 800af56:	3568      	adds	r5, #104	; 0x68
 800af58:	e7e9      	b.n	800af2e <_fwalk_reent+0x12>
	...

0800af5c <_localeconv_r>:
 800af5c:	4800      	ldr	r0, [pc, #0]	; (800af60 <_localeconv_r+0x4>)
 800af5e:	4770      	bx	lr
 800af60:	20000168 	.word	0x20000168

0800af64 <__retarget_lock_init_recursive>:
 800af64:	4770      	bx	lr

0800af66 <__retarget_lock_acquire_recursive>:
 800af66:	4770      	bx	lr

0800af68 <__retarget_lock_release_recursive>:
 800af68:	4770      	bx	lr
	...

0800af6c <malloc>:
 800af6c:	4b02      	ldr	r3, [pc, #8]	; (800af78 <malloc+0xc>)
 800af6e:	4601      	mov	r1, r0
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f000 bbe1 	b.w	800b738 <_malloc_r>
 800af76:	bf00      	nop
 800af78:	20000014 	.word	0x20000014

0800af7c <_Balloc>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	b976      	cbnz	r6, 800afa4 <_Balloc+0x28>
 800af86:	2010      	movs	r0, #16
 800af88:	f7ff fff0 	bl	800af6c <malloc>
 800af8c:	4602      	mov	r2, r0
 800af8e:	6260      	str	r0, [r4, #36]	; 0x24
 800af90:	b920      	cbnz	r0, 800af9c <_Balloc+0x20>
 800af92:	4b18      	ldr	r3, [pc, #96]	; (800aff4 <_Balloc+0x78>)
 800af94:	4818      	ldr	r0, [pc, #96]	; (800aff8 <_Balloc+0x7c>)
 800af96:	2166      	movs	r1, #102	; 0x66
 800af98:	f000 fea8 	bl	800bcec <__assert_func>
 800af9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa0:	6006      	str	r6, [r0, #0]
 800afa2:	60c6      	str	r6, [r0, #12]
 800afa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afa6:	68f3      	ldr	r3, [r6, #12]
 800afa8:	b183      	cbz	r3, 800afcc <_Balloc+0x50>
 800afaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afb2:	b9b8      	cbnz	r0, 800afe4 <_Balloc+0x68>
 800afb4:	2101      	movs	r1, #1
 800afb6:	fa01 f605 	lsl.w	r6, r1, r5
 800afba:	1d72      	adds	r2, r6, #5
 800afbc:	0092      	lsls	r2, r2, #2
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fb5a 	bl	800b678 <_calloc_r>
 800afc4:	b160      	cbz	r0, 800afe0 <_Balloc+0x64>
 800afc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afca:	e00e      	b.n	800afea <_Balloc+0x6e>
 800afcc:	2221      	movs	r2, #33	; 0x21
 800afce:	2104      	movs	r1, #4
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 fb51 	bl	800b678 <_calloc_r>
 800afd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afd8:	60f0      	str	r0, [r6, #12]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e4      	bne.n	800afaa <_Balloc+0x2e>
 800afe0:	2000      	movs	r0, #0
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	6802      	ldr	r2, [r0, #0]
 800afe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afea:	2300      	movs	r3, #0
 800afec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff0:	e7f7      	b.n	800afe2 <_Balloc+0x66>
 800aff2:	bf00      	nop
 800aff4:	0800c2b5 	.word	0x0800c2b5
 800aff8:	0800c39c 	.word	0x0800c39c

0800affc <_Bfree>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b000:	4605      	mov	r5, r0
 800b002:	460c      	mov	r4, r1
 800b004:	b976      	cbnz	r6, 800b024 <_Bfree+0x28>
 800b006:	2010      	movs	r0, #16
 800b008:	f7ff ffb0 	bl	800af6c <malloc>
 800b00c:	4602      	mov	r2, r0
 800b00e:	6268      	str	r0, [r5, #36]	; 0x24
 800b010:	b920      	cbnz	r0, 800b01c <_Bfree+0x20>
 800b012:	4b09      	ldr	r3, [pc, #36]	; (800b038 <_Bfree+0x3c>)
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <_Bfree+0x40>)
 800b016:	218a      	movs	r1, #138	; 0x8a
 800b018:	f000 fe68 	bl	800bcec <__assert_func>
 800b01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b020:	6006      	str	r6, [r0, #0]
 800b022:	60c6      	str	r6, [r0, #12]
 800b024:	b13c      	cbz	r4, 800b036 <_Bfree+0x3a>
 800b026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b028:	6862      	ldr	r2, [r4, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b030:	6021      	str	r1, [r4, #0]
 800b032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	0800c2b5 	.word	0x0800c2b5
 800b03c:	0800c39c 	.word	0x0800c39c

0800b040 <__multadd>:
 800b040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b044:	690e      	ldr	r6, [r1, #16]
 800b046:	4607      	mov	r7, r0
 800b048:	4698      	mov	r8, r3
 800b04a:	460c      	mov	r4, r1
 800b04c:	f101 0014 	add.w	r0, r1, #20
 800b050:	2300      	movs	r3, #0
 800b052:	6805      	ldr	r5, [r0, #0]
 800b054:	b2a9      	uxth	r1, r5
 800b056:	fb02 8101 	mla	r1, r2, r1, r8
 800b05a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b05e:	0c2d      	lsrs	r5, r5, #16
 800b060:	fb02 c505 	mla	r5, r2, r5, ip
 800b064:	b289      	uxth	r1, r1
 800b066:	3301      	adds	r3, #1
 800b068:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b06c:	429e      	cmp	r6, r3
 800b06e:	f840 1b04 	str.w	r1, [r0], #4
 800b072:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b076:	dcec      	bgt.n	800b052 <__multadd+0x12>
 800b078:	f1b8 0f00 	cmp.w	r8, #0
 800b07c:	d022      	beq.n	800b0c4 <__multadd+0x84>
 800b07e:	68a3      	ldr	r3, [r4, #8]
 800b080:	42b3      	cmp	r3, r6
 800b082:	dc19      	bgt.n	800b0b8 <__multadd+0x78>
 800b084:	6861      	ldr	r1, [r4, #4]
 800b086:	4638      	mov	r0, r7
 800b088:	3101      	adds	r1, #1
 800b08a:	f7ff ff77 	bl	800af7c <_Balloc>
 800b08e:	4605      	mov	r5, r0
 800b090:	b928      	cbnz	r0, 800b09e <__multadd+0x5e>
 800b092:	4602      	mov	r2, r0
 800b094:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <__multadd+0x8c>)
 800b096:	480e      	ldr	r0, [pc, #56]	; (800b0d0 <__multadd+0x90>)
 800b098:	21b5      	movs	r1, #181	; 0xb5
 800b09a:	f000 fe27 	bl	800bcec <__assert_func>
 800b09e:	6922      	ldr	r2, [r4, #16]
 800b0a0:	3202      	adds	r2, #2
 800b0a2:	f104 010c 	add.w	r1, r4, #12
 800b0a6:	0092      	lsls	r2, r2, #2
 800b0a8:	300c      	adds	r0, #12
 800b0aa:	f7fe fb51 	bl	8009750 <memcpy>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	f7ff ffa3 	bl	800affc <_Bfree>
 800b0b6:	462c      	mov	r4, r5
 800b0b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0bc:	3601      	adds	r6, #1
 800b0be:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0c2:	6126      	str	r6, [r4, #16]
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ca:	bf00      	nop
 800b0cc:	0800c32b 	.word	0x0800c32b
 800b0d0:	0800c39c 	.word	0x0800c39c

0800b0d4 <__hi0bits>:
 800b0d4:	0c03      	lsrs	r3, r0, #16
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	b9d3      	cbnz	r3, 800b110 <__hi0bits+0x3c>
 800b0da:	0400      	lsls	r0, r0, #16
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0e2:	bf04      	itt	eq
 800b0e4:	0200      	lsleq	r0, r0, #8
 800b0e6:	3308      	addeq	r3, #8
 800b0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0ec:	bf04      	itt	eq
 800b0ee:	0100      	lsleq	r0, r0, #4
 800b0f0:	3304      	addeq	r3, #4
 800b0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0f6:	bf04      	itt	eq
 800b0f8:	0080      	lsleq	r0, r0, #2
 800b0fa:	3302      	addeq	r3, #2
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	db05      	blt.n	800b10c <__hi0bits+0x38>
 800b100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b104:	f103 0301 	add.w	r3, r3, #1
 800b108:	bf08      	it	eq
 800b10a:	2320      	moveq	r3, #32
 800b10c:	4618      	mov	r0, r3
 800b10e:	4770      	bx	lr
 800b110:	2300      	movs	r3, #0
 800b112:	e7e4      	b.n	800b0de <__hi0bits+0xa>

0800b114 <__lo0bits>:
 800b114:	6803      	ldr	r3, [r0, #0]
 800b116:	f013 0207 	ands.w	r2, r3, #7
 800b11a:	4601      	mov	r1, r0
 800b11c:	d00b      	beq.n	800b136 <__lo0bits+0x22>
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d424      	bmi.n	800b16c <__lo0bits+0x58>
 800b122:	0798      	lsls	r0, r3, #30
 800b124:	bf49      	itett	mi
 800b126:	085b      	lsrmi	r3, r3, #1
 800b128:	089b      	lsrpl	r3, r3, #2
 800b12a:	2001      	movmi	r0, #1
 800b12c:	600b      	strmi	r3, [r1, #0]
 800b12e:	bf5c      	itt	pl
 800b130:	600b      	strpl	r3, [r1, #0]
 800b132:	2002      	movpl	r0, #2
 800b134:	4770      	bx	lr
 800b136:	b298      	uxth	r0, r3
 800b138:	b9b0      	cbnz	r0, 800b168 <__lo0bits+0x54>
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	2010      	movs	r0, #16
 800b13e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b142:	bf04      	itt	eq
 800b144:	0a1b      	lsreq	r3, r3, #8
 800b146:	3008      	addeq	r0, #8
 800b148:	071a      	lsls	r2, r3, #28
 800b14a:	bf04      	itt	eq
 800b14c:	091b      	lsreq	r3, r3, #4
 800b14e:	3004      	addeq	r0, #4
 800b150:	079a      	lsls	r2, r3, #30
 800b152:	bf04      	itt	eq
 800b154:	089b      	lsreq	r3, r3, #2
 800b156:	3002      	addeq	r0, #2
 800b158:	07da      	lsls	r2, r3, #31
 800b15a:	d403      	bmi.n	800b164 <__lo0bits+0x50>
 800b15c:	085b      	lsrs	r3, r3, #1
 800b15e:	f100 0001 	add.w	r0, r0, #1
 800b162:	d005      	beq.n	800b170 <__lo0bits+0x5c>
 800b164:	600b      	str	r3, [r1, #0]
 800b166:	4770      	bx	lr
 800b168:	4610      	mov	r0, r2
 800b16a:	e7e8      	b.n	800b13e <__lo0bits+0x2a>
 800b16c:	2000      	movs	r0, #0
 800b16e:	4770      	bx	lr
 800b170:	2020      	movs	r0, #32
 800b172:	4770      	bx	lr

0800b174 <__i2b>:
 800b174:	b510      	push	{r4, lr}
 800b176:	460c      	mov	r4, r1
 800b178:	2101      	movs	r1, #1
 800b17a:	f7ff feff 	bl	800af7c <_Balloc>
 800b17e:	4602      	mov	r2, r0
 800b180:	b928      	cbnz	r0, 800b18e <__i2b+0x1a>
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <__i2b+0x24>)
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <__i2b+0x28>)
 800b186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b18a:	f000 fdaf 	bl	800bcec <__assert_func>
 800b18e:	2301      	movs	r3, #1
 800b190:	6144      	str	r4, [r0, #20]
 800b192:	6103      	str	r3, [r0, #16]
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	0800c32b 	.word	0x0800c32b
 800b19c:	0800c39c 	.word	0x0800c39c

0800b1a0 <__multiply>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	690a      	ldr	r2, [r1, #16]
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	bfb8      	it	lt
 800b1ae:	460b      	movlt	r3, r1
 800b1b0:	460d      	mov	r5, r1
 800b1b2:	bfbc      	itt	lt
 800b1b4:	4625      	movlt	r5, r4
 800b1b6:	461c      	movlt	r4, r3
 800b1b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b1bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1c0:	68ab      	ldr	r3, [r5, #8]
 800b1c2:	6869      	ldr	r1, [r5, #4]
 800b1c4:	eb0a 0709 	add.w	r7, sl, r9
 800b1c8:	42bb      	cmp	r3, r7
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	bfb8      	it	lt
 800b1ce:	3101      	addlt	r1, #1
 800b1d0:	f7ff fed4 	bl	800af7c <_Balloc>
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__multiply+0x44>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b42      	ldr	r3, [pc, #264]	; (800b2e4 <__multiply+0x144>)
 800b1da:	4843      	ldr	r0, [pc, #268]	; (800b2e8 <__multiply+0x148>)
 800b1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b1e0:	f000 fd84 	bl	800bcec <__assert_func>
 800b1e4:	f100 0614 	add.w	r6, r0, #20
 800b1e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b1ec:	4633      	mov	r3, r6
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4543      	cmp	r3, r8
 800b1f2:	d31e      	bcc.n	800b232 <__multiply+0x92>
 800b1f4:	f105 0c14 	add.w	ip, r5, #20
 800b1f8:	f104 0314 	add.w	r3, r4, #20
 800b1fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b200:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b204:	9202      	str	r2, [sp, #8]
 800b206:	ebac 0205 	sub.w	r2, ip, r5
 800b20a:	3a15      	subs	r2, #21
 800b20c:	f022 0203 	bic.w	r2, r2, #3
 800b210:	3204      	adds	r2, #4
 800b212:	f105 0115 	add.w	r1, r5, #21
 800b216:	458c      	cmp	ip, r1
 800b218:	bf38      	it	cc
 800b21a:	2204      	movcc	r2, #4
 800b21c:	9201      	str	r2, [sp, #4]
 800b21e:	9a02      	ldr	r2, [sp, #8]
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	429a      	cmp	r2, r3
 800b224:	d808      	bhi.n	800b238 <__multiply+0x98>
 800b226:	2f00      	cmp	r7, #0
 800b228:	dc55      	bgt.n	800b2d6 <__multiply+0x136>
 800b22a:	6107      	str	r7, [r0, #16]
 800b22c:	b005      	add	sp, #20
 800b22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b232:	f843 2b04 	str.w	r2, [r3], #4
 800b236:	e7db      	b.n	800b1f0 <__multiply+0x50>
 800b238:	f8b3 a000 	ldrh.w	sl, [r3]
 800b23c:	f1ba 0f00 	cmp.w	sl, #0
 800b240:	d020      	beq.n	800b284 <__multiply+0xe4>
 800b242:	f105 0e14 	add.w	lr, r5, #20
 800b246:	46b1      	mov	r9, r6
 800b248:	2200      	movs	r2, #0
 800b24a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b24e:	f8d9 b000 	ldr.w	fp, [r9]
 800b252:	b2a1      	uxth	r1, r4
 800b254:	fa1f fb8b 	uxth.w	fp, fp
 800b258:	fb0a b101 	mla	r1, sl, r1, fp
 800b25c:	4411      	add	r1, r2
 800b25e:	f8d9 2000 	ldr.w	r2, [r9]
 800b262:	0c24      	lsrs	r4, r4, #16
 800b264:	0c12      	lsrs	r2, r2, #16
 800b266:	fb0a 2404 	mla	r4, sl, r4, r2
 800b26a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b26e:	b289      	uxth	r1, r1
 800b270:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b274:	45f4      	cmp	ip, lr
 800b276:	f849 1b04 	str.w	r1, [r9], #4
 800b27a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b27e:	d8e4      	bhi.n	800b24a <__multiply+0xaa>
 800b280:	9901      	ldr	r1, [sp, #4]
 800b282:	5072      	str	r2, [r6, r1]
 800b284:	9a03      	ldr	r2, [sp, #12]
 800b286:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b28a:	3304      	adds	r3, #4
 800b28c:	f1b9 0f00 	cmp.w	r9, #0
 800b290:	d01f      	beq.n	800b2d2 <__multiply+0x132>
 800b292:	6834      	ldr	r4, [r6, #0]
 800b294:	f105 0114 	add.w	r1, r5, #20
 800b298:	46b6      	mov	lr, r6
 800b29a:	f04f 0a00 	mov.w	sl, #0
 800b29e:	880a      	ldrh	r2, [r1, #0]
 800b2a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b2a4:	fb09 b202 	mla	r2, r9, r2, fp
 800b2a8:	4492      	add	sl, r2
 800b2aa:	b2a4      	uxth	r4, r4
 800b2ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b2b0:	f84e 4b04 	str.w	r4, [lr], #4
 800b2b4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b2b8:	f8be 2000 	ldrh.w	r2, [lr]
 800b2bc:	0c24      	lsrs	r4, r4, #16
 800b2be:	fb09 2404 	mla	r4, r9, r4, r2
 800b2c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b2c6:	458c      	cmp	ip, r1
 800b2c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2cc:	d8e7      	bhi.n	800b29e <__multiply+0xfe>
 800b2ce:	9a01      	ldr	r2, [sp, #4]
 800b2d0:	50b4      	str	r4, [r6, r2]
 800b2d2:	3604      	adds	r6, #4
 800b2d4:	e7a3      	b.n	800b21e <__multiply+0x7e>
 800b2d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1a5      	bne.n	800b22a <__multiply+0x8a>
 800b2de:	3f01      	subs	r7, #1
 800b2e0:	e7a1      	b.n	800b226 <__multiply+0x86>
 800b2e2:	bf00      	nop
 800b2e4:	0800c32b 	.word	0x0800c32b
 800b2e8:	0800c39c 	.word	0x0800c39c

0800b2ec <__pow5mult>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	f012 0203 	ands.w	r2, r2, #3
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	460f      	mov	r7, r1
 800b2fa:	d007      	beq.n	800b30c <__pow5mult+0x20>
 800b2fc:	4c25      	ldr	r4, [pc, #148]	; (800b394 <__pow5mult+0xa8>)
 800b2fe:	3a01      	subs	r2, #1
 800b300:	2300      	movs	r3, #0
 800b302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b306:	f7ff fe9b 	bl	800b040 <__multadd>
 800b30a:	4607      	mov	r7, r0
 800b30c:	10ad      	asrs	r5, r5, #2
 800b30e:	d03d      	beq.n	800b38c <__pow5mult+0xa0>
 800b310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b312:	b97c      	cbnz	r4, 800b334 <__pow5mult+0x48>
 800b314:	2010      	movs	r0, #16
 800b316:	f7ff fe29 	bl	800af6c <malloc>
 800b31a:	4602      	mov	r2, r0
 800b31c:	6270      	str	r0, [r6, #36]	; 0x24
 800b31e:	b928      	cbnz	r0, 800b32c <__pow5mult+0x40>
 800b320:	4b1d      	ldr	r3, [pc, #116]	; (800b398 <__pow5mult+0xac>)
 800b322:	481e      	ldr	r0, [pc, #120]	; (800b39c <__pow5mult+0xb0>)
 800b324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b328:	f000 fce0 	bl	800bcec <__assert_func>
 800b32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b330:	6004      	str	r4, [r0, #0]
 800b332:	60c4      	str	r4, [r0, #12]
 800b334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b33c:	b94c      	cbnz	r4, 800b352 <__pow5mult+0x66>
 800b33e:	f240 2171 	movw	r1, #625	; 0x271
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff16 	bl	800b174 <__i2b>
 800b348:	2300      	movs	r3, #0
 800b34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b34e:	4604      	mov	r4, r0
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	f04f 0900 	mov.w	r9, #0
 800b356:	07eb      	lsls	r3, r5, #31
 800b358:	d50a      	bpl.n	800b370 <__pow5mult+0x84>
 800b35a:	4639      	mov	r1, r7
 800b35c:	4622      	mov	r2, r4
 800b35e:	4630      	mov	r0, r6
 800b360:	f7ff ff1e 	bl	800b1a0 <__multiply>
 800b364:	4639      	mov	r1, r7
 800b366:	4680      	mov	r8, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff fe47 	bl	800affc <_Bfree>
 800b36e:	4647      	mov	r7, r8
 800b370:	106d      	asrs	r5, r5, #1
 800b372:	d00b      	beq.n	800b38c <__pow5mult+0xa0>
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	b938      	cbnz	r0, 800b388 <__pow5mult+0x9c>
 800b378:	4622      	mov	r2, r4
 800b37a:	4621      	mov	r1, r4
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff ff0f 	bl	800b1a0 <__multiply>
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	f8c0 9000 	str.w	r9, [r0]
 800b388:	4604      	mov	r4, r0
 800b38a:	e7e4      	b.n	800b356 <__pow5mult+0x6a>
 800b38c:	4638      	mov	r0, r7
 800b38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b392:	bf00      	nop
 800b394:	0800c4f0 	.word	0x0800c4f0
 800b398:	0800c2b5 	.word	0x0800c2b5
 800b39c:	0800c39c 	.word	0x0800c39c

0800b3a0 <__lshift>:
 800b3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a4:	460c      	mov	r4, r1
 800b3a6:	6849      	ldr	r1, [r1, #4]
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	4691      	mov	r9, r2
 800b3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3b8:	f108 0601 	add.w	r6, r8, #1
 800b3bc:	42b3      	cmp	r3, r6
 800b3be:	db0b      	blt.n	800b3d8 <__lshift+0x38>
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	f7ff fddb 	bl	800af7c <_Balloc>
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	b948      	cbnz	r0, 800b3de <__lshift+0x3e>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	4b28      	ldr	r3, [pc, #160]	; (800b470 <__lshift+0xd0>)
 800b3ce:	4829      	ldr	r0, [pc, #164]	; (800b474 <__lshift+0xd4>)
 800b3d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3d4:	f000 fc8a 	bl	800bcec <__assert_func>
 800b3d8:	3101      	adds	r1, #1
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	e7ee      	b.n	800b3bc <__lshift+0x1c>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f100 0114 	add.w	r1, r0, #20
 800b3e4:	f100 0210 	add.w	r2, r0, #16
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	4553      	cmp	r3, sl
 800b3ec:	db33      	blt.n	800b456 <__lshift+0xb6>
 800b3ee:	6920      	ldr	r0, [r4, #16]
 800b3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3f4:	f104 0314 	add.w	r3, r4, #20
 800b3f8:	f019 091f 	ands.w	r9, r9, #31
 800b3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b404:	d02b      	beq.n	800b45e <__lshift+0xbe>
 800b406:	f1c9 0e20 	rsb	lr, r9, #32
 800b40a:	468a      	mov	sl, r1
 800b40c:	2200      	movs	r2, #0
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	fa00 f009 	lsl.w	r0, r0, r9
 800b414:	4302      	orrs	r2, r0
 800b416:	f84a 2b04 	str.w	r2, [sl], #4
 800b41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41e:	459c      	cmp	ip, r3
 800b420:	fa22 f20e 	lsr.w	r2, r2, lr
 800b424:	d8f3      	bhi.n	800b40e <__lshift+0x6e>
 800b426:	ebac 0304 	sub.w	r3, ip, r4
 800b42a:	3b15      	subs	r3, #21
 800b42c:	f023 0303 	bic.w	r3, r3, #3
 800b430:	3304      	adds	r3, #4
 800b432:	f104 0015 	add.w	r0, r4, #21
 800b436:	4584      	cmp	ip, r0
 800b438:	bf38      	it	cc
 800b43a:	2304      	movcc	r3, #4
 800b43c:	50ca      	str	r2, [r1, r3]
 800b43e:	b10a      	cbz	r2, 800b444 <__lshift+0xa4>
 800b440:	f108 0602 	add.w	r6, r8, #2
 800b444:	3e01      	subs	r6, #1
 800b446:	4638      	mov	r0, r7
 800b448:	612e      	str	r6, [r5, #16]
 800b44a:	4621      	mov	r1, r4
 800b44c:	f7ff fdd6 	bl	800affc <_Bfree>
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b456:	f842 0f04 	str.w	r0, [r2, #4]!
 800b45a:	3301      	adds	r3, #1
 800b45c:	e7c5      	b.n	800b3ea <__lshift+0x4a>
 800b45e:	3904      	subs	r1, #4
 800b460:	f853 2b04 	ldr.w	r2, [r3], #4
 800b464:	f841 2f04 	str.w	r2, [r1, #4]!
 800b468:	459c      	cmp	ip, r3
 800b46a:	d8f9      	bhi.n	800b460 <__lshift+0xc0>
 800b46c:	e7ea      	b.n	800b444 <__lshift+0xa4>
 800b46e:	bf00      	nop
 800b470:	0800c32b 	.word	0x0800c32b
 800b474:	0800c39c 	.word	0x0800c39c

0800b478 <__mcmp>:
 800b478:	b530      	push	{r4, r5, lr}
 800b47a:	6902      	ldr	r2, [r0, #16]
 800b47c:	690c      	ldr	r4, [r1, #16]
 800b47e:	1b12      	subs	r2, r2, r4
 800b480:	d10e      	bne.n	800b4a0 <__mcmp+0x28>
 800b482:	f100 0314 	add.w	r3, r0, #20
 800b486:	3114      	adds	r1, #20
 800b488:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b48c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b490:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b494:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b498:	42a5      	cmp	r5, r4
 800b49a:	d003      	beq.n	800b4a4 <__mcmp+0x2c>
 800b49c:	d305      	bcc.n	800b4aa <__mcmp+0x32>
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	4283      	cmp	r3, r0
 800b4a6:	d3f3      	bcc.n	800b490 <__mcmp+0x18>
 800b4a8:	e7fa      	b.n	800b4a0 <__mcmp+0x28>
 800b4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4ae:	e7f7      	b.n	800b4a0 <__mcmp+0x28>

0800b4b0 <__mdiff>:
 800b4b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4617      	mov	r7, r2
 800b4be:	f7ff ffdb 	bl	800b478 <__mcmp>
 800b4c2:	1e05      	subs	r5, r0, #0
 800b4c4:	d110      	bne.n	800b4e8 <__mdiff+0x38>
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff fd57 	bl	800af7c <_Balloc>
 800b4ce:	b930      	cbnz	r0, 800b4de <__mdiff+0x2e>
 800b4d0:	4b39      	ldr	r3, [pc, #228]	; (800b5b8 <__mdiff+0x108>)
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	f240 2132 	movw	r1, #562	; 0x232
 800b4d8:	4838      	ldr	r0, [pc, #224]	; (800b5bc <__mdiff+0x10c>)
 800b4da:	f000 fc07 	bl	800bcec <__assert_func>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e8:	bfa4      	itt	ge
 800b4ea:	463b      	movge	r3, r7
 800b4ec:	4627      	movge	r7, r4
 800b4ee:	4630      	mov	r0, r6
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	bfa6      	itte	ge
 800b4f4:	461c      	movge	r4, r3
 800b4f6:	2500      	movge	r5, #0
 800b4f8:	2501      	movlt	r5, #1
 800b4fa:	f7ff fd3f 	bl	800af7c <_Balloc>
 800b4fe:	b920      	cbnz	r0, 800b50a <__mdiff+0x5a>
 800b500:	4b2d      	ldr	r3, [pc, #180]	; (800b5b8 <__mdiff+0x108>)
 800b502:	4602      	mov	r2, r0
 800b504:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b508:	e7e6      	b.n	800b4d8 <__mdiff+0x28>
 800b50a:	693e      	ldr	r6, [r7, #16]
 800b50c:	60c5      	str	r5, [r0, #12]
 800b50e:	6925      	ldr	r5, [r4, #16]
 800b510:	f107 0114 	add.w	r1, r7, #20
 800b514:	f104 0914 	add.w	r9, r4, #20
 800b518:	f100 0e14 	add.w	lr, r0, #20
 800b51c:	f107 0210 	add.w	r2, r7, #16
 800b520:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b524:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b528:	46f2      	mov	sl, lr
 800b52a:	2700      	movs	r7, #0
 800b52c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b530:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b534:	fa1f f883 	uxth.w	r8, r3
 800b538:	fa17 f78b 	uxtah	r7, r7, fp
 800b53c:	0c1b      	lsrs	r3, r3, #16
 800b53e:	eba7 0808 	sub.w	r8, r7, r8
 800b542:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b546:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b54a:	fa1f f888 	uxth.w	r8, r8
 800b54e:	141f      	asrs	r7, r3, #16
 800b550:	454d      	cmp	r5, r9
 800b552:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b556:	f84a 3b04 	str.w	r3, [sl], #4
 800b55a:	d8e7      	bhi.n	800b52c <__mdiff+0x7c>
 800b55c:	1b2b      	subs	r3, r5, r4
 800b55e:	3b15      	subs	r3, #21
 800b560:	f023 0303 	bic.w	r3, r3, #3
 800b564:	3304      	adds	r3, #4
 800b566:	3415      	adds	r4, #21
 800b568:	42a5      	cmp	r5, r4
 800b56a:	bf38      	it	cc
 800b56c:	2304      	movcc	r3, #4
 800b56e:	4419      	add	r1, r3
 800b570:	4473      	add	r3, lr
 800b572:	469e      	mov	lr, r3
 800b574:	460d      	mov	r5, r1
 800b576:	4565      	cmp	r5, ip
 800b578:	d30e      	bcc.n	800b598 <__mdiff+0xe8>
 800b57a:	f10c 0203 	add.w	r2, ip, #3
 800b57e:	1a52      	subs	r2, r2, r1
 800b580:	f022 0203 	bic.w	r2, r2, #3
 800b584:	3903      	subs	r1, #3
 800b586:	458c      	cmp	ip, r1
 800b588:	bf38      	it	cc
 800b58a:	2200      	movcc	r2, #0
 800b58c:	441a      	add	r2, r3
 800b58e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b592:	b17b      	cbz	r3, 800b5b4 <__mdiff+0x104>
 800b594:	6106      	str	r6, [r0, #16]
 800b596:	e7a5      	b.n	800b4e4 <__mdiff+0x34>
 800b598:	f855 8b04 	ldr.w	r8, [r5], #4
 800b59c:	fa17 f488 	uxtah	r4, r7, r8
 800b5a0:	1422      	asrs	r2, r4, #16
 800b5a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b5a6:	b2a4      	uxth	r4, r4
 800b5a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b5ac:	f84e 4b04 	str.w	r4, [lr], #4
 800b5b0:	1417      	asrs	r7, r2, #16
 800b5b2:	e7e0      	b.n	800b576 <__mdiff+0xc6>
 800b5b4:	3e01      	subs	r6, #1
 800b5b6:	e7ea      	b.n	800b58e <__mdiff+0xde>
 800b5b8:	0800c32b 	.word	0x0800c32b
 800b5bc:	0800c39c 	.word	0x0800c39c

0800b5c0 <__d2b>:
 800b5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	4689      	mov	r9, r1
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	ec57 6b10 	vmov	r6, r7, d0
 800b5cc:	4690      	mov	r8, r2
 800b5ce:	f7ff fcd5 	bl	800af7c <_Balloc>
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	b930      	cbnz	r0, 800b5e4 <__d2b+0x24>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	4b25      	ldr	r3, [pc, #148]	; (800b670 <__d2b+0xb0>)
 800b5da:	4826      	ldr	r0, [pc, #152]	; (800b674 <__d2b+0xb4>)
 800b5dc:	f240 310a 	movw	r1, #778	; 0x30a
 800b5e0:	f000 fb84 	bl	800bcec <__assert_func>
 800b5e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5ec:	bb35      	cbnz	r5, 800b63c <__d2b+0x7c>
 800b5ee:	2e00      	cmp	r6, #0
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	d028      	beq.n	800b646 <__d2b+0x86>
 800b5f4:	4668      	mov	r0, sp
 800b5f6:	9600      	str	r6, [sp, #0]
 800b5f8:	f7ff fd8c 	bl	800b114 <__lo0bits>
 800b5fc:	9900      	ldr	r1, [sp, #0]
 800b5fe:	b300      	cbz	r0, 800b642 <__d2b+0x82>
 800b600:	9a01      	ldr	r2, [sp, #4]
 800b602:	f1c0 0320 	rsb	r3, r0, #32
 800b606:	fa02 f303 	lsl.w	r3, r2, r3
 800b60a:	430b      	orrs	r3, r1
 800b60c:	40c2      	lsrs	r2, r0
 800b60e:	6163      	str	r3, [r4, #20]
 800b610:	9201      	str	r2, [sp, #4]
 800b612:	9b01      	ldr	r3, [sp, #4]
 800b614:	61a3      	str	r3, [r4, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	bf14      	ite	ne
 800b61a:	2202      	movne	r2, #2
 800b61c:	2201      	moveq	r2, #1
 800b61e:	6122      	str	r2, [r4, #16]
 800b620:	b1d5      	cbz	r5, 800b658 <__d2b+0x98>
 800b622:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b626:	4405      	add	r5, r0
 800b628:	f8c9 5000 	str.w	r5, [r9]
 800b62c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b630:	f8c8 0000 	str.w	r0, [r8]
 800b634:	4620      	mov	r0, r4
 800b636:	b003      	add	sp, #12
 800b638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b63c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b640:	e7d5      	b.n	800b5ee <__d2b+0x2e>
 800b642:	6161      	str	r1, [r4, #20]
 800b644:	e7e5      	b.n	800b612 <__d2b+0x52>
 800b646:	a801      	add	r0, sp, #4
 800b648:	f7ff fd64 	bl	800b114 <__lo0bits>
 800b64c:	9b01      	ldr	r3, [sp, #4]
 800b64e:	6163      	str	r3, [r4, #20]
 800b650:	2201      	movs	r2, #1
 800b652:	6122      	str	r2, [r4, #16]
 800b654:	3020      	adds	r0, #32
 800b656:	e7e3      	b.n	800b620 <__d2b+0x60>
 800b658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b65c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b660:	f8c9 0000 	str.w	r0, [r9]
 800b664:	6918      	ldr	r0, [r3, #16]
 800b666:	f7ff fd35 	bl	800b0d4 <__hi0bits>
 800b66a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b66e:	e7df      	b.n	800b630 <__d2b+0x70>
 800b670:	0800c32b 	.word	0x0800c32b
 800b674:	0800c39c 	.word	0x0800c39c

0800b678 <_calloc_r>:
 800b678:	b513      	push	{r0, r1, r4, lr}
 800b67a:	434a      	muls	r2, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	9201      	str	r2, [sp, #4]
 800b680:	f000 f85a 	bl	800b738 <_malloc_r>
 800b684:	4604      	mov	r4, r0
 800b686:	b118      	cbz	r0, 800b690 <_calloc_r+0x18>
 800b688:	9a01      	ldr	r2, [sp, #4]
 800b68a:	2100      	movs	r1, #0
 800b68c:	f7fe f86e 	bl	800976c <memset>
 800b690:	4620      	mov	r0, r4
 800b692:	b002      	add	sp, #8
 800b694:	bd10      	pop	{r4, pc}
	...

0800b698 <_free_r>:
 800b698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b69a:	2900      	cmp	r1, #0
 800b69c:	d048      	beq.n	800b730 <_free_r+0x98>
 800b69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a2:	9001      	str	r0, [sp, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6aa:	bfb8      	it	lt
 800b6ac:	18e4      	addlt	r4, r4, r3
 800b6ae:	f000 fca7 	bl	800c000 <__malloc_lock>
 800b6b2:	4a20      	ldr	r2, [pc, #128]	; (800b734 <_free_r+0x9c>)
 800b6b4:	9801      	ldr	r0, [sp, #4]
 800b6b6:	6813      	ldr	r3, [r2, #0]
 800b6b8:	4615      	mov	r5, r2
 800b6ba:	b933      	cbnz	r3, 800b6ca <_free_r+0x32>
 800b6bc:	6063      	str	r3, [r4, #4]
 800b6be:	6014      	str	r4, [r2, #0]
 800b6c0:	b003      	add	sp, #12
 800b6c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6c6:	f000 bca1 	b.w	800c00c <__malloc_unlock>
 800b6ca:	42a3      	cmp	r3, r4
 800b6cc:	d90b      	bls.n	800b6e6 <_free_r+0x4e>
 800b6ce:	6821      	ldr	r1, [r4, #0]
 800b6d0:	1862      	adds	r2, r4, r1
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	bf04      	itt	eq
 800b6d6:	681a      	ldreq	r2, [r3, #0]
 800b6d8:	685b      	ldreq	r3, [r3, #4]
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	bf04      	itt	eq
 800b6de:	1852      	addeq	r2, r2, r1
 800b6e0:	6022      	streq	r2, [r4, #0]
 800b6e2:	602c      	str	r4, [r5, #0]
 800b6e4:	e7ec      	b.n	800b6c0 <_free_r+0x28>
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	b10b      	cbz	r3, 800b6f0 <_free_r+0x58>
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d9fa      	bls.n	800b6e6 <_free_r+0x4e>
 800b6f0:	6811      	ldr	r1, [r2, #0]
 800b6f2:	1855      	adds	r5, r2, r1
 800b6f4:	42a5      	cmp	r5, r4
 800b6f6:	d10b      	bne.n	800b710 <_free_r+0x78>
 800b6f8:	6824      	ldr	r4, [r4, #0]
 800b6fa:	4421      	add	r1, r4
 800b6fc:	1854      	adds	r4, r2, r1
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	6011      	str	r1, [r2, #0]
 800b702:	d1dd      	bne.n	800b6c0 <_free_r+0x28>
 800b704:	681c      	ldr	r4, [r3, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	6053      	str	r3, [r2, #4]
 800b70a:	4421      	add	r1, r4
 800b70c:	6011      	str	r1, [r2, #0]
 800b70e:	e7d7      	b.n	800b6c0 <_free_r+0x28>
 800b710:	d902      	bls.n	800b718 <_free_r+0x80>
 800b712:	230c      	movs	r3, #12
 800b714:	6003      	str	r3, [r0, #0]
 800b716:	e7d3      	b.n	800b6c0 <_free_r+0x28>
 800b718:	6825      	ldr	r5, [r4, #0]
 800b71a:	1961      	adds	r1, r4, r5
 800b71c:	428b      	cmp	r3, r1
 800b71e:	bf04      	itt	eq
 800b720:	6819      	ldreq	r1, [r3, #0]
 800b722:	685b      	ldreq	r3, [r3, #4]
 800b724:	6063      	str	r3, [r4, #4]
 800b726:	bf04      	itt	eq
 800b728:	1949      	addeq	r1, r1, r5
 800b72a:	6021      	streq	r1, [r4, #0]
 800b72c:	6054      	str	r4, [r2, #4]
 800b72e:	e7c7      	b.n	800b6c0 <_free_r+0x28>
 800b730:	b003      	add	sp, #12
 800b732:	bd30      	pop	{r4, r5, pc}
 800b734:	20001b38 	.word	0x20001b38

0800b738 <_malloc_r>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	1ccd      	adds	r5, r1, #3
 800b73c:	f025 0503 	bic.w	r5, r5, #3
 800b740:	3508      	adds	r5, #8
 800b742:	2d0c      	cmp	r5, #12
 800b744:	bf38      	it	cc
 800b746:	250c      	movcc	r5, #12
 800b748:	2d00      	cmp	r5, #0
 800b74a:	4606      	mov	r6, r0
 800b74c:	db01      	blt.n	800b752 <_malloc_r+0x1a>
 800b74e:	42a9      	cmp	r1, r5
 800b750:	d903      	bls.n	800b75a <_malloc_r+0x22>
 800b752:	230c      	movs	r3, #12
 800b754:	6033      	str	r3, [r6, #0]
 800b756:	2000      	movs	r0, #0
 800b758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75a:	f000 fc51 	bl	800c000 <__malloc_lock>
 800b75e:	4921      	ldr	r1, [pc, #132]	; (800b7e4 <_malloc_r+0xac>)
 800b760:	680a      	ldr	r2, [r1, #0]
 800b762:	4614      	mov	r4, r2
 800b764:	b99c      	cbnz	r4, 800b78e <_malloc_r+0x56>
 800b766:	4f20      	ldr	r7, [pc, #128]	; (800b7e8 <_malloc_r+0xb0>)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	b923      	cbnz	r3, 800b776 <_malloc_r+0x3e>
 800b76c:	4621      	mov	r1, r4
 800b76e:	4630      	mov	r0, r6
 800b770:	f000 f996 	bl	800baa0 <_sbrk_r>
 800b774:	6038      	str	r0, [r7, #0]
 800b776:	4629      	mov	r1, r5
 800b778:	4630      	mov	r0, r6
 800b77a:	f000 f991 	bl	800baa0 <_sbrk_r>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d123      	bne.n	800b7ca <_malloc_r+0x92>
 800b782:	230c      	movs	r3, #12
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	4630      	mov	r0, r6
 800b788:	f000 fc40 	bl	800c00c <__malloc_unlock>
 800b78c:	e7e3      	b.n	800b756 <_malloc_r+0x1e>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	1b5b      	subs	r3, r3, r5
 800b792:	d417      	bmi.n	800b7c4 <_malloc_r+0x8c>
 800b794:	2b0b      	cmp	r3, #11
 800b796:	d903      	bls.n	800b7a0 <_malloc_r+0x68>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	441c      	add	r4, r3
 800b79c:	6025      	str	r5, [r4, #0]
 800b79e:	e004      	b.n	800b7aa <_malloc_r+0x72>
 800b7a0:	6863      	ldr	r3, [r4, #4]
 800b7a2:	42a2      	cmp	r2, r4
 800b7a4:	bf0c      	ite	eq
 800b7a6:	600b      	streq	r3, [r1, #0]
 800b7a8:	6053      	strne	r3, [r2, #4]
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f000 fc2e 	bl	800c00c <__malloc_unlock>
 800b7b0:	f104 000b 	add.w	r0, r4, #11
 800b7b4:	1d23      	adds	r3, r4, #4
 800b7b6:	f020 0007 	bic.w	r0, r0, #7
 800b7ba:	1ac2      	subs	r2, r0, r3
 800b7bc:	d0cc      	beq.n	800b758 <_malloc_r+0x20>
 800b7be:	1a1b      	subs	r3, r3, r0
 800b7c0:	50a3      	str	r3, [r4, r2]
 800b7c2:	e7c9      	b.n	800b758 <_malloc_r+0x20>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	6864      	ldr	r4, [r4, #4]
 800b7c8:	e7cc      	b.n	800b764 <_malloc_r+0x2c>
 800b7ca:	1cc4      	adds	r4, r0, #3
 800b7cc:	f024 0403 	bic.w	r4, r4, #3
 800b7d0:	42a0      	cmp	r0, r4
 800b7d2:	d0e3      	beq.n	800b79c <_malloc_r+0x64>
 800b7d4:	1a21      	subs	r1, r4, r0
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 f962 	bl	800baa0 <_sbrk_r>
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d1dd      	bne.n	800b79c <_malloc_r+0x64>
 800b7e0:	e7cf      	b.n	800b782 <_malloc_r+0x4a>
 800b7e2:	bf00      	nop
 800b7e4:	20001b38 	.word	0x20001b38
 800b7e8:	20001b3c 	.word	0x20001b3c

0800b7ec <__sfputc_r>:
 800b7ec:	6893      	ldr	r3, [r2, #8]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	b410      	push	{r4}
 800b7f4:	6093      	str	r3, [r2, #8]
 800b7f6:	da08      	bge.n	800b80a <__sfputc_r+0x1e>
 800b7f8:	6994      	ldr	r4, [r2, #24]
 800b7fa:	42a3      	cmp	r3, r4
 800b7fc:	db01      	blt.n	800b802 <__sfputc_r+0x16>
 800b7fe:	290a      	cmp	r1, #10
 800b800:	d103      	bne.n	800b80a <__sfputc_r+0x1e>
 800b802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b806:	f000 b99f 	b.w	800bb48 <__swbuf_r>
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	1c58      	adds	r0, r3, #1
 800b80e:	6010      	str	r0, [r2, #0]
 800b810:	7019      	strb	r1, [r3, #0]
 800b812:	4608      	mov	r0, r1
 800b814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <__sfputs_r>:
 800b81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4614      	mov	r4, r2
 800b822:	18d5      	adds	r5, r2, r3
 800b824:	42ac      	cmp	r4, r5
 800b826:	d101      	bne.n	800b82c <__sfputs_r+0x12>
 800b828:	2000      	movs	r0, #0
 800b82a:	e007      	b.n	800b83c <__sfputs_r+0x22>
 800b82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b830:	463a      	mov	r2, r7
 800b832:	4630      	mov	r0, r6
 800b834:	f7ff ffda 	bl	800b7ec <__sfputc_r>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d1f3      	bne.n	800b824 <__sfputs_r+0xa>
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b840 <_vfiprintf_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	460d      	mov	r5, r1
 800b846:	b09d      	sub	sp, #116	; 0x74
 800b848:	4614      	mov	r4, r2
 800b84a:	4698      	mov	r8, r3
 800b84c:	4606      	mov	r6, r0
 800b84e:	b118      	cbz	r0, 800b858 <_vfiprintf_r+0x18>
 800b850:	6983      	ldr	r3, [r0, #24]
 800b852:	b90b      	cbnz	r3, 800b858 <_vfiprintf_r+0x18>
 800b854:	f7ff fae4 	bl	800ae20 <__sinit>
 800b858:	4b89      	ldr	r3, [pc, #548]	; (800ba80 <_vfiprintf_r+0x240>)
 800b85a:	429d      	cmp	r5, r3
 800b85c:	d11b      	bne.n	800b896 <_vfiprintf_r+0x56>
 800b85e:	6875      	ldr	r5, [r6, #4]
 800b860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b862:	07d9      	lsls	r1, r3, #31
 800b864:	d405      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	059a      	lsls	r2, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_vfiprintf_r+0x32>
 800b86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b86e:	f7ff fb7a 	bl	800af66 <__retarget_lock_acquire_recursive>
 800b872:	89ab      	ldrh	r3, [r5, #12]
 800b874:	071b      	lsls	r3, r3, #28
 800b876:	d501      	bpl.n	800b87c <_vfiprintf_r+0x3c>
 800b878:	692b      	ldr	r3, [r5, #16]
 800b87a:	b9eb      	cbnz	r3, 800b8b8 <_vfiprintf_r+0x78>
 800b87c:	4629      	mov	r1, r5
 800b87e:	4630      	mov	r0, r6
 800b880:	f000 f9c6 	bl	800bc10 <__swsetup_r>
 800b884:	b1c0      	cbz	r0, 800b8b8 <_vfiprintf_r+0x78>
 800b886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b888:	07dc      	lsls	r4, r3, #31
 800b88a:	d50e      	bpl.n	800b8aa <_vfiprintf_r+0x6a>
 800b88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b890:	b01d      	add	sp, #116	; 0x74
 800b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b896:	4b7b      	ldr	r3, [pc, #492]	; (800ba84 <_vfiprintf_r+0x244>)
 800b898:	429d      	cmp	r5, r3
 800b89a:	d101      	bne.n	800b8a0 <_vfiprintf_r+0x60>
 800b89c:	68b5      	ldr	r5, [r6, #8]
 800b89e:	e7df      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8a0:	4b79      	ldr	r3, [pc, #484]	; (800ba88 <_vfiprintf_r+0x248>)
 800b8a2:	429d      	cmp	r5, r3
 800b8a4:	bf08      	it	eq
 800b8a6:	68f5      	ldreq	r5, [r6, #12]
 800b8a8:	e7da      	b.n	800b860 <_vfiprintf_r+0x20>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	0598      	lsls	r0, r3, #22
 800b8ae:	d4ed      	bmi.n	800b88c <_vfiprintf_r+0x4c>
 800b8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8b2:	f7ff fb59 	bl	800af68 <__retarget_lock_release_recursive>
 800b8b6:	e7e9      	b.n	800b88c <_vfiprintf_r+0x4c>
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	2320      	movs	r3, #32
 800b8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8c6:	2330      	movs	r3, #48	; 0x30
 800b8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba8c <_vfiprintf_r+0x24c>
 800b8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8d0:	f04f 0901 	mov.w	r9, #1
 800b8d4:	4623      	mov	r3, r4
 800b8d6:	469a      	mov	sl, r3
 800b8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8dc:	b10a      	cbz	r2, 800b8e2 <_vfiprintf_r+0xa2>
 800b8de:	2a25      	cmp	r2, #37	; 0x25
 800b8e0:	d1f9      	bne.n	800b8d6 <_vfiprintf_r+0x96>
 800b8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b8e6:	d00b      	beq.n	800b900 <_vfiprintf_r+0xc0>
 800b8e8:	465b      	mov	r3, fp
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff ff93 	bl	800b81a <__sfputs_r>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	f000 80aa 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fc:	445a      	add	r2, fp
 800b8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b900:	f89a 3000 	ldrb.w	r3, [sl]
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 80a2 	beq.w	800ba4e <_vfiprintf_r+0x20e>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b914:	f10a 0a01 	add.w	sl, sl, #1
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	9307      	str	r3, [sp, #28]
 800b91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b920:	931a      	str	r3, [sp, #104]	; 0x68
 800b922:	4654      	mov	r4, sl
 800b924:	2205      	movs	r2, #5
 800b926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92a:	4858      	ldr	r0, [pc, #352]	; (800ba8c <_vfiprintf_r+0x24c>)
 800b92c:	f7f4 fc58 	bl	80001e0 <memchr>
 800b930:	9a04      	ldr	r2, [sp, #16]
 800b932:	b9d8      	cbnz	r0, 800b96c <_vfiprintf_r+0x12c>
 800b934:	06d1      	lsls	r1, r2, #27
 800b936:	bf44      	itt	mi
 800b938:	2320      	movmi	r3, #32
 800b93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b93e:	0713      	lsls	r3, r2, #28
 800b940:	bf44      	itt	mi
 800b942:	232b      	movmi	r3, #43	; 0x2b
 800b944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b948:	f89a 3000 	ldrb.w	r3, [sl]
 800b94c:	2b2a      	cmp	r3, #42	; 0x2a
 800b94e:	d015      	beq.n	800b97c <_vfiprintf_r+0x13c>
 800b950:	9a07      	ldr	r2, [sp, #28]
 800b952:	4654      	mov	r4, sl
 800b954:	2000      	movs	r0, #0
 800b956:	f04f 0c0a 	mov.w	ip, #10
 800b95a:	4621      	mov	r1, r4
 800b95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b960:	3b30      	subs	r3, #48	; 0x30
 800b962:	2b09      	cmp	r3, #9
 800b964:	d94e      	bls.n	800ba04 <_vfiprintf_r+0x1c4>
 800b966:	b1b0      	cbz	r0, 800b996 <_vfiprintf_r+0x156>
 800b968:	9207      	str	r2, [sp, #28]
 800b96a:	e014      	b.n	800b996 <_vfiprintf_r+0x156>
 800b96c:	eba0 0308 	sub.w	r3, r0, r8
 800b970:	fa09 f303 	lsl.w	r3, r9, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	9304      	str	r3, [sp, #16]
 800b978:	46a2      	mov	sl, r4
 800b97a:	e7d2      	b.n	800b922 <_vfiprintf_r+0xe2>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	1d19      	adds	r1, r3, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	9103      	str	r1, [sp, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	bfbb      	ittet	lt
 800b988:	425b      	neglt	r3, r3
 800b98a:	f042 0202 	orrlt.w	r2, r2, #2
 800b98e:	9307      	strge	r3, [sp, #28]
 800b990:	9307      	strlt	r3, [sp, #28]
 800b992:	bfb8      	it	lt
 800b994:	9204      	strlt	r2, [sp, #16]
 800b996:	7823      	ldrb	r3, [r4, #0]
 800b998:	2b2e      	cmp	r3, #46	; 0x2e
 800b99a:	d10c      	bne.n	800b9b6 <_vfiprintf_r+0x176>
 800b99c:	7863      	ldrb	r3, [r4, #1]
 800b99e:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a0:	d135      	bne.n	800ba0e <_vfiprintf_r+0x1ce>
 800b9a2:	9b03      	ldr	r3, [sp, #12]
 800b9a4:	1d1a      	adds	r2, r3, #4
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	9203      	str	r2, [sp, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bfb8      	it	lt
 800b9ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b9b2:	3402      	adds	r4, #2
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba9c <_vfiprintf_r+0x25c>
 800b9ba:	7821      	ldrb	r1, [r4, #0]
 800b9bc:	2203      	movs	r2, #3
 800b9be:	4650      	mov	r0, sl
 800b9c0:	f7f4 fc0e 	bl	80001e0 <memchr>
 800b9c4:	b140      	cbz	r0, 800b9d8 <_vfiprintf_r+0x198>
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	eba0 000a 	sub.w	r0, r0, sl
 800b9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b9d0:	9b04      	ldr	r3, [sp, #16]
 800b9d2:	4303      	orrs	r3, r0
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	9304      	str	r3, [sp, #16]
 800b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9dc:	482c      	ldr	r0, [pc, #176]	; (800ba90 <_vfiprintf_r+0x250>)
 800b9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9e2:	2206      	movs	r2, #6
 800b9e4:	f7f4 fbfc 	bl	80001e0 <memchr>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d03f      	beq.n	800ba6c <_vfiprintf_r+0x22c>
 800b9ec:	4b29      	ldr	r3, [pc, #164]	; (800ba94 <_vfiprintf_r+0x254>)
 800b9ee:	bb1b      	cbnz	r3, 800ba38 <_vfiprintf_r+0x1f8>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	3307      	adds	r3, #7
 800b9f4:	f023 0307 	bic.w	r3, r3, #7
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	9303      	str	r3, [sp, #12]
 800b9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fe:	443b      	add	r3, r7
 800ba00:	9309      	str	r3, [sp, #36]	; 0x24
 800ba02:	e767      	b.n	800b8d4 <_vfiprintf_r+0x94>
 800ba04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba08:	460c      	mov	r4, r1
 800ba0a:	2001      	movs	r0, #1
 800ba0c:	e7a5      	b.n	800b95a <_vfiprintf_r+0x11a>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	3401      	adds	r4, #1
 800ba12:	9305      	str	r3, [sp, #20]
 800ba14:	4619      	mov	r1, r3
 800ba16:	f04f 0c0a 	mov.w	ip, #10
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba20:	3a30      	subs	r2, #48	; 0x30
 800ba22:	2a09      	cmp	r2, #9
 800ba24:	d903      	bls.n	800ba2e <_vfiprintf_r+0x1ee>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d0c5      	beq.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2a:	9105      	str	r1, [sp, #20]
 800ba2c:	e7c3      	b.n	800b9b6 <_vfiprintf_r+0x176>
 800ba2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba32:	4604      	mov	r4, r0
 800ba34:	2301      	movs	r3, #1
 800ba36:	e7f0      	b.n	800ba1a <_vfiprintf_r+0x1da>
 800ba38:	ab03      	add	r3, sp, #12
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4b16      	ldr	r3, [pc, #88]	; (800ba98 <_vfiprintf_r+0x258>)
 800ba40:	a904      	add	r1, sp, #16
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7fd ff3a 	bl	80098bc <_printf_float>
 800ba48:	4607      	mov	r7, r0
 800ba4a:	1c78      	adds	r0, r7, #1
 800ba4c:	d1d6      	bne.n	800b9fc <_vfiprintf_r+0x1bc>
 800ba4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba50:	07d9      	lsls	r1, r3, #31
 800ba52:	d405      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba54:	89ab      	ldrh	r3, [r5, #12]
 800ba56:	059a      	lsls	r2, r3, #22
 800ba58:	d402      	bmi.n	800ba60 <_vfiprintf_r+0x220>
 800ba5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba5c:	f7ff fa84 	bl	800af68 <__retarget_lock_release_recursive>
 800ba60:	89ab      	ldrh	r3, [r5, #12]
 800ba62:	065b      	lsls	r3, r3, #25
 800ba64:	f53f af12 	bmi.w	800b88c <_vfiprintf_r+0x4c>
 800ba68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba6a:	e711      	b.n	800b890 <_vfiprintf_r+0x50>
 800ba6c:	ab03      	add	r3, sp, #12
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	462a      	mov	r2, r5
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <_vfiprintf_r+0x258>)
 800ba74:	a904      	add	r1, sp, #16
 800ba76:	4630      	mov	r0, r6
 800ba78:	f7fe f9c4 	bl	8009e04 <_printf_i>
 800ba7c:	e7e4      	b.n	800ba48 <_vfiprintf_r+0x208>
 800ba7e:	bf00      	nop
 800ba80:	0800c35c 	.word	0x0800c35c
 800ba84:	0800c37c 	.word	0x0800c37c
 800ba88:	0800c33c 	.word	0x0800c33c
 800ba8c:	0800c4fc 	.word	0x0800c4fc
 800ba90:	0800c506 	.word	0x0800c506
 800ba94:	080098bd 	.word	0x080098bd
 800ba98:	0800b81b 	.word	0x0800b81b
 800ba9c:	0800c502 	.word	0x0800c502

0800baa0 <_sbrk_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d06      	ldr	r5, [pc, #24]	; (800babc <_sbrk_r+0x1c>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f5 ff4c 	bl	8001948 <_sbrk>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_sbrk_r+0x1a>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_sbrk_r+0x1a>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20001d1c 	.word	0x20001d1c

0800bac0 <__sread>:
 800bac0:	b510      	push	{r4, lr}
 800bac2:	460c      	mov	r4, r1
 800bac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac8:	f000 faa6 	bl	800c018 <_read_r>
 800bacc:	2800      	cmp	r0, #0
 800bace:	bfab      	itete	ge
 800bad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bad2:	89a3      	ldrhlt	r3, [r4, #12]
 800bad4:	181b      	addge	r3, r3, r0
 800bad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bada:	bfac      	ite	ge
 800badc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bade:	81a3      	strhlt	r3, [r4, #12]
 800bae0:	bd10      	pop	{r4, pc}

0800bae2 <__swrite>:
 800bae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae6:	461f      	mov	r7, r3
 800bae8:	898b      	ldrh	r3, [r1, #12]
 800baea:	05db      	lsls	r3, r3, #23
 800baec:	4605      	mov	r5, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	4616      	mov	r6, r2
 800baf2:	d505      	bpl.n	800bb00 <__swrite+0x1e>
 800baf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf8:	2302      	movs	r3, #2
 800bafa:	2200      	movs	r2, #0
 800bafc:	f000 f9f8 	bl	800bef0 <_lseek_r>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb0a:	81a3      	strh	r3, [r4, #12]
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	463b      	mov	r3, r7
 800bb10:	4628      	mov	r0, r5
 800bb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb16:	f000 b869 	b.w	800bbec <_write_r>

0800bb1a <__sseek>:
 800bb1a:	b510      	push	{r4, lr}
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb22:	f000 f9e5 	bl	800bef0 <_lseek_r>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	bf15      	itete	ne
 800bb2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb36:	81a3      	strheq	r3, [r4, #12]
 800bb38:	bf18      	it	ne
 800bb3a:	81a3      	strhne	r3, [r4, #12]
 800bb3c:	bd10      	pop	{r4, pc}

0800bb3e <__sclose>:
 800bb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb42:	f000 b8f1 	b.w	800bd28 <_close_r>
	...

0800bb48 <__swbuf_r>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4614      	mov	r4, r2
 800bb4e:	4605      	mov	r5, r0
 800bb50:	b118      	cbz	r0, 800bb5a <__swbuf_r+0x12>
 800bb52:	6983      	ldr	r3, [r0, #24]
 800bb54:	b90b      	cbnz	r3, 800bb5a <__swbuf_r+0x12>
 800bb56:	f7ff f963 	bl	800ae20 <__sinit>
 800bb5a:	4b21      	ldr	r3, [pc, #132]	; (800bbe0 <__swbuf_r+0x98>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	d12b      	bne.n	800bbb8 <__swbuf_r+0x70>
 800bb60:	686c      	ldr	r4, [r5, #4]
 800bb62:	69a3      	ldr	r3, [r4, #24]
 800bb64:	60a3      	str	r3, [r4, #8]
 800bb66:	89a3      	ldrh	r3, [r4, #12]
 800bb68:	071a      	lsls	r2, r3, #28
 800bb6a:	d52f      	bpl.n	800bbcc <__swbuf_r+0x84>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	b36b      	cbz	r3, 800bbcc <__swbuf_r+0x84>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	1ac0      	subs	r0, r0, r3
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	b2f6      	uxtb	r6, r6
 800bb7a:	4283      	cmp	r3, r0
 800bb7c:	4637      	mov	r7, r6
 800bb7e:	dc04      	bgt.n	800bb8a <__swbuf_r+0x42>
 800bb80:	4621      	mov	r1, r4
 800bb82:	4628      	mov	r0, r5
 800bb84:	f000 f966 	bl	800be54 <_fflush_r>
 800bb88:	bb30      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	6022      	str	r2, [r4, #0]
 800bb96:	701e      	strb	r6, [r3, #0]
 800bb98:	6963      	ldr	r3, [r4, #20]
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	4283      	cmp	r3, r0
 800bb9e:	d004      	beq.n	800bbaa <__swbuf_r+0x62>
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	07db      	lsls	r3, r3, #31
 800bba4:	d506      	bpl.n	800bbb4 <__swbuf_r+0x6c>
 800bba6:	2e0a      	cmp	r6, #10
 800bba8:	d104      	bne.n	800bbb4 <__swbuf_r+0x6c>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f951 	bl	800be54 <_fflush_r>
 800bbb2:	b988      	cbnz	r0, 800bbd8 <__swbuf_r+0x90>
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <__swbuf_r+0x9c>)
 800bbba:	429c      	cmp	r4, r3
 800bbbc:	d101      	bne.n	800bbc2 <__swbuf_r+0x7a>
 800bbbe:	68ac      	ldr	r4, [r5, #8]
 800bbc0:	e7cf      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbc2:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <__swbuf_r+0xa0>)
 800bbc4:	429c      	cmp	r4, r3
 800bbc6:	bf08      	it	eq
 800bbc8:	68ec      	ldreq	r4, [r5, #12]
 800bbca:	e7ca      	b.n	800bb62 <__swbuf_r+0x1a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f000 f81e 	bl	800bc10 <__swsetup_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d0cb      	beq.n	800bb70 <__swbuf_r+0x28>
 800bbd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbdc:	e7ea      	b.n	800bbb4 <__swbuf_r+0x6c>
 800bbde:	bf00      	nop
 800bbe0:	0800c35c 	.word	0x0800c35c
 800bbe4:	0800c37c 	.word	0x0800c37c
 800bbe8:	0800c33c 	.word	0x0800c33c

0800bbec <_write_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4d07      	ldr	r5, [pc, #28]	; (800bc0c <_write_r+0x20>)
 800bbf0:	4604      	mov	r4, r0
 800bbf2:	4608      	mov	r0, r1
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	602a      	str	r2, [r5, #0]
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f7f5 fe53 	bl	80018a6 <_write>
 800bc00:	1c43      	adds	r3, r0, #1
 800bc02:	d102      	bne.n	800bc0a <_write_r+0x1e>
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	b103      	cbz	r3, 800bc0a <_write_r+0x1e>
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	bd38      	pop	{r3, r4, r5, pc}
 800bc0c:	20001d1c 	.word	0x20001d1c

0800bc10 <__swsetup_r>:
 800bc10:	4b32      	ldr	r3, [pc, #200]	; (800bcdc <__swsetup_r+0xcc>)
 800bc12:	b570      	push	{r4, r5, r6, lr}
 800bc14:	681d      	ldr	r5, [r3, #0]
 800bc16:	4606      	mov	r6, r0
 800bc18:	460c      	mov	r4, r1
 800bc1a:	b125      	cbz	r5, 800bc26 <__swsetup_r+0x16>
 800bc1c:	69ab      	ldr	r3, [r5, #24]
 800bc1e:	b913      	cbnz	r3, 800bc26 <__swsetup_r+0x16>
 800bc20:	4628      	mov	r0, r5
 800bc22:	f7ff f8fd 	bl	800ae20 <__sinit>
 800bc26:	4b2e      	ldr	r3, [pc, #184]	; (800bce0 <__swsetup_r+0xd0>)
 800bc28:	429c      	cmp	r4, r3
 800bc2a:	d10f      	bne.n	800bc4c <__swsetup_r+0x3c>
 800bc2c:	686c      	ldr	r4, [r5, #4]
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc34:	0719      	lsls	r1, r3, #28
 800bc36:	d42c      	bmi.n	800bc92 <__swsetup_r+0x82>
 800bc38:	06dd      	lsls	r5, r3, #27
 800bc3a:	d411      	bmi.n	800bc60 <__swsetup_r+0x50>
 800bc3c:	2309      	movs	r3, #9
 800bc3e:	6033      	str	r3, [r6, #0]
 800bc40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc4a:	e03e      	b.n	800bcca <__swsetup_r+0xba>
 800bc4c:	4b25      	ldr	r3, [pc, #148]	; (800bce4 <__swsetup_r+0xd4>)
 800bc4e:	429c      	cmp	r4, r3
 800bc50:	d101      	bne.n	800bc56 <__swsetup_r+0x46>
 800bc52:	68ac      	ldr	r4, [r5, #8]
 800bc54:	e7eb      	b.n	800bc2e <__swsetup_r+0x1e>
 800bc56:	4b24      	ldr	r3, [pc, #144]	; (800bce8 <__swsetup_r+0xd8>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	bf08      	it	eq
 800bc5c:	68ec      	ldreq	r4, [r5, #12]
 800bc5e:	e7e6      	b.n	800bc2e <__swsetup_r+0x1e>
 800bc60:	0758      	lsls	r0, r3, #29
 800bc62:	d512      	bpl.n	800bc8a <__swsetup_r+0x7a>
 800bc64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc66:	b141      	cbz	r1, 800bc7a <__swsetup_r+0x6a>
 800bc68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc6c:	4299      	cmp	r1, r3
 800bc6e:	d002      	beq.n	800bc76 <__swsetup_r+0x66>
 800bc70:	4630      	mov	r0, r6
 800bc72:	f7ff fd11 	bl	800b698 <_free_r>
 800bc76:	2300      	movs	r3, #0
 800bc78:	6363      	str	r3, [r4, #52]	; 0x34
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	2300      	movs	r3, #0
 800bc84:	6063      	str	r3, [r4, #4]
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	f043 0308 	orr.w	r3, r3, #8
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	6923      	ldr	r3, [r4, #16]
 800bc94:	b94b      	cbnz	r3, 800bcaa <__swsetup_r+0x9a>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca0:	d003      	beq.n	800bcaa <__swsetup_r+0x9a>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4630      	mov	r0, r6
 800bca6:	f000 f959 	bl	800bf5c <__smakebuf_r>
 800bcaa:	89a0      	ldrh	r0, [r4, #12]
 800bcac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcb0:	f010 0301 	ands.w	r3, r0, #1
 800bcb4:	d00a      	beq.n	800bccc <__swsetup_r+0xbc>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60a3      	str	r3, [r4, #8]
 800bcba:	6963      	ldr	r3, [r4, #20]
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	61a3      	str	r3, [r4, #24]
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	b943      	cbnz	r3, 800bcd6 <__swsetup_r+0xc6>
 800bcc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcc8:	d1ba      	bne.n	800bc40 <__swsetup_r+0x30>
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	0781      	lsls	r1, r0, #30
 800bcce:	bf58      	it	pl
 800bcd0:	6963      	ldrpl	r3, [r4, #20]
 800bcd2:	60a3      	str	r3, [r4, #8]
 800bcd4:	e7f4      	b.n	800bcc0 <__swsetup_r+0xb0>
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e7f7      	b.n	800bcca <__swsetup_r+0xba>
 800bcda:	bf00      	nop
 800bcdc:	20000014 	.word	0x20000014
 800bce0:	0800c35c 	.word	0x0800c35c
 800bce4:	0800c37c 	.word	0x0800c37c
 800bce8:	0800c33c 	.word	0x0800c33c

0800bcec <__assert_func>:
 800bcec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcee:	4614      	mov	r4, r2
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	4b09      	ldr	r3, [pc, #36]	; (800bd18 <__assert_func+0x2c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	68d8      	ldr	r0, [r3, #12]
 800bcfa:	b14c      	cbz	r4, 800bd10 <__assert_func+0x24>
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <__assert_func+0x30>)
 800bcfe:	9100      	str	r1, [sp, #0]
 800bd00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd04:	4906      	ldr	r1, [pc, #24]	; (800bd20 <__assert_func+0x34>)
 800bd06:	462b      	mov	r3, r5
 800bd08:	f000 f8e0 	bl	800becc <fiprintf>
 800bd0c:	f000 f9a3 	bl	800c056 <abort>
 800bd10:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <__assert_func+0x38>)
 800bd12:	461c      	mov	r4, r3
 800bd14:	e7f3      	b.n	800bcfe <__assert_func+0x12>
 800bd16:	bf00      	nop
 800bd18:	20000014 	.word	0x20000014
 800bd1c:	0800c50d 	.word	0x0800c50d
 800bd20:	0800c51a 	.word	0x0800c51a
 800bd24:	0800c548 	.word	0x0800c548

0800bd28 <_close_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d06      	ldr	r5, [pc, #24]	; (800bd44 <_close_r+0x1c>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	f7f5 fdd3 	bl	80018de <_close>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_close_r+0x1a>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_close_r+0x1a>
 800bd40:	6023      	str	r3, [r4, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	20001d1c 	.word	0x20001d1c

0800bd48 <__sflush_r>:
 800bd48:	898a      	ldrh	r2, [r1, #12]
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4605      	mov	r5, r0
 800bd50:	0710      	lsls	r0, r2, #28
 800bd52:	460c      	mov	r4, r1
 800bd54:	d458      	bmi.n	800be08 <__sflush_r+0xc0>
 800bd56:	684b      	ldr	r3, [r1, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc05      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc02      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0f9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd74:	682f      	ldr	r7, [r5, #0]
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	d032      	beq.n	800bde0 <__sflush_r+0x98>
 800bd7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	075a      	lsls	r2, r3, #29
 800bd80:	d505      	bpl.n	800bd8e <__sflush_r+0x46>
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	1ac0      	subs	r0, r0, r3
 800bd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd88:	b10b      	cbz	r3, 800bd8e <__sflush_r+0x46>
 800bd8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd8c:	1ac0      	subs	r0, r0, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4602      	mov	r2, r0
 800bd92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd94:	6a21      	ldr	r1, [r4, #32]
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b0      	blx	r6
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	d106      	bne.n	800bdae <__sflush_r+0x66>
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	291d      	cmp	r1, #29
 800bda4:	d82c      	bhi.n	800be00 <__sflush_r+0xb8>
 800bda6:	4a2a      	ldr	r2, [pc, #168]	; (800be50 <__sflush_r+0x108>)
 800bda8:	40ca      	lsrs	r2, r1
 800bdaa:	07d6      	lsls	r6, r2, #31
 800bdac:	d528      	bpl.n	800be00 <__sflush_r+0xb8>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6062      	str	r2, [r4, #4]
 800bdb2:	04d9      	lsls	r1, r3, #19
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	6022      	str	r2, [r4, #0]
 800bdb8:	d504      	bpl.n	800bdc4 <__sflush_r+0x7c>
 800bdba:	1c42      	adds	r2, r0, #1
 800bdbc:	d101      	bne.n	800bdc2 <__sflush_r+0x7a>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b903      	cbnz	r3, 800bdc4 <__sflush_r+0x7c>
 800bdc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc6:	602f      	str	r7, [r5, #0]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	d0ca      	beq.n	800bd62 <__sflush_r+0x1a>
 800bdcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <__sflush_r+0x92>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7ff fc5f 	bl	800b698 <_free_r>
 800bdda:	2000      	movs	r0, #0
 800bddc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdde:	e7c1      	b.n	800bd64 <__sflush_r+0x1c>
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	2301      	movs	r3, #1
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b0      	blx	r6
 800bde8:	1c41      	adds	r1, r0, #1
 800bdea:	d1c7      	bne.n	800bd7c <__sflush_r+0x34>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0c4      	beq.n	800bd7c <__sflush_r+0x34>
 800bdf2:	2b1d      	cmp	r3, #29
 800bdf4:	d001      	beq.n	800bdfa <__sflush_r+0xb2>
 800bdf6:	2b16      	cmp	r3, #22
 800bdf8:	d101      	bne.n	800bdfe <__sflush_r+0xb6>
 800bdfa:	602f      	str	r7, [r5, #0]
 800bdfc:	e7b1      	b.n	800bd62 <__sflush_r+0x1a>
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	e7ad      	b.n	800bd64 <__sflush_r+0x1c>
 800be08:	690f      	ldr	r7, [r1, #16]
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d0a9      	beq.n	800bd62 <__sflush_r+0x1a>
 800be0e:	0793      	lsls	r3, r2, #30
 800be10:	680e      	ldr	r6, [r1, #0]
 800be12:	bf08      	it	eq
 800be14:	694b      	ldreq	r3, [r1, #20]
 800be16:	600f      	str	r7, [r1, #0]
 800be18:	bf18      	it	ne
 800be1a:	2300      	movne	r3, #0
 800be1c:	eba6 0807 	sub.w	r8, r6, r7
 800be20:	608b      	str	r3, [r1, #8]
 800be22:	f1b8 0f00 	cmp.w	r8, #0
 800be26:	dd9c      	ble.n	800bd62 <__sflush_r+0x1a>
 800be28:	6a21      	ldr	r1, [r4, #32]
 800be2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be2c:	4643      	mov	r3, r8
 800be2e:	463a      	mov	r2, r7
 800be30:	4628      	mov	r0, r5
 800be32:	47b0      	blx	r6
 800be34:	2800      	cmp	r0, #0
 800be36:	dc06      	bgt.n	800be46 <__sflush_r+0xfe>
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be44:	e78e      	b.n	800bd64 <__sflush_r+0x1c>
 800be46:	4407      	add	r7, r0
 800be48:	eba8 0800 	sub.w	r8, r8, r0
 800be4c:	e7e9      	b.n	800be22 <__sflush_r+0xda>
 800be4e:	bf00      	nop
 800be50:	20400001 	.word	0x20400001

0800be54 <_fflush_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	690b      	ldr	r3, [r1, #16]
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	b913      	cbnz	r3, 800be64 <_fflush_r+0x10>
 800be5e:	2500      	movs	r5, #0
 800be60:	4628      	mov	r0, r5
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	b118      	cbz	r0, 800be6e <_fflush_r+0x1a>
 800be66:	6983      	ldr	r3, [r0, #24]
 800be68:	b90b      	cbnz	r3, 800be6e <_fflush_r+0x1a>
 800be6a:	f7fe ffd9 	bl	800ae20 <__sinit>
 800be6e:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <_fflush_r+0x6c>)
 800be70:	429c      	cmp	r4, r3
 800be72:	d11b      	bne.n	800beac <_fflush_r+0x58>
 800be74:	686c      	ldr	r4, [r5, #4]
 800be76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0ef      	beq.n	800be5e <_fflush_r+0xa>
 800be7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be80:	07d0      	lsls	r0, r2, #31
 800be82:	d404      	bmi.n	800be8e <_fflush_r+0x3a>
 800be84:	0599      	lsls	r1, r3, #22
 800be86:	d402      	bmi.n	800be8e <_fflush_r+0x3a>
 800be88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be8a:	f7ff f86c 	bl	800af66 <__retarget_lock_acquire_recursive>
 800be8e:	4628      	mov	r0, r5
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff ff59 	bl	800bd48 <__sflush_r>
 800be96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be98:	07da      	lsls	r2, r3, #31
 800be9a:	4605      	mov	r5, r0
 800be9c:	d4e0      	bmi.n	800be60 <_fflush_r+0xc>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	059b      	lsls	r3, r3, #22
 800bea2:	d4dd      	bmi.n	800be60 <_fflush_r+0xc>
 800bea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bea6:	f7ff f85f 	bl	800af68 <__retarget_lock_release_recursive>
 800beaa:	e7d9      	b.n	800be60 <_fflush_r+0xc>
 800beac:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <_fflush_r+0x70>)
 800beae:	429c      	cmp	r4, r3
 800beb0:	d101      	bne.n	800beb6 <_fflush_r+0x62>
 800beb2:	68ac      	ldr	r4, [r5, #8]
 800beb4:	e7df      	b.n	800be76 <_fflush_r+0x22>
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <_fflush_r+0x74>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	bf08      	it	eq
 800bebc:	68ec      	ldreq	r4, [r5, #12]
 800bebe:	e7da      	b.n	800be76 <_fflush_r+0x22>
 800bec0:	0800c35c 	.word	0x0800c35c
 800bec4:	0800c37c 	.word	0x0800c37c
 800bec8:	0800c33c 	.word	0x0800c33c

0800becc <fiprintf>:
 800becc:	b40e      	push	{r1, r2, r3}
 800bece:	b503      	push	{r0, r1, lr}
 800bed0:	4601      	mov	r1, r0
 800bed2:	ab03      	add	r3, sp, #12
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <fiprintf+0x20>)
 800bed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800beda:	6800      	ldr	r0, [r0, #0]
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	f7ff fcaf 	bl	800b840 <_vfiprintf_r>
 800bee2:	b002      	add	sp, #8
 800bee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bee8:	b003      	add	sp, #12
 800beea:	4770      	bx	lr
 800beec:	20000014 	.word	0x20000014

0800bef0 <_lseek_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d07      	ldr	r5, [pc, #28]	; (800bf10 <_lseek_r+0x20>)
 800bef4:	4604      	mov	r4, r0
 800bef6:	4608      	mov	r0, r1
 800bef8:	4611      	mov	r1, r2
 800befa:	2200      	movs	r2, #0
 800befc:	602a      	str	r2, [r5, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	f7f5 fd14 	bl	800192c <_lseek>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d102      	bne.n	800bf0e <_lseek_r+0x1e>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	b103      	cbz	r3, 800bf0e <_lseek_r+0x1e>
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	20001d1c 	.word	0x20001d1c

0800bf14 <__swhatbuf_r>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	460e      	mov	r6, r1
 800bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	b096      	sub	sp, #88	; 0x58
 800bf20:	4614      	mov	r4, r2
 800bf22:	461d      	mov	r5, r3
 800bf24:	da07      	bge.n	800bf36 <__swhatbuf_r+0x22>
 800bf26:	2300      	movs	r3, #0
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	89b3      	ldrh	r3, [r6, #12]
 800bf2c:	061a      	lsls	r2, r3, #24
 800bf2e:	d410      	bmi.n	800bf52 <__swhatbuf_r+0x3e>
 800bf30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf34:	e00e      	b.n	800bf54 <__swhatbuf_r+0x40>
 800bf36:	466a      	mov	r2, sp
 800bf38:	f000 f894 	bl	800c064 <_fstat_r>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	dbf2      	blt.n	800bf26 <__swhatbuf_r+0x12>
 800bf40:	9a01      	ldr	r2, [sp, #4]
 800bf42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf4a:	425a      	negs	r2, r3
 800bf4c:	415a      	adcs	r2, r3
 800bf4e:	602a      	str	r2, [r5, #0]
 800bf50:	e7ee      	b.n	800bf30 <__swhatbuf_r+0x1c>
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	2000      	movs	r0, #0
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	b016      	add	sp, #88	; 0x58
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}

0800bf5c <__smakebuf_r>:
 800bf5c:	898b      	ldrh	r3, [r1, #12]
 800bf5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf60:	079d      	lsls	r5, r3, #30
 800bf62:	4606      	mov	r6, r0
 800bf64:	460c      	mov	r4, r1
 800bf66:	d507      	bpl.n	800bf78 <__smakebuf_r+0x1c>
 800bf68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	6123      	str	r3, [r4, #16]
 800bf70:	2301      	movs	r3, #1
 800bf72:	6163      	str	r3, [r4, #20]
 800bf74:	b002      	add	sp, #8
 800bf76:	bd70      	pop	{r4, r5, r6, pc}
 800bf78:	ab01      	add	r3, sp, #4
 800bf7a:	466a      	mov	r2, sp
 800bf7c:	f7ff ffca 	bl	800bf14 <__swhatbuf_r>
 800bf80:	9900      	ldr	r1, [sp, #0]
 800bf82:	4605      	mov	r5, r0
 800bf84:	4630      	mov	r0, r6
 800bf86:	f7ff fbd7 	bl	800b738 <_malloc_r>
 800bf8a:	b948      	cbnz	r0, 800bfa0 <__smakebuf_r+0x44>
 800bf8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf90:	059a      	lsls	r2, r3, #22
 800bf92:	d4ef      	bmi.n	800bf74 <__smakebuf_r+0x18>
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	f043 0302 	orr.w	r3, r3, #2
 800bf9c:	81a3      	strh	r3, [r4, #12]
 800bf9e:	e7e3      	b.n	800bf68 <__smakebuf_r+0xc>
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <__smakebuf_r+0x7c>)
 800bfa2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	6020      	str	r0, [r4, #0]
 800bfa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfac:	81a3      	strh	r3, [r4, #12]
 800bfae:	9b00      	ldr	r3, [sp, #0]
 800bfb0:	6163      	str	r3, [r4, #20]
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	6120      	str	r0, [r4, #16]
 800bfb6:	b15b      	cbz	r3, 800bfd0 <__smakebuf_r+0x74>
 800bfb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f000 f863 	bl	800c088 <_isatty_r>
 800bfc2:	b128      	cbz	r0, 800bfd0 <__smakebuf_r+0x74>
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f023 0303 	bic.w	r3, r3, #3
 800bfca:	f043 0301 	orr.w	r3, r3, #1
 800bfce:	81a3      	strh	r3, [r4, #12]
 800bfd0:	89a0      	ldrh	r0, [r4, #12]
 800bfd2:	4305      	orrs	r5, r0
 800bfd4:	81a5      	strh	r5, [r4, #12]
 800bfd6:	e7cd      	b.n	800bf74 <__smakebuf_r+0x18>
 800bfd8:	0800adb9 	.word	0x0800adb9

0800bfdc <__ascii_mbtowc>:
 800bfdc:	b082      	sub	sp, #8
 800bfde:	b901      	cbnz	r1, 800bfe2 <__ascii_mbtowc+0x6>
 800bfe0:	a901      	add	r1, sp, #4
 800bfe2:	b142      	cbz	r2, 800bff6 <__ascii_mbtowc+0x1a>
 800bfe4:	b14b      	cbz	r3, 800bffa <__ascii_mbtowc+0x1e>
 800bfe6:	7813      	ldrb	r3, [r2, #0]
 800bfe8:	600b      	str	r3, [r1, #0]
 800bfea:	7812      	ldrb	r2, [r2, #0]
 800bfec:	1e10      	subs	r0, r2, #0
 800bfee:	bf18      	it	ne
 800bff0:	2001      	movne	r0, #1
 800bff2:	b002      	add	sp, #8
 800bff4:	4770      	bx	lr
 800bff6:	4610      	mov	r0, r2
 800bff8:	e7fb      	b.n	800bff2 <__ascii_mbtowc+0x16>
 800bffa:	f06f 0001 	mvn.w	r0, #1
 800bffe:	e7f8      	b.n	800bff2 <__ascii_mbtowc+0x16>

0800c000 <__malloc_lock>:
 800c000:	4801      	ldr	r0, [pc, #4]	; (800c008 <__malloc_lock+0x8>)
 800c002:	f7fe bfb0 	b.w	800af66 <__retarget_lock_acquire_recursive>
 800c006:	bf00      	nop
 800c008:	20001d14 	.word	0x20001d14

0800c00c <__malloc_unlock>:
 800c00c:	4801      	ldr	r0, [pc, #4]	; (800c014 <__malloc_unlock+0x8>)
 800c00e:	f7fe bfab 	b.w	800af68 <__retarget_lock_release_recursive>
 800c012:	bf00      	nop
 800c014:	20001d14 	.word	0x20001d14

0800c018 <_read_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d07      	ldr	r5, [pc, #28]	; (800c038 <_read_r+0x20>)
 800c01c:	4604      	mov	r4, r0
 800c01e:	4608      	mov	r0, r1
 800c020:	4611      	mov	r1, r2
 800c022:	2200      	movs	r2, #0
 800c024:	602a      	str	r2, [r5, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f7f5 fc20 	bl	800186c <_read>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_read_r+0x1e>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_read_r+0x1e>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	20001d1c 	.word	0x20001d1c

0800c03c <__ascii_wctomb>:
 800c03c:	b149      	cbz	r1, 800c052 <__ascii_wctomb+0x16>
 800c03e:	2aff      	cmp	r2, #255	; 0xff
 800c040:	bf85      	ittet	hi
 800c042:	238a      	movhi	r3, #138	; 0x8a
 800c044:	6003      	strhi	r3, [r0, #0]
 800c046:	700a      	strbls	r2, [r1, #0]
 800c048:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c04c:	bf98      	it	ls
 800c04e:	2001      	movls	r0, #1
 800c050:	4770      	bx	lr
 800c052:	4608      	mov	r0, r1
 800c054:	4770      	bx	lr

0800c056 <abort>:
 800c056:	b508      	push	{r3, lr}
 800c058:	2006      	movs	r0, #6
 800c05a:	f000 f84d 	bl	800c0f8 <raise>
 800c05e:	2001      	movs	r0, #1
 800c060:	f7f5 fbfa 	bl	8001858 <_exit>

0800c064 <_fstat_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	; (800c084 <_fstat_r+0x20>)
 800c068:	2300      	movs	r3, #0
 800c06a:	4604      	mov	r4, r0
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	f7f5 fc40 	bl	80018f6 <_fstat>
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	d102      	bne.n	800c080 <_fstat_r+0x1c>
 800c07a:	682b      	ldr	r3, [r5, #0]
 800c07c:	b103      	cbz	r3, 800c080 <_fstat_r+0x1c>
 800c07e:	6023      	str	r3, [r4, #0]
 800c080:	bd38      	pop	{r3, r4, r5, pc}
 800c082:	bf00      	nop
 800c084:	20001d1c 	.word	0x20001d1c

0800c088 <_isatty_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d06      	ldr	r5, [pc, #24]	; (800c0a4 <_isatty_r+0x1c>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4604      	mov	r4, r0
 800c090:	4608      	mov	r0, r1
 800c092:	602b      	str	r3, [r5, #0]
 800c094:	f7f5 fc3f 	bl	8001916 <_isatty>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_isatty_r+0x1a>
 800c09c:	682b      	ldr	r3, [r5, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_isatty_r+0x1a>
 800c0a0:	6023      	str	r3, [r4, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	20001d1c 	.word	0x20001d1c

0800c0a8 <_raise_r>:
 800c0a8:	291f      	cmp	r1, #31
 800c0aa:	b538      	push	{r3, r4, r5, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	d904      	bls.n	800c0bc <_raise_r+0x14>
 800c0b2:	2316      	movs	r3, #22
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0be:	b112      	cbz	r2, 800c0c6 <_raise_r+0x1e>
 800c0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c4:	b94b      	cbnz	r3, 800c0da <_raise_r+0x32>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 f830 	bl	800c12c <_getpid_r>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d6:	f000 b817 	b.w	800c108 <_kill_r>
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d00a      	beq.n	800c0f4 <_raise_r+0x4c>
 800c0de:	1c59      	adds	r1, r3, #1
 800c0e0:	d103      	bne.n	800c0ea <_raise_r+0x42>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e7e7      	b.n	800c0ba <_raise_r+0x12>
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	4798      	blx	r3
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7e0      	b.n	800c0ba <_raise_r+0x12>

0800c0f8 <raise>:
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <raise+0xc>)
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	f7ff bfd3 	b.w	800c0a8 <_raise_r>
 800c102:	bf00      	nop
 800c104:	20000014 	.word	0x20000014

0800c108 <_kill_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	4d07      	ldr	r5, [pc, #28]	; (800c128 <_kill_r+0x20>)
 800c10c:	2300      	movs	r3, #0
 800c10e:	4604      	mov	r4, r0
 800c110:	4608      	mov	r0, r1
 800c112:	4611      	mov	r1, r2
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	f7f5 fb8f 	bl	8001838 <_kill>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	d102      	bne.n	800c124 <_kill_r+0x1c>
 800c11e:	682b      	ldr	r3, [r5, #0]
 800c120:	b103      	cbz	r3, 800c124 <_kill_r+0x1c>
 800c122:	6023      	str	r3, [r4, #0]
 800c124:	bd38      	pop	{r3, r4, r5, pc}
 800c126:	bf00      	nop
 800c128:	20001d1c 	.word	0x20001d1c

0800c12c <_getpid_r>:
 800c12c:	f7f5 bb7c 	b.w	8001828 <_getpid>

0800c130 <_init>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	bf00      	nop
 800c134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c136:	bc08      	pop	{r3}
 800c138:	469e      	mov	lr, r3
 800c13a:	4770      	bx	lr

0800c13c <_fini>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	bf00      	nop
 800c140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c142:	bc08      	pop	{r3}
 800c144:	469e      	mov	lr, r3
 800c146:	4770      	bx	lr
