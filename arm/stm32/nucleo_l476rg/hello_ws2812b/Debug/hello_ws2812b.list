
hello_ws2812b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800a298  0800a298  0001a298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a578  0800a578  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a580  0800a580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a580  0800a580  0001a580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd4  20000074  0800a5fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d48  0800a5fc  00021d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f453  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b64  00000000  00000000  0003f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00043060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  00044830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005251  00000000  00000000  00045ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018936  00000000  00000000  0004b0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100541  00000000  00000000  00063a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00163f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e80  00000000  00000000  00163fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a27c 	.word	0x0800a27c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a27c 	.word	0x0800a27c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(100));
 8000eac:	1d39      	adds	r1, r7, #4
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <__io_putchar+0x20>)
 8000eb4:	f004 fa62 	bl	800537c <HAL_UART_Transmit>
	return ch;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20001c24 	.word	0x20001c24

08000ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
volatile int datasentflag = 0;



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	// if htim == 1

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ed4:	f003 f926 	bl	8004124 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20001bd8 	.word	0x20001bd8
 8000eec:	20000090 	.word	0x20000090

08000ef0 <Set_LED>:


void Set_LED(int LEDnum, int Red, int Green, int Blue)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <Set_LED+0x58>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	b2d9      	uxtb	r1, r3
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <Set_LED+0x58>)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <Set_LED+0x58>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <Set_LED+0x58>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	460a      	mov	r2, r1
 8000f38:	70da      	strb	r2, [r3, #3]

}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200019b4 	.word	0x200019b4
 8000f4c:	00000000 	.word	0x00000000

08000f50 <Set_Brightness>:


#define PI 3.14159625

void Set_Brightness(int brightness)
{
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f5c:	dd01      	ble.n	8000f62 <Set_Brightness+0x12>
 8000f5e:	232d      	movs	r3, #45	; 0x2d
 8000f60:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < MAX_LED; i++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e060      	b.n	800102a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f68:	4a37      	ldr	r2, [pc, #220]	; (8001048 <Set_Brightness+0xf8>)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f70:	4a36      	ldr	r2, [pc, #216]	; (800104c <Set_Brightness+0xfc>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j = 1; j < 4; j++)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e04f      	b.n	800101e <Set_Brightness+0xce>
		{
			float angle = 90 - brightness;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff fa81 	bl	8000498 <__aeabi_f2d>
 8000f96:	a32a      	add	r3, pc, #168	; (adr r3, 8001040 <Set_Brightness+0xf0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <Set_Brightness+0x100>)
 8000fae:	f7ff fbf5 	bl	800079c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fda7 	bl	8000b0c <__aeabi_d2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60fb      	str	r3, [r7, #12]
			// [!] care for divide by 0!
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <Set_Brightness+0xf8>)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	441a      	add	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa4f 	bl	8000474 <__aeabi_i2d>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	460d      	mov	r5, r1
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fa5c 	bl	8000498 <__aeabi_f2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b10 	vmov	d0, r2, r3
 8000fe8:	f008 f8e6 	bl	80091b8 <tan>
 8000fec:	ec53 2b10 	vmov	r2, r3, d0
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	4629      	mov	r1, r5
 8000ff4:	f7ff fbd2 	bl	800079c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fd64 	bl	8000acc <__aeabi_d2uiz>
 8001004:	4603      	mov	r3, r0
 8001006:	b2d9      	uxtb	r1, r3
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <Set_Brightness+0xfc>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	441a      	add	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4413      	add	r3, r2
 8001014:	460a      	mov	r2, r1
 8001016:	701a      	strb	r2, [r3, #0]
		for (int j = 1; j < 4; j++)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	3301      	adds	r3, #1
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b03      	cmp	r3, #3
 8001022:	ddac      	ble.n	8000f7e <Set_Brightness+0x2e>
	for (int i = 0; i < MAX_LED; i++)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b07      	cmp	r3, #7
 800102e:	dd9b      	ble.n	8000f68 <Set_Brightness+0x18>
		}
	}
#endif
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	36f7e3d2 	.word	0x36f7e3d2
 8001044:	400921fd 	.word	0x400921fd
 8001048:	200019b4 	.word	0x200019b4
 800104c:	200019d4 	.word	0x200019d4
 8001050:	40668000 	.word	0x40668000

08001054 <WS2812B_Send>:
// [!] more memory efficient to do byte size
uint16_t pwmData[24*MAX_LED + 50];


void WS2812B_Send(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e036      	b.n	80010d2 <WS2812B_Send+0x7e>
	{
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001064:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <WS2812B_Send+0xcc>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	041a      	lsls	r2, r3, #16
 8001070:	492b      	ldr	r1, [pc, #172]	; (8001120 <WS2812B_Send+0xcc>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	431a      	orrs	r2, r3
 800107e:	4928      	ldr	r1, [pc, #160]	; (8001120 <WS2812B_Send+0xcc>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	78db      	ldrb	r3, [r3, #3]
 8001088:	4313      	orrs	r3, r2
 800108a:	607b      	str	r3, [r7, #4]

		for (int i = 23; i >= 0; i--)
 800108c:	2317      	movs	r3, #23
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e019      	b.n	80010c6 <WS2812B_Send+0x72>
		{
			if (color & (1 << i))
 8001092:	2201      	movs	r2, #1
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <WS2812B_Send+0x5c>
			{
				pwmData[indx] = 64;
 80010a4:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <WS2812B_Send+0xd0>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010ae:	e004      	b.n	80010ba <WS2812B_Send+0x66>
			}
			else
			{
				pwmData[indx] = 32;
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <WS2812B_Send+0xd0>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2120      	movs	r1, #32
 80010b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			indx++;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dae2      	bge.n	8001092 <WS2812B_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	3301      	adds	r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b07      	cmp	r3, #7
 80010d6:	ddc5      	ble.n	8001064 <WS2812B_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++)
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	e00a      	b.n	80010f4 <WS2812B_Send+0xa0>
	{
		pwmData[indx] = 0;
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <WS2812B_Send+0xd0>)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2100      	movs	r1, #0
 80010e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	3301      	adds	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b31      	cmp	r3, #49	; 0x31
 80010f8:	ddf1      	ble.n	80010de <WS2812B_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)pwmData, indx);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <WS2812B_Send+0xd0>)
 8001100:	2100      	movs	r1, #0
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <WS2812B_Send+0xd4>)
 8001104:	f002 fdf6 	bl	8003cf4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag) {};
 8001108:	bf00      	nop
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <WS2812B_Send+0xd8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0fb      	beq.n	800110a <WS2812B_Send+0xb6>
	datasentflag = 0;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <WS2812B_Send+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200019d4 	.word	0x200019d4
 8001124:	200019f4 	.word	0x200019f4
 8001128:	20001bd8 	.word	0x20001bd8
 800112c:	20000090 	.word	0x20000090

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f000 fc72 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f81c 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 f96c 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8001140:	f000 f94c 	bl	80013dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001144:	f000 f91a 	bl	800137c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001148:	f000 f88a 	bl	8001260 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800114c:	f004 fde0 	bl	8005d10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <main+0x38>)
 8001152:	2100      	movs	r1, #0
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <main+0x3c>)
 8001156:	f004 fe25 	bl	8005da4 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <main+0x40>)
 800115e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001160:	f004 fdfa 	bl	8005d58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x34>
 8001166:	bf00      	nop
 8001168:	0800a2cc 	.word	0x0800a2cc
 800116c:	08001491 	.word	0x08001491
 8001170:	200019b0 	.word	0x200019b0

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0b8      	sub	sp, #224	; 0xe0
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800117e:	2244      	movs	r2, #68	; 0x44
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f007 fb4a 	bl	800881c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2288      	movs	r2, #136	; 0x88
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f007 fb3c 	bl	800881c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2310      	movs	r3, #16
 80011b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011ca:	230a      	movs	r3, #10
 80011cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011d0:	2307      	movs	r3, #7
 80011d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f980 	bl	80024ec <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011f2:	f000 f99f 	bl	8001534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	230f      	movs	r3, #15
 80011f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001214:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001218:	2104      	movs	r1, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fd4c 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001226:	f000 f985 	bl	8001534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800122a:	2302      	movs	r3, #2
 800122c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ff77 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001240:	f000 f978 	bl	8001534 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001244:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001248:	f001 f8fa 	bl	8002440 <HAL_PWREx_ControlVoltageScaling>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001252:	f000 f96f 	bl	8001534 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	37e0      	adds	r7, #224	; 0xe0
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	222c      	movs	r2, #44	; 0x2c
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f007 fac5 	bl	800881c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <MX_TIM1_Init+0x114>)
 8001294:	4a38      	ldr	r2, [pc, #224]	; (8001378 <MX_TIM1_Init+0x118>)
 8001296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_TIM1_Init+0x114>)
 800129a:	2200      	movs	r2, #0
 800129c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <MX_TIM1_Init+0x114>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <MX_TIM1_Init+0x114>)
 80012a6:	2263      	movs	r2, #99	; 0x63
 80012a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <MX_TIM1_Init+0x114>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_TIM1_Init+0x114>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_TIM1_Init+0x114>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012bc:	482d      	ldr	r0, [pc, #180]	; (8001374 <MX_TIM1_Init+0x114>)
 80012be:	f002 fcc1 	bl	8003c44 <HAL_TIM_PWM_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012c8:	f000 f934 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012dc:	4619      	mov	r1, r3
 80012de:	4825      	ldr	r0, [pc, #148]	; (8001374 <MX_TIM1_Init+0x114>)
 80012e0:	f003 feda 	bl	8005098 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80012ea:	f000 f923 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	; 0x60
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_TIM1_Init+0x114>)
 8001314:	f003 f916 	bl	8004544 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800131e:	f000 f909 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800133a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM1_Init+0x114>)
 8001358:	f003 ff26 	bl	80051a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001362:	f000 f8e7 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM1_Init+0x114>)
 8001368:	f000 f95e 	bl	8001628 <HAL_TIM_MspPostInit>

}
 800136c:	bf00      	nop
 800136e:	3758      	adds	r7, #88	; 0x58
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20001bd8 	.word	0x20001bd8
 8001378:	40012c00 	.word	0x40012c00

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <MX_USART2_UART_Init+0x5c>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_USART2_UART_Init+0x58>)
 80013c0:	f003 ff8e 	bl	80052e0 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 f8b3 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20001c24 	.word	0x20001c24
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_DMA_Init+0x38>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <MX_DMA_Init+0x38>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6493      	str	r3, [r2, #72]	; 0x48
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_DMA_Init+0x38>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2105      	movs	r1, #5
 80013fe:	200c      	movs	r0, #12
 8001400:	f000 fc04 	bl	8001c0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001404:	200c      	movs	r0, #12
 8001406:	f000 fc1d 	bl	8001c44 <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_GPIO_Init+0x74>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a1a      	ldr	r2, [pc, #104]	; (800148c <MX_GPIO_Init+0x74>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_GPIO_Init+0x74>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_GPIO_Init+0x74>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a14      	ldr	r2, [pc, #80]	; (800148c <MX_GPIO_Init+0x74>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_GPIO_Init+0x74>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_GPIO_Init+0x74>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <MX_GPIO_Init+0x74>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_GPIO_Init+0x74>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_GPIO_Init+0x74>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <MX_GPIO_Init+0x74>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_GPIO_Init+0x74>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	printf("Hello, world!\r\n");
 8001498:	481c      	ldr	r0, [pc, #112]	; (800150c <StartDefaultTask+0x7c>)
 800149a:	f007 fa35 	bl	8008908 <puts>

  	//send(5, 255, 101);

  	Set_LED(0, 255, 0, 0);
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	21ff      	movs	r1, #255	; 0xff
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fd23 	bl	8000ef0 <Set_LED>
  	Set_LED(1, 0, 255, 0);
 80014aa:	2300      	movs	r3, #0
 80014ac:	22ff      	movs	r2, #255	; 0xff
 80014ae:	2100      	movs	r1, #0
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fd1d 	bl	8000ef0 <Set_LED>
  	Set_LED(2, 0, 0, 255);
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff fd17 	bl	8000ef0 <Set_LED>
  	Set_Brightness(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fd44 	bl	8000f50 <Set_Brightness>
  	WS2812B_Send();
 80014c8:	f7ff fdc4 	bl	8001054 <WS2812B_Send>


  	osDelay(1000);
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f004 fcfa 	bl	8005ec8 <osDelay>
  	Set_LED(0, 12, 52, 64);
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	2234      	movs	r2, #52	; 0x34
 80014d8:	210c      	movs	r1, #12
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fd08 	bl	8000ef0 <Set_LED>
  	Set_LED(1, 4, 235, 145);
 80014e0:	2391      	movs	r3, #145	; 0x91
 80014e2:	22eb      	movs	r2, #235	; 0xeb
 80014e4:	2104      	movs	r1, #4
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fd02 	bl	8000ef0 <Set_LED>
  	Set_LED(2, 120, 120, 25);
 80014ec:	2319      	movs	r3, #25
 80014ee:	2278      	movs	r2, #120	; 0x78
 80014f0:	2178      	movs	r1, #120	; 0x78
 80014f2:	2002      	movs	r0, #2
 80014f4:	f7ff fcfc 	bl	8000ef0 <Set_LED>
  	Set_Brightness(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fd29 	bl	8000f50 <Set_Brightness>
  	WS2812B_Send();
 80014fe:	f7ff fda9 	bl	8001054 <WS2812B_Send>

  	osDelay(1000);
 8001502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001506:	f004 fcdf 	bl	8005ec8 <osDelay>
  {
 800150a:	e7c5      	b.n	8001498 <StartDefaultTask+0x8>
 800150c:	0800a2a4 	.word	0x0800a2a4

08001510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001522:	f000 fa9b 	bl	8001a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40001000 	.word	0x40001000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_MspInit+0x4c>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_MspInit+0x4c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	; 0x60
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_MspInit+0x4c>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_MspInit+0x4c>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_MspInit+0x4c>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_MspInit+0x4c>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	210f      	movs	r1, #15
 800157a:	f06f 0001 	mvn.w	r0, #1
 800157e:	f000 fb45 	bl	8001c0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <HAL_TIM_PWM_MspInit+0x88>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d136      	bne.n	8001610 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_TIM_PWM_MspInit+0x8c>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_TIM_PWM_MspInit+0x8c>)
 80015a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_TIM_PWM_MspInit+0x8c>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_TIM_PWM_MspInit+0x94>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80015f4:	480a      	ldr	r0, [pc, #40]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 80015f6:	f000 fb33 	bl	8001c60 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 8001600:	f7ff ff98 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_TIM_PWM_MspInit+0x90>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40012c00 	.word	0x40012c00
 800161c:	40021000 	.word	0x40021000
 8001620:	20001968 	.word	0x20001968
 8001624:	4002001c 	.word	0x4002001c

08001628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_TIM_MspPostInit+0x68>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d11d      	bne.n	8001686 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001674:	2301      	movs	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f000 fd25 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f000 fce2 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004400 	.word	0x40004400
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	2036      	movs	r0, #54	; 0x36
 8001732:	f000 fa6b 	bl	8001c0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f000 fa84 	bl	8001c44 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_InitTick+0x9c>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <HAL_InitTick+0x9c>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6593      	str	r3, [r2, #88]	; 0x58
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_InitTick+0x9c>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fc50 	bl	8003004 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001764:	f001 fc22 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8001768:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	4a13      	ldr	r2, [pc, #76]	; (80017bc <HAL_InitTick+0xa0>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0c9b      	lsrs	r3, r3, #18
 8001774:	3b01      	subs	r3, #1
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_InitTick+0xa4>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_InitTick+0xa8>)
 800177c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_InitTick+0xa4>)
 8001780:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001784:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_InitTick+0xa4>)
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_InitTick+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_InitTick+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <HAL_InitTick+0xa4>)
 800179a:	f002 f981 	bl	8003aa0 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d104      	bne.n	80017ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <HAL_InitTick+0xa4>)
 80017a6:	f002 f9dd 	bl	8003b64 <HAL_TIM_Base_Start_IT>
 80017aa:	4603      	mov	r3, r0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	20001ca8 	.word	0x20001ca8
 80017c4:	40001000 	.word	0x40001000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <DMA1_Channel2_IRQHandler+0x10>)
 80017fa:	f000 fb8a 	bl	8001f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20001968 	.word	0x20001968

08001808 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM6_DAC_IRQHandler+0x10>)
 800180e:	f002 fd79 	bl	8004304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20001ca8 	.word	0x20001ca8

0800181c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
	}

return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb17 	bl	8000ea4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
	}
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f006 ff40 	bl	80087ac <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20018000 	.word	0x20018000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000094 	.word	0x20000094
 8001960:	20001d48 	.word	0x20001d48

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <SystemInit+0x5c>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <SystemInit+0x5c>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <SystemInit+0x60>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <SystemInit+0x60>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <SystemInit+0x60>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <SystemInit+0x60>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <SystemInit+0x60>)
 8001990:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001994:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001998:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <SystemInit+0x60>)
 800199c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SystemInit+0x60>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <SystemInit+0x60>)
 80019a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SystemInit+0x60>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	40021000 	.word	0x40021000

080019c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff ffca 	bl	8001964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019d2:	e003      	b.n	80019dc <LoopCopyDataInit>

080019d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019da:	3104      	adds	r1, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <LoopForever+0xe>)
	adds	r2, r0, r1
 80019e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019e4:	d3f6      	bcc.n	80019d4 <CopyDataInit>
	ldr	r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019e8:	e002      	b.n	80019f0 <LoopFillZerobss>

080019ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019ec:	f842 3b04 	str.w	r3, [r2], #4

080019f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <LoopForever+0x16>)
	cmp	r2, r3
 80019f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019f4:	d3f9      	bcc.n	80019ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f006 fedf 	bl	80087b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fa:	f7ff fb99 	bl	8001130 <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001a04:	0800a588 	.word	0x0800a588
	ldr	r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a0c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001a10:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001a14:	20001d48 	.word	0x20001d48

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_Init+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	; (8001a58 <HAL_Init+0x3c>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a32:	2003      	movs	r0, #3
 8001a34:	f000 f8df 	bl	8001bf6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fe6f 	bl	800171c <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	e001      	b.n	8001a4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a4a:	f7ff fd79 	bl	8001540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20001cf4 	.word	0x20001cf4

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20001cf4 	.word	0x20001cf4

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4907      	ldr	r1, [pc, #28]	; (8001b38 <__NVIC_EnableIRQ+0x38>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000e100 	.word	0xe000e100

08001b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	6039      	str	r1, [r7, #0]
 8001b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	db0a      	blt.n	8001b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	490c      	ldr	r1, [pc, #48]	; (8001b88 <__NVIC_SetPriority+0x4c>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	0112      	lsls	r2, r2, #4
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	440b      	add	r3, r1
 8001b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b64:	e00a      	b.n	8001b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4908      	ldr	r1, [pc, #32]	; (8001b8c <__NVIC_SetPriority+0x50>)
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	3b04      	subs	r3, #4
 8001b74:	0112      	lsls	r2, r2, #4
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	440b      	add	r3, r1
 8001b7a:	761a      	strb	r2, [r3, #24]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f1c3 0307 	rsb	r3, r3, #7
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	bf28      	it	cs
 8001bae:	2304      	movcs	r3, #4
 8001bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d902      	bls.n	8001bc0 <NVIC_EncodePriority+0x30>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b03      	subs	r3, #3
 8001bbe:	e000      	b.n	8001bc2 <NVIC_EncodePriority+0x32>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	43d9      	mvns	r1, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	4313      	orrs	r3, r2
         );
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff4c 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1e:	f7ff ff61 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68b9      	ldr	r1, [r7, #8]
 8001c28:	6978      	ldr	r0, [r7, #20]
 8001c2a:	f7ff ffb1 	bl	8001b90 <NVIC_EncodePriority>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff80 	bl	8001b3c <__NVIC_SetPriority>
}
 8001c3c:	bf00      	nop
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff54 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e098      	b.n	8001da4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_DMA_Init+0x150>)
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d80f      	bhi.n	8001c9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_DMA_Init+0x154>)
 8001c86:	4413      	add	r3, r2
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_DMA_Init+0x158>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_DMA_Init+0x15c>)
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9c:	e00e      	b.n	8001cbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_DMA_Init+0x160>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <HAL_DMA_Init+0x158>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	009a      	lsls	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_DMA_Init+0x164>)
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d16:	d039      	beq.n	8001d8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_DMA_Init+0x15c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11a      	bne.n	8001d58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 031c 	and.w	r3, r3, #28
 8001d2e:	210f      	movs	r1, #15
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4924      	ldr	r1, [pc, #144]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 031c 	and.w	r3, r3, #28
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
 8001d56:	e019      	b.n	8001d8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	210f      	movs	r1, #15
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4917      	ldr	r1, [pc, #92]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f003 031c 	and.w	r3, r3, #28
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	4911      	ldr	r1, [pc, #68]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40020407 	.word	0x40020407
 8001db4:	bffdfff8 	.word	0xbffdfff8
 8001db8:	cccccccd 	.word	0xcccccccd
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	bffdfbf8 	.word	0xbffdfbf8
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	400200a8 	.word	0x400200a8
 8001dcc:	400204a8 	.word	0x400204a8

08001dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Start_IT+0x20>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e04b      	b.n	8001e88 <HAL_DMA_Start_IT+0xb8>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d13a      	bne.n	8001e7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f921 	bl	8002070 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 020e 	orr.w	r2, r2, #14
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e00f      	b.n	8001e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 020a 	orr.w	r2, r2, #10
 8001e66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e005      	b.n	8001e86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e82:	2302      	movs	r3, #2
 8001e84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e029      	b.n	8001f08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 020e 	bic.w	r2, r2, #14
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f003 021c 	and.w	r2, r3, #28
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	4798      	blx	r3
    }
  }
  return status;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f003 031c 	and.w	r3, r3, #28
 8001f32:	2204      	movs	r2, #4
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d026      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x7a>
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d021      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0204 	bic.w	r2, r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f003 021c 	and.w	r2, r3, #28
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2104      	movs	r1, #4
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d071      	beq.n	8002066 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001f8a:	e06c      	b.n	8002066 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 031c 	and.w	r3, r3, #28
 8001f94:	2202      	movs	r2, #2
 8001f96:	409a      	lsls	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02e      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xec>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d029      	beq.n	8001ffe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020a 	bic.w	r2, r2, #10
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f003 021c 	and.w	r2, r3, #28
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2102      	movs	r1, #2
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d038      	beq.n	8002066 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ffc:	e033      	b.n	8002066 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f003 031c 	and.w	r3, r3, #28
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02a      	beq.n	8002068 <HAL_DMA_IRQHandler+0x156>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d025      	beq.n	8002068 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020e 	bic.w	r2, r2, #14
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	f003 021c 	and.w	r2, r3, #28
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002066:	bf00      	nop
 8002068:	bf00      	nop
}
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 021c 	and.w	r2, r3, #28
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d108      	bne.n	80020b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020b2:	e007      	b.n	80020c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	60da      	str	r2, [r3, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e17f      	b.n	80023e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8171 	beq.w	80023da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d00b      	beq.n	8002118 <HAL_GPIO_Init+0x48>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d007      	beq.n	8002118 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800210c:	2b11      	cmp	r3, #17
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d130      	bne.n	800217a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214e:	2201      	movs	r2, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	091b      	lsrs	r3, r3, #4
 8002164:	f003 0201 	and.w	r2, r3, #1
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b03      	cmp	r3, #3
 8002184:	d118      	bne.n	80021b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800218c:	2201      	movs	r2, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	08db      	lsrs	r3, r3, #3
 80021a2:	f003 0201 	and.w	r2, r3, #1
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x128>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b12      	cmp	r3, #18
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ac 	beq.w	80023da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6613      	str	r3, [r2, #96]	; 0x60
 800228e:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <HAL_GPIO_Init+0x330>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800229a:	4a5a      	ldr	r2, [pc, #360]	; (8002404 <HAL_GPIO_Init+0x334>)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3302      	adds	r3, #2
 80022a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	220f      	movs	r2, #15
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022c4:	d025      	beq.n	8002312 <HAL_GPIO_Init+0x242>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4f      	ldr	r2, [pc, #316]	; (8002408 <HAL_GPIO_Init+0x338>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01f      	beq.n	800230e <HAL_GPIO_Init+0x23e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4e      	ldr	r2, [pc, #312]	; (800240c <HAL_GPIO_Init+0x33c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x23a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4d      	ldr	r2, [pc, #308]	; (8002410 <HAL_GPIO_Init+0x340>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x236>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_GPIO_Init+0x344>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x232>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_GPIO_Init+0x348>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x22e>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_GPIO_Init+0x34c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x22a>
 80022f6:	2306      	movs	r3, #6
 80022f8:	e00c      	b.n	8002314 <HAL_GPIO_Init+0x244>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00a      	b.n	8002314 <HAL_GPIO_Init+0x244>
 80022fe:	2305      	movs	r3, #5
 8002300:	e008      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002302:	2304      	movs	r3, #4
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002306:	2303      	movs	r3, #3
 8002308:	e004      	b.n	8002314 <HAL_GPIO_Init+0x244>
 800230a:	2302      	movs	r3, #2
 800230c:	e002      	b.n	8002314 <HAL_GPIO_Init+0x244>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_GPIO_Init+0x244>
 8002312:	2300      	movs	r3, #0
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	f002 0203 	and.w	r2, r2, #3
 800231a:	0092      	lsls	r2, r2, #2
 800231c:	4093      	lsls	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002324:	4937      	ldr	r1, [pc, #220]	; (8002404 <HAL_GPIO_Init+0x334>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002356:	4a32      	ldr	r2, [pc, #200]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_GPIO_Init+0x350>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002386:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_GPIO_Init+0x350>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023aa:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_GPIO_Init+0x350>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae78 	bne.w	80020e0 <HAL_GPIO_Init+0x10>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	40010000 	.word	0x40010000
 8002408:	48000400 	.word	0x48000400
 800240c:	48000800 	.word	0x48000800
 8002410:	48000c00 	.word	0x48000c00
 8002414:	48001000 	.word	0x48001000
 8002418:	48001400 	.word	0x48001400
 800241c:	48001800 	.word	0x48001800
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_PWREx_GetVoltageRange+0x18>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000

08002440 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800244e:	d130      	bne.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245c:	d038      	beq.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2232      	movs	r2, #50	; 0x32
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0c9b      	lsrs	r3, r3, #18
 8002480:	3301      	adds	r3, #1
 8002482:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002484:	e002      	b.n	800248c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3b01      	subs	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002498:	d102      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f2      	bne.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ac:	d110      	bne.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e00f      	b.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024be:	d007      	beq.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024c8:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40007000 	.word	0x40007000
 80024e4:	20000000 	.word	0x20000000
 80024e8:	431bde83 	.word	0x431bde83

080024ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e3d4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4ba1      	ldr	r3, [pc, #644]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002508:	4b9e      	ldr	r3, [pc, #632]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80e4 	beq.w	80026e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_RCC_OscConfig+0x4a>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	f040 808b 	bne.w	8002644 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 8087 	bne.w	8002644 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002536:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e3ac      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_RCC_OscConfig+0x7c>
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	e005      	b.n	8002574 <HAL_RCC_OscConfig+0x88>
 8002568:	4b86      	ldr	r3, [pc, #536]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002574:	4293      	cmp	r3, r2
 8002576:	d223      	bcs.n	80025c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fd73 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e38d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258c:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a7c      	ldr	r2, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002592:	f043 0308 	orr.w	r3, r3, #8
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4977      	ldr	r1, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4972      	ldr	r1, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 80025be:	e025      	b.n	800260c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025c6:	f043 0308 	orr.w	r3, r3, #8
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	496a      	ldr	r1, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025de:	4b69      	ldr	r3, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	4965      	ldr	r1, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fd33 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e34d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260c:	f000 fc36 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	495a      	ldr	r1, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x29c>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_OscConfig+0x2a0>)
 800262a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800262c:	4b58      	ldr	r3, [pc, #352]	; (8002790 <HAL_RCC_OscConfig+0x2a4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f873 	bl	800171c <HAL_InitTick>
 8002636:	4603      	mov	r3, r0
 8002638:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d052      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	e331      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a4c      	ldr	r2, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002658:	f7ff fa14 	bl	8001a84 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002660:	f7ff fa10 	bl	8001a84 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e31a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a40      	ldr	r2, [pc, #256]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	493b      	ldr	r1, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
 80026b0:	e01a      	b.n	80026e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a33      	ldr	r2, [pc, #204]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026be:	f7ff f9e1 	bl	8001a84 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c6:	f7ff f9dd 	bl	8001a84 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e2e7      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x1da>
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d074      	beq.n	80027de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x21a>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d10e      	bne.n	800271e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d10b      	bne.n	800271e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d064      	beq.n	80027dc <HAL_RCC_OscConfig+0x2f0>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d160      	bne.n	80027dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e2c4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x24a>
 8002728:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e01d      	b.n	8002772 <HAL_RCC_OscConfig+0x286>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x26e>
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e00b      	b.n	8002772 <HAL_RCC_OscConfig+0x286>
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x298>)
 800276c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff f983 	bl	8001a84 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002780:	e011      	b.n	80027a6 <HAL_RCC_OscConfig+0x2ba>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	0800a2f0 	.word	0x0800a2f0
 800278c:	20000000 	.word	0x20000000
 8002790:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff f976 	bl	8001a84 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e280      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	4baf      	ldr	r3, [pc, #700]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x2a8>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7ff f966 	bl	8001a84 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff f962 	bl	8001a84 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e26c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ce:	4ba5      	ldr	r3, [pc, #660]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x2d0>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d060      	beq.n	80028ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_OscConfig+0x310>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d119      	bne.n	800282a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d116      	bne.n	800282a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fc:	4b99      	ldr	r3, [pc, #612]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_OscConfig+0x328>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e249      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b93      	ldr	r3, [pc, #588]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	4990      	ldr	r1, [pc, #576]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002828:	e040      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d023      	beq.n	800287a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002832:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a8b      	ldr	r2, [pc, #556]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7ff f921 	bl	8001a84 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002846:	f7ff f91d 	bl	8001a84 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e227      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002858:	4b82      	ldr	r3, [pc, #520]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	497c      	ldr	r1, [pc, #496]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
 8002878:	e018      	b.n	80028ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287a:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a79      	ldr	r2, [pc, #484]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff f8fd 	bl	8001a84 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288e:	f7ff f8f9 	bl	8001a84 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e203      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a0:	4b70      	ldr	r3, [pc, #448]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0308 	and.w	r3, r3, #8
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d03c      	beq.n	8002932 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01c      	beq.n	80028fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	4a67      	ldr	r2, [pc, #412]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7ff f8d8 	bl	8001a84 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d8:	f7ff f8d4 	bl	8001a84 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1de      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ea:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <HAL_RCC_OscConfig+0x3ec>
 80028f8:	e01b      	b.n	8002932 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fa:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80028fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7ff f8bb 	bl	8001a84 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002912:	f7ff f8b7 	bl	8001a84 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e1c1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002924:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ef      	bne.n	8002912 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80a6 	beq.w	8002a8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002940:	2300      	movs	r3, #0
 8002942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6593      	str	r3, [r2, #88]	; 0x58
 800295c:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002968:	2301      	movs	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x57c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d118      	bne.n	80029aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002978:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x57c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <HAL_RCC_OscConfig+0x57c>)
 800297e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002984:	f7ff f87e 	bl	8001a84 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7ff f87a 	bl	8001a84 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e184      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299e:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCC_OscConfig+0x57c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d108      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4d8>
 80029b2:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c2:	e024      	b.n	8002a0e <HAL_RCC_OscConfig+0x522>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d110      	bne.n	80029ee <HAL_RCC_OscConfig+0x502>
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a24      	ldr	r2, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ec:	e00f      	b.n	8002a0e <HAL_RCC_OscConfig+0x522>
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff f835 	bl	8001a84 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff f831 	bl	8001a84 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e139      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_OscConfig+0x578>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ed      	beq.n	8002a1e <HAL_RCC_OscConfig+0x532>
 8002a42:	e01a      	b.n	8002a7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7ff f81e 	bl	8001a84 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4a:	e00f      	b.n	8002a6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7ff f81a 	bl	8001a84 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d906      	bls.n	8002a6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e122      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a6c:	4b90      	ldr	r3, [pc, #576]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e8      	bne.n	8002a4c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a80:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	4a8a      	ldr	r2, [pc, #552]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8108 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	f040 80d0 	bne.w	8002c40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa0:	4b83      	ldr	r3, [pc, #524]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d130      	bne.n	8002b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d127      	bne.n	8002b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d11f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ae0:	2a07      	cmp	r2, #7
 8002ae2:	bf14      	ite	ne
 8002ae4:	2201      	movne	r2, #1
 8002ae6:	2200      	moveq	r2, #0
 8002ae8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d06e      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b0c      	cmp	r3, #12
 8002b1a:	d069      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0b7      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b38:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b44:	f7fe ff9e 	bl	8001a84 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe ff9a 	bl	8001a84 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0a4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5e:	4b54      	ldr	r3, [pc, #336]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <HAL_RCC_OscConfig+0x7c8>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b84:	0212      	lsls	r2, r2, #8
 8002b86:	4311      	orrs	r1, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b8c:	0852      	lsrs	r2, r2, #1
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0552      	lsls	r2, r2, #21
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b98:	0852      	lsrs	r2, r2, #1
 8002b9a:	3a01      	subs	r2, #1
 8002b9c:	0652      	lsls	r2, r2, #25
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ba4:	0912      	lsrs	r2, r2, #4
 8002ba6:	0452      	lsls	r2, r2, #17
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	4941      	ldr	r1, [pc, #260]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3e      	ldr	r2, [pc, #248]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a3b      	ldr	r2, [pc, #236]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bc8:	f7fe ff5c 	bl	8001a84 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe ff58 	bl	8001a84 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e062      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bee:	e05a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e059      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d152      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c00:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c18:	f7fe ff34 	bl	8001a84 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe ff30 	bl	8001a84 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e03a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c32:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x734>
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d02d      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c50:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c64:	f023 0303 	bic.w	r3, r3, #3
 8002c68:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe ff03 	bl	8001a84 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe feff 	bl	8001a84 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e009      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_RCC_OscConfig+0x7c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x796>
 8002ca0:	e001      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	f99d808c 	.word	0xf99d808c

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0c8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d910      	bls.n	8002cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0207 	bic.w	r2, r3, #7
 8002ce2:	4961      	ldr	r1, [pc, #388]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b5f      	ldr	r3, [pc, #380]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0b0      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d04c      	beq.n	8002da2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d121      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e09e      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d115      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e092      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d40:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e086      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d50:	4b46      	ldr	r3, [pc, #280]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e07e      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d60:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 0203 	bic.w	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	493f      	ldr	r1, [pc, #252]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d72:	f7fe fe87 	bl	8001a84 <HAL_GetTick>
 8002d76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7a:	f7fe fe83 	bl	8001a84 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e066      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 020c 	and.w	r2, r3, #12
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d1eb      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	492c      	ldr	r1, [pc, #176]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d210      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 0207 	bic.w	r2, r3, #7
 8002dd6:	4924      	ldr	r1, [pc, #144]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1b0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e036      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4918      	ldr	r1, [pc, #96]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4910      	ldr	r1, [pc, #64]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e2e:	f000 f825 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_RCC_ClockConfig+0x1b4>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490c      	ldr	r1, [pc, #48]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fc62 	bl	800171c <HAL_InitTick>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	0800a2f0 	.word	0x0800a2f0
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000004 	.word	0x20000004

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d121      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d11e      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e005      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e004      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d134      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0xac>
 8002f20:	e005      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f24:	617b      	str	r3, [r7, #20]
      break;
 8002f26:	e005      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f2a:	617b      	str	r3, [r7, #20]
      break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	617b      	str	r3, [r7, #20]
      break;
 8002f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	3301      	adds	r3, #1
 8002f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	fb02 f203 	mul.w	r2, r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	0e5b      	lsrs	r3, r3, #25
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	3301      	adds	r3, #1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f74:	69bb      	ldr	r3, [r7, #24]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	0800a308 	.word	0x0800a308
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800a300 	.word	0x0800a300

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fdc:	f7ff ffda 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4904      	ldr	r1, [pc, #16]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	0800a300 	.word	0x0800a300

08003004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	220f      	movs	r2, #15
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCC_GetClockConfig+0x60>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40022000 	.word	0x40022000

08003068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f9d0 	bl	8002424 <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
 8003086:	e014      	b.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	4b22      	ldr	r3, [pc, #136]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a0:	f7ff f9c0 	bl	8002424 <HAL_PWREx_GetVoltageRange>
 80030a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b8:	d10b      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d919      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2ba0      	cmp	r3, #160	; 0xa0
 80030c4:	d902      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c6:	2302      	movs	r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e013      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e010      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d902      	bls.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030d8:	2303      	movs	r3, #3
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e00a      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d102      	bne.n	80030ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e4:	2302      	movs	r3, #2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e004      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d101      	bne.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	4909      	ldr	r1, [pc, #36]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003130:	2300      	movs	r3, #0
 8003132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2300      	movs	r3, #0
 8003136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d041      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800314c:	d02a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003152:	d824      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800315a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800315e:	d81e      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003168:	d010      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800316a:	e018      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800316c:	4b86      	ldr	r3, [pc, #536]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a85      	ldr	r2, [pc, #532]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e015      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fabb 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3320      	adds	r3, #32
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fba6 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	74fb      	strb	r3, [r7, #19]
      break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ac:	4b76      	ldr	r3, [pc, #472]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ba:	4973      	ldr	r1, [pc, #460]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031c2:	e001      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d041      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031dc:	d02a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031e2:	d824      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ee:	d81e      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f8:	d010      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031fa:	e018      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031fc:	4b62      	ldr	r3, [pc, #392]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a61      	ldr	r2, [pc, #388]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e015      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fa73 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800321a:	e00c      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3320      	adds	r3, #32
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fb5e 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	74fb      	strb	r3, [r7, #19]
      break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800323c:	4b52      	ldr	r3, [pc, #328]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324a:	494f      	ldr	r1, [pc, #316]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	6593      	str	r3, [r2, #88]	; 0x58
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003298:	2301      	movs	r3, #1
 800329a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fbec 	bl	8001a84 <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ae:	e009      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe fbe8 	bl	8001a84 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	74fb      	strb	r3, [r7, #19]
        break;
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d15c      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032d6:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01f      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d019      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003306:	4a20      	ldr	r2, [pc, #128]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003310:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fba7 	bl	8001a84 <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003338:	e00b      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe fba3 	bl	8001a84 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d902      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	74fb      	strb	r3, [r7, #19]
            break;
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ec      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003376:	4904      	ldr	r1, [pc, #16]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
 8003384:	e006      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7c7b      	ldrb	r3, [r7, #17]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b9e      	ldr	r3, [pc, #632]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4a9d      	ldr	r2, [pc, #628]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b2:	4b98      	ldr	r3, [pc, #608]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c0:	4994      	ldr	r1, [pc, #592]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d4:	4b8f      	ldr	r3, [pc, #572]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 020c 	bic.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	498c      	ldr	r1, [pc, #560]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f6:	4b87      	ldr	r3, [pc, #540]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	4983      	ldr	r1, [pc, #524]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003418:	4b7e      	ldr	r3, [pc, #504]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	497b      	ldr	r1, [pc, #492]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343a:	4b76      	ldr	r3, [pc, #472]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	4972      	ldr	r1, [pc, #456]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800345c:	4b6d      	ldr	r3, [pc, #436]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	496a      	ldr	r1, [pc, #424]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	4961      	ldr	r1, [pc, #388]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a0:	4b5c      	ldr	r3, [pc, #368]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	4959      	ldr	r1, [pc, #356]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c2:	4b54      	ldr	r3, [pc, #336]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	4950      	ldr	r1, [pc, #320]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e4:	4b4b      	ldr	r3, [pc, #300]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	4948      	ldr	r1, [pc, #288]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	493f      	ldr	r1, [pc, #252]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d028      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003536:	4937      	ldr	r1, [pc, #220]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003546:	d106      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a31      	ldr	r2, [pc, #196]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e011      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355e:	d10c      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8c8 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d028      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	491f      	ldr	r1, [pc, #124]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b0:	60d3      	str	r3, [r2, #12]
 80035b2:	e011      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f899 	bl	80036fc <RCCEx_PLLSAI1_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	4908      	ldr	r1, [pc, #32]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003602:	d109      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a02      	ldr	r2, [pc, #8]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	e014      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f867 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02f      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003648:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003656:	4928      	ldr	r1, [pc, #160]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003666:	d10d      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2102      	movs	r1, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f844 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d014      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	74bb      	strb	r3, [r7, #18]
 8003682:	e011      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3320      	adds	r3, #32
 8003692:	2102      	movs	r1, #2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f925 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c2:	490d      	ldr	r1, [pc, #52]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e6:	4904      	ldr	r1, [pc, #16]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000

080036fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370a:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003716:	4b72      	ldr	r3, [pc, #456]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d10d      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
       ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800372e:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
       ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d047      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e044      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x86>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x62>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x74>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b60      	ldr	r3, [pc, #384]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4944      	ldr	r1, [pc, #272]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d17d      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d8:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe f94e 	bl	8001a84 <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fe f94a 	bl	8001a84 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
        break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003800:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d160      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	0211      	lsls	r1, r2, #8
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	0912      	lsrs	r2, r2, #4
 8003830:	0452      	lsls	r2, r2, #17
 8003832:	430a      	orrs	r2, r1
 8003834:	492a      	ldr	r1, [pc, #168]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	610b      	str	r3, [r1, #16]
 800383a:	e027      	b.n	800388c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d112      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800384a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0552      	lsls	r2, r2, #21
 800385e:	430a      	orrs	r2, r1
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
 8003866:	e011      	b.n	800388c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6952      	ldr	r2, [r2, #20]
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0652      	lsls	r2, r2, #25
 8003884:	430a      	orrs	r2, r1
 8003886:	4916      	ldr	r1, [pc, #88]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe f8f4 	bl	8001a84 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe f8f0 	bl	8001a84 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
          break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4904      	ldr	r1, [pc, #16]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f2:	4b6a      	ldr	r3, [pc, #424]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038fe:	4b67      	ldr	r3, [pc, #412]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0203 	and.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d10d      	bne.n	800392a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
       ||
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003916:	4b61      	ldr	r3, [pc, #388]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
       ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d047      	beq.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e044      	b.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x86>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI2_Config+0xa4>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x62>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI2_Config+0x74>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399e:	4b3f      	ldr	r3, [pc, #252]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	430b      	orrs	r3, r1
 80039b4:	4939      	ldr	r1, [pc, #228]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d167      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c0:	4b36      	ldr	r3, [pc, #216]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a35      	ldr	r2, [pc, #212]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fe f85a 	bl	8001a84 <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d4:	f7fe f856 	bl	8001a84 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e8:	4b2c      	ldr	r3, [pc, #176]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d14a      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	0912      	lsrs	r2, r2, #4
 8003a18:	0452      	lsls	r2, r2, #17
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	491f      	ldr	r1, [pc, #124]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	614b      	str	r3, [r1, #20]
 8003a22:	e011      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6912      	ldr	r2, [r2, #16]
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0652      	lsls	r2, r2, #25
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4916      	ldr	r1, [pc, #88]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe f816 	bl	8001a84 <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a5a:	e009      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a5c:	f7fe f812 	bl	8001a84 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6e:	e005      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e049      	b.n	8003b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f841 	bl	8003b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f000 ff44 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e04f      	b.n	8003c1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a23      	ldr	r2, [pc, #140]	; (8003c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01d      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba6:	d018      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_TIM_Base_Start_IT+0x76>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d115      	bne.n	8003c06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d015      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0xb4>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf2:	d011      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	e008      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e000      	b.n	8003c1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	00010007 	.word	0x00010007

08003c44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e049      	b.n	8003cea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fd fc90 	bl	8001590 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fe72 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_TIM_PWM_Start_DMA+0x28>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e03c      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d109      	bne.n	8003d36 <HAL_TIM_PWM_Start_DMA+0x42>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	e02f      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d109      	bne.n	8003d50 <HAL_TIM_PWM_Start_DMA+0x5c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e022      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d109      	bne.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x76>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e015      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b10      	cmp	r3, #16
 8003d6e:	d109      	bne.n	8003d84 <HAL_TIM_PWM_Start_DMA+0x90>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e008      	b.n	8003d96 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e1a6      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf0c      	ite	eq
 8003db0:	2301      	moveq	r3, #1
 8003db2:	2300      	movne	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e03c      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d109      	bne.n	8003dd2 <HAL_TIM_PWM_Start_DMA+0xde>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	bf0c      	ite	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	2300      	movne	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e02f      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d109      	bne.n	8003dec <HAL_TIM_PWM_Start_DMA+0xf8>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e022      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d109      	bne.n	8003e06 <HAL_TIM_PWM_Start_DMA+0x112>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	e015      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d109      	bne.n	8003e20 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e008      	b.n	8003e32 <HAL_TIM_PWM_Start_DMA+0x13e>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d034      	beq.n	8003ea0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start_DMA+0x152>
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e152      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x162>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	e026      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start_DMA+0x172>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	e01e      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start_DMA+0x182>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	e016      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	d104      	bne.n	8003e86 <HAL_TIM_PWM_Start_DMA+0x192>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e84:	e00e      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e94:	e006      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e9e:	e001      	b.n	8003ea4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e123      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	f200 80ae 	bhi.w	8004008 <HAL_TIM_PWM_Start_DMA+0x314>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08004009 	.word	0x08004009
 8003ebc:	08004009 	.word	0x08004009
 8003ec0:	08004009 	.word	0x08004009
 8003ec4:	08003f31 	.word	0x08003f31
 8003ec8:	08004009 	.word	0x08004009
 8003ecc:	08004009 	.word	0x08004009
 8003ed0:	08004009 	.word	0x08004009
 8003ed4:	08003f79 	.word	0x08003f79
 8003ed8:	08004009 	.word	0x08004009
 8003edc:	08004009 	.word	0x08004009
 8003ee0:	08004009 	.word	0x08004009
 8003ee4:	08003fc1 	.word	0x08003fc1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4a81      	ldr	r2, [pc, #516]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	4a80      	ldr	r2, [pc, #512]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	4a7f      	ldr	r2, [pc, #508]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3334      	adds	r3, #52	; 0x34
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	887b      	ldrh	r3, [r7, #2]
 8003f10:	f7fd ff5e 	bl	8001dd0 <HAL_DMA_Start_IT>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0e6      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	60da      	str	r2, [r3, #12]
      break;
 8003f2e:	e06c      	b.n	800400a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	4a6f      	ldr	r2, [pc, #444]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	4a6d      	ldr	r2, [pc, #436]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3338      	adds	r3, #56	; 0x38
 8003f54:	461a      	mov	r2, r3
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	f7fd ff3a 	bl	8001dd0 <HAL_DMA_Start_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0c2      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f74:	60da      	str	r2, [r3, #12]
      break;
 8003f76:	e048      	b.n	800400a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	4a5c      	ldr	r2, [pc, #368]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4a5b      	ldr	r2, [pc, #364]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003f8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	333c      	adds	r3, #60	; 0x3c
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	f7fd ff16 	bl	8001dd0 <HAL_DMA_Start_IT>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e09e      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbc:	60da      	str	r2, [r3, #12]
      break;
 8003fbe:	e024      	b.n	800400a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3340      	adds	r3, #64	; 0x40
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	f7fd fef2 	bl	8001dd0 <HAL_DMA_Start_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07a      	b.n	80040ec <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004004:	60da      	str	r2, [r3, #12]
      break;
 8004006:	e000      	b.n	800400a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004008:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2201      	movs	r2, #1
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	4618      	mov	r0, r3
 8004014:	f001 f81a 	bl	800504c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIM_PWM_Start_DMA+0x356>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a37      	ldr	r2, [pc, #220]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x410>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIM_PWM_Start_DMA+0x356>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIM_PWM_Start_DMA+0x356>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <HAL_TIM_PWM_Start_DMA+0x418>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIM_PWM_Start_DMA+0x356>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_TIM_PWM_Start_DMA+0x35a>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <HAL_TIM_PWM_Start_DMA+0x35c>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a25      	ldr	r2, [pc, #148]	; (8004100 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d018      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <HAL_TIM_PWM_Start_DMA+0x420>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a24      	ldr	r2, [pc, #144]	; (8004118 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <HAL_TIM_PWM_Start_DMA+0x428>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1a      	ldr	r2, [pc, #104]	; (8004104 <HAL_TIM_PWM_Start_DMA+0x410>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x3b6>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <HAL_TIM_PWM_Start_DMA+0x414>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d115      	bne.n	80040d6 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d015      	beq.n	80040e8 <HAL_TIM_PWM_Start_DMA+0x3f4>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d011      	beq.n	80040e8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	e008      	b.n	80040e8 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e000      	b.n	80040ea <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	0800485b 	.word	0x0800485b
 80040f8:	08004903 	.word	0x08004903
 80040fc:	080047c9 	.word	0x080047c9
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40013400 	.word	0x40013400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	00010007 	.word	0x00010007

08004124 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d855      	bhi.n	80041e0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	080041e1 	.word	0x080041e1
 8004144:	080041e1 	.word	0x080041e1
 8004148:	080041e1 	.word	0x080041e1
 800414c:	0800418d 	.word	0x0800418d
 8004150:	080041e1 	.word	0x080041e1
 8004154:	080041e1 	.word	0x080041e1
 8004158:	080041e1 	.word	0x080041e1
 800415c:	080041a9 	.word	0x080041a9
 8004160:	080041e1 	.word	0x080041e1
 8004164:	080041e1 	.word	0x080041e1
 8004168:	080041e1 	.word	0x080041e1
 800416c:	080041c5 	.word	0x080041c5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800417e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd fe83 	bl	8001e90 <HAL_DMA_Abort_IT>
      break;
 800418a:	e02a      	b.n	80041e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fe75 	bl	8001e90 <HAL_DMA_Abort_IT>
      break;
 80041a6:	e01c      	b.n	80041e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fe67 	bl	8001e90 <HAL_DMA_Abort_IT>
      break;
 80041c2:	e00e      	b.n	80041e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd fe59 	bl	8001e90 <HAL_DMA_Abort_IT>
      break;
 80041de:	e000      	b.n	80041e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80041e0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	6839      	ldr	r1, [r7, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 ff2e 	bl	800504c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a3e      	ldr	r2, [pc, #248]	; (80042f0 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xfe>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a3d      	ldr	r2, [pc, #244]	; (80042f4 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3b      	ldr	r2, [pc, #236]	; (80042f8 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xfe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a38      	ldr	r2, [pc, #224]	; (8004300 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_TIM_PWM_Stop_DMA+0x102>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HAL_TIM_PWM_Stop_DMA+0x104>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d017      	beq.n	800425c <HAL_TIM_PWM_Stop_DMA+0x138>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6a1a      	ldr	r2, [r3, #32]
 8004232:	f241 1311 	movw	r3, #4369	; 0x1111
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <HAL_TIM_PWM_Stop_DMA+0x138>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	f240 4344 	movw	r3, #1092	; 0x444
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_TIM_PWM_Stop_DMA+0x138>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	f241 1311 	movw	r3, #4369	; 0x1111
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10f      	bne.n	800428c <HAL_TIM_PWM_Stop_DMA+0x168>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a1a      	ldr	r2, [r3, #32]
 8004272:	f240 4344 	movw	r3, #1092	; 0x444
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d107      	bne.n	800428c <HAL_TIM_PWM_Stop_DMA+0x168>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_TIM_PWM_Stop_DMA+0x178>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429a:	e023      	b.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d104      	bne.n	80042ac <HAL_TIM_PWM_Stop_DMA+0x188>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042aa:	e01b      	b.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d104      	bne.n	80042bc <HAL_TIM_PWM_Stop_DMA+0x198>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ba:	e013      	b.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d104      	bne.n	80042cc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ca:	e00b      	b.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d104      	bne.n	80042dc <HAL_TIM_PWM_Stop_DMA+0x1b8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042da:	e003      	b.n	80042e4 <HAL_TIM_PWM_Stop_DMA+0x1c0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00
 80042f4:	40013400 	.word	0x40013400
 80042f8:	40014000 	.word	0x40014000
 80042fc:	40014400 	.word	0x40014400
 8004300:	40014800 	.word	0x40014800

08004304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b02      	cmp	r3, #2
 8004318:	d122      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa16 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa08 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fc fdb7 	bl	8000ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d122      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d11b      	bne.n	80043b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0204 	mvn.w	r2, #4
 8004384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9ec 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80043a0:	e005      	b.n	80043ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9de 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fc fd8d 	bl	8000ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0208 	mvn.w	r2, #8
 80043d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f9c2 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9b4 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fd63 	bl	8000ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b10      	cmp	r3, #16
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b10      	cmp	r3, #16
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0210 	mvn.w	r2, #16
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2208      	movs	r2, #8
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f998 	bl	8004778 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f98a 	bl	8004764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fc fd39 	bl	8000ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0201 	mvn.w	r2, #1
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd f844 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b80      	cmp	r3, #128	; 0x80
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b80      	cmp	r3, #128	; 0x80
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 ff02 	bl	80052b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fef5 	bl	80052cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d10e      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d107      	bne.n	800450e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f949 	bl	80047a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d10e      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d107      	bne.n	800453a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f06f 0220 	mvn.w	r2, #32
 8004532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 feb5 	bl	80052a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e0fd      	b.n	800475a <HAL_TIM_PWM_ConfigChannel+0x216>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b14      	cmp	r3, #20
 800456a:	f200 80f0 	bhi.w	800474e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	080045c9 	.word	0x080045c9
 8004578:	0800474f 	.word	0x0800474f
 800457c:	0800474f 	.word	0x0800474f
 8004580:	0800474f 	.word	0x0800474f
 8004584:	08004609 	.word	0x08004609
 8004588:	0800474f 	.word	0x0800474f
 800458c:	0800474f 	.word	0x0800474f
 8004590:	0800474f 	.word	0x0800474f
 8004594:	0800464b 	.word	0x0800464b
 8004598:	0800474f 	.word	0x0800474f
 800459c:	0800474f 	.word	0x0800474f
 80045a0:	0800474f 	.word	0x0800474f
 80045a4:	0800468b 	.word	0x0800468b
 80045a8:	0800474f 	.word	0x0800474f
 80045ac:	0800474f 	.word	0x0800474f
 80045b0:	0800474f 	.word	0x0800474f
 80045b4:	080046cd 	.word	0x080046cd
 80045b8:	0800474f 	.word	0x0800474f
 80045bc:	0800474f 	.word	0x0800474f
 80045c0:	0800474f 	.word	0x0800474f
 80045c4:	0800470d 	.word	0x0800470d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fa66 	bl	8004aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
      break;
 8004606:	e0a3      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fad6 	bl	8004bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]
      break;
 8004648:	e082      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb3f 	bl	8004cd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0208 	orr.w	r2, r2, #8
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
      break;
 8004688:	e062      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fba7 	bl	8004de4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e041      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fbf0 	bl	8004eb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0208 	orr.w	r2, r2, #8
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0204 	bic.w	r2, r2, #4
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800470a:	e021      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc34 	bl	8004f80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	021a      	lsls	r2, r3, #8
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800474c:	e000      	b.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800474e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop

08004764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ee:	e02a      	b.n	8004846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d107      	bne.n	800480a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2202      	movs	r2, #2
 80047fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004808:	e01d      	b.n	8004846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2204      	movs	r2, #4
 8004818:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004822:	e010      	b.n	8004846 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d107      	bne.n	800483e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2208      	movs	r2, #8
 8004832:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483c:	e003      	b.n	8004846 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff ffb4 	bl	80047b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	771a      	strb	r2, [r3, #28]
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	429a      	cmp	r2, r3
 8004870:	d10b      	bne.n	800488a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d136      	bne.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	e031      	b.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d10b      	bne.n	80048ac <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2202      	movs	r2, #2
 8004898:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d125      	bne.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048aa:	e020      	b.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d10b      	bne.n	80048ce <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2204      	movs	r2, #4
 80048ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d114      	bne.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048cc:	e00f      	b.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d10a      	bne.n	80048ee <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2208      	movs	r2, #8
 80048dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7fc faea 	bl	8000ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	771a      	strb	r2, [r3, #28]
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d103      	bne.n	8004922 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	771a      	strb	r2, [r3, #28]
 8004920:	e019      	b.n	8004956 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d103      	bne.n	8004934 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2202      	movs	r2, #2
 8004930:	771a      	strb	r2, [r3, #28]
 8004932:	e010      	b.n	8004956 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d103      	bne.n	8004946 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
 8004944:	e007      	b.n	8004956 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d102      	bne.n	8004956 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2208      	movs	r2, #8
 8004954:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff ff18 	bl	800478c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	771a      	strb	r2, [r3, #28]
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a40      	ldr	r2, [pc, #256]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3a      	ldr	r2, [pc, #232]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d01b      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00f      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00b      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x9a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <TIM_Base_SetConfig+0x130>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00f      	beq.n	8004a64 <TIM_Base_SetConfig+0xf8>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_Base_SetConfig+0xf8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0xf8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <TIM_Base_SetConfig+0x130>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d103      	bne.n	8004a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	615a      	str	r2, [r3, #20]
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40013400 	.word	0x40013400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	40014800 	.word	0x40014800

08004aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0201 	bic.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f023 0302 	bic.w	r3, r3, #2
 8004aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <TIM_OC1_SetConfig+0x10c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <TIM_OC1_SetConfig+0x80>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <TIM_OC1_SetConfig+0x110>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <TIM_OC1_SetConfig+0x80>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <TIM_OC1_SetConfig+0x114>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_OC1_SetConfig+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <TIM_OC1_SetConfig+0x118>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC1_SetConfig+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <TIM_OC1_SetConfig+0x11c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10c      	bne.n	8004b3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f023 0308 	bic.w	r3, r3, #8
 8004b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 0304 	bic.w	r3, r3, #4
 8004b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1b      	ldr	r2, [pc, #108]	; (8004bac <TIM_OC1_SetConfig+0x10c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00f      	beq.n	8004b62 <TIM_OC1_SetConfig+0xc2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <TIM_OC1_SetConfig+0x110>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_OC1_SetConfig+0xc2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <TIM_OC1_SetConfig+0x114>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <TIM_OC1_SetConfig+0xc2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <TIM_OC1_SetConfig+0x118>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC1_SetConfig+0xc2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a17      	ldr	r2, [pc, #92]	; (8004bbc <TIM_OC1_SetConfig+0x11c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800

08004bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0210 	bic.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f023 0320 	bic.w	r3, r3, #32
 8004c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <TIM_OC2_SetConfig+0x100>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_OC2_SetConfig+0x6c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a27      	ldr	r2, [pc, #156]	; (8004cc4 <TIM_OC2_SetConfig+0x104>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d10d      	bne.n	8004c48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <TIM_OC2_SetConfig+0x100>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00f      	beq.n	8004c70 <TIM_OC2_SetConfig+0xb0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <TIM_OC2_SetConfig+0x104>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00b      	beq.n	8004c70 <TIM_OC2_SetConfig+0xb0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <TIM_OC2_SetConfig+0x108>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_OC2_SetConfig+0xb0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <TIM_OC2_SetConfig+0x10c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_OC2_SetConfig+0xb0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <TIM_OC2_SetConfig+0x110>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d113      	bne.n	8004c98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40012c00 	.word	0x40012c00
 8004cc4:	40013400 	.word	0x40013400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40014400 	.word	0x40014400
 8004cd0:	40014800 	.word	0x40014800

08004cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a27      	ldr	r2, [pc, #156]	; (8004dd0 <TIM_OC3_SetConfig+0xfc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_OC3_SetConfig+0x6a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a26      	ldr	r2, [pc, #152]	; (8004dd4 <TIM_OC3_SetConfig+0x100>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10d      	bne.n	8004d5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <TIM_OC3_SetConfig+0xfc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_OC3_SetConfig+0xae>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <TIM_OC3_SetConfig+0x100>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_OC3_SetConfig+0xae>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <TIM_OC3_SetConfig+0x104>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_OC3_SetConfig+0xae>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <TIM_OC3_SetConfig+0x108>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC3_SetConfig+0xae>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <TIM_OC3_SetConfig+0x10c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40013400 	.word	0x40013400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800

08004de4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	031b      	lsls	r3, r3, #12
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <TIM_OC4_SetConfig+0xc0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_OC4_SetConfig+0x84>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a17      	ldr	r2, [pc, #92]	; (8004ea8 <TIM_OC4_SetConfig+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_OC4_SetConfig+0x84>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a16      	ldr	r2, [pc, #88]	; (8004eac <TIM_OC4_SetConfig+0xc8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_OC4_SetConfig+0x84>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <TIM_OC4_SetConfig+0xcc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_OC4_SetConfig+0x84>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <TIM_OC4_SetConfig+0xd0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d109      	bne.n	8004e7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	40013400 	.word	0x40013400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004efc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <TIM_OC5_SetConfig+0xb4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_OC5_SetConfig+0x7a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <TIM_OC5_SetConfig+0xb8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_OC5_SetConfig+0x7a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <TIM_OC5_SetConfig+0xbc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_OC5_SetConfig+0x7a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <TIM_OC5_SetConfig+0xc0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_OC5_SetConfig+0x7a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <TIM_OC5_SetConfig+0xc4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d109      	bne.n	8004f46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	bf00      	nop
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	051b      	lsls	r3, r3, #20
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a18      	ldr	r2, [pc, #96]	; (8005038 <TIM_OC6_SetConfig+0xb8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_OC6_SetConfig+0x7c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <TIM_OC6_SetConfig+0xbc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00b      	beq.n	8004ffc <TIM_OC6_SetConfig+0x7c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <TIM_OC6_SetConfig+0xc0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_OC6_SetConfig+0x7c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a15      	ldr	r2, [pc, #84]	; (8005044 <TIM_OC6_SetConfig+0xc4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_OC6_SetConfig+0x7c>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <TIM_OC6_SetConfig+0xc8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d109      	bne.n	8005010 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	029b      	lsls	r3, r3, #10
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40013400 	.word	0x40013400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800

0800504c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2201      	movs	r2, #1
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	431a      	orrs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d101      	bne.n	80050b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e068      	b.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1e      	ldr	r2, [pc, #120]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d018      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1a      	ldr	r2, [pc, #104]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10c      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40013400 	.word	0x40013400
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40014000 	.word	0x40014000

080051a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e065      	b.n	8005290 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d115      	bne.n	800527e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	051b      	lsls	r3, r3, #20
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400

080052a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e040      	b.n	8005374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc f9c8 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8c0 	bl	80054a4 <UART_SetConfig>
 8005324:	4603      	mov	r3, r0
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e022      	b.n	8005374 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fb3e 	bl	80059b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fbc5 	bl	8005afc <UART_CheckIdleState>
 8005372:	4603      	mov	r3, r0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005390:	2b20      	cmp	r3, #32
 8005392:	f040 8082 	bne.w	800549a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_UART_Transmit+0x26>
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e07a      	b.n	800549c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_UART_Transmit+0x38>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e073      	b.n	800549c <HAL_UART_Transmit+0x120>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2221      	movs	r2, #33	; 0x21
 80053c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ca:	f7fc fb5b 	bl	8001a84 <HAL_GetTick>
 80053ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e8:	d108      	bne.n	80053fc <HAL_UART_Transmit+0x80>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e003      	b.n	8005404 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800540c:	e02d      	b.n	800546a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fbb8 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e039      	b.n	800549c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543a:	b292      	uxth	r2, r2
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3302      	adds	r3, #2
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e008      	b.n	8005458 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b292      	uxth	r2, r2
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1cb      	bne.n	800540e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	2140      	movs	r1, #64	; 0x40
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fb84 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e005      	b.n	800549c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800549a:	2302      	movs	r3, #2
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3720      	adds	r7, #32
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	b5b0      	push	{r4, r5, r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4bad      	ldr	r3, [pc, #692]	; (8005784 <UART_SetConfig+0x2e0>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	69f9      	ldr	r1, [r7, #28]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4aa2      	ldr	r2, [pc, #648]	; (8005788 <UART_SetConfig+0x2e4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	4313      	orrs	r3, r2
 800550a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	430a      	orrs	r2, r1
 800551e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a99      	ldr	r2, [pc, #612]	; (800578c <UART_SetConfig+0x2e8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d121      	bne.n	800556e <UART_SetConfig+0xca>
 800552a:	4b99      	ldr	r3, [pc, #612]	; (8005790 <UART_SetConfig+0x2ec>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	2b03      	cmp	r3, #3
 8005536:	d817      	bhi.n	8005568 <UART_SetConfig+0xc4>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x9c>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005551 	.word	0x08005551
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005557 	.word	0x08005557
 800554c:	08005563 	.word	0x08005563
 8005550:	2301      	movs	r3, #1
 8005552:	76fb      	strb	r3, [r7, #27]
 8005554:	e0e7      	b.n	8005726 <UART_SetConfig+0x282>
 8005556:	2302      	movs	r3, #2
 8005558:	76fb      	strb	r3, [r7, #27]
 800555a:	e0e4      	b.n	8005726 <UART_SetConfig+0x282>
 800555c:	2304      	movs	r3, #4
 800555e:	76fb      	strb	r3, [r7, #27]
 8005560:	e0e1      	b.n	8005726 <UART_SetConfig+0x282>
 8005562:	2308      	movs	r3, #8
 8005564:	76fb      	strb	r3, [r7, #27]
 8005566:	e0de      	b.n	8005726 <UART_SetConfig+0x282>
 8005568:	2310      	movs	r3, #16
 800556a:	76fb      	strb	r3, [r7, #27]
 800556c:	e0db      	b.n	8005726 <UART_SetConfig+0x282>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a88      	ldr	r2, [pc, #544]	; (8005794 <UART_SetConfig+0x2f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d132      	bne.n	80055de <UART_SetConfig+0x13a>
 8005578:	4b85      	ldr	r3, [pc, #532]	; (8005790 <UART_SetConfig+0x2ec>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d828      	bhi.n	80055d8 <UART_SetConfig+0x134>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0xe8>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055d9 	.word	0x080055d9
 8005594:	080055d9 	.word	0x080055d9
 8005598:	080055d9 	.word	0x080055d9
 800559c:	080055cd 	.word	0x080055cd
 80055a0:	080055d9 	.word	0x080055d9
 80055a4:	080055d9 	.word	0x080055d9
 80055a8:	080055d9 	.word	0x080055d9
 80055ac:	080055c7 	.word	0x080055c7
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	080055d3 	.word	0x080055d3
 80055c0:	2300      	movs	r3, #0
 80055c2:	76fb      	strb	r3, [r7, #27]
 80055c4:	e0af      	b.n	8005726 <UART_SetConfig+0x282>
 80055c6:	2302      	movs	r3, #2
 80055c8:	76fb      	strb	r3, [r7, #27]
 80055ca:	e0ac      	b.n	8005726 <UART_SetConfig+0x282>
 80055cc:	2304      	movs	r3, #4
 80055ce:	76fb      	strb	r3, [r7, #27]
 80055d0:	e0a9      	b.n	8005726 <UART_SetConfig+0x282>
 80055d2:	2308      	movs	r3, #8
 80055d4:	76fb      	strb	r3, [r7, #27]
 80055d6:	e0a6      	b.n	8005726 <UART_SetConfig+0x282>
 80055d8:	2310      	movs	r3, #16
 80055da:	76fb      	strb	r3, [r7, #27]
 80055dc:	e0a3      	b.n	8005726 <UART_SetConfig+0x282>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6d      	ldr	r2, [pc, #436]	; (8005798 <UART_SetConfig+0x2f4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d120      	bne.n	800562a <UART_SetConfig+0x186>
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <UART_SetConfig+0x2ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055f2:	2b30      	cmp	r3, #48	; 0x30
 80055f4:	d013      	beq.n	800561e <UART_SetConfig+0x17a>
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d814      	bhi.n	8005624 <UART_SetConfig+0x180>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d009      	beq.n	8005612 <UART_SetConfig+0x16e>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d810      	bhi.n	8005624 <UART_SetConfig+0x180>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <UART_SetConfig+0x168>
 8005606:	2b10      	cmp	r3, #16
 8005608:	d006      	beq.n	8005618 <UART_SetConfig+0x174>
 800560a:	e00b      	b.n	8005624 <UART_SetConfig+0x180>
 800560c:	2300      	movs	r3, #0
 800560e:	76fb      	strb	r3, [r7, #27]
 8005610:	e089      	b.n	8005726 <UART_SetConfig+0x282>
 8005612:	2302      	movs	r3, #2
 8005614:	76fb      	strb	r3, [r7, #27]
 8005616:	e086      	b.n	8005726 <UART_SetConfig+0x282>
 8005618:	2304      	movs	r3, #4
 800561a:	76fb      	strb	r3, [r7, #27]
 800561c:	e083      	b.n	8005726 <UART_SetConfig+0x282>
 800561e:	2308      	movs	r3, #8
 8005620:	76fb      	strb	r3, [r7, #27]
 8005622:	e080      	b.n	8005726 <UART_SetConfig+0x282>
 8005624:	2310      	movs	r3, #16
 8005626:	76fb      	strb	r3, [r7, #27]
 8005628:	e07d      	b.n	8005726 <UART_SetConfig+0x282>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5b      	ldr	r2, [pc, #364]	; (800579c <UART_SetConfig+0x2f8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d120      	bne.n	8005676 <UART_SetConfig+0x1d2>
 8005634:	4b56      	ldr	r3, [pc, #344]	; (8005790 <UART_SetConfig+0x2ec>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800563e:	2bc0      	cmp	r3, #192	; 0xc0
 8005640:	d013      	beq.n	800566a <UART_SetConfig+0x1c6>
 8005642:	2bc0      	cmp	r3, #192	; 0xc0
 8005644:	d814      	bhi.n	8005670 <UART_SetConfig+0x1cc>
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d009      	beq.n	800565e <UART_SetConfig+0x1ba>
 800564a:	2b80      	cmp	r3, #128	; 0x80
 800564c:	d810      	bhi.n	8005670 <UART_SetConfig+0x1cc>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <UART_SetConfig+0x1b4>
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d006      	beq.n	8005664 <UART_SetConfig+0x1c0>
 8005656:	e00b      	b.n	8005670 <UART_SetConfig+0x1cc>
 8005658:	2300      	movs	r3, #0
 800565a:	76fb      	strb	r3, [r7, #27]
 800565c:	e063      	b.n	8005726 <UART_SetConfig+0x282>
 800565e:	2302      	movs	r3, #2
 8005660:	76fb      	strb	r3, [r7, #27]
 8005662:	e060      	b.n	8005726 <UART_SetConfig+0x282>
 8005664:	2304      	movs	r3, #4
 8005666:	76fb      	strb	r3, [r7, #27]
 8005668:	e05d      	b.n	8005726 <UART_SetConfig+0x282>
 800566a:	2308      	movs	r3, #8
 800566c:	76fb      	strb	r3, [r7, #27]
 800566e:	e05a      	b.n	8005726 <UART_SetConfig+0x282>
 8005670:	2310      	movs	r3, #16
 8005672:	76fb      	strb	r3, [r7, #27]
 8005674:	e057      	b.n	8005726 <UART_SetConfig+0x282>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a49      	ldr	r2, [pc, #292]	; (80057a0 <UART_SetConfig+0x2fc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d125      	bne.n	80056cc <UART_SetConfig+0x228>
 8005680:	4b43      	ldr	r3, [pc, #268]	; (8005790 <UART_SetConfig+0x2ec>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568e:	d017      	beq.n	80056c0 <UART_SetConfig+0x21c>
 8005690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005694:	d817      	bhi.n	80056c6 <UART_SetConfig+0x222>
 8005696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569a:	d00b      	beq.n	80056b4 <UART_SetConfig+0x210>
 800569c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a0:	d811      	bhi.n	80056c6 <UART_SetConfig+0x222>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <UART_SetConfig+0x20a>
 80056a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056aa:	d006      	beq.n	80056ba <UART_SetConfig+0x216>
 80056ac:	e00b      	b.n	80056c6 <UART_SetConfig+0x222>
 80056ae:	2300      	movs	r3, #0
 80056b0:	76fb      	strb	r3, [r7, #27]
 80056b2:	e038      	b.n	8005726 <UART_SetConfig+0x282>
 80056b4:	2302      	movs	r3, #2
 80056b6:	76fb      	strb	r3, [r7, #27]
 80056b8:	e035      	b.n	8005726 <UART_SetConfig+0x282>
 80056ba:	2304      	movs	r3, #4
 80056bc:	76fb      	strb	r3, [r7, #27]
 80056be:	e032      	b.n	8005726 <UART_SetConfig+0x282>
 80056c0:	2308      	movs	r3, #8
 80056c2:	76fb      	strb	r3, [r7, #27]
 80056c4:	e02f      	b.n	8005726 <UART_SetConfig+0x282>
 80056c6:	2310      	movs	r3, #16
 80056c8:	76fb      	strb	r3, [r7, #27]
 80056ca:	e02c      	b.n	8005726 <UART_SetConfig+0x282>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a2d      	ldr	r2, [pc, #180]	; (8005788 <UART_SetConfig+0x2e4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d125      	bne.n	8005722 <UART_SetConfig+0x27e>
 80056d6:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <UART_SetConfig+0x2ec>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e4:	d017      	beq.n	8005716 <UART_SetConfig+0x272>
 80056e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056ea:	d817      	bhi.n	800571c <UART_SetConfig+0x278>
 80056ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f0:	d00b      	beq.n	800570a <UART_SetConfig+0x266>
 80056f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f6:	d811      	bhi.n	800571c <UART_SetConfig+0x278>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <UART_SetConfig+0x260>
 80056fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005700:	d006      	beq.n	8005710 <UART_SetConfig+0x26c>
 8005702:	e00b      	b.n	800571c <UART_SetConfig+0x278>
 8005704:	2300      	movs	r3, #0
 8005706:	76fb      	strb	r3, [r7, #27]
 8005708:	e00d      	b.n	8005726 <UART_SetConfig+0x282>
 800570a:	2302      	movs	r3, #2
 800570c:	76fb      	strb	r3, [r7, #27]
 800570e:	e00a      	b.n	8005726 <UART_SetConfig+0x282>
 8005710:	2304      	movs	r3, #4
 8005712:	76fb      	strb	r3, [r7, #27]
 8005714:	e007      	b.n	8005726 <UART_SetConfig+0x282>
 8005716:	2308      	movs	r3, #8
 8005718:	76fb      	strb	r3, [r7, #27]
 800571a:	e004      	b.n	8005726 <UART_SetConfig+0x282>
 800571c:	2310      	movs	r3, #16
 800571e:	76fb      	strb	r3, [r7, #27]
 8005720:	e001      	b.n	8005726 <UART_SetConfig+0x282>
 8005722:	2310      	movs	r3, #16
 8005724:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <UART_SetConfig+0x2e4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	f040 8087 	bne.w	8005840 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005732:	7efb      	ldrb	r3, [r7, #27]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d837      	bhi.n	80057a8 <UART_SetConfig+0x304>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <UART_SetConfig+0x29c>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005765 	.word	0x08005765
 8005744:	080057a9 	.word	0x080057a9
 8005748:	0800576d 	.word	0x0800576d
 800574c:	080057a9 	.word	0x080057a9
 8005750:	08005773 	.word	0x08005773
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080057a9 	.word	0x080057a9
 800575c:	080057a9 	.word	0x080057a9
 8005760:	0800577b 	.word	0x0800577b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fd fc22 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8005768:	6178      	str	r0, [r7, #20]
        break;
 800576a:	e022      	b.n	80057b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <UART_SetConfig+0x300>)
 800576e:	617b      	str	r3, [r7, #20]
        break;
 8005770:	e01f      	b.n	80057b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005772:	f7fd fb83 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8005776:	6178      	str	r0, [r7, #20]
        break;
 8005778:	e01b      	b.n	80057b2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800577e:	617b      	str	r3, [r7, #20]
        break;
 8005780:	e017      	b.n	80057b2 <UART_SetConfig+0x30e>
 8005782:	bf00      	nop
 8005784:	efff69f3 	.word	0xefff69f3
 8005788:	40008000 	.word	0x40008000
 800578c:	40013800 	.word	0x40013800
 8005790:	40021000 	.word	0x40021000
 8005794:	40004400 	.word	0x40004400
 8005798:	40004800 	.word	0x40004800
 800579c:	40004c00 	.word	0x40004c00
 80057a0:	40005000 	.word	0x40005000
 80057a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	76bb      	strb	r3, [r7, #26]
        break;
 80057b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80f1 	beq.w	800599c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d902      	bls.n	80057dc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	76bb      	strb	r3, [r7, #26]
 80057da:	e0df      	b.n	800599c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4618      	mov	r0, r3
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	020b      	lsls	r3, r1, #8
 80057ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057f2:	0202      	lsls	r2, r0, #8
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	6849      	ldr	r1, [r1, #4]
 80057f8:	0849      	lsrs	r1, r1, #1
 80057fa:	4608      	mov	r0, r1
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	1814      	adds	r4, r2, r0
 8005802:	eb43 0501 	adc.w	r5, r3, r1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	461a      	mov	r2, r3
 800580c:	f04f 0300 	mov.w	r3, #0
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fb f9ca 	bl	8000bac <__aeabi_uldivmod>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4613      	mov	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005826:	d308      	bcc.n	800583a <UART_SetConfig+0x396>
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582e:	d204      	bcs.n	800583a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	e0b0      	b.n	800599c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	76bb      	strb	r3, [r7, #26]
 800583e:	e0ad      	b.n	800599c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005848:	d15c      	bne.n	8005904 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800584a:	7efb      	ldrb	r3, [r7, #27]
 800584c:	2b08      	cmp	r3, #8
 800584e:	d828      	bhi.n	80058a2 <UART_SetConfig+0x3fe>
 8005850:	a201      	add	r2, pc, #4	; (adr r2, 8005858 <UART_SetConfig+0x3b4>)
 8005852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005856:	bf00      	nop
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588d 	.word	0x0800588d
 8005864:	080058a3 	.word	0x080058a3
 8005868:	08005893 	.word	0x08005893
 800586c:	080058a3 	.word	0x080058a3
 8005870:	080058a3 	.word	0x080058a3
 8005874:	080058a3 	.word	0x080058a3
 8005878:	0800589b 	.word	0x0800589b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800587c:	f7fd fb96 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8005880:	6178      	str	r0, [r7, #20]
        break;
 8005882:	e013      	b.n	80058ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005884:	f7fd fba8 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8005888:	6178      	str	r0, [r7, #20]
        break;
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800588c:	4b49      	ldr	r3, [pc, #292]	; (80059b4 <UART_SetConfig+0x510>)
 800588e:	617b      	str	r3, [r7, #20]
        break;
 8005890:	e00c      	b.n	80058ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005892:	f7fd faf3 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8005896:	6178      	str	r0, [r7, #20]
        break;
 8005898:	e008      	b.n	80058ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589e:	617b      	str	r3, [r7, #20]
        break;
 80058a0:	e004      	b.n	80058ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	76bb      	strb	r3, [r7, #26]
        break;
 80058aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d074      	beq.n	800599c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	005a      	lsls	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	085b      	lsrs	r3, r3, #1
 80058bc:	441a      	add	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d916      	bls.n	80058fe <UART_SetConfig+0x45a>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d6:	d212      	bcs.n	80058fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f023 030f 	bic.w	r3, r3, #15
 80058e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	085b      	lsrs	r3, r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	89fa      	ldrh	r2, [r7, #14]
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	e04e      	b.n	800599c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	76bb      	strb	r3, [r7, #26]
 8005902:	e04b      	b.n	800599c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005904:	7efb      	ldrb	r3, [r7, #27]
 8005906:	2b08      	cmp	r3, #8
 8005908:	d827      	bhi.n	800595a <UART_SetConfig+0x4b6>
 800590a:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <UART_SetConfig+0x46c>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005935 	.word	0x08005935
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005945 	.word	0x08005945
 800591c:	0800595b 	.word	0x0800595b
 8005920:	0800594b 	.word	0x0800594b
 8005924:	0800595b 	.word	0x0800595b
 8005928:	0800595b 	.word	0x0800595b
 800592c:	0800595b 	.word	0x0800595b
 8005930:	08005953 	.word	0x08005953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fd fb3a 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8005938:	6178      	str	r0, [r7, #20]
        break;
 800593a:	e013      	b.n	8005964 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593c:	f7fd fb4c 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8005940:	6178      	str	r0, [r7, #20]
        break;
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005944:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <UART_SetConfig+0x510>)
 8005946:	617b      	str	r3, [r7, #20]
        break;
 8005948:	e00c      	b.n	8005964 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594a:	f7fd fa97 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 800594e:	6178      	str	r0, [r7, #20]
        break;
 8005950:	e008      	b.n	8005964 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	617b      	str	r3, [r7, #20]
        break;
 8005958:	e004      	b.n	8005964 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	76bb      	strb	r3, [r7, #26]
        break;
 8005962:	bf00      	nop
    }

    if (pclk != 0U)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d018      	beq.n	800599c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	085a      	lsrs	r2, r3, #1
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	441a      	add	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	b29b      	uxth	r3, r3
 800597e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d908      	bls.n	8005998 <UART_SetConfig+0x4f4>
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598c:	d204      	bcs.n	8005998 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e001      	b.n	800599c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80059a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bdb0      	pop	{r4, r5, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	00f42400 	.word	0x00f42400

080059b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01a      	beq.n	8005ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab6:	d10a      	bne.n	8005ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b0c:	f7fb ffba 	bl	8001a84 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d10e      	bne.n	8005b3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f82d 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e023      	b.n	8005b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d10e      	bne.n	8005b6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f817 	bl	8005b8e <UART_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e00d      	b.n	8005b86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9e:	e05e      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba6:	d05a      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	f7fb ff6c 	bl	8001a84 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <UART_WaitOnFlagUntilTimeout+0x30>
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11b      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bcc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e043      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02c      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c12:	d124      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c1c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c2c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d091      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <__NVIC_SetPriority>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	6039      	str	r1, [r7, #0]
 8005c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	db0a      	blt.n	8005cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	490c      	ldr	r1, [pc, #48]	; (8005cd4 <__NVIC_SetPriority+0x4c>)
 8005ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca6:	0112      	lsls	r2, r2, #4
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	440b      	add	r3, r1
 8005cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005cb0:	e00a      	b.n	8005cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	4908      	ldr	r1, [pc, #32]	; (8005cd8 <__NVIC_SetPriority+0x50>)
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	3b04      	subs	r3, #4
 8005cc0:	0112      	lsls	r2, r2, #4
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	761a      	strb	r2, [r3, #24]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	e000e100 	.word	0xe000e100
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <SysTick_Handler+0x1c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ce4:	f001 fcfe 	bl	80076e4 <xTaskGetSchedulerState>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d001      	beq.n	8005cf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005cee:	f002 fae3 	bl	80082b8 <xPortSysTickHandler>
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	e000e010 	.word	0xe000e010

08005cfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005d00:	2100      	movs	r1, #0
 8005d02:	f06f 0004 	mvn.w	r0, #4
 8005d06:	f7ff ffbf 	bl	8005c88 <__NVIC_SetPriority>
#endif
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d16:	f3ef 8305 	mrs	r3, IPSR
 8005d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005d22:	f06f 0305 	mvn.w	r3, #5
 8005d26:	607b      	str	r3, [r7, #4]
 8005d28:	e00c      	b.n	8005d44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <osKernelInitialize+0x44>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <osKernelInitialize+0x44>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	607b      	str	r3, [r7, #4]
 8005d3c:	e002      	b.n	8005d44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d44:	687b      	ldr	r3, [r7, #4]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	20000098 	.word	0x20000098

08005d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5e:	f3ef 8305 	mrs	r3, IPSR
 8005d62:	603b      	str	r3, [r7, #0]
  return(result);
 8005d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d6a:	f06f 0305 	mvn.w	r3, #5
 8005d6e:	607b      	str	r3, [r7, #4]
 8005d70:	e010      	b.n	8005d94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <osKernelStart+0x48>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d109      	bne.n	8005d8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d7a:	f7ff ffbf 	bl	8005cfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d7e:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <osKernelStart+0x48>)
 8005d80:	2202      	movs	r2, #2
 8005d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d84:	f001 f866 	bl	8006e54 <vTaskStartScheduler>
      stat = osOK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e002      	b.n	8005d94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d94:	687b      	ldr	r3, [r7, #4]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000098 	.word	0x20000098

08005da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08e      	sub	sp, #56	; 0x38
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db4:	f3ef 8305 	mrs	r3, IPSR
 8005db8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d17e      	bne.n	8005ebe <osThreadNew+0x11a>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d07b      	beq.n	8005ebe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005dca:	2318      	movs	r3, #24
 8005dcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d045      	beq.n	8005e6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <osThreadNew+0x48>
        name = attr->name;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <osThreadNew+0x6e>
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b38      	cmp	r3, #56	; 0x38
 8005e04:	d805      	bhi.n	8005e12 <osThreadNew+0x6e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <osThreadNew+0x72>
        return (NULL);
 8005e12:	2300      	movs	r3, #0
 8005e14:	e054      	b.n	8005ec0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	089b      	lsrs	r3, r3, #2
 8005e24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <osThreadNew+0xa8>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b5b      	cmp	r3, #91	; 0x5b
 8005e34:	d90a      	bls.n	8005e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <osThreadNew+0xa8>
        mem = 1;
 8005e46:	2301      	movs	r3, #1
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e010      	b.n	8005e6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10c      	bne.n	8005e6e <osThreadNew+0xca>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d108      	bne.n	8005e6e <osThreadNew+0xca>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <osThreadNew+0xca>
          mem = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	e001      	b.n	8005e6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d110      	bne.n	8005e96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e7c:	9202      	str	r2, [sp, #8]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fe0c 	bl	8006aa8 <xTaskCreateStatic>
 8005e90:	4603      	mov	r3, r0
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	e013      	b.n	8005ebe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d110      	bne.n	8005ebe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fe57 	bl	8006b62 <xTaskCreate>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d001      	beq.n	8005ebe <osThreadNew+0x11a>
            hTask = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ebe:	693b      	ldr	r3, [r7, #16]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3728      	adds	r7, #40	; 0x28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ed0:	f3ef 8305 	mrs	r3, IPSR
 8005ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <osDelay+0x1c>
    stat = osErrorISR;
 8005edc:	f06f 0305 	mvn.w	r3, #5
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	e007      	b.n	8005ef4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 ff7c 	bl	8006dec <vTaskDelay>
    }
  }

  return (stat);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a07      	ldr	r2, [pc, #28]	; (8005f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8005f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4a06      	ldr	r2, [pc, #24]	; (8005f30 <vApplicationGetIdleTaskMemory+0x30>)
 8005f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2000009c 	.word	0x2000009c
 8005f30:	200000f8 	.word	0x200000f8

08005f34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4a06      	ldr	r2, [pc, #24]	; (8005f64 <vApplicationGetTimerTaskMemory+0x30>)
 8005f4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	200002f8 	.word	0x200002f8
 8005f64:	20000354 	.word	0x20000354

08005f68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0208 	add.w	r2, r3, #8
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f103 0208 	add.w	r2, r3, #8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f103 0208 	add.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006020:	d103      	bne.n	800602a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	e00c      	b.n	8006044 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3308      	adds	r3, #8
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e002      	b.n	8006038 <vListInsert+0x2e>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d2f6      	bcs.n	8006032 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6852      	ldr	r2, [r2, #4]
 800609c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d103      	bne.n	80060b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	1e5a      	subs	r2, r3, #1
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060f6:	bf00      	nop
 80060f8:	e7fe      	b.n	80060f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060fa:	f002 f84b 	bl	8008194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612a:	3b01      	subs	r3, #1
 800612c:	68f9      	ldr	r1, [r7, #12]
 800612e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	441a      	add	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d114      	bne.n	800617a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3310      	adds	r3, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f903 	bl	8007368 <xTaskRemoveFromEventList>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006168:	4b0c      	ldr	r3, [pc, #48]	; (800619c <xQueueGenericReset+0xcc>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	e009      	b.n	800618e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3310      	adds	r3, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fef2 	bl	8005f68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff feed 	bl	8005f68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800618e:	f002 f831 	bl	80081f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006192:	2301      	movs	r3, #1
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08e      	sub	sp, #56	; 0x38
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10a      	bne.n	80061ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10a      	bne.n	80061e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <xQueueGenericCreateStatic+0x52>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xQueueGenericCreateStatic+0x56>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueGenericCreateStatic+0x58>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <xQueueGenericCreateStatic+0x7e>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <xQueueGenericCreateStatic+0x82>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <xQueueGenericCreateStatic+0x84>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61fb      	str	r3, [r7, #28]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800623e:	2350      	movs	r3, #80	; 0x50
 8006240:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b50      	cmp	r3, #80	; 0x50
 8006246:	d00a      	beq.n	800625e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800625e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006272:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f805 	bl	8006290 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006288:	4618      	mov	r0, r3
 800628a:	3730      	adds	r7, #48	; 0x30
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e002      	b.n	80062b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062be:	2101      	movs	r1, #1
 80062c0:	69b8      	ldr	r0, [r7, #24]
 80062c2:	f7ff ff05 	bl	80060d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08e      	sub	sp, #56	; 0x38
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062e6:	2300      	movs	r3, #0
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueGenericSend+0x32>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <xQueueGenericSend+0x40>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <xQueueGenericSend+0x44>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <xQueueGenericSend+0x46>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <xQueueGenericSend+0x60>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006334:	bf00      	nop
 8006336:	e7fe      	b.n	8006336 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d103      	bne.n	8006346 <xQueueGenericSend+0x6e>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <xQueueGenericSend+0x72>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <xQueueGenericSend+0x74>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <xQueueGenericSend+0x8e>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	623b      	str	r3, [r7, #32]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006366:	f001 f9bd 	bl	80076e4 <xTaskGetSchedulerState>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <xQueueGenericSend+0x9e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <xQueueGenericSend+0xa2>
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <xQueueGenericSend+0xa4>
 800637a:	2300      	movs	r3, #0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xQueueGenericSend+0xbe>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	61fb      	str	r3, [r7, #28]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006396:	f001 fefd 	bl	8008194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <xQueueGenericSend+0xd4>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d129      	bne.n	8006400 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b2:	f000 fa0b 	bl	80067cc <prvCopyDataToQueue>
 80063b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d010      	beq.n	80063e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	3324      	adds	r3, #36	; 0x24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 ffcf 	bl	8007368 <xTaskRemoveFromEventList>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d013      	beq.n	80063f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063d0:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <xQueueGenericSend+0x1f8>)
 80063d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	e00a      	b.n	80063f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d007      	beq.n	80063f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063e8:	4b39      	ldr	r3, [pc, #228]	; (80064d0 <xQueueGenericSend+0x1f8>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063f8:	f001 fefc 	bl	80081f4 <vPortExitCritical>
				return pdPASS;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e063      	b.n	80064c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006406:	f001 fef5 	bl	80081f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800640a:	2300      	movs	r3, #0
 800640c:	e05c      	b.n	80064c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f809 	bl	8007430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006422:	f001 fee7 	bl	80081f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006426:	f000 fd7b 	bl	8006f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642a:	f001 feb3 	bl	8008194 <vPortEnterCritical>
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006434:	b25b      	sxtb	r3, r3
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800643a:	d103      	bne.n	8006444 <xQueueGenericSend+0x16c>
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800644a:	b25b      	sxtb	r3, r3
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006450:	d103      	bne.n	800645a <xQueueGenericSend+0x182>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645a:	f001 fecb 	bl	80081f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800645e:	1d3a      	adds	r2, r7, #4
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	4611      	mov	r1, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fff8 	bl	800745c <xTaskCheckForTimeOut>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d124      	bne.n	80064bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006474:	f000 faa2 	bl	80069bc <prvIsQueueFull>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d018      	beq.n	80064b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	3310      	adds	r3, #16
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f000 ff1e 	bl	80072c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800648c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800648e:	f000 fa2d 	bl	80068ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006492:	f000 fd53 	bl	8006f3c <xTaskResumeAll>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	f47f af7c 	bne.w	8006396 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <xQueueGenericSend+0x1f8>)
 80064a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	e772      	b.n	8006396 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b2:	f000 fa1b 	bl	80068ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064b6:	f000 fd41 	bl	8006f3c <xTaskResumeAll>
 80064ba:	e76c      	b.n	8006396 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064be:	f000 fa15 	bl	80068ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c2:	f000 fd3b 	bl	8006f3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3738      	adds	r7, #56	; 0x38
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b090      	sub	sp, #64	; 0x40
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <xQueueGenericSendFromISR+0x3c>
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <xQueueGenericSendFromISR+0x40>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <xQueueGenericSendFromISR+0x42>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d103      	bne.n	800653e <xQueueGenericSendFromISR+0x6a>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <xQueueGenericSendFromISR+0x6e>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <xQueueGenericSendFromISR+0x70>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	623b      	str	r3, [r7, #32]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800655e:	f001 fefb 	bl	8008358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006562:	f3ef 8211 	mrs	r2, BASEPRI
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	61fa      	str	r2, [r7, #28]
 8006578:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800657a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <xQueueGenericSendFromISR+0xbc>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d12f      	bne.n	80065f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065a6:	f000 f911 	bl	80067cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b2:	d112      	bne.n	80065da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d016      	beq.n	80065ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	3324      	adds	r3, #36	; 0x24
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fed1 	bl	8007368 <xTaskRemoveFromEventList>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	e007      	b.n	80065ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065de:	3301      	adds	r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	b25a      	sxtb	r2, r3
 80065e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80065ea:	2301      	movs	r3, #1
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80065ee:	e001      	b.n	80065f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006602:	4618      	mov	r0, r3
 8006604:	3740      	adds	r7, #64	; 0x40
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10a      	bne.n	800663c <xQueueReceive+0x30>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	623b      	str	r3, [r7, #32]
}
 8006638:	bf00      	nop
 800663a:	e7fe      	b.n	800663a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <xQueueReceive+0x3e>
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <xQueueReceive+0x42>
 800664a:	2301      	movs	r3, #1
 800664c:	e000      	b.n	8006650 <xQueueReceive+0x44>
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xQueueReceive+0x5e>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	61fb      	str	r3, [r7, #28]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800666a:	f001 f83b 	bl	80076e4 <xTaskGetSchedulerState>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d102      	bne.n	800667a <xQueueReceive+0x6e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <xQueueReceive+0x72>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <xQueueReceive+0x74>
 800667e:	2300      	movs	r3, #0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueReceive+0x8e>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	61bb      	str	r3, [r7, #24]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800669a:	f001 fd7b 	bl	8008194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01f      	beq.n	80066ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ae:	f000 f8f7 	bl	80068a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00f      	beq.n	80066e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c4:	3310      	adds	r3, #16
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fe4e 	bl	8007368 <xTaskRemoveFromEventList>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d007      	beq.n	80066e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066d2:	4b3d      	ldr	r3, [pc, #244]	; (80067c8 <xQueueReceive+0x1bc>)
 80066d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066e2:	f001 fd87 	bl	80081f4 <vPortExitCritical>
				return pdPASS;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e069      	b.n	80067be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d103      	bne.n	80066f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80066f0:	f001 fd80 	bl	80081f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e062      	b.n	80067be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066fe:	f107 0310 	add.w	r3, r7, #16
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fe94 	bl	8007430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800670c:	f001 fd72 	bl	80081f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006710:	f000 fc06 	bl	8006f20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006714:	f001 fd3e 	bl	8008194 <vPortEnterCritical>
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800671e:	b25b      	sxtb	r3, r3
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d103      	bne.n	800672e <xQueueReceive+0x122>
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006734:	b25b      	sxtb	r3, r3
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800673a:	d103      	bne.n	8006744 <xQueueReceive+0x138>
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006744:	f001 fd56 	bl	80081f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006748:	1d3a      	adds	r2, r7, #4
 800674a:	f107 0310 	add.w	r3, r7, #16
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fe83 	bl	800745c <xTaskCheckForTimeOut>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d123      	bne.n	80067a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800675c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675e:	f000 f917 	bl	8006990 <prvIsQueueEmpty>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d017      	beq.n	8006798 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	3324      	adds	r3, #36	; 0x24
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	4611      	mov	r1, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fda9 	bl	80072c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006778:	f000 f8b8 	bl	80068ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800677c:	f000 fbde 	bl	8006f3c <xTaskResumeAll>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d189      	bne.n	800669a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006786:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <xQueueReceive+0x1bc>)
 8006788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	e780      	b.n	800669a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800679a:	f000 f8a7 	bl	80068ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800679e:	f000 fbcd 	bl	8006f3c <xTaskResumeAll>
 80067a2:	e77a      	b.n	800669a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a6:	f000 f8a1 	bl	80068ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067aa:	f000 fbc7 	bl	8006f3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b0:	f000 f8ee 	bl	8006990 <prvIsQueueEmpty>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f43f af6f 	beq.w	800669a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3730      	adds	r7, #48	; 0x30
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	e000ed04 	.word	0xe000ed04

080067cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d14d      	bne.n	800688e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 ff92 	bl	8007720 <xTaskPriorityDisinherit>
 80067fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	e043      	b.n	800688e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d119      	bne.n	8006840 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6858      	ldr	r0, [r3, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	461a      	mov	r2, r3
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	f001 fff2 	bl	8008800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	429a      	cmp	r2, r3
 8006834:	d32b      	bcc.n	800688e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	e026      	b.n	800688e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68d8      	ldr	r0, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	461a      	mov	r2, r3
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	f001 ffd8 	bl	8008800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	425b      	negs	r3, r3
 800685a:	441a      	add	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d207      	bcs.n	800687c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	425b      	negs	r3, r3
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d105      	bne.n	800688e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	3b01      	subs	r3, #1
 800688c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006896:	697b      	ldr	r3, [r7, #20]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	441a      	add	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d303      	bcc.n	80068d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68d9      	ldr	r1, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068dc:	461a      	mov	r2, r3
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	f001 ff8e 	bl	8008800 <memcpy>
	}
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068f4:	f001 fc4e 	bl	8008194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006900:	e011      	b.n	8006926 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	d012      	beq.n	8006930 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3324      	adds	r3, #36	; 0x24
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fd2a 	bl	8007368 <xTaskRemoveFromEventList>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800691a:	f000 fe01 	bl	8007520 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	3b01      	subs	r3, #1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dce9      	bgt.n	8006902 <prvUnlockQueue+0x16>
 800692e:	e000      	b.n	8006932 <prvUnlockQueue+0x46>
					break;
 8006930:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800693a:	f001 fc5b 	bl	80081f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800693e:	f001 fc29 	bl	8008194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006948:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800694a:	e011      	b.n	8006970 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d012      	beq.n	800697a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3310      	adds	r3, #16
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fd05 	bl	8007368 <xTaskRemoveFromEventList>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006964:	f000 fddc 	bl	8007520 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	3b01      	subs	r3, #1
 800696c:	b2db      	uxtb	r3, r3
 800696e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006974:	2b00      	cmp	r3, #0
 8006976:	dce9      	bgt.n	800694c <prvUnlockQueue+0x60>
 8006978:	e000      	b.n	800697c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800697a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	22ff      	movs	r2, #255	; 0xff
 8006980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006984:	f001 fc36 	bl	80081f4 <vPortExitCritical>
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006998:	f001 fbfc 	bl	8008194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	e001      	b.n	80069ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ae:	f001 fc21 	bl	80081f4 <vPortExitCritical>

	return xReturn;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069c4:	f001 fbe6 	bl	8008194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d102      	bne.n	80069da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e001      	b.n	80069de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069de:	f001 fc09 	bl	80081f4 <vPortExitCritical>

	return xReturn;
 80069e2:	68fb      	ldr	r3, [r7, #12]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e014      	b.n	8006a26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069fc:	4a0f      	ldr	r2, [pc, #60]	; (8006a3c <vQueueAddToRegistry+0x50>)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a08:	490c      	ldr	r1, [pc, #48]	; (8006a3c <vQueueAddToRegistry+0x50>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a12:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <vQueueAddToRegistry+0x50>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4413      	add	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a1e:	e006      	b.n	8006a2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b07      	cmp	r3, #7
 8006a2a:	d9e7      	bls.n	80069fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20001cf8 	.word	0x20001cf8

08006a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a50:	f001 fba0 	bl	8008194 <vPortEnterCritical>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a60:	d103      	bne.n	8006a6a <vQueueWaitForMessageRestricted+0x2a>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a76:	d103      	bne.n	8006a80 <vQueueWaitForMessageRestricted+0x40>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a80:	f001 fbb8 	bl	80081f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	3324      	adds	r3, #36	; 0x24
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fc3b 	bl	8007310 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	f7ff ff26 	bl	80068ec <prvUnlockQueue>
	}
 8006aa0:	bf00      	nop
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08e      	sub	sp, #56	; 0x38
 8006aac:	af04      	add	r7, sp, #16
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	623b      	str	r3, [r7, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xTaskCreateStatic+0x46>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	61fb      	str	r3, [r7, #28]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aee:	235c      	movs	r3, #92	; 0x5c
 8006af0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b5c      	cmp	r3, #92	; 0x5c
 8006af6:	d00a      	beq.n	8006b0e <xTaskCreateStatic+0x66>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01e      	beq.n	8006b54 <xTaskCreateStatic+0xac>
 8006b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01b      	beq.n	8006b54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	9302      	str	r3, [sp, #8]
 8006b36:	f107 0314 	add.w	r3, r7, #20
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f850 	bl	8006bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b4e:	f000 f8dd 	bl	8006d0c <prvAddNewTaskToReadyList>
 8006b52:	e001      	b.n	8006b58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b58:	697b      	ldr	r3, [r7, #20]
	}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3728      	adds	r7, #40	; 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08c      	sub	sp, #48	; 0x30
 8006b66:	af04      	add	r7, sp, #16
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fc2e 	bl	80083d8 <pvPortMalloc>
 8006b7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00e      	beq.n	8006ba2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b84:	205c      	movs	r0, #92	; 0x5c
 8006b86:	f001 fc27 	bl	80083d8 <pvPortMalloc>
 8006b8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
 8006b98:	e005      	b.n	8006ba6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b9a:	6978      	ldr	r0, [r7, #20]
 8006b9c:	f001 fce8 	bl	8008570 <vPortFree>
 8006ba0:	e001      	b.n	8006ba6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bb4:	88fa      	ldrh	r2, [r7, #6]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9303      	str	r3, [sp, #12]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	9302      	str	r3, [sp, #8]
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f80e 	bl	8006bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bd0:	69f8      	ldr	r0, [r7, #28]
 8006bd2:	f000 f89b 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	e002      	b.n	8006be2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006be2:	69bb      	ldr	r3, [r7, #24]
	}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	461a      	mov	r2, r3
 8006c04:	21a5      	movs	r1, #165	; 0xa5
 8006c06:	f001 fe09 	bl	800881c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c14:	3b01      	subs	r3, #1
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	617b      	str	r3, [r7, #20]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01f      	beq.n	8006c8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e012      	b.n	8006c76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	7819      	ldrb	r1, [r3, #0]
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3334      	adds	r3, #52	; 0x34
 8006c60:	460a      	mov	r2, r1
 8006c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	3301      	adds	r3, #1
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b0f      	cmp	r3, #15
 8006c7a:	d9e9      	bls.n	8006c50 <prvInitialiseNewTask+0x64>
 8006c7c:	e000      	b.n	8006c80 <prvInitialiseNewTask+0x94>
			{
				break;
 8006c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c88:	e003      	b.n	8006c92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	2b37      	cmp	r3, #55	; 0x37
 8006c96:	d901      	bls.n	8006c9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c98:	2337      	movs	r3, #55	; 0x37
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2200      	movs	r2, #0
 8006cac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff f978 	bl	8005fa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff f973 	bl	8005fa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2200      	movs	r2, #0
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	68f9      	ldr	r1, [r7, #12]
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f001 f928 	bl	8007f40 <pxPortInitialiseStack>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d02:	bf00      	nop
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f001 fa3e 	bl	8008194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fc16 	bl	8007568 <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d903      	bls.n	8006d80 <prvAddNewTaskToReadyList+0x74>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <prvAddNewTaskToReadyList+0xd8>)
 8006d8e:	441a      	add	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7ff f913 	bl	8005fc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d9c:	f001 fa2a 	bl	80081f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d207      	bcs.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <prvAddNewTaskToReadyList+0xdc>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000c28 	.word	0x20000c28
 8006dd4:	20000754 	.word	0x20000754
 8006dd8:	20000c34 	.word	0x20000c34
 8006ddc:	20000c44 	.word	0x20000c44
 8006de0:	20000c30 	.word	0x20000c30
 8006de4:	20000758 	.word	0x20000758
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <vTaskDelay+0x60>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <vTaskDelay+0x30>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e1c:	f000 f880 	bl	8006f20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fcea 	bl	80077fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e28:	f000 f888 	bl	8006f3c <xTaskResumeAll>
 8006e2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <vTaskDelay+0x64>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000c50 	.word	0x20000c50
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b08a      	sub	sp, #40	; 0x28
 8006e58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e62:	463a      	mov	r2, r7
 8006e64:	1d39      	adds	r1, r7, #4
 8006e66:	f107 0308 	add.w	r3, r7, #8
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff f848 	bl	8005f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	9202      	str	r2, [sp, #8]
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	460a      	mov	r2, r1
 8006e82:	4921      	ldr	r1, [pc, #132]	; (8006f08 <vTaskStartScheduler+0xb4>)
 8006e84:	4821      	ldr	r0, [pc, #132]	; (8006f0c <vTaskStartScheduler+0xb8>)
 8006e86:	f7ff fe0f 	bl	8006aa8 <xTaskCreateStatic>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <vTaskStartScheduler+0xbc>)
 8006e8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e90:	4b1f      	ldr	r3, [pc, #124]	; (8006f10 <vTaskStartScheduler+0xbc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e001      	b.n	8006ea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d102      	bne.n	8006eae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ea8:	f000 fcfc 	bl	80078a4 <xTimerCreateTimerTask>
 8006eac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d116      	bne.n	8006ee2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	613b      	str	r3, [r7, #16]
}
 8006ec6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ec8:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <vTaskStartScheduler+0xc0>)
 8006eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ece:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ed0:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <vTaskStartScheduler+0xc4>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ed6:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <vTaskStartScheduler+0xc8>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006edc:	f001 f8b8 	bl	8008050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ee0:	e00e      	b.n	8006f00 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee8:	d10a      	bne.n	8006f00 <vTaskStartScheduler+0xac>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	60fb      	str	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	e7fe      	b.n	8006efe <vTaskStartScheduler+0xaa>
}
 8006f00:	bf00      	nop
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	0800a2b4 	.word	0x0800a2b4
 8006f0c:	08007539 	.word	0x08007539
 8006f10:	20000c4c 	.word	0x20000c4c
 8006f14:	20000c48 	.word	0x20000c48
 8006f18:	20000c34 	.word	0x20000c34
 8006f1c:	20000c2c 	.word	0x20000c2c

08006f20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <vTaskSuspendAll+0x18>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a03      	ldr	r2, [pc, #12]	; (8006f38 <vTaskSuspendAll+0x18>)
 8006f2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f2e:	bf00      	nop
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	20000c50 	.word	0x20000c50

08006f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f4a:	4b42      	ldr	r3, [pc, #264]	; (8007054 <xTaskResumeAll+0x118>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10a      	bne.n	8006f68 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	603b      	str	r3, [r7, #0]
}
 8006f64:	bf00      	nop
 8006f66:	e7fe      	b.n	8006f66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f68:	f001 f914 	bl	8008194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f6c:	4b39      	ldr	r3, [pc, #228]	; (8007054 <xTaskResumeAll+0x118>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4a38      	ldr	r2, [pc, #224]	; (8007054 <xTaskResumeAll+0x118>)
 8006f74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f76:	4b37      	ldr	r3, [pc, #220]	; (8007054 <xTaskResumeAll+0x118>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d162      	bne.n	8007044 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f7e:	4b36      	ldr	r3, [pc, #216]	; (8007058 <xTaskResumeAll+0x11c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d05e      	beq.n	8007044 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f86:	e02f      	b.n	8006fe8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f88:	4b34      	ldr	r3, [pc, #208]	; (800705c <xTaskResumeAll+0x120>)
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3318      	adds	r3, #24
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7ff f871 	bl	800607c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff f86c 	bl	800607c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4b2d      	ldr	r3, [pc, #180]	; (8007060 <xTaskResumeAll+0x124>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d903      	bls.n	8006fb8 <xTaskResumeAll+0x7c>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	; (8007060 <xTaskResumeAll+0x124>)
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4a27      	ldr	r2, [pc, #156]	; (8007064 <xTaskResumeAll+0x128>)
 8006fc6:	441a      	add	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fff7 	bl	8005fc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <xTaskResumeAll+0x12c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fe2:	4b22      	ldr	r3, [pc, #136]	; (800706c <xTaskResumeAll+0x130>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	; (800705c <xTaskResumeAll+0x120>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1cb      	bne.n	8006f88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ff6:	f000 fb55 	bl	80076a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ffa:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <xTaskResumeAll+0x134>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d010      	beq.n	8007028 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007006:	f000 f847 	bl	8007098 <xTaskIncrementTick>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007010:	4b16      	ldr	r3, [pc, #88]	; (800706c <xTaskResumeAll+0x130>)
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3b01      	subs	r3, #1
 800701a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f1      	bne.n	8007006 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007022:	4b13      	ldr	r3, [pc, #76]	; (8007070 <xTaskResumeAll+0x134>)
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007028:	4b10      	ldr	r3, [pc, #64]	; (800706c <xTaskResumeAll+0x130>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007034:	4b0f      	ldr	r3, [pc, #60]	; (8007074 <xTaskResumeAll+0x138>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007044:	f001 f8d6 	bl	80081f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007048:	68bb      	ldr	r3, [r7, #8]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20000c50 	.word	0x20000c50
 8007058:	20000c28 	.word	0x20000c28
 800705c:	20000be8 	.word	0x20000be8
 8007060:	20000c30 	.word	0x20000c30
 8007064:	20000758 	.word	0x20000758
 8007068:	20000754 	.word	0x20000754
 800706c:	20000c3c 	.word	0x20000c3c
 8007070:	20000c38 	.word	0x20000c38
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <xTaskGetTickCount+0x1c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007084:	687b      	ldr	r3, [r7, #4]
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20000c2c 	.word	0x20000c2c

08007098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a2:	4b4f      	ldr	r3, [pc, #316]	; (80071e0 <xTaskIncrementTick+0x148>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f040 808f 	bne.w	80071ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070ac:	4b4d      	ldr	r3, [pc, #308]	; (80071e4 <xTaskIncrementTick+0x14c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070b4:	4a4b      	ldr	r2, [pc, #300]	; (80071e4 <xTaskIncrementTick+0x14c>)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d120      	bne.n	8007102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c0:	4b49      	ldr	r3, [pc, #292]	; (80071e8 <xTaskIncrementTick+0x150>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	603b      	str	r3, [r7, #0]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <xTaskIncrementTick+0x46>
 80070e0:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <xTaskIncrementTick+0x150>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	4b41      	ldr	r3, [pc, #260]	; (80071ec <xTaskIncrementTick+0x154>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3f      	ldr	r2, [pc, #252]	; (80071e8 <xTaskIncrementTick+0x150>)
 80070ec:	6013      	str	r3, [r2, #0]
 80070ee:	4a3f      	ldr	r2, [pc, #252]	; (80071ec <xTaskIncrementTick+0x154>)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <xTaskIncrementTick+0x158>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3301      	adds	r3, #1
 80070fa:	4a3d      	ldr	r2, [pc, #244]	; (80071f0 <xTaskIncrementTick+0x158>)
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	f000 fad1 	bl	80076a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007102:	4b3c      	ldr	r3, [pc, #240]	; (80071f4 <xTaskIncrementTick+0x15c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	429a      	cmp	r2, r3
 800710a:	d349      	bcc.n	80071a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710c:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <xTaskIncrementTick+0x150>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007116:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <xTaskIncrementTick+0x15c>)
 8007118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800711c:	601a      	str	r2, [r3, #0]
					break;
 800711e:	e03f      	b.n	80071a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007120:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <xTaskIncrementTick+0x150>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d203      	bcs.n	8007140 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007138:	4a2e      	ldr	r2, [pc, #184]	; (80071f4 <xTaskIncrementTick+0x15c>)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800713e:	e02f      	b.n	80071a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3304      	adds	r3, #4
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe ff99 	bl	800607c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3318      	adds	r3, #24
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe ff90 	bl	800607c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4b25      	ldr	r3, [pc, #148]	; (80071f8 <xTaskIncrementTick+0x160>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d903      	bls.n	8007170 <xTaskIncrementTick+0xd8>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <xTaskIncrementTick+0x160>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4a1f      	ldr	r2, [pc, #124]	; (80071fc <xTaskIncrementTick+0x164>)
 800717e:	441a      	add	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	3304      	adds	r3, #4
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f7fe ff1b 	bl	8005fc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <xTaskIncrementTick+0x168>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007196:	429a      	cmp	r2, r3
 8007198:	d3b8      	bcc.n	800710c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800719a:	2301      	movs	r3, #1
 800719c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800719e:	e7b5      	b.n	800710c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <xTaskIncrementTick+0x168>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a6:	4915      	ldr	r1, [pc, #84]	; (80071fc <xTaskIncrementTick+0x164>)
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	440b      	add	r3, r1
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d901      	bls.n	80071bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071bc:	4b11      	ldr	r3, [pc, #68]	; (8007204 <xTaskIncrementTick+0x16c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	e004      	b.n	80071d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <xTaskIncrementTick+0x170>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <xTaskIncrementTick+0x170>)
 80071d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071d4:	697b      	ldr	r3, [r7, #20]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000c50 	.word	0x20000c50
 80071e4:	20000c2c 	.word	0x20000c2c
 80071e8:	20000be0 	.word	0x20000be0
 80071ec:	20000be4 	.word	0x20000be4
 80071f0:	20000c40 	.word	0x20000c40
 80071f4:	20000c48 	.word	0x20000c48
 80071f8:	20000c30 	.word	0x20000c30
 80071fc:	20000758 	.word	0x20000758
 8007200:	20000754 	.word	0x20000754
 8007204:	20000c3c 	.word	0x20000c3c
 8007208:	20000c38 	.word	0x20000c38

0800720c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007212:	4b28      	ldr	r3, [pc, #160]	; (80072b4 <vTaskSwitchContext+0xa8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800721a:	4b27      	ldr	r3, [pc, #156]	; (80072b8 <vTaskSwitchContext+0xac>)
 800721c:	2201      	movs	r2, #1
 800721e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007220:	e041      	b.n	80072a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007222:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <vTaskSwitchContext+0xac>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007228:	4b24      	ldr	r3, [pc, #144]	; (80072bc <vTaskSwitchContext+0xb0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e010      	b.n	8007252 <vTaskSwitchContext+0x46>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <vTaskSwitchContext+0x40>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	607b      	str	r3, [r7, #4]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vTaskSwitchContext+0x3e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3b01      	subs	r3, #1
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	491b      	ldr	r1, [pc, #108]	; (80072c0 <vTaskSwitchContext+0xb4>)
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4613      	mov	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0e4      	beq.n	8007230 <vTaskSwitchContext+0x24>
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4613      	mov	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4a13      	ldr	r2, [pc, #76]	; (80072c0 <vTaskSwitchContext+0xb4>)
 8007272:	4413      	add	r3, r2
 8007274:	60bb      	str	r3, [r7, #8]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	3308      	adds	r3, #8
 8007288:	429a      	cmp	r2, r3
 800728a:	d104      	bne.n	8007296 <vTaskSwitchContext+0x8a>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <vTaskSwitchContext+0xb8>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	4a06      	ldr	r2, [pc, #24]	; (80072bc <vTaskSwitchContext+0xb0>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6013      	str	r3, [r2, #0]
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000c50 	.word	0x20000c50
 80072b8:	20000c3c 	.word	0x20000c3c
 80072bc:	20000c30 	.word	0x20000c30
 80072c0:	20000758 	.word	0x20000758
 80072c4:	20000754 	.word	0x20000754

080072c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	60fb      	str	r3, [r7, #12]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <vTaskPlaceOnEventList+0x44>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3318      	adds	r3, #24
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe fe87 	bl	800600a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072fc:	2101      	movs	r1, #1
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	f000 fa7c 	bl	80077fc <prvAddCurrentTaskToDelayedList>
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000754 	.word	0x20000754

08007310 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	617b      	str	r3, [r7, #20]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <vTaskPlaceOnEventListRestricted+0x54>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3318      	adds	r3, #24
 800733e:	4619      	mov	r1, r3
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7fe fe3e 	bl	8005fc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800734c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007350:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	68b8      	ldr	r0, [r7, #8]
 8007356:	f000 fa51 	bl	80077fc <prvAddCurrentTaskToDelayedList>
	}
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000754 	.word	0x20000754

08007368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3318      	adds	r3, #24
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe fe6f 	bl	800607c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800739e:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <xTaskRemoveFromEventList+0xb0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11d      	bne.n	80073e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fe66 	bl	800607c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	4b19      	ldr	r3, [pc, #100]	; (800741c <xTaskRemoveFromEventList+0xb4>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d903      	bls.n	80073c4 <xTaskRemoveFromEventList+0x5c>
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4a16      	ldr	r2, [pc, #88]	; (800741c <xTaskRemoveFromEventList+0xb4>)
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4a13      	ldr	r2, [pc, #76]	; (8007420 <xTaskRemoveFromEventList+0xb8>)
 80073d2:	441a      	add	r2, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fdf1 	bl	8005fc2 <vListInsertEnd>
 80073e0:	e005      	b.n	80073ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	3318      	adds	r3, #24
 80073e6:	4619      	mov	r1, r3
 80073e8:	480e      	ldr	r0, [pc, #56]	; (8007424 <xTaskRemoveFromEventList+0xbc>)
 80073ea:	f7fe fdea 	bl	8005fc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <xTaskRemoveFromEventList+0xc0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d905      	bls.n	8007408 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073fc:	2301      	movs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <xTaskRemoveFromEventList+0xc4>)
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e001      	b.n	800740c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800740c:	697b      	ldr	r3, [r7, #20]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000c50 	.word	0x20000c50
 800741c:	20000c30 	.word	0x20000c30
 8007420:	20000758 	.word	0x20000758
 8007424:	20000be8 	.word	0x20000be8
 8007428:	20000754 	.word	0x20000754
 800742c:	20000c3c 	.word	0x20000c3c

08007430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <vTaskInternalSetTimeOutState+0x24>)
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <vTaskInternalSetTimeOutState+0x28>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	605a      	str	r2, [r3, #4]
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	20000c40 	.word	0x20000c40
 8007458:	20000c2c 	.word	0x20000c2c

0800745c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	613b      	str	r3, [r7, #16]
}
 800747e:	bf00      	nop
 8007480:	e7fe      	b.n	8007480 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800749e:	f000 fe79 	bl	8008194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074a2:	4b1d      	ldr	r3, [pc, #116]	; (8007518 <xTaskCheckForTimeOut+0xbc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ba:	d102      	bne.n	80074c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e023      	b.n	800750a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <xTaskCheckForTimeOut+0xc0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d007      	beq.n	80074de <xTaskCheckForTimeOut+0x82>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d302      	bcc.n	80074de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	61fb      	str	r3, [r7, #28]
 80074dc:	e015      	b.n	800750a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d20b      	bcs.n	8007500 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff ff9b 	bl	8007430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e004      	b.n	800750a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007506:	2301      	movs	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800750a:	f000 fe73 	bl	80081f4 <vPortExitCritical>

	return xReturn;
 800750e:	69fb      	ldr	r3, [r7, #28]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000c2c 	.word	0x20000c2c
 800751c:	20000c40 	.word	0x20000c40

08007520 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007524:	4b03      	ldr	r3, [pc, #12]	; (8007534 <vTaskMissedYield+0x14>)
 8007526:	2201      	movs	r2, #1
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	20000c3c 	.word	0x20000c3c

08007538 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007540:	f000 f852 	bl	80075e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <prvIdleTask+0x28>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d9f9      	bls.n	8007540 <prvIdleTask+0x8>
			{
				taskYIELD();
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <prvIdleTask+0x2c>)
 800754e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800755c:	e7f0      	b.n	8007540 <prvIdleTask+0x8>
 800755e:	bf00      	nop
 8007560:	20000758 	.word	0x20000758
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800756e:	2300      	movs	r3, #0
 8007570:	607b      	str	r3, [r7, #4]
 8007572:	e00c      	b.n	800758e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <prvInitialiseTaskLists+0x60>)
 8007580:	4413      	add	r3, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fcf0 	bl	8005f68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3301      	adds	r3, #1
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b37      	cmp	r3, #55	; 0x37
 8007592:	d9ef      	bls.n	8007574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007594:	480d      	ldr	r0, [pc, #52]	; (80075cc <prvInitialiseTaskLists+0x64>)
 8007596:	f7fe fce7 	bl	8005f68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800759a:	480d      	ldr	r0, [pc, #52]	; (80075d0 <prvInitialiseTaskLists+0x68>)
 800759c:	f7fe fce4 	bl	8005f68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075a0:	480c      	ldr	r0, [pc, #48]	; (80075d4 <prvInitialiseTaskLists+0x6c>)
 80075a2:	f7fe fce1 	bl	8005f68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075a6:	480c      	ldr	r0, [pc, #48]	; (80075d8 <prvInitialiseTaskLists+0x70>)
 80075a8:	f7fe fcde 	bl	8005f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075ac:	480b      	ldr	r0, [pc, #44]	; (80075dc <prvInitialiseTaskLists+0x74>)
 80075ae:	f7fe fcdb 	bl	8005f68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075b2:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <prvInitialiseTaskLists+0x78>)
 80075b4:	4a05      	ldr	r2, [pc, #20]	; (80075cc <prvInitialiseTaskLists+0x64>)
 80075b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <prvInitialiseTaskLists+0x7c>)
 80075ba:	4a05      	ldr	r2, [pc, #20]	; (80075d0 <prvInitialiseTaskLists+0x68>)
 80075bc:	601a      	str	r2, [r3, #0]
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000758 	.word	0x20000758
 80075cc:	20000bb8 	.word	0x20000bb8
 80075d0:	20000bcc 	.word	0x20000bcc
 80075d4:	20000be8 	.word	0x20000be8
 80075d8:	20000bfc 	.word	0x20000bfc
 80075dc:	20000c14 	.word	0x20000c14
 80075e0:	20000be0 	.word	0x20000be0
 80075e4:	20000be4 	.word	0x20000be4

080075e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ee:	e019      	b.n	8007624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075f0:	f000 fdd0 	bl	8008194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f4:	4b10      	ldr	r3, [pc, #64]	; (8007638 <prvCheckTasksWaitingTermination+0x50>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fd3b 	bl	800607c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <prvCheckTasksWaitingTermination+0x54>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3b01      	subs	r3, #1
 800760c:	4a0b      	ldr	r2, [pc, #44]	; (800763c <prvCheckTasksWaitingTermination+0x54>)
 800760e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <prvCheckTasksWaitingTermination+0x58>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3b01      	subs	r3, #1
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <prvCheckTasksWaitingTermination+0x58>)
 8007618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800761a:	f000 fdeb 	bl	80081f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f810 	bl	8007644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <prvCheckTasksWaitingTermination+0x58>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e1      	bne.n	80075f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20000bfc 	.word	0x20000bfc
 800763c:	20000c28 	.word	0x20000c28
 8007640:	20000c10 	.word	0x20000c10

08007644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007652:	2b00      	cmp	r3, #0
 8007654:	d108      	bne.n	8007668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4618      	mov	r0, r3
 800765c:	f000 ff88 	bl	8008570 <vPortFree>
				vPortFree( pxTCB );
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff85 	bl	8008570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007666:	e018      	b.n	800769a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800766e:	2b01      	cmp	r3, #1
 8007670:	d103      	bne.n	800767a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 ff7c 	bl	8008570 <vPortFree>
	}
 8007678:	e00f      	b.n	800769a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007680:	2b02      	cmp	r3, #2
 8007682:	d00a      	beq.n	800769a <prvDeleteTCB+0x56>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	60fb      	str	r3, [r7, #12]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <prvDeleteTCB+0x54>
	}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076aa:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <prvResetNextTaskUnblockTime+0x3c>)
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076bc:	e008      	b.n	80076d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076be:	4b07      	ldr	r3, [pc, #28]	; (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	4a04      	ldr	r2, [pc, #16]	; (80076e0 <prvResetNextTaskUnblockTime+0x3c>)
 80076ce:	6013      	str	r3, [r2, #0]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	20000be0 	.word	0x20000be0
 80076e0:	20000c48 	.word	0x20000c48

080076e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076ea:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <xTaskGetSchedulerState+0x34>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076f2:	2301      	movs	r3, #1
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	e008      	b.n	800770a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <xTaskGetSchedulerState+0x38>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007700:	2302      	movs	r3, #2
 8007702:	607b      	str	r3, [r7, #4]
 8007704:	e001      	b.n	800770a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007706:	2300      	movs	r3, #0
 8007708:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800770a:	687b      	ldr	r3, [r7, #4]
	}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	20000c34 	.word	0x20000c34
 800771c:	20000c50 	.word	0x20000c50

08007720 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d056      	beq.n	80077e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007736:	4b2e      	ldr	r3, [pc, #184]	; (80077f0 <xTaskPriorityDisinherit+0xd0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	429a      	cmp	r2, r3
 800773e:	d00a      	beq.n	8007756 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	60fb      	str	r3, [r7, #12]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60bb      	str	r3, [r7, #8]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	1e5a      	subs	r2, r3, #1
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	429a      	cmp	r2, r3
 8007788:	d02c      	beq.n	80077e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778e:	2b00      	cmp	r3, #0
 8007790:	d128      	bne.n	80077e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	3304      	adds	r3, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fc70 	bl	800607c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <xTaskPriorityDisinherit+0xd4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d903      	bls.n	80077c4 <xTaskPriorityDisinherit+0xa4>
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	4a0c      	ldr	r2, [pc, #48]	; (80077f4 <xTaskPriorityDisinherit+0xd4>)
 80077c2:	6013      	str	r3, [r2, #0]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4a09      	ldr	r2, [pc, #36]	; (80077f8 <xTaskPriorityDisinherit+0xd8>)
 80077d2:	441a      	add	r2, r3
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe fbf1 	bl	8005fc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e4:	697b      	ldr	r3, [r7, #20]
	}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000754 	.word	0x20000754
 80077f4:	20000c30 	.word	0x20000c30
 80077f8:	20000758 	.word	0x20000758

080077fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <prvAddCurrentTaskToDelayedList+0x90>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780c:	4b20      	ldr	r3, [pc, #128]	; (8007890 <prvAddCurrentTaskToDelayedList+0x94>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fc32 	bl	800607c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781e:	d10a      	bne.n	8007836 <prvAddCurrentTaskToDelayedList+0x3a>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007826:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4819      	ldr	r0, [pc, #100]	; (8007894 <prvAddCurrentTaskToDelayedList+0x98>)
 8007830:	f7fe fbc7 	bl	8005fc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007834:	e026      	b.n	8007884 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <prvAddCurrentTaskToDelayedList+0x94>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d209      	bcs.n	8007862 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800784e:	4b12      	ldr	r3, [pc, #72]	; (8007898 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <prvAddCurrentTaskToDelayedList+0x94>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fe fbd5 	bl	800600a <vListInsert>
}
 8007860:	e010      	b.n	8007884 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007862:	4b0e      	ldr	r3, [pc, #56]	; (800789c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <prvAddCurrentTaskToDelayedList+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fe fbcb 	bl	800600a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	429a      	cmp	r2, r3
 800787c:	d202      	bcs.n	8007884 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800787e:	4a08      	ldr	r2, [pc, #32]	; (80078a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	6013      	str	r3, [r2, #0]
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	20000c2c 	.word	0x20000c2c
 8007890:	20000754 	.word	0x20000754
 8007894:	20000c14 	.word	0x20000c14
 8007898:	20000be4 	.word	0x20000be4
 800789c:	20000be0 	.word	0x20000be0
 80078a0:	20000c48 	.word	0x20000c48

080078a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08a      	sub	sp, #40	; 0x28
 80078a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ae:	f000 fb07 	bl	8007ec0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xTimerCreateTimerTask+0x80>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d021      	beq.n	80078fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078c2:	1d3a      	adds	r2, r7, #4
 80078c4:	f107 0108 	add.w	r1, r7, #8
 80078c8:	f107 030c 	add.w	r3, r7, #12
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fb31 	bl	8005f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	2302      	movs	r3, #2
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	2300      	movs	r3, #0
 80078e2:	460a      	mov	r2, r1
 80078e4:	4910      	ldr	r1, [pc, #64]	; (8007928 <xTimerCreateTimerTask+0x84>)
 80078e6:	4811      	ldr	r0, [pc, #68]	; (800792c <xTimerCreateTimerTask+0x88>)
 80078e8:	f7ff f8de 	bl	8006aa8 <xTaskCreateStatic>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <xTimerCreateTimerTask+0x8c>)
 80078f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <xTimerCreateTimerTask+0x8c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10a      	bne.n	800791a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	613b      	str	r3, [r7, #16]
}
 8007916:	bf00      	nop
 8007918:	e7fe      	b.n	8007918 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800791a:	697b      	ldr	r3, [r7, #20]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000c84 	.word	0x20000c84
 8007928:	0800a2bc 	.word	0x0800a2bc
 800792c:	08007a69 	.word	0x08007a69
 8007930:	20000c88 	.word	0x20000c88

08007934 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007942:	2300      	movs	r3, #0
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <xTimerGenericCommand+0x2e>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	623b      	str	r3, [r7, #32]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007962:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <xTimerGenericCommand+0x98>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d02a      	beq.n	80079c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b05      	cmp	r3, #5
 800797a:	dc18      	bgt.n	80079ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800797c:	f7ff feb2 	bl	80076e4 <xTaskGetSchedulerState>
 8007980:	4603      	mov	r3, r0
 8007982:	2b02      	cmp	r3, #2
 8007984:	d109      	bne.n	800799a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007986:	4b11      	ldr	r3, [pc, #68]	; (80079cc <xTimerGenericCommand+0x98>)
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	f107 0110 	add.w	r1, r7, #16
 800798e:	2300      	movs	r3, #0
 8007990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007992:	f7fe fca1 	bl	80062d8 <xQueueGenericSend>
 8007996:	6278      	str	r0, [r7, #36]	; 0x24
 8007998:	e012      	b.n	80079c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800799a:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <xTimerGenericCommand+0x98>)
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	f107 0110 	add.w	r1, r7, #16
 80079a2:	2300      	movs	r3, #0
 80079a4:	2200      	movs	r2, #0
 80079a6:	f7fe fc97 	bl	80062d8 <xQueueGenericSend>
 80079aa:	6278      	str	r0, [r7, #36]	; 0x24
 80079ac:	e008      	b.n	80079c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079ae:	4b07      	ldr	r3, [pc, #28]	; (80079cc <xTimerGenericCommand+0x98>)
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	f107 0110 	add.w	r1, r7, #16
 80079b6:	2300      	movs	r3, #0
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	f7fe fd8b 	bl	80064d4 <xQueueGenericSendFromISR>
 80079be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3728      	adds	r7, #40	; 0x28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000c84 	.word	0x20000c84

080079d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079da:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <prvProcessExpiredTimer+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fb47 	bl	800607c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d022      	beq.n	8007a42 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	699a      	ldr	r2, [r3, #24]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	18d1      	adds	r1, r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f000 f8d1 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01f      	beq.n	8007a54 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a14:	2300      	movs	r3, #0
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	6978      	ldr	r0, [r7, #20]
 8007a20:	f7ff ff88 	bl	8007934 <xTimerGenericCommand>
 8007a24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d113      	bne.n	8007a54 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	6978      	ldr	r0, [r7, #20]
 8007a5a:	4798      	blx	r3
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20000c7c 	.word	0x20000c7c

08007a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a70:	f107 0308 	add.w	r3, r7, #8
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f857 	bl	8007b28 <prvGetNextExpireTime>
 8007a7a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f803 	bl	8007a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a86:	f000 f8d5 	bl	8007c34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a8a:	e7f1      	b.n	8007a70 <prvTimerTask+0x8>

08007a8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a96:	f7ff fa43 	bl	8006f20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f866 	bl	8007b70 <prvSampleTimeNow>
 8007aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d130      	bne.n	8007b0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d806      	bhi.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aba:	f7ff fa3f 	bl	8006f3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ff85 	bl	80079d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ac6:	e024      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <prvProcessTimerOrBlockTask+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <prvProcessTimerOrBlockTask+0x50>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <prvProcessTimerOrBlockTask+0x52>
 8007adc:	2300      	movs	r3, #0
 8007ade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <prvProcessTimerOrBlockTask+0x94>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe ffa7 	bl	8006a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007af2:	f7ff fa23 	bl	8006f3c <xTaskResumeAll>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvProcessTimerOrBlockTask+0x98>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
}
 8007b0c:	e001      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b0e:	f7ff fa15 	bl	8006f3c <xTaskResumeAll>
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000c80 	.word	0x20000c80
 8007b20:	20000c84 	.word	0x20000c84
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b30:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <prvGetNextExpireTime+0x44>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <prvGetNextExpireTime+0x16>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e000      	b.n	8007b40 <prvGetNextExpireTime+0x18>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <prvGetNextExpireTime+0x44>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e001      	b.n	8007b5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	20000c7c 	.word	0x20000c7c

08007b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b78:	f7ff fa7e 	bl	8007078 <xTaskGetTickCount>
 8007b7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d205      	bcs.n	8007b94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b88:	f000 f936 	bl	8007df8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <prvSampleTimeNow+0x3c>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000c8c 	.word	0x20000c8c

08007bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d812      	bhi.n	8007bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e01b      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <prvInsertTimerInActiveList+0x7c>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fe fa08 	bl	800600a <vListInsert>
 8007bfa:	e012      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d206      	bcs.n	8007c12 <prvInsertTimerInActiveList+0x62>
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e007      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c12:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <prvInsertTimerInActiveList+0x80>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fe f9f4 	bl	800600a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c22:	697b      	ldr	r3, [r7, #20]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20000c80 	.word	0x20000c80
 8007c30:	20000c7c 	.word	0x20000c7c

08007c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	; 0x38
 8007c38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c3a:	e0ca      	b.n	8007dd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da18      	bge.n	8007c74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	3304      	adds	r3, #4
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	61fb      	str	r3, [r7, #28]
}
 8007c60:	bf00      	nop
 8007c62:	e7fe      	b.n	8007c62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6a:	6850      	ldr	r0, [r2, #4]
 8007c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6e:	6892      	ldr	r2, [r2, #8]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f2c0 80aa 	blt.w	8007dd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe f9f5 	bl	800607c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c92:	463b      	mov	r3, r7
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff ff6b 	bl	8007b70 <prvSampleTimeNow>
 8007c9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b09      	cmp	r3, #9
 8007ca0:	f200 8097 	bhi.w	8007dd2 <prvProcessReceivedCommands+0x19e>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <prvProcessReceivedCommands+0x78>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007d49 	.word	0x08007d49
 8007cbc:	08007d5d 	.word	0x08007d5d
 8007cc0:	08007da7 	.word	0x08007da7
 8007cc4:	08007cd5 	.word	0x08007cd5
 8007cc8:	08007cd5 	.word	0x08007cd5
 8007ccc:	08007d49 	.word	0x08007d49
 8007cd0:	08007d5d 	.word	0x08007d5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	18d1      	adds	r1, r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf4:	f7ff ff5c 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d069      	beq.n	8007dd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d05e      	beq.n	8007dd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d26:	f7ff fe05 	bl	8007934 <xTimerGenericCommand>
 8007d2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d14f      	bne.n	8007dd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61bb      	str	r3, [r7, #24]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007d5a:	e03a      	b.n	8007dd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	617b      	str	r3, [r7, #20]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	18d1      	adds	r1, r2, r3
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da0:	f7ff ff06 	bl	8007bb0 <prvInsertTimerInActiveList>
					break;
 8007da4:	e015      	b.n	8007dd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db6:	f000 fbdb 	bl	8008570 <vPortFree>
 8007dba:	e00a      	b.n	8007dd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dce:	e000      	b.n	8007dd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007dd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <prvProcessReceivedCommands+0x1c0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1d39      	adds	r1, r7, #4
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fc16 	bl	800660c <xQueueReceive>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f47f af2a 	bne.w	8007c3c <prvProcessReceivedCommands+0x8>
	}
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	3730      	adds	r7, #48	; 0x30
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000c84 	.word	0x20000c84

08007df8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dfe:	e048      	b.n	8007e92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e00:	4b2d      	ldr	r3, [pc, #180]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0a:	4b2b      	ldr	r3, [pc, #172]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe f92f 	bl	800607c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d02e      	beq.n	8007e92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d90e      	bls.n	8007e64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e52:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f7fe f8d4 	bl	800600a <vListInsert>
 8007e62:	e016      	b.n	8007e92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e64:	2300      	movs	r3, #0
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7ff fd60 	bl	8007934 <xTimerGenericCommand>
 8007e74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	603b      	str	r3, [r7, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e92:	4b09      	ldr	r3, [pc, #36]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1b1      	bne.n	8007e00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ea2:	4b06      	ldr	r3, [pc, #24]	; (8007ebc <prvSwitchTimerLists+0xc4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <prvSwitchTimerLists+0xc0>)
 8007ea8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007eaa:	4a04      	ldr	r2, [pc, #16]	; (8007ebc <prvSwitchTimerLists+0xc4>)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	6013      	str	r3, [r2, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000c7c 	.word	0x20000c7c
 8007ebc:	20000c80 	.word	0x20000c80

08007ec0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ec6:	f000 f965 	bl	8008194 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007eca:	4b15      	ldr	r3, [pc, #84]	; (8007f20 <prvCheckForValidListAndQueue+0x60>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d120      	bne.n	8007f14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ed2:	4814      	ldr	r0, [pc, #80]	; (8007f24 <prvCheckForValidListAndQueue+0x64>)
 8007ed4:	f7fe f848 	bl	8005f68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ed8:	4813      	ldr	r0, [pc, #76]	; (8007f28 <prvCheckForValidListAndQueue+0x68>)
 8007eda:	f7fe f845 	bl	8005f68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <prvCheckForValidListAndQueue+0x6c>)
 8007ee0:	4a10      	ldr	r2, [pc, #64]	; (8007f24 <prvCheckForValidListAndQueue+0x64>)
 8007ee2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ee4:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <prvCheckForValidListAndQueue+0x70>)
 8007ee6:	4a10      	ldr	r2, [pc, #64]	; (8007f28 <prvCheckForValidListAndQueue+0x68>)
 8007ee8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eea:	2300      	movs	r3, #0
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <prvCheckForValidListAndQueue+0x74>)
 8007ef0:	4a11      	ldr	r2, [pc, #68]	; (8007f38 <prvCheckForValidListAndQueue+0x78>)
 8007ef2:	2110      	movs	r1, #16
 8007ef4:	200a      	movs	r0, #10
 8007ef6:	f7fe f953 	bl	80061a0 <xQueueGenericCreateStatic>
 8007efa:	4603      	mov	r3, r0
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <prvCheckForValidListAndQueue+0x60>)
 8007efe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <prvCheckForValidListAndQueue+0x60>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d005      	beq.n	8007f14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <prvCheckForValidListAndQueue+0x60>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	490b      	ldr	r1, [pc, #44]	; (8007f3c <prvCheckForValidListAndQueue+0x7c>)
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fd6c 	bl	80069ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f14:	f000 f96e 	bl	80081f4 <vPortExitCritical>
}
 8007f18:	bf00      	nop
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000c84 	.word	0x20000c84
 8007f24:	20000c54 	.word	0x20000c54
 8007f28:	20000c68 	.word	0x20000c68
 8007f2c:	20000c7c 	.word	0x20000c7c
 8007f30:	20000c80 	.word	0x20000c80
 8007f34:	20000d30 	.word	0x20000d30
 8007f38:	20000c90 	.word	0x20000c90
 8007f3c:	0800a2c4 	.word	0x0800a2c4

08007f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3b04      	subs	r3, #4
 8007f50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	3b04      	subs	r3, #4
 8007f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f023 0201 	bic.w	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f70:	4a0c      	ldr	r2, [pc, #48]	; (8007fa4 <pxPortInitialiseStack+0x64>)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3b14      	subs	r3, #20
 8007f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b04      	subs	r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f06f 0202 	mvn.w	r2, #2
 8007f8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3b20      	subs	r3, #32
 8007f94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f96:	68fb      	ldr	r3, [r7, #12]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	08007fa9 	.word	0x08007fa9

08007fa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <prvTaskExitError+0x54>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fba:	d00a      	beq.n	8007fd2 <prvTaskExitError+0x2a>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <prvTaskExitError+0x28>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fe6:	bf00      	nop
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0fc      	beq.n	8007fe8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fee:	bf00      	nop
 8007ff0:	bf00      	nop
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	2000000c 	.word	0x2000000c

08008000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <pxCurrentTCBConst2>)
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6808      	ldr	r0, [r1, #0]
 8008006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	f380 8809 	msr	PSP, r0
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	4770      	bx	lr
 800801c:	f3af 8000 	nop.w

08008020 <pxCurrentTCBConst2>:
 8008020:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop

08008028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008028:	4808      	ldr	r0, [pc, #32]	; (800804c <prvPortStartFirstTask+0x24>)
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f380 8808 	msr	MSP, r0
 8008032:	f04f 0000 	mov.w	r0, #0
 8008036:	f380 8814 	msr	CONTROL, r0
 800803a:	b662      	cpsie	i
 800803c:	b661      	cpsie	f
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	df00      	svc	0
 8008048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800804a:	bf00      	nop
 800804c:	e000ed08 	.word	0xe000ed08

08008050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008056:	4b46      	ldr	r3, [pc, #280]	; (8008170 <xPortStartScheduler+0x120>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a46      	ldr	r2, [pc, #280]	; (8008174 <xPortStartScheduler+0x124>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10a      	bne.n	8008076 <xPortStartScheduler+0x26>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	613b      	str	r3, [r7, #16]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008076:	4b3e      	ldr	r3, [pc, #248]	; (8008170 <xPortStartScheduler+0x120>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a3f      	ldr	r2, [pc, #252]	; (8008178 <xPortStartScheduler+0x128>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10a      	bne.n	8008096 <xPortStartScheduler+0x46>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	60fb      	str	r3, [r7, #12]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008096:	4b39      	ldr	r3, [pc, #228]	; (800817c <xPortStartScheduler+0x12c>)
 8008098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	22ff      	movs	r2, #255	; 0xff
 80080a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	4b31      	ldr	r3, [pc, #196]	; (8008180 <xPortStartScheduler+0x130>)
 80080bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080be:	4b31      	ldr	r3, [pc, #196]	; (8008184 <xPortStartScheduler+0x134>)
 80080c0:	2207      	movs	r2, #7
 80080c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080c4:	e009      	b.n	80080da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80080c6:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <xPortStartScheduler+0x134>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	4a2d      	ldr	r2, [pc, #180]	; (8008184 <xPortStartScheduler+0x134>)
 80080ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d0ef      	beq.n	80080c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080e6:	4b27      	ldr	r3, [pc, #156]	; (8008184 <xPortStartScheduler+0x134>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1c3 0307 	rsb	r3, r3, #7
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d00a      	beq.n	8008108 <xPortStartScheduler+0xb8>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	60bb      	str	r3, [r7, #8]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008108:	4b1e      	ldr	r3, [pc, #120]	; (8008184 <xPortStartScheduler+0x134>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	4a1d      	ldr	r2, [pc, #116]	; (8008184 <xPortStartScheduler+0x134>)
 8008110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008112:	4b1c      	ldr	r3, [pc, #112]	; (8008184 <xPortStartScheduler+0x134>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800811a:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <xPortStartScheduler+0x134>)
 800811c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <xPortStartScheduler+0x138>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a17      	ldr	r2, [pc, #92]	; (8008188 <xPortStartScheduler+0x138>)
 800812c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <xPortStartScheduler+0x138>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a14      	ldr	r2, [pc, #80]	; (8008188 <xPortStartScheduler+0x138>)
 8008138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800813c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800813e:	f000 f8dd 	bl	80082fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008142:	4b12      	ldr	r3, [pc, #72]	; (800818c <xPortStartScheduler+0x13c>)
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008148:	f000 f8fc 	bl	8008344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <xPortStartScheduler+0x140>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0f      	ldr	r2, [pc, #60]	; (8008190 <xPortStartScheduler+0x140>)
 8008152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008158:	f7ff ff66 	bl	8008028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800815c:	f7ff f856 	bl	800720c <vTaskSwitchContext>
	prvTaskExitError();
 8008160:	f7ff ff22 	bl	8007fa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	e000ed00 	.word	0xe000ed00
 8008174:	410fc271 	.word	0x410fc271
 8008178:	410fc270 	.word	0x410fc270
 800817c:	e000e400 	.word	0xe000e400
 8008180:	20000d80 	.word	0x20000d80
 8008184:	20000d84 	.word	0x20000d84
 8008188:	e000ed20 	.word	0xe000ed20
 800818c:	2000000c 	.word	0x2000000c
 8008190:	e000ef34 	.word	0xe000ef34

08008194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	607b      	str	r3, [r7, #4]
}
 80081ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <vPortEnterCritical+0x58>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3301      	adds	r3, #1
 80081b4:	4a0d      	ldr	r2, [pc, #52]	; (80081ec <vPortEnterCritical+0x58>)
 80081b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <vPortEnterCritical+0x58>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d10f      	bne.n	80081e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <vPortEnterCritical+0x5c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	603b      	str	r3, [r7, #0]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vPortEnterCritical+0x4a>
	}
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	2000000c 	.word	0x2000000c
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081fa:	4b12      	ldr	r3, [pc, #72]	; (8008244 <vPortExitCritical+0x50>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <vPortExitCritical+0x24>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	607b      	str	r3, [r7, #4]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <vPortExitCritical+0x50>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3b01      	subs	r3, #1
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <vPortExitCritical+0x50>)
 8008220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <vPortExitCritical+0x50>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <vPortExitCritical+0x42>
 800822a:	2300      	movs	r3, #0
 800822c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	f383 8811 	msr	BASEPRI, r3
}
 8008234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	2000000c 	.word	0x2000000c
	...

08008250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008250:	f3ef 8009 	mrs	r0, PSP
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <pxCurrentTCBConst>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	f01e 0f10 	tst.w	lr, #16
 8008260:	bf08      	it	eq
 8008262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	6010      	str	r0, [r2, #0]
 800826c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008274:	f380 8811 	msr	BASEPRI, r0
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f7fe ffc4 	bl	800720c <vTaskSwitchContext>
 8008284:	f04f 0000 	mov.w	r0, #0
 8008288:	f380 8811 	msr	BASEPRI, r0
 800828c:	bc09      	pop	{r0, r3}
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	6808      	ldr	r0, [r1, #0]
 8008292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008296:	f01e 0f10 	tst.w	lr, #16
 800829a:	bf08      	it	eq
 800829c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082a0:	f380 8809 	msr	PSP, r0
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	f3af 8000 	nop.w

080082b0 <pxCurrentTCBConst>:
 80082b0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop

080082b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082d2:	f7fe fee1 	bl	8007098 <xTaskIncrementTick>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <xPortSysTickHandler+0x40>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	f383 8811 	msr	BASEPRI, r3
}
 80082ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <vPortSetupTimerInterrupt+0x38>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <vPortSetupTimerInterrupt+0x3c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <vPortSetupTimerInterrupt+0x40>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	099b      	lsrs	r3, r3, #6
 8008318:	4a09      	ldr	r2, [pc, #36]	; (8008340 <vPortSetupTimerInterrupt+0x44>)
 800831a:	3b01      	subs	r3, #1
 800831c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800831e:	4b04      	ldr	r3, [pc, #16]	; (8008330 <vPortSetupTimerInterrupt+0x34>)
 8008320:	2207      	movs	r2, #7
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	e000e010 	.word	0xe000e010
 8008334:	e000e018 	.word	0xe000e018
 8008338:	20000000 	.word	0x20000000
 800833c:	10624dd3 	.word	0x10624dd3
 8008340:	e000e014 	.word	0xe000e014

08008344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008354 <vPortEnableVFP+0x10>
 8008348:	6801      	ldr	r1, [r0, #0]
 800834a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800834e:	6001      	str	r1, [r0, #0]
 8008350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008352:	bf00      	nop
 8008354:	e000ed88 	.word	0xe000ed88

08008358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800835e:	f3ef 8305 	mrs	r3, IPSR
 8008362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b0f      	cmp	r3, #15
 8008368:	d914      	bls.n	8008394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800836a:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <vPortValidateInterruptPriority+0x70>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008374:	4b15      	ldr	r3, [pc, #84]	; (80083cc <vPortValidateInterruptPriority+0x74>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	7afa      	ldrb	r2, [r7, #11]
 800837a:	429a      	cmp	r2, r3
 800837c:	d20a      	bcs.n	8008394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	607b      	str	r3, [r7, #4]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <vPortValidateInterruptPriority+0x78>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800839c:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <vPortValidateInterruptPriority+0x7c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d90a      	bls.n	80083ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	603b      	str	r3, [r7, #0]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <vPortValidateInterruptPriority+0x60>
	}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	e000e3f0 	.word	0xe000e3f0
 80083cc:	20000d80 	.word	0x20000d80
 80083d0:	e000ed0c 	.word	0xe000ed0c
 80083d4:	20000d84 	.word	0x20000d84

080083d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083e4:	f7fe fd9c 	bl	8006f20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083e8:	4b5b      	ldr	r3, [pc, #364]	; (8008558 <pvPortMalloc+0x180>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083f0:	f000 f920 	bl	8008634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083f4:	4b59      	ldr	r3, [pc, #356]	; (800855c <pvPortMalloc+0x184>)
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4013      	ands	r3, r2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f040 8093 	bne.w	8008528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01d      	beq.n	8008444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008408:	2208      	movs	r2, #8
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	3308      	adds	r3, #8
 8008422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <pvPortMalloc+0x6c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	617b      	str	r3, [r7, #20]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d06e      	beq.n	8008528 <pvPortMalloc+0x150>
 800844a:	4b45      	ldr	r3, [pc, #276]	; (8008560 <pvPortMalloc+0x188>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d869      	bhi.n	8008528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008454:	4b43      	ldr	r3, [pc, #268]	; (8008564 <pvPortMalloc+0x18c>)
 8008456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008458:	4b42      	ldr	r3, [pc, #264]	; (8008564 <pvPortMalloc+0x18c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800845e:	e004      	b.n	800846a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d903      	bls.n	800847c <pvPortMalloc+0xa4>
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1f1      	bne.n	8008460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800847c:	4b36      	ldr	r3, [pc, #216]	; (8008558 <pvPortMalloc+0x180>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	429a      	cmp	r2, r3
 8008484:	d050      	beq.n	8008528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2208      	movs	r2, #8
 800848c:	4413      	add	r3, r2
 800848e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	2308      	movs	r3, #8
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d91f      	bls.n	80084e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4413      	add	r3, r2
 80084ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <pvPortMalloc+0xf8>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	613b      	str	r3, [r7, #16]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084e2:	69b8      	ldr	r0, [r7, #24]
 80084e4:	f000 f908 	bl	80086f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <pvPortMalloc+0x188>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1b      	ldr	r2, [pc, #108]	; (8008560 <pvPortMalloc+0x188>)
 80084f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084f6:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <pvPortMalloc+0x188>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <pvPortMalloc+0x190>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d203      	bcs.n	800850a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <pvPortMalloc+0x188>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a18      	ldr	r2, [pc, #96]	; (8008568 <pvPortMalloc+0x190>)
 8008508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	4b13      	ldr	r3, [pc, #76]	; (800855c <pvPortMalloc+0x184>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	431a      	orrs	r2, r3
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	2200      	movs	r2, #0
 800851c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <pvPortMalloc+0x194>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3301      	adds	r3, #1
 8008524:	4a11      	ldr	r2, [pc, #68]	; (800856c <pvPortMalloc+0x194>)
 8008526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008528:	f7fe fd08 	bl	8006f3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <pvPortMalloc+0x174>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <pvPortMalloc+0x172>
	return pvReturn;
 800854c:	69fb      	ldr	r3, [r7, #28]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3728      	adds	r7, #40	; 0x28
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20001948 	.word	0x20001948
 800855c:	2000195c 	.word	0x2000195c
 8008560:	2000194c 	.word	0x2000194c
 8008564:	20001940 	.word	0x20001940
 8008568:	20001950 	.word	0x20001950
 800856c:	20001954 	.word	0x20001954

08008570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d04d      	beq.n	800861e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008582:	2308      	movs	r3, #8
 8008584:	425b      	negs	r3, r3
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	4b24      	ldr	r3, [pc, #144]	; (8008628 <vPortFree+0xb8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10a      	bne.n	80085b4 <vPortFree+0x44>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60fb      	str	r3, [r7, #12]
}
 80085b0:	bf00      	nop
 80085b2:	e7fe      	b.n	80085b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <vPortFree+0x62>
	__asm volatile
 80085bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	60bb      	str	r3, [r7, #8]
}
 80085ce:	bf00      	nop
 80085d0:	e7fe      	b.n	80085d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <vPortFree+0xb8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4013      	ands	r3, r2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01e      	beq.n	800861e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d11a      	bne.n	800861e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <vPortFree+0xb8>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	43db      	mvns	r3, r3
 80085f2:	401a      	ands	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085f8:	f7fe fc92 	bl	8006f20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	4b0a      	ldr	r3, [pc, #40]	; (800862c <vPortFree+0xbc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4413      	add	r3, r2
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <vPortFree+0xbc>)
 8008608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800860a:	6938      	ldr	r0, [r7, #16]
 800860c:	f000 f874 	bl	80086f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <vPortFree+0xc0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	4a06      	ldr	r2, [pc, #24]	; (8008630 <vPortFree+0xc0>)
 8008618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800861a:	f7fe fc8f 	bl	8006f3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800861e:	bf00      	nop
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	2000195c 	.word	0x2000195c
 800862c:	2000194c 	.word	0x2000194c
 8008630:	20001958 	.word	0x20001958

08008634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800863a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800863e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008640:	4b27      	ldr	r3, [pc, #156]	; (80086e0 <prvHeapInit+0xac>)
 8008642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00c      	beq.n	8008668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3307      	adds	r3, #7
 8008652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0307 	bic.w	r3, r3, #7
 800865a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	4a1f      	ldr	r2, [pc, #124]	; (80086e0 <prvHeapInit+0xac>)
 8008664:	4413      	add	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800866c:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <prvHeapInit+0xb0>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <prvHeapInit+0xb0>)
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	4413      	add	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008680:	2208      	movs	r2, #8
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0307 	bic.w	r3, r3, #7
 800868e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a15      	ldr	r2, [pc, #84]	; (80086e8 <prvHeapInit+0xb4>)
 8008694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008696:	4b14      	ldr	r3, [pc, #80]	; (80086e8 <prvHeapInit+0xb4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <prvHeapInit+0xb4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	1ad2      	subs	r2, r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <prvHeapInit+0xb4>)
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <prvHeapInit+0xb8>)
 80086c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <prvHeapInit+0xbc>)
 80086ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <prvHeapInit+0xc0>)
 80086ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	20000d88 	.word	0x20000d88
 80086e4:	20001940 	.word	0x20001940
 80086e8:	20001948 	.word	0x20001948
 80086ec:	20001950 	.word	0x20001950
 80086f0:	2000194c 	.word	0x2000194c
 80086f4:	2000195c 	.word	0x2000195c

080086f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008700:	4b28      	ldr	r3, [pc, #160]	; (80087a4 <prvInsertBlockIntoFreeList+0xac>)
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e002      	b.n	800870c <prvInsertBlockIntoFreeList+0x14>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8f7      	bhi.n	8008706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4413      	add	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d108      	bne.n	800873a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	441a      	add	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d118      	bne.n	8008780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d00d      	beq.n	8008776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	441a      	add	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	e008      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008776:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	e003      	b.n	8008788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d002      	beq.n	8008796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	20001940 	.word	0x20001940
 80087a8:	20001948 	.word	0x20001948

080087ac <__errno>:
 80087ac:	4b01      	ldr	r3, [pc, #4]	; (80087b4 <__errno+0x8>)
 80087ae:	6818      	ldr	r0, [r3, #0]
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000010 	.word	0x20000010

080087b8 <__libc_init_array>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	4d0d      	ldr	r5, [pc, #52]	; (80087f0 <__libc_init_array+0x38>)
 80087bc:	4c0d      	ldr	r4, [pc, #52]	; (80087f4 <__libc_init_array+0x3c>)
 80087be:	1b64      	subs	r4, r4, r5
 80087c0:	10a4      	asrs	r4, r4, #2
 80087c2:	2600      	movs	r6, #0
 80087c4:	42a6      	cmp	r6, r4
 80087c6:	d109      	bne.n	80087dc <__libc_init_array+0x24>
 80087c8:	4d0b      	ldr	r5, [pc, #44]	; (80087f8 <__libc_init_array+0x40>)
 80087ca:	4c0c      	ldr	r4, [pc, #48]	; (80087fc <__libc_init_array+0x44>)
 80087cc:	f001 fd56 	bl	800a27c <_init>
 80087d0:	1b64      	subs	r4, r4, r5
 80087d2:	10a4      	asrs	r4, r4, #2
 80087d4:	2600      	movs	r6, #0
 80087d6:	42a6      	cmp	r6, r4
 80087d8:	d105      	bne.n	80087e6 <__libc_init_array+0x2e>
 80087da:	bd70      	pop	{r4, r5, r6, pc}
 80087dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087e0:	4798      	blx	r3
 80087e2:	3601      	adds	r6, #1
 80087e4:	e7ee      	b.n	80087c4 <__libc_init_array+0xc>
 80087e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ea:	4798      	blx	r3
 80087ec:	3601      	adds	r6, #1
 80087ee:	e7f2      	b.n	80087d6 <__libc_init_array+0x1e>
 80087f0:	0800a580 	.word	0x0800a580
 80087f4:	0800a580 	.word	0x0800a580
 80087f8:	0800a580 	.word	0x0800a580
 80087fc:	0800a584 	.word	0x0800a584

08008800 <memcpy>:
 8008800:	440a      	add	r2, r1
 8008802:	4291      	cmp	r1, r2
 8008804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008808:	d100      	bne.n	800880c <memcpy+0xc>
 800880a:	4770      	bx	lr
 800880c:	b510      	push	{r4, lr}
 800880e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008816:	4291      	cmp	r1, r2
 8008818:	d1f9      	bne.n	800880e <memcpy+0xe>
 800881a:	bd10      	pop	{r4, pc}

0800881c <memset>:
 800881c:	4402      	add	r2, r0
 800881e:	4603      	mov	r3, r0
 8008820:	4293      	cmp	r3, r2
 8008822:	d100      	bne.n	8008826 <memset+0xa>
 8008824:	4770      	bx	lr
 8008826:	f803 1b01 	strb.w	r1, [r3], #1
 800882a:	e7f9      	b.n	8008820 <memset+0x4>

0800882c <_puts_r>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	460e      	mov	r6, r1
 8008830:	4605      	mov	r5, r0
 8008832:	b118      	cbz	r0, 800883c <_puts_r+0x10>
 8008834:	6983      	ldr	r3, [r0, #24]
 8008836:	b90b      	cbnz	r3, 800883c <_puts_r+0x10>
 8008838:	f000 fa48 	bl	8008ccc <__sinit>
 800883c:	69ab      	ldr	r3, [r5, #24]
 800883e:	68ac      	ldr	r4, [r5, #8]
 8008840:	b913      	cbnz	r3, 8008848 <_puts_r+0x1c>
 8008842:	4628      	mov	r0, r5
 8008844:	f000 fa42 	bl	8008ccc <__sinit>
 8008848:	4b2c      	ldr	r3, [pc, #176]	; (80088fc <_puts_r+0xd0>)
 800884a:	429c      	cmp	r4, r3
 800884c:	d120      	bne.n	8008890 <_puts_r+0x64>
 800884e:	686c      	ldr	r4, [r5, #4]
 8008850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008852:	07db      	lsls	r3, r3, #31
 8008854:	d405      	bmi.n	8008862 <_puts_r+0x36>
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	0598      	lsls	r0, r3, #22
 800885a:	d402      	bmi.n	8008862 <_puts_r+0x36>
 800885c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885e:	f000 fad3 	bl	8008e08 <__retarget_lock_acquire_recursive>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	0719      	lsls	r1, r3, #28
 8008866:	d51d      	bpl.n	80088a4 <_puts_r+0x78>
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	b1db      	cbz	r3, 80088a4 <_puts_r+0x78>
 800886c:	3e01      	subs	r6, #1
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008874:	3b01      	subs	r3, #1
 8008876:	60a3      	str	r3, [r4, #8]
 8008878:	bb39      	cbnz	r1, 80088ca <_puts_r+0x9e>
 800887a:	2b00      	cmp	r3, #0
 800887c:	da38      	bge.n	80088f0 <_puts_r+0xc4>
 800887e:	4622      	mov	r2, r4
 8008880:	210a      	movs	r1, #10
 8008882:	4628      	mov	r0, r5
 8008884:	f000 f848 	bl	8008918 <__swbuf_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d011      	beq.n	80088b0 <_puts_r+0x84>
 800888c:	250a      	movs	r5, #10
 800888e:	e011      	b.n	80088b4 <_puts_r+0x88>
 8008890:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <_puts_r+0xd4>)
 8008892:	429c      	cmp	r4, r3
 8008894:	d101      	bne.n	800889a <_puts_r+0x6e>
 8008896:	68ac      	ldr	r4, [r5, #8]
 8008898:	e7da      	b.n	8008850 <_puts_r+0x24>
 800889a:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <_puts_r+0xd8>)
 800889c:	429c      	cmp	r4, r3
 800889e:	bf08      	it	eq
 80088a0:	68ec      	ldreq	r4, [r5, #12]
 80088a2:	e7d5      	b.n	8008850 <_puts_r+0x24>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 f888 	bl	80089bc <__swsetup_r>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d0dd      	beq.n	800886c <_puts_r+0x40>
 80088b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80088b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088b6:	07da      	lsls	r2, r3, #31
 80088b8:	d405      	bmi.n	80088c6 <_puts_r+0x9a>
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	059b      	lsls	r3, r3, #22
 80088be:	d402      	bmi.n	80088c6 <_puts_r+0x9a>
 80088c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088c2:	f000 faa2 	bl	8008e0a <__retarget_lock_release_recursive>
 80088c6:	4628      	mov	r0, r5
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da04      	bge.n	80088d8 <_puts_r+0xac>
 80088ce:	69a2      	ldr	r2, [r4, #24]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	dc06      	bgt.n	80088e2 <_puts_r+0xb6>
 80088d4:	290a      	cmp	r1, #10
 80088d6:	d004      	beq.n	80088e2 <_puts_r+0xb6>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	6022      	str	r2, [r4, #0]
 80088de:	7019      	strb	r1, [r3, #0]
 80088e0:	e7c5      	b.n	800886e <_puts_r+0x42>
 80088e2:	4622      	mov	r2, r4
 80088e4:	4628      	mov	r0, r5
 80088e6:	f000 f817 	bl	8008918 <__swbuf_r>
 80088ea:	3001      	adds	r0, #1
 80088ec:	d1bf      	bne.n	800886e <_puts_r+0x42>
 80088ee:	e7df      	b.n	80088b0 <_puts_r+0x84>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	250a      	movs	r5, #10
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	701d      	strb	r5, [r3, #0]
 80088fa:	e7db      	b.n	80088b4 <_puts_r+0x88>
 80088fc:	0800a35c 	.word	0x0800a35c
 8008900:	0800a37c 	.word	0x0800a37c
 8008904:	0800a33c 	.word	0x0800a33c

08008908 <puts>:
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <puts+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f7ff bf8d 	b.w	800882c <_puts_r>
 8008912:	bf00      	nop
 8008914:	20000010 	.word	0x20000010

08008918 <__swbuf_r>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	460e      	mov	r6, r1
 800891c:	4614      	mov	r4, r2
 800891e:	4605      	mov	r5, r0
 8008920:	b118      	cbz	r0, 800892a <__swbuf_r+0x12>
 8008922:	6983      	ldr	r3, [r0, #24]
 8008924:	b90b      	cbnz	r3, 800892a <__swbuf_r+0x12>
 8008926:	f000 f9d1 	bl	8008ccc <__sinit>
 800892a:	4b21      	ldr	r3, [pc, #132]	; (80089b0 <__swbuf_r+0x98>)
 800892c:	429c      	cmp	r4, r3
 800892e:	d12b      	bne.n	8008988 <__swbuf_r+0x70>
 8008930:	686c      	ldr	r4, [r5, #4]
 8008932:	69a3      	ldr	r3, [r4, #24]
 8008934:	60a3      	str	r3, [r4, #8]
 8008936:	89a3      	ldrh	r3, [r4, #12]
 8008938:	071a      	lsls	r2, r3, #28
 800893a:	d52f      	bpl.n	800899c <__swbuf_r+0x84>
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	b36b      	cbz	r3, 800899c <__swbuf_r+0x84>
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	6820      	ldr	r0, [r4, #0]
 8008944:	1ac0      	subs	r0, r0, r3
 8008946:	6963      	ldr	r3, [r4, #20]
 8008948:	b2f6      	uxtb	r6, r6
 800894a:	4283      	cmp	r3, r0
 800894c:	4637      	mov	r7, r6
 800894e:	dc04      	bgt.n	800895a <__swbuf_r+0x42>
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f000 f926 	bl	8008ba4 <_fflush_r>
 8008958:	bb30      	cbnz	r0, 80089a8 <__swbuf_r+0x90>
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	3b01      	subs	r3, #1
 800895e:	60a3      	str	r3, [r4, #8]
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	6022      	str	r2, [r4, #0]
 8008966:	701e      	strb	r6, [r3, #0]
 8008968:	6963      	ldr	r3, [r4, #20]
 800896a:	3001      	adds	r0, #1
 800896c:	4283      	cmp	r3, r0
 800896e:	d004      	beq.n	800897a <__swbuf_r+0x62>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	07db      	lsls	r3, r3, #31
 8008974:	d506      	bpl.n	8008984 <__swbuf_r+0x6c>
 8008976:	2e0a      	cmp	r6, #10
 8008978:	d104      	bne.n	8008984 <__swbuf_r+0x6c>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f911 	bl	8008ba4 <_fflush_r>
 8008982:	b988      	cbnz	r0, 80089a8 <__swbuf_r+0x90>
 8008984:	4638      	mov	r0, r7
 8008986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <__swbuf_r+0x9c>)
 800898a:	429c      	cmp	r4, r3
 800898c:	d101      	bne.n	8008992 <__swbuf_r+0x7a>
 800898e:	68ac      	ldr	r4, [r5, #8]
 8008990:	e7cf      	b.n	8008932 <__swbuf_r+0x1a>
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <__swbuf_r+0xa0>)
 8008994:	429c      	cmp	r4, r3
 8008996:	bf08      	it	eq
 8008998:	68ec      	ldreq	r4, [r5, #12]
 800899a:	e7ca      	b.n	8008932 <__swbuf_r+0x1a>
 800899c:	4621      	mov	r1, r4
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 f80c 	bl	80089bc <__swsetup_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d0cb      	beq.n	8008940 <__swbuf_r+0x28>
 80089a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80089ac:	e7ea      	b.n	8008984 <__swbuf_r+0x6c>
 80089ae:	bf00      	nop
 80089b0:	0800a35c 	.word	0x0800a35c
 80089b4:	0800a37c 	.word	0x0800a37c
 80089b8:	0800a33c 	.word	0x0800a33c

080089bc <__swsetup_r>:
 80089bc:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <__swsetup_r+0xcc>)
 80089be:	b570      	push	{r4, r5, r6, lr}
 80089c0:	681d      	ldr	r5, [r3, #0]
 80089c2:	4606      	mov	r6, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	b125      	cbz	r5, 80089d2 <__swsetup_r+0x16>
 80089c8:	69ab      	ldr	r3, [r5, #24]
 80089ca:	b913      	cbnz	r3, 80089d2 <__swsetup_r+0x16>
 80089cc:	4628      	mov	r0, r5
 80089ce:	f000 f97d 	bl	8008ccc <__sinit>
 80089d2:	4b2e      	ldr	r3, [pc, #184]	; (8008a8c <__swsetup_r+0xd0>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	d10f      	bne.n	80089f8 <__swsetup_r+0x3c>
 80089d8:	686c      	ldr	r4, [r5, #4]
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	d42c      	bmi.n	8008a3e <__swsetup_r+0x82>
 80089e4:	06dd      	lsls	r5, r3, #27
 80089e6:	d411      	bmi.n	8008a0c <__swsetup_r+0x50>
 80089e8:	2309      	movs	r3, #9
 80089ea:	6033      	str	r3, [r6, #0]
 80089ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f6:	e03e      	b.n	8008a76 <__swsetup_r+0xba>
 80089f8:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <__swsetup_r+0xd4>)
 80089fa:	429c      	cmp	r4, r3
 80089fc:	d101      	bne.n	8008a02 <__swsetup_r+0x46>
 80089fe:	68ac      	ldr	r4, [r5, #8]
 8008a00:	e7eb      	b.n	80089da <__swsetup_r+0x1e>
 8008a02:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <__swsetup_r+0xd8>)
 8008a04:	429c      	cmp	r4, r3
 8008a06:	bf08      	it	eq
 8008a08:	68ec      	ldreq	r4, [r5, #12]
 8008a0a:	e7e6      	b.n	80089da <__swsetup_r+0x1e>
 8008a0c:	0758      	lsls	r0, r3, #29
 8008a0e:	d512      	bpl.n	8008a36 <__swsetup_r+0x7a>
 8008a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a12:	b141      	cbz	r1, 8008a26 <__swsetup_r+0x6a>
 8008a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a18:	4299      	cmp	r1, r3
 8008a1a:	d002      	beq.n	8008a22 <__swsetup_r+0x66>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f000 fa59 	bl	8008ed4 <_free_r>
 8008a22:	2300      	movs	r3, #0
 8008a24:	6363      	str	r3, [r4, #52]	; 0x34
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f043 0308 	orr.w	r3, r3, #8
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	6923      	ldr	r3, [r4, #16]
 8008a40:	b94b      	cbnz	r3, 8008a56 <__swsetup_r+0x9a>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4c:	d003      	beq.n	8008a56 <__swsetup_r+0x9a>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	f000 f9ff 	bl	8008e54 <__smakebuf_r>
 8008a56:	89a0      	ldrh	r0, [r4, #12]
 8008a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a5c:	f010 0301 	ands.w	r3, r0, #1
 8008a60:	d00a      	beq.n	8008a78 <__swsetup_r+0xbc>
 8008a62:	2300      	movs	r3, #0
 8008a64:	60a3      	str	r3, [r4, #8]
 8008a66:	6963      	ldr	r3, [r4, #20]
 8008a68:	425b      	negs	r3, r3
 8008a6a:	61a3      	str	r3, [r4, #24]
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	b943      	cbnz	r3, 8008a82 <__swsetup_r+0xc6>
 8008a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a74:	d1ba      	bne.n	80089ec <__swsetup_r+0x30>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	0781      	lsls	r1, r0, #30
 8008a7a:	bf58      	it	pl
 8008a7c:	6963      	ldrpl	r3, [r4, #20]
 8008a7e:	60a3      	str	r3, [r4, #8]
 8008a80:	e7f4      	b.n	8008a6c <__swsetup_r+0xb0>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e7f7      	b.n	8008a76 <__swsetup_r+0xba>
 8008a86:	bf00      	nop
 8008a88:	20000010 	.word	0x20000010
 8008a8c:	0800a35c 	.word	0x0800a35c
 8008a90:	0800a37c 	.word	0x0800a37c
 8008a94:	0800a33c 	.word	0x0800a33c

08008a98 <__sflush_r>:
 8008a98:	898a      	ldrh	r2, [r1, #12]
 8008a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	0710      	lsls	r0, r2, #28
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	d458      	bmi.n	8008b58 <__sflush_r+0xc0>
 8008aa6:	684b      	ldr	r3, [r1, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dc05      	bgt.n	8008ab8 <__sflush_r+0x20>
 8008aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dc02      	bgt.n	8008ab8 <__sflush_r+0x20>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	d0f9      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ac4:	682f      	ldr	r7, [r5, #0]
 8008ac6:	602b      	str	r3, [r5, #0]
 8008ac8:	d032      	beq.n	8008b30 <__sflush_r+0x98>
 8008aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	075a      	lsls	r2, r3, #29
 8008ad0:	d505      	bpl.n	8008ade <__sflush_r+0x46>
 8008ad2:	6863      	ldr	r3, [r4, #4]
 8008ad4:	1ac0      	subs	r0, r0, r3
 8008ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ad8:	b10b      	cbz	r3, 8008ade <__sflush_r+0x46>
 8008ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008adc:	1ac0      	subs	r0, r0, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b0      	blx	r6
 8008aea:	1c43      	adds	r3, r0, #1
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	d106      	bne.n	8008afe <__sflush_r+0x66>
 8008af0:	6829      	ldr	r1, [r5, #0]
 8008af2:	291d      	cmp	r1, #29
 8008af4:	d82c      	bhi.n	8008b50 <__sflush_r+0xb8>
 8008af6:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <__sflush_r+0x108>)
 8008af8:	40ca      	lsrs	r2, r1
 8008afa:	07d6      	lsls	r6, r2, #31
 8008afc:	d528      	bpl.n	8008b50 <__sflush_r+0xb8>
 8008afe:	2200      	movs	r2, #0
 8008b00:	6062      	str	r2, [r4, #4]
 8008b02:	04d9      	lsls	r1, r3, #19
 8008b04:	6922      	ldr	r2, [r4, #16]
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	d504      	bpl.n	8008b14 <__sflush_r+0x7c>
 8008b0a:	1c42      	adds	r2, r0, #1
 8008b0c:	d101      	bne.n	8008b12 <__sflush_r+0x7a>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	b903      	cbnz	r3, 8008b14 <__sflush_r+0x7c>
 8008b12:	6560      	str	r0, [r4, #84]	; 0x54
 8008b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b16:	602f      	str	r7, [r5, #0]
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d0ca      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d002      	beq.n	8008b2a <__sflush_r+0x92>
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 f9d5 	bl	8008ed4 <_free_r>
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b2e:	e7c1      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b30:	6a21      	ldr	r1, [r4, #32]
 8008b32:	2301      	movs	r3, #1
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b0      	blx	r6
 8008b38:	1c41      	adds	r1, r0, #1
 8008b3a:	d1c7      	bne.n	8008acc <__sflush_r+0x34>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c4      	beq.n	8008acc <__sflush_r+0x34>
 8008b42:	2b1d      	cmp	r3, #29
 8008b44:	d001      	beq.n	8008b4a <__sflush_r+0xb2>
 8008b46:	2b16      	cmp	r3, #22
 8008b48:	d101      	bne.n	8008b4e <__sflush_r+0xb6>
 8008b4a:	602f      	str	r7, [r5, #0]
 8008b4c:	e7b1      	b.n	8008ab2 <__sflush_r+0x1a>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	e7ad      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b58:	690f      	ldr	r7, [r1, #16]
 8008b5a:	2f00      	cmp	r7, #0
 8008b5c:	d0a9      	beq.n	8008ab2 <__sflush_r+0x1a>
 8008b5e:	0793      	lsls	r3, r2, #30
 8008b60:	680e      	ldr	r6, [r1, #0]
 8008b62:	bf08      	it	eq
 8008b64:	694b      	ldreq	r3, [r1, #20]
 8008b66:	600f      	str	r7, [r1, #0]
 8008b68:	bf18      	it	ne
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	eba6 0807 	sub.w	r8, r6, r7
 8008b70:	608b      	str	r3, [r1, #8]
 8008b72:	f1b8 0f00 	cmp.w	r8, #0
 8008b76:	dd9c      	ble.n	8008ab2 <__sflush_r+0x1a>
 8008b78:	6a21      	ldr	r1, [r4, #32]
 8008b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b7c:	4643      	mov	r3, r8
 8008b7e:	463a      	mov	r2, r7
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b0      	blx	r6
 8008b84:	2800      	cmp	r0, #0
 8008b86:	dc06      	bgt.n	8008b96 <__sflush_r+0xfe>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b8e:	81a3      	strh	r3, [r4, #12]
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b94:	e78e      	b.n	8008ab4 <__sflush_r+0x1c>
 8008b96:	4407      	add	r7, r0
 8008b98:	eba8 0800 	sub.w	r8, r8, r0
 8008b9c:	e7e9      	b.n	8008b72 <__sflush_r+0xda>
 8008b9e:	bf00      	nop
 8008ba0:	20400001 	.word	0x20400001

08008ba4 <_fflush_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	690b      	ldr	r3, [r1, #16]
 8008ba8:	4605      	mov	r5, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	b913      	cbnz	r3, 8008bb4 <_fflush_r+0x10>
 8008bae:	2500      	movs	r5, #0
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	b118      	cbz	r0, 8008bbe <_fflush_r+0x1a>
 8008bb6:	6983      	ldr	r3, [r0, #24]
 8008bb8:	b90b      	cbnz	r3, 8008bbe <_fflush_r+0x1a>
 8008bba:	f000 f887 	bl	8008ccc <__sinit>
 8008bbe:	4b14      	ldr	r3, [pc, #80]	; (8008c10 <_fflush_r+0x6c>)
 8008bc0:	429c      	cmp	r4, r3
 8008bc2:	d11b      	bne.n	8008bfc <_fflush_r+0x58>
 8008bc4:	686c      	ldr	r4, [r5, #4]
 8008bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0ef      	beq.n	8008bae <_fflush_r+0xa>
 8008bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bd0:	07d0      	lsls	r0, r2, #31
 8008bd2:	d404      	bmi.n	8008bde <_fflush_r+0x3a>
 8008bd4:	0599      	lsls	r1, r3, #22
 8008bd6:	d402      	bmi.n	8008bde <_fflush_r+0x3a>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bda:	f000 f915 	bl	8008e08 <__retarget_lock_acquire_recursive>
 8008bde:	4628      	mov	r0, r5
 8008be0:	4621      	mov	r1, r4
 8008be2:	f7ff ff59 	bl	8008a98 <__sflush_r>
 8008be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be8:	07da      	lsls	r2, r3, #31
 8008bea:	4605      	mov	r5, r0
 8008bec:	d4e0      	bmi.n	8008bb0 <_fflush_r+0xc>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	059b      	lsls	r3, r3, #22
 8008bf2:	d4dd      	bmi.n	8008bb0 <_fflush_r+0xc>
 8008bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf6:	f000 f908 	bl	8008e0a <__retarget_lock_release_recursive>
 8008bfa:	e7d9      	b.n	8008bb0 <_fflush_r+0xc>
 8008bfc:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <_fflush_r+0x70>)
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d101      	bne.n	8008c06 <_fflush_r+0x62>
 8008c02:	68ac      	ldr	r4, [r5, #8]
 8008c04:	e7df      	b.n	8008bc6 <_fflush_r+0x22>
 8008c06:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <_fflush_r+0x74>)
 8008c08:	429c      	cmp	r4, r3
 8008c0a:	bf08      	it	eq
 8008c0c:	68ec      	ldreq	r4, [r5, #12]
 8008c0e:	e7da      	b.n	8008bc6 <_fflush_r+0x22>
 8008c10:	0800a35c 	.word	0x0800a35c
 8008c14:	0800a37c 	.word	0x0800a37c
 8008c18:	0800a33c 	.word	0x0800a33c

08008c1c <std>:
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	4604      	mov	r4, r0
 8008c22:	e9c0 3300 	strd	r3, r3, [r0]
 8008c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c2a:	6083      	str	r3, [r0, #8]
 8008c2c:	8181      	strh	r1, [r0, #12]
 8008c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8008c30:	81c2      	strh	r2, [r0, #14]
 8008c32:	6183      	str	r3, [r0, #24]
 8008c34:	4619      	mov	r1, r3
 8008c36:	2208      	movs	r2, #8
 8008c38:	305c      	adds	r0, #92	; 0x5c
 8008c3a:	f7ff fdef 	bl	800881c <memset>
 8008c3e:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <std+0x38>)
 8008c40:	6263      	str	r3, [r4, #36]	; 0x24
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <std+0x3c>)
 8008c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c46:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <std+0x40>)
 8008c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c4a:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <std+0x44>)
 8008c4c:	6224      	str	r4, [r4, #32]
 8008c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	08009049 	.word	0x08009049
 8008c58:	0800906b 	.word	0x0800906b
 8008c5c:	080090a3 	.word	0x080090a3
 8008c60:	080090c7 	.word	0x080090c7

08008c64 <_cleanup_r>:
 8008c64:	4901      	ldr	r1, [pc, #4]	; (8008c6c <_cleanup_r+0x8>)
 8008c66:	f000 b8af 	b.w	8008dc8 <_fwalk_reent>
 8008c6a:	bf00      	nop
 8008c6c:	08008ba5 	.word	0x08008ba5

08008c70 <__sfmoreglue>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	1e4a      	subs	r2, r1, #1
 8008c74:	2568      	movs	r5, #104	; 0x68
 8008c76:	4355      	muls	r5, r2
 8008c78:	460e      	mov	r6, r1
 8008c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c7e:	f000 f979 	bl	8008f74 <_malloc_r>
 8008c82:	4604      	mov	r4, r0
 8008c84:	b140      	cbz	r0, 8008c98 <__sfmoreglue+0x28>
 8008c86:	2100      	movs	r1, #0
 8008c88:	e9c0 1600 	strd	r1, r6, [r0]
 8008c8c:	300c      	adds	r0, #12
 8008c8e:	60a0      	str	r0, [r4, #8]
 8008c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c94:	f7ff fdc2 	bl	800881c <memset>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}

08008c9c <__sfp_lock_acquire>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	; (8008ca4 <__sfp_lock_acquire+0x8>)
 8008c9e:	f000 b8b3 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20001d40 	.word	0x20001d40

08008ca8 <__sfp_lock_release>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	; (8008cb0 <__sfp_lock_release+0x8>)
 8008caa:	f000 b8ae 	b.w	8008e0a <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20001d40 	.word	0x20001d40

08008cb4 <__sinit_lock_acquire>:
 8008cb4:	4801      	ldr	r0, [pc, #4]	; (8008cbc <__sinit_lock_acquire+0x8>)
 8008cb6:	f000 b8a7 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8008cba:	bf00      	nop
 8008cbc:	20001d3b 	.word	0x20001d3b

08008cc0 <__sinit_lock_release>:
 8008cc0:	4801      	ldr	r0, [pc, #4]	; (8008cc8 <__sinit_lock_release+0x8>)
 8008cc2:	f000 b8a2 	b.w	8008e0a <__retarget_lock_release_recursive>
 8008cc6:	bf00      	nop
 8008cc8:	20001d3b 	.word	0x20001d3b

08008ccc <__sinit>:
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	4604      	mov	r4, r0
 8008cd0:	f7ff fff0 	bl	8008cb4 <__sinit_lock_acquire>
 8008cd4:	69a3      	ldr	r3, [r4, #24]
 8008cd6:	b11b      	cbz	r3, 8008ce0 <__sinit+0x14>
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	f7ff bff0 	b.w	8008cc0 <__sinit_lock_release>
 8008ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8008ce6:	4b13      	ldr	r3, [pc, #76]	; (8008d34 <__sinit+0x68>)
 8008ce8:	4a13      	ldr	r2, [pc, #76]	; (8008d38 <__sinit+0x6c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	bf04      	itt	eq
 8008cf2:	2301      	moveq	r3, #1
 8008cf4:	61a3      	streq	r3, [r4, #24]
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f000 f820 	bl	8008d3c <__sfp>
 8008cfc:	6060      	str	r0, [r4, #4]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f000 f81c 	bl	8008d3c <__sfp>
 8008d04:	60a0      	str	r0, [r4, #8]
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 f818 	bl	8008d3c <__sfp>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60e0      	str	r0, [r4, #12]
 8008d10:	2104      	movs	r1, #4
 8008d12:	6860      	ldr	r0, [r4, #4]
 8008d14:	f7ff ff82 	bl	8008c1c <std>
 8008d18:	68a0      	ldr	r0, [r4, #8]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	2109      	movs	r1, #9
 8008d1e:	f7ff ff7d 	bl	8008c1c <std>
 8008d22:	68e0      	ldr	r0, [r4, #12]
 8008d24:	2202      	movs	r2, #2
 8008d26:	2112      	movs	r1, #18
 8008d28:	f7ff ff78 	bl	8008c1c <std>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	61a3      	str	r3, [r4, #24]
 8008d30:	e7d2      	b.n	8008cd8 <__sinit+0xc>
 8008d32:	bf00      	nop
 8008d34:	0800a338 	.word	0x0800a338
 8008d38:	08008c65 	.word	0x08008c65

08008d3c <__sfp>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	4607      	mov	r7, r0
 8008d40:	f7ff ffac 	bl	8008c9c <__sfp_lock_acquire>
 8008d44:	4b1e      	ldr	r3, [pc, #120]	; (8008dc0 <__sfp+0x84>)
 8008d46:	681e      	ldr	r6, [r3, #0]
 8008d48:	69b3      	ldr	r3, [r6, #24]
 8008d4a:	b913      	cbnz	r3, 8008d52 <__sfp+0x16>
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f7ff ffbd 	bl	8008ccc <__sinit>
 8008d52:	3648      	adds	r6, #72	; 0x48
 8008d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	d503      	bpl.n	8008d64 <__sfp+0x28>
 8008d5c:	6833      	ldr	r3, [r6, #0]
 8008d5e:	b30b      	cbz	r3, 8008da4 <__sfp+0x68>
 8008d60:	6836      	ldr	r6, [r6, #0]
 8008d62:	e7f7      	b.n	8008d54 <__sfp+0x18>
 8008d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d68:	b9d5      	cbnz	r5, 8008da0 <__sfp+0x64>
 8008d6a:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <__sfp+0x88>)
 8008d6c:	60e3      	str	r3, [r4, #12]
 8008d6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d72:	6665      	str	r5, [r4, #100]	; 0x64
 8008d74:	f000 f847 	bl	8008e06 <__retarget_lock_init_recursive>
 8008d78:	f7ff ff96 	bl	8008ca8 <__sfp_lock_release>
 8008d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d84:	6025      	str	r5, [r4, #0]
 8008d86:	61a5      	str	r5, [r4, #24]
 8008d88:	2208      	movs	r2, #8
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d90:	f7ff fd44 	bl	800881c <memset>
 8008d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da0:	3468      	adds	r4, #104	; 0x68
 8008da2:	e7d9      	b.n	8008d58 <__sfp+0x1c>
 8008da4:	2104      	movs	r1, #4
 8008da6:	4638      	mov	r0, r7
 8008da8:	f7ff ff62 	bl	8008c70 <__sfmoreglue>
 8008dac:	4604      	mov	r4, r0
 8008dae:	6030      	str	r0, [r6, #0]
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1d5      	bne.n	8008d60 <__sfp+0x24>
 8008db4:	f7ff ff78 	bl	8008ca8 <__sfp_lock_release>
 8008db8:	230c      	movs	r3, #12
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	e7ee      	b.n	8008d9c <__sfp+0x60>
 8008dbe:	bf00      	nop
 8008dc0:	0800a338 	.word	0x0800a338
 8008dc4:	ffff0001 	.word	0xffff0001

08008dc8 <_fwalk_reent>:
 8008dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dcc:	4606      	mov	r6, r0
 8008dce:	4688      	mov	r8, r1
 8008dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dd4:	2700      	movs	r7, #0
 8008dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dda:	f1b9 0901 	subs.w	r9, r9, #1
 8008dde:	d505      	bpl.n	8008dec <_fwalk_reent+0x24>
 8008de0:	6824      	ldr	r4, [r4, #0]
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	d1f7      	bne.n	8008dd6 <_fwalk_reent+0xe>
 8008de6:	4638      	mov	r0, r7
 8008de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dec:	89ab      	ldrh	r3, [r5, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d907      	bls.n	8008e02 <_fwalk_reent+0x3a>
 8008df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008df6:	3301      	adds	r3, #1
 8008df8:	d003      	beq.n	8008e02 <_fwalk_reent+0x3a>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	47c0      	blx	r8
 8008e00:	4307      	orrs	r7, r0
 8008e02:	3568      	adds	r5, #104	; 0x68
 8008e04:	e7e9      	b.n	8008dda <_fwalk_reent+0x12>

08008e06 <__retarget_lock_init_recursive>:
 8008e06:	4770      	bx	lr

08008e08 <__retarget_lock_acquire_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_release_recursive>:
 8008e0a:	4770      	bx	lr

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460e      	mov	r6, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	2900      	cmp	r1, #0
 8008e16:	b096      	sub	sp, #88	; 0x58
 8008e18:	4614      	mov	r4, r2
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	da07      	bge.n	8008e2e <__swhatbuf_r+0x22>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	602b      	str	r3, [r5, #0]
 8008e22:	89b3      	ldrh	r3, [r6, #12]
 8008e24:	061a      	lsls	r2, r3, #24
 8008e26:	d410      	bmi.n	8008e4a <__swhatbuf_r+0x3e>
 8008e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2c:	e00e      	b.n	8008e4c <__swhatbuf_r+0x40>
 8008e2e:	466a      	mov	r2, sp
 8008e30:	f000 f970 	bl	8009114 <_fstat_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	dbf2      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e38:	9a01      	ldr	r2, [sp, #4]
 8008e3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e42:	425a      	negs	r2, r3
 8008e44:	415a      	adcs	r2, r3
 8008e46:	602a      	str	r2, [r5, #0]
 8008e48:	e7ee      	b.n	8008e28 <__swhatbuf_r+0x1c>
 8008e4a:	2340      	movs	r3, #64	; 0x40
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	b016      	add	sp, #88	; 0x58
 8008e52:	bd70      	pop	{r4, r5, r6, pc}

08008e54 <__smakebuf_r>:
 8008e54:	898b      	ldrh	r3, [r1, #12]
 8008e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e58:	079d      	lsls	r5, r3, #30
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	d507      	bpl.n	8008e70 <__smakebuf_r+0x1c>
 8008e60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	6163      	str	r3, [r4, #20]
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	ab01      	add	r3, sp, #4
 8008e72:	466a      	mov	r2, sp
 8008e74:	f7ff ffca 	bl	8008e0c <__swhatbuf_r>
 8008e78:	9900      	ldr	r1, [sp, #0]
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f879 	bl	8008f74 <_malloc_r>
 8008e82:	b948      	cbnz	r0, 8008e98 <__smakebuf_r+0x44>
 8008e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e88:	059a      	lsls	r2, r3, #22
 8008e8a:	d4ef      	bmi.n	8008e6c <__smakebuf_r+0x18>
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	f043 0302 	orr.w	r3, r3, #2
 8008e94:	81a3      	strh	r3, [r4, #12]
 8008e96:	e7e3      	b.n	8008e60 <__smakebuf_r+0xc>
 8008e98:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <__smakebuf_r+0x7c>)
 8008e9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	6163      	str	r3, [r4, #20]
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	6120      	str	r0, [r4, #16]
 8008eae:	b15b      	cbz	r3, 8008ec8 <__smakebuf_r+0x74>
 8008eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 f93f 	bl	8009138 <_isatty_r>
 8008eba:	b128      	cbz	r0, 8008ec8 <__smakebuf_r+0x74>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	89a0      	ldrh	r0, [r4, #12]
 8008eca:	4305      	orrs	r5, r0
 8008ecc:	81a5      	strh	r5, [r4, #12]
 8008ece:	e7cd      	b.n	8008e6c <__smakebuf_r+0x18>
 8008ed0:	08008c65 	.word	0x08008c65

08008ed4 <_free_r>:
 8008ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	d048      	beq.n	8008f6c <_free_r+0x98>
 8008eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ede:	9001      	str	r0, [sp, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ee6:	bfb8      	it	lt
 8008ee8:	18e4      	addlt	r4, r4, r3
 8008eea:	f000 f947 	bl	800917c <__malloc_lock>
 8008eee:	4a20      	ldr	r2, [pc, #128]	; (8008f70 <_free_r+0x9c>)
 8008ef0:	9801      	ldr	r0, [sp, #4]
 8008ef2:	6813      	ldr	r3, [r2, #0]
 8008ef4:	4615      	mov	r5, r2
 8008ef6:	b933      	cbnz	r3, 8008f06 <_free_r+0x32>
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	6014      	str	r4, [r2, #0]
 8008efc:	b003      	add	sp, #12
 8008efe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f02:	f000 b941 	b.w	8009188 <__malloc_unlock>
 8008f06:	42a3      	cmp	r3, r4
 8008f08:	d90b      	bls.n	8008f22 <_free_r+0x4e>
 8008f0a:	6821      	ldr	r1, [r4, #0]
 8008f0c:	1862      	adds	r2, r4, r1
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	bf04      	itt	eq
 8008f12:	681a      	ldreq	r2, [r3, #0]
 8008f14:	685b      	ldreq	r3, [r3, #4]
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	bf04      	itt	eq
 8008f1a:	1852      	addeq	r2, r2, r1
 8008f1c:	6022      	streq	r2, [r4, #0]
 8008f1e:	602c      	str	r4, [r5, #0]
 8008f20:	e7ec      	b.n	8008efc <_free_r+0x28>
 8008f22:	461a      	mov	r2, r3
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	b10b      	cbz	r3, 8008f2c <_free_r+0x58>
 8008f28:	42a3      	cmp	r3, r4
 8008f2a:	d9fa      	bls.n	8008f22 <_free_r+0x4e>
 8008f2c:	6811      	ldr	r1, [r2, #0]
 8008f2e:	1855      	adds	r5, r2, r1
 8008f30:	42a5      	cmp	r5, r4
 8008f32:	d10b      	bne.n	8008f4c <_free_r+0x78>
 8008f34:	6824      	ldr	r4, [r4, #0]
 8008f36:	4421      	add	r1, r4
 8008f38:	1854      	adds	r4, r2, r1
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	d1dd      	bne.n	8008efc <_free_r+0x28>
 8008f40:	681c      	ldr	r4, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	6053      	str	r3, [r2, #4]
 8008f46:	4421      	add	r1, r4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	e7d7      	b.n	8008efc <_free_r+0x28>
 8008f4c:	d902      	bls.n	8008f54 <_free_r+0x80>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6003      	str	r3, [r0, #0]
 8008f52:	e7d3      	b.n	8008efc <_free_r+0x28>
 8008f54:	6825      	ldr	r5, [r4, #0]
 8008f56:	1961      	adds	r1, r4, r5
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	bf04      	itt	eq
 8008f5c:	6819      	ldreq	r1, [r3, #0]
 8008f5e:	685b      	ldreq	r3, [r3, #4]
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	bf04      	itt	eq
 8008f64:	1949      	addeq	r1, r1, r5
 8008f66:	6021      	streq	r1, [r4, #0]
 8008f68:	6054      	str	r4, [r2, #4]
 8008f6a:	e7c7      	b.n	8008efc <_free_r+0x28>
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	20001960 	.word	0x20001960

08008f74 <_malloc_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	1ccd      	adds	r5, r1, #3
 8008f78:	f025 0503 	bic.w	r5, r5, #3
 8008f7c:	3508      	adds	r5, #8
 8008f7e:	2d0c      	cmp	r5, #12
 8008f80:	bf38      	it	cc
 8008f82:	250c      	movcc	r5, #12
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	4606      	mov	r6, r0
 8008f88:	db01      	blt.n	8008f8e <_malloc_r+0x1a>
 8008f8a:	42a9      	cmp	r1, r5
 8008f8c:	d903      	bls.n	8008f96 <_malloc_r+0x22>
 8008f8e:	230c      	movs	r3, #12
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	2000      	movs	r0, #0
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f96:	f000 f8f1 	bl	800917c <__malloc_lock>
 8008f9a:	4921      	ldr	r1, [pc, #132]	; (8009020 <_malloc_r+0xac>)
 8008f9c:	680a      	ldr	r2, [r1, #0]
 8008f9e:	4614      	mov	r4, r2
 8008fa0:	b99c      	cbnz	r4, 8008fca <_malloc_r+0x56>
 8008fa2:	4f20      	ldr	r7, [pc, #128]	; (8009024 <_malloc_r+0xb0>)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	b923      	cbnz	r3, 8008fb2 <_malloc_r+0x3e>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f000 f83c 	bl	8009028 <_sbrk_r>
 8008fb0:	6038      	str	r0, [r7, #0]
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 f837 	bl	8009028 <_sbrk_r>
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	d123      	bne.n	8009006 <_malloc_r+0x92>
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f000 f8e0 	bl	8009188 <__malloc_unlock>
 8008fc8:	e7e3      	b.n	8008f92 <_malloc_r+0x1e>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	1b5b      	subs	r3, r3, r5
 8008fce:	d417      	bmi.n	8009000 <_malloc_r+0x8c>
 8008fd0:	2b0b      	cmp	r3, #11
 8008fd2:	d903      	bls.n	8008fdc <_malloc_r+0x68>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	441c      	add	r4, r3
 8008fd8:	6025      	str	r5, [r4, #0]
 8008fda:	e004      	b.n	8008fe6 <_malloc_r+0x72>
 8008fdc:	6863      	ldr	r3, [r4, #4]
 8008fde:	42a2      	cmp	r2, r4
 8008fe0:	bf0c      	ite	eq
 8008fe2:	600b      	streq	r3, [r1, #0]
 8008fe4:	6053      	strne	r3, [r2, #4]
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f000 f8ce 	bl	8009188 <__malloc_unlock>
 8008fec:	f104 000b 	add.w	r0, r4, #11
 8008ff0:	1d23      	adds	r3, r4, #4
 8008ff2:	f020 0007 	bic.w	r0, r0, #7
 8008ff6:	1ac2      	subs	r2, r0, r3
 8008ff8:	d0cc      	beq.n	8008f94 <_malloc_r+0x20>
 8008ffa:	1a1b      	subs	r3, r3, r0
 8008ffc:	50a3      	str	r3, [r4, r2]
 8008ffe:	e7c9      	b.n	8008f94 <_malloc_r+0x20>
 8009000:	4622      	mov	r2, r4
 8009002:	6864      	ldr	r4, [r4, #4]
 8009004:	e7cc      	b.n	8008fa0 <_malloc_r+0x2c>
 8009006:	1cc4      	adds	r4, r0, #3
 8009008:	f024 0403 	bic.w	r4, r4, #3
 800900c:	42a0      	cmp	r0, r4
 800900e:	d0e3      	beq.n	8008fd8 <_malloc_r+0x64>
 8009010:	1a21      	subs	r1, r4, r0
 8009012:	4630      	mov	r0, r6
 8009014:	f000 f808 	bl	8009028 <_sbrk_r>
 8009018:	3001      	adds	r0, #1
 800901a:	d1dd      	bne.n	8008fd8 <_malloc_r+0x64>
 800901c:	e7cf      	b.n	8008fbe <_malloc_r+0x4a>
 800901e:	bf00      	nop
 8009020:	20001960 	.word	0x20001960
 8009024:	20001964 	.word	0x20001964

08009028 <_sbrk_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_sbrk_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f8 fc60 	bl	80018f8 <_sbrk>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_sbrk_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_sbrk_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20001d44 	.word	0x20001d44

08009048 <__sread>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 f8a0 	bl	8009194 <_read_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	bfab      	itete	ge
 8009058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800905a:	89a3      	ldrhlt	r3, [r4, #12]
 800905c:	181b      	addge	r3, r3, r0
 800905e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009062:	bfac      	ite	ge
 8009064:	6563      	strge	r3, [r4, #84]	; 0x54
 8009066:	81a3      	strhlt	r3, [r4, #12]
 8009068:	bd10      	pop	{r4, pc}

0800906a <__swrite>:
 800906a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	461f      	mov	r7, r3
 8009070:	898b      	ldrh	r3, [r1, #12]
 8009072:	05db      	lsls	r3, r3, #23
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	4616      	mov	r6, r2
 800907a:	d505      	bpl.n	8009088 <__swrite+0x1e>
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	2302      	movs	r3, #2
 8009082:	2200      	movs	r2, #0
 8009084:	f000 f868 	bl	8009158 <_lseek_r>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	4628      	mov	r0, r5
 800909a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	f000 b817 	b.w	80090d0 <_write_r>

080090a2 <__sseek>:
 80090a2:	b510      	push	{r4, lr}
 80090a4:	460c      	mov	r4, r1
 80090a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090aa:	f000 f855 	bl	8009158 <_lseek_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	bf15      	itete	ne
 80090b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090be:	81a3      	strheq	r3, [r4, #12]
 80090c0:	bf18      	it	ne
 80090c2:	81a3      	strhne	r3, [r4, #12]
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <__sclose>:
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 b813 	b.w	80090f4 <_close_r>
	...

080090d0 <_write_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	; (80090f0 <_write_r+0x20>)
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f7f8 fbb9 	bl	8001856 <_write>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_write_r+0x1e>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_write_r+0x1e>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20001d44 	.word	0x20001d44

080090f4 <_close_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d06      	ldr	r5, [pc, #24]	; (8009110 <_close_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4604      	mov	r4, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	f7f8 fbc5 	bl	800188e <_close>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_close_r+0x1a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	b103      	cbz	r3, 800910e <_close_r+0x1a>
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20001d44 	.word	0x20001d44

08009114 <_fstat_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_fstat_r+0x20>)
 8009118:	2300      	movs	r3, #0
 800911a:	4604      	mov	r4, r0
 800911c:	4608      	mov	r0, r1
 800911e:	4611      	mov	r1, r2
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	f7f8 fbc0 	bl	80018a6 <_fstat>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d102      	bne.n	8009130 <_fstat_r+0x1c>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b103      	cbz	r3, 8009130 <_fstat_r+0x1c>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	20001d44 	.word	0x20001d44

08009138 <_isatty_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4d06      	ldr	r5, [pc, #24]	; (8009154 <_isatty_r+0x1c>)
 800913c:	2300      	movs	r3, #0
 800913e:	4604      	mov	r4, r0
 8009140:	4608      	mov	r0, r1
 8009142:	602b      	str	r3, [r5, #0]
 8009144:	f7f8 fbbf 	bl	80018c6 <_isatty>
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	d102      	bne.n	8009152 <_isatty_r+0x1a>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	b103      	cbz	r3, 8009152 <_isatty_r+0x1a>
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	bd38      	pop	{r3, r4, r5, pc}
 8009154:	20001d44 	.word	0x20001d44

08009158 <_lseek_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4d07      	ldr	r5, [pc, #28]	; (8009178 <_lseek_r+0x20>)
 800915c:	4604      	mov	r4, r0
 800915e:	4608      	mov	r0, r1
 8009160:	4611      	mov	r1, r2
 8009162:	2200      	movs	r2, #0
 8009164:	602a      	str	r2, [r5, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	f7f8 fbb8 	bl	80018dc <_lseek>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	d102      	bne.n	8009176 <_lseek_r+0x1e>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	b103      	cbz	r3, 8009176 <_lseek_r+0x1e>
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	bd38      	pop	{r3, r4, r5, pc}
 8009178:	20001d44 	.word	0x20001d44

0800917c <__malloc_lock>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__malloc_lock+0x8>)
 800917e:	f7ff be43 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	20001d3c 	.word	0x20001d3c

08009188 <__malloc_unlock>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__malloc_unlock+0x8>)
 800918a:	f7ff be3e 	b.w	8008e0a <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	20001d3c 	.word	0x20001d3c

08009194 <_read_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_read_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f8 fb3a 	bl	800181c <_read>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_read_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_read_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20001d44 	.word	0x20001d44

080091b8 <tan>:
 80091b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091ba:	ec53 2b10 	vmov	r2, r3, d0
 80091be:	4814      	ldr	r0, [pc, #80]	; (8009210 <tan+0x58>)
 80091c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80091c4:	4281      	cmp	r1, r0
 80091c6:	dc05      	bgt.n	80091d4 <tan+0x1c>
 80091c8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8009208 <tan+0x50>
 80091cc:	2001      	movs	r0, #1
 80091ce:	f000 fd6f 	bl	8009cb0 <__kernel_tan>
 80091d2:	e009      	b.n	80091e8 <tan+0x30>
 80091d4:	480f      	ldr	r0, [pc, #60]	; (8009214 <tan+0x5c>)
 80091d6:	4281      	cmp	r1, r0
 80091d8:	dd09      	ble.n	80091ee <tan+0x36>
 80091da:	ee10 0a10 	vmov	r0, s0
 80091de:	4619      	mov	r1, r3
 80091e0:	f7f6 fffa 	bl	80001d8 <__aeabi_dsub>
 80091e4:	ec41 0b10 	vmov	d0, r0, r1
 80091e8:	b005      	add	sp, #20
 80091ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80091ee:	4668      	mov	r0, sp
 80091f0:	f000 f812 	bl	8009218 <__ieee754_rem_pio2>
 80091f4:	0040      	lsls	r0, r0, #1
 80091f6:	f000 0002 	and.w	r0, r0, #2
 80091fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091fe:	ed9d 0b00 	vldr	d0, [sp]
 8009202:	f1c0 0001 	rsb	r0, r0, #1
 8009206:	e7e2      	b.n	80091ce <tan+0x16>
	...
 8009210:	3fe921fb 	.word	0x3fe921fb
 8009214:	7fefffff 	.word	0x7fefffff

08009218 <__ieee754_rem_pio2>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	ed2d 8b02 	vpush	{d8}
 8009220:	ec55 4b10 	vmov	r4, r5, d0
 8009224:	4bca      	ldr	r3, [pc, #808]	; (8009550 <__ieee754_rem_pio2+0x338>)
 8009226:	b08b      	sub	sp, #44	; 0x2c
 8009228:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800922c:	4598      	cmp	r8, r3
 800922e:	4682      	mov	sl, r0
 8009230:	9502      	str	r5, [sp, #8]
 8009232:	dc08      	bgt.n	8009246 <__ieee754_rem_pio2+0x2e>
 8009234:	2200      	movs	r2, #0
 8009236:	2300      	movs	r3, #0
 8009238:	ed80 0b00 	vstr	d0, [r0]
 800923c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009240:	f04f 0b00 	mov.w	fp, #0
 8009244:	e028      	b.n	8009298 <__ieee754_rem_pio2+0x80>
 8009246:	4bc3      	ldr	r3, [pc, #780]	; (8009554 <__ieee754_rem_pio2+0x33c>)
 8009248:	4598      	cmp	r8, r3
 800924a:	dc78      	bgt.n	800933e <__ieee754_rem_pio2+0x126>
 800924c:	9b02      	ldr	r3, [sp, #8]
 800924e:	4ec2      	ldr	r6, [pc, #776]	; (8009558 <__ieee754_rem_pio2+0x340>)
 8009250:	2b00      	cmp	r3, #0
 8009252:	ee10 0a10 	vmov	r0, s0
 8009256:	a3b0      	add	r3, pc, #704	; (adr r3, 8009518 <__ieee754_rem_pio2+0x300>)
 8009258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925c:	4629      	mov	r1, r5
 800925e:	dd39      	ble.n	80092d4 <__ieee754_rem_pio2+0xbc>
 8009260:	f7f6 ffba 	bl	80001d8 <__aeabi_dsub>
 8009264:	45b0      	cmp	r8, r6
 8009266:	4604      	mov	r4, r0
 8009268:	460d      	mov	r5, r1
 800926a:	d01b      	beq.n	80092a4 <__ieee754_rem_pio2+0x8c>
 800926c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009520 <__ieee754_rem_pio2+0x308>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f6 ffb1 	bl	80001d8 <__aeabi_dsub>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e9ca 2300 	strd	r2, r3, [sl]
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	f7f6 ffa9 	bl	80001d8 <__aeabi_dsub>
 8009286:	a3a6      	add	r3, pc, #664	; (adr r3, 8009520 <__ieee754_rem_pio2+0x308>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f6 ffa4 	bl	80001d8 <__aeabi_dsub>
 8009290:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009294:	f04f 0b01 	mov.w	fp, #1
 8009298:	4658      	mov	r0, fp
 800929a:	b00b      	add	sp, #44	; 0x2c
 800929c:	ecbd 8b02 	vpop	{d8}
 80092a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009528 <__ieee754_rem_pio2+0x310>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f6 ff95 	bl	80001d8 <__aeabi_dsub>
 80092ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8009530 <__ieee754_rem_pio2+0x318>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	4604      	mov	r4, r0
 80092b6:	460d      	mov	r5, r1
 80092b8:	f7f6 ff8e 	bl	80001d8 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	e9ca 2300 	strd	r2, r3, [sl]
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f6 ff86 	bl	80001d8 <__aeabi_dsub>
 80092cc:	a398      	add	r3, pc, #608	; (adr r3, 8009530 <__ieee754_rem_pio2+0x318>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	e7db      	b.n	800928c <__ieee754_rem_pio2+0x74>
 80092d4:	f7f6 ff82 	bl	80001dc <__adddf3>
 80092d8:	45b0      	cmp	r8, r6
 80092da:	4604      	mov	r4, r0
 80092dc:	460d      	mov	r5, r1
 80092de:	d016      	beq.n	800930e <__ieee754_rem_pio2+0xf6>
 80092e0:	a38f      	add	r3, pc, #572	; (adr r3, 8009520 <__ieee754_rem_pio2+0x308>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ff79 	bl	80001dc <__adddf3>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	e9ca 2300 	strd	r2, r3, [sl]
 80092f2:	4620      	mov	r0, r4
 80092f4:	4629      	mov	r1, r5
 80092f6:	f7f6 ff6f 	bl	80001d8 <__aeabi_dsub>
 80092fa:	a389      	add	r3, pc, #548	; (adr r3, 8009520 <__ieee754_rem_pio2+0x308>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f6 ff6c 	bl	80001dc <__adddf3>
 8009304:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009308:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800930c:	e7c4      	b.n	8009298 <__ieee754_rem_pio2+0x80>
 800930e:	a386      	add	r3, pc, #536	; (adr r3, 8009528 <__ieee754_rem_pio2+0x310>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ff62 	bl	80001dc <__adddf3>
 8009318:	a385      	add	r3, pc, #532	; (adr r3, 8009530 <__ieee754_rem_pio2+0x318>)
 800931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931e:	4604      	mov	r4, r0
 8009320:	460d      	mov	r5, r1
 8009322:	f7f6 ff5b 	bl	80001dc <__adddf3>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	e9ca 2300 	strd	r2, r3, [sl]
 800932e:	4620      	mov	r0, r4
 8009330:	4629      	mov	r1, r5
 8009332:	f7f6 ff51 	bl	80001d8 <__aeabi_dsub>
 8009336:	a37e      	add	r3, pc, #504	; (adr r3, 8009530 <__ieee754_rem_pio2+0x318>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	e7e0      	b.n	8009300 <__ieee754_rem_pio2+0xe8>
 800933e:	4b87      	ldr	r3, [pc, #540]	; (800955c <__ieee754_rem_pio2+0x344>)
 8009340:	4598      	cmp	r8, r3
 8009342:	f300 80d9 	bgt.w	80094f8 <__ieee754_rem_pio2+0x2e0>
 8009346:	f000 fe87 	bl	800a058 <fabs>
 800934a:	ec55 4b10 	vmov	r4, r5, d0
 800934e:	ee10 0a10 	vmov	r0, s0
 8009352:	a379      	add	r3, pc, #484	; (adr r3, 8009538 <__ieee754_rem_pio2+0x320>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	4629      	mov	r1, r5
 800935a:	f7f7 f8f5 	bl	8000548 <__aeabi_dmul>
 800935e:	4b80      	ldr	r3, [pc, #512]	; (8009560 <__ieee754_rem_pio2+0x348>)
 8009360:	2200      	movs	r2, #0
 8009362:	f7f6 ff3b 	bl	80001dc <__adddf3>
 8009366:	f7f7 fb89 	bl	8000a7c <__aeabi_d2iz>
 800936a:	4683      	mov	fp, r0
 800936c:	f7f7 f882 	bl	8000474 <__aeabi_i2d>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	ec43 2b18 	vmov	d8, r2, r3
 8009378:	a367      	add	r3, pc, #412	; (adr r3, 8009518 <__ieee754_rem_pio2+0x300>)
 800937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937e:	f7f7 f8e3 	bl	8000548 <__aeabi_dmul>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4620      	mov	r0, r4
 8009388:	4629      	mov	r1, r5
 800938a:	f7f6 ff25 	bl	80001d8 <__aeabi_dsub>
 800938e:	a364      	add	r3, pc, #400	; (adr r3, 8009520 <__ieee754_rem_pio2+0x308>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	4606      	mov	r6, r0
 8009396:	460f      	mov	r7, r1
 8009398:	ec51 0b18 	vmov	r0, r1, d8
 800939c:	f7f7 f8d4 	bl	8000548 <__aeabi_dmul>
 80093a0:	f1bb 0f1f 	cmp.w	fp, #31
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	dc0d      	bgt.n	80093c6 <__ieee754_rem_pio2+0x1ae>
 80093aa:	4b6e      	ldr	r3, [pc, #440]	; (8009564 <__ieee754_rem_pio2+0x34c>)
 80093ac:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	4543      	cmp	r3, r8
 80093b6:	d006      	beq.n	80093c6 <__ieee754_rem_pio2+0x1ae>
 80093b8:	4622      	mov	r2, r4
 80093ba:	462b      	mov	r3, r5
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f6 ff0a 	bl	80001d8 <__aeabi_dsub>
 80093c4:	e00f      	b.n	80093e6 <__ieee754_rem_pio2+0x1ce>
 80093c6:	462b      	mov	r3, r5
 80093c8:	4622      	mov	r2, r4
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f6 ff03 	bl	80001d8 <__aeabi_dsub>
 80093d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093d6:	9303      	str	r3, [sp, #12]
 80093d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80093e0:	f1b8 0f10 	cmp.w	r8, #16
 80093e4:	dc02      	bgt.n	80093ec <__ieee754_rem_pio2+0x1d4>
 80093e6:	e9ca 0100 	strd	r0, r1, [sl]
 80093ea:	e039      	b.n	8009460 <__ieee754_rem_pio2+0x248>
 80093ec:	a34e      	add	r3, pc, #312	; (adr r3, 8009528 <__ieee754_rem_pio2+0x310>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	ec51 0b18 	vmov	r0, r1, d8
 80093f6:	f7f7 f8a7 	bl	8000548 <__aeabi_dmul>
 80093fa:	4604      	mov	r4, r0
 80093fc:	460d      	mov	r5, r1
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	4630      	mov	r0, r6
 8009404:	4639      	mov	r1, r7
 8009406:	f7f6 fee7 	bl	80001d8 <__aeabi_dsub>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4680      	mov	r8, r0
 8009410:	4689      	mov	r9, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f6 fedf 	bl	80001d8 <__aeabi_dsub>
 800941a:	4622      	mov	r2, r4
 800941c:	462b      	mov	r3, r5
 800941e:	f7f6 fedb 	bl	80001d8 <__aeabi_dsub>
 8009422:	a343      	add	r3, pc, #268	; (adr r3, 8009530 <__ieee754_rem_pio2+0x318>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	4604      	mov	r4, r0
 800942a:	460d      	mov	r5, r1
 800942c:	ec51 0b18 	vmov	r0, r1, d8
 8009430:	f7f7 f88a 	bl	8000548 <__aeabi_dmul>
 8009434:	4622      	mov	r2, r4
 8009436:	462b      	mov	r3, r5
 8009438:	f7f6 fece 	bl	80001d8 <__aeabi_dsub>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4604      	mov	r4, r0
 8009442:	460d      	mov	r5, r1
 8009444:	4640      	mov	r0, r8
 8009446:	4649      	mov	r1, r9
 8009448:	f7f6 fec6 	bl	80001d8 <__aeabi_dsub>
 800944c:	9a03      	ldr	r2, [sp, #12]
 800944e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	2b31      	cmp	r3, #49	; 0x31
 8009456:	dc24      	bgt.n	80094a2 <__ieee754_rem_pio2+0x28a>
 8009458:	e9ca 0100 	strd	r0, r1, [sl]
 800945c:	4646      	mov	r6, r8
 800945e:	464f      	mov	r7, r9
 8009460:	e9da 8900 	ldrd	r8, r9, [sl]
 8009464:	4630      	mov	r0, r6
 8009466:	4642      	mov	r2, r8
 8009468:	464b      	mov	r3, r9
 800946a:	4639      	mov	r1, r7
 800946c:	f7f6 feb4 	bl	80001d8 <__aeabi_dsub>
 8009470:	462b      	mov	r3, r5
 8009472:	4622      	mov	r2, r4
 8009474:	f7f6 feb0 	bl	80001d8 <__aeabi_dsub>
 8009478:	9b02      	ldr	r3, [sp, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009480:	f6bf af0a 	bge.w	8009298 <__ieee754_rem_pio2+0x80>
 8009484:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009488:	f8ca 3004 	str.w	r3, [sl, #4]
 800948c:	f8ca 8000 	str.w	r8, [sl]
 8009490:	f8ca 0008 	str.w	r0, [sl, #8]
 8009494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009498:	f8ca 300c 	str.w	r3, [sl, #12]
 800949c:	f1cb 0b00 	rsb	fp, fp, #0
 80094a0:	e6fa      	b.n	8009298 <__ieee754_rem_pio2+0x80>
 80094a2:	a327      	add	r3, pc, #156	; (adr r3, 8009540 <__ieee754_rem_pio2+0x328>)
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	ec51 0b18 	vmov	r0, r1, d8
 80094ac:	f7f7 f84c 	bl	8000548 <__aeabi_dmul>
 80094b0:	4604      	mov	r4, r0
 80094b2:	460d      	mov	r5, r1
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f6 fe8c 	bl	80001d8 <__aeabi_dsub>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
 80094c4:	4606      	mov	r6, r0
 80094c6:	460f      	mov	r7, r1
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f6 fe84 	bl	80001d8 <__aeabi_dsub>
 80094d0:	4622      	mov	r2, r4
 80094d2:	462b      	mov	r3, r5
 80094d4:	f7f6 fe80 	bl	80001d8 <__aeabi_dsub>
 80094d8:	a31b      	add	r3, pc, #108	; (adr r3, 8009548 <__ieee754_rem_pio2+0x330>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	ec51 0b18 	vmov	r0, r1, d8
 80094e6:	f7f7 f82f 	bl	8000548 <__aeabi_dmul>
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	f7f6 fe73 	bl	80001d8 <__aeabi_dsub>
 80094f2:	4604      	mov	r4, r0
 80094f4:	460d      	mov	r5, r1
 80094f6:	e75f      	b.n	80093b8 <__ieee754_rem_pio2+0x1a0>
 80094f8:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <__ieee754_rem_pio2+0x350>)
 80094fa:	4598      	cmp	r8, r3
 80094fc:	dd36      	ble.n	800956c <__ieee754_rem_pio2+0x354>
 80094fe:	ee10 2a10 	vmov	r2, s0
 8009502:	462b      	mov	r3, r5
 8009504:	4620      	mov	r0, r4
 8009506:	4629      	mov	r1, r5
 8009508:	f7f6 fe66 	bl	80001d8 <__aeabi_dsub>
 800950c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009510:	e9ca 0100 	strd	r0, r1, [sl]
 8009514:	e694      	b.n	8009240 <__ieee754_rem_pio2+0x28>
 8009516:	bf00      	nop
 8009518:	54400000 	.word	0x54400000
 800951c:	3ff921fb 	.word	0x3ff921fb
 8009520:	1a626331 	.word	0x1a626331
 8009524:	3dd0b461 	.word	0x3dd0b461
 8009528:	1a600000 	.word	0x1a600000
 800952c:	3dd0b461 	.word	0x3dd0b461
 8009530:	2e037073 	.word	0x2e037073
 8009534:	3ba3198a 	.word	0x3ba3198a
 8009538:	6dc9c883 	.word	0x6dc9c883
 800953c:	3fe45f30 	.word	0x3fe45f30
 8009540:	2e000000 	.word	0x2e000000
 8009544:	3ba3198a 	.word	0x3ba3198a
 8009548:	252049c1 	.word	0x252049c1
 800954c:	397b839a 	.word	0x397b839a
 8009550:	3fe921fb 	.word	0x3fe921fb
 8009554:	4002d97b 	.word	0x4002d97b
 8009558:	3ff921fb 	.word	0x3ff921fb
 800955c:	413921fb 	.word	0x413921fb
 8009560:	3fe00000 	.word	0x3fe00000
 8009564:	0800a39c 	.word	0x0800a39c
 8009568:	7fefffff 	.word	0x7fefffff
 800956c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009570:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009574:	ee10 0a10 	vmov	r0, s0
 8009578:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800957c:	ee10 6a10 	vmov	r6, s0
 8009580:	460f      	mov	r7, r1
 8009582:	f7f7 fa7b 	bl	8000a7c <__aeabi_d2iz>
 8009586:	f7f6 ff75 	bl	8000474 <__aeabi_i2d>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4630      	mov	r0, r6
 8009590:	4639      	mov	r1, r7
 8009592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009596:	f7f6 fe1f 	bl	80001d8 <__aeabi_dsub>
 800959a:	4b22      	ldr	r3, [pc, #136]	; (8009624 <__ieee754_rem_pio2+0x40c>)
 800959c:	2200      	movs	r2, #0
 800959e:	f7f6 ffd3 	bl	8000548 <__aeabi_dmul>
 80095a2:	460f      	mov	r7, r1
 80095a4:	4606      	mov	r6, r0
 80095a6:	f7f7 fa69 	bl	8000a7c <__aeabi_d2iz>
 80095aa:	f7f6 ff63 	bl	8000474 <__aeabi_i2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4630      	mov	r0, r6
 80095b4:	4639      	mov	r1, r7
 80095b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095ba:	f7f6 fe0d 	bl	80001d8 <__aeabi_dsub>
 80095be:	4b19      	ldr	r3, [pc, #100]	; (8009624 <__ieee754_rem_pio2+0x40c>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	f7f6 ffc1 	bl	8000548 <__aeabi_dmul>
 80095c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095ca:	ad04      	add	r5, sp, #16
 80095cc:	f04f 0803 	mov.w	r8, #3
 80095d0:	46a9      	mov	r9, r5
 80095d2:	2600      	movs	r6, #0
 80095d4:	2700      	movs	r7, #0
 80095d6:	4632      	mov	r2, r6
 80095d8:	463b      	mov	r3, r7
 80095da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80095de:	46c3      	mov	fp, r8
 80095e0:	3d08      	subs	r5, #8
 80095e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80095e6:	f7f7 fa17 	bl	8000a18 <__aeabi_dcmpeq>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d1f3      	bne.n	80095d6 <__ieee754_rem_pio2+0x3be>
 80095ee:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <__ieee754_rem_pio2+0x410>)
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2302      	movs	r3, #2
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	4622      	mov	r2, r4
 80095f8:	465b      	mov	r3, fp
 80095fa:	4651      	mov	r1, sl
 80095fc:	4648      	mov	r0, r9
 80095fe:	f000 f817 	bl	8009630 <__kernel_rem_pio2>
 8009602:	9b02      	ldr	r3, [sp, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	4683      	mov	fp, r0
 8009608:	f6bf ae46 	bge.w	8009298 <__ieee754_rem_pio2+0x80>
 800960c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009610:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009614:	f8ca 3004 	str.w	r3, [sl, #4]
 8009618:	f8da 300c 	ldr.w	r3, [sl, #12]
 800961c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009620:	e73a      	b.n	8009498 <__ieee754_rem_pio2+0x280>
 8009622:	bf00      	nop
 8009624:	41700000 	.word	0x41700000
 8009628:	0800a41c 	.word	0x0800a41c
 800962c:	00000000 	.word	0x00000000

08009630 <__kernel_rem_pio2>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ed2d 8b02 	vpush	{d8}
 8009638:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800963c:	f112 0f14 	cmn.w	r2, #20
 8009640:	9308      	str	r3, [sp, #32]
 8009642:	9101      	str	r1, [sp, #4]
 8009644:	4bc6      	ldr	r3, [pc, #792]	; (8009960 <__kernel_rem_pio2+0x330>)
 8009646:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009648:	9009      	str	r0, [sp, #36]	; 0x24
 800964a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	9b08      	ldr	r3, [sp, #32]
 8009652:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009656:	bfa8      	it	ge
 8009658:	1ed4      	subge	r4, r2, #3
 800965a:	9306      	str	r3, [sp, #24]
 800965c:	bfb2      	itee	lt
 800965e:	2400      	movlt	r4, #0
 8009660:	2318      	movge	r3, #24
 8009662:	fb94 f4f3 	sdivge	r4, r4, r3
 8009666:	f06f 0317 	mvn.w	r3, #23
 800966a:	fb04 3303 	mla	r3, r4, r3, r3
 800966e:	eb03 0a02 	add.w	sl, r3, r2
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	9a06      	ldr	r2, [sp, #24]
 8009676:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009950 <__kernel_rem_pio2+0x320>
 800967a:	eb03 0802 	add.w	r8, r3, r2
 800967e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009680:	1aa7      	subs	r7, r4, r2
 8009682:	ae20      	add	r6, sp, #128	; 0x80
 8009684:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009688:	2500      	movs	r5, #0
 800968a:	4545      	cmp	r5, r8
 800968c:	dd18      	ble.n	80096c0 <__kernel_rem_pio2+0x90>
 800968e:	9b08      	ldr	r3, [sp, #32]
 8009690:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009694:	aa20      	add	r2, sp, #128	; 0x80
 8009696:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009950 <__kernel_rem_pio2+0x320>
 800969a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800969e:	f1c3 0301 	rsb	r3, r3, #1
 80096a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80096a6:	9307      	str	r3, [sp, #28]
 80096a8:	9b07      	ldr	r3, [sp, #28]
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	4443      	add	r3, r8
 80096ae:	429a      	cmp	r2, r3
 80096b0:	db2f      	blt.n	8009712 <__kernel_rem_pio2+0xe2>
 80096b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096ba:	462f      	mov	r7, r5
 80096bc:	2600      	movs	r6, #0
 80096be:	e01b      	b.n	80096f8 <__kernel_rem_pio2+0xc8>
 80096c0:	42ef      	cmn	r7, r5
 80096c2:	d407      	bmi.n	80096d4 <__kernel_rem_pio2+0xa4>
 80096c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80096c8:	f7f6 fed4 	bl	8000474 <__aeabi_i2d>
 80096cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096d0:	3501      	adds	r5, #1
 80096d2:	e7da      	b.n	800968a <__kernel_rem_pio2+0x5a>
 80096d4:	ec51 0b18 	vmov	r0, r1, d8
 80096d8:	e7f8      	b.n	80096cc <__kernel_rem_pio2+0x9c>
 80096da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80096e2:	f7f6 ff31 	bl	8000548 <__aeabi_dmul>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ee:	f7f6 fd75 	bl	80001dc <__adddf3>
 80096f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f6:	3601      	adds	r6, #1
 80096f8:	9b06      	ldr	r3, [sp, #24]
 80096fa:	429e      	cmp	r6, r3
 80096fc:	f1a7 0708 	sub.w	r7, r7, #8
 8009700:	ddeb      	ble.n	80096da <__kernel_rem_pio2+0xaa>
 8009702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009706:	3508      	adds	r5, #8
 8009708:	ecab 7b02 	vstmia	fp!, {d7}
 800970c:	f108 0801 	add.w	r8, r8, #1
 8009710:	e7ca      	b.n	80096a8 <__kernel_rem_pio2+0x78>
 8009712:	9b04      	ldr	r3, [sp, #16]
 8009714:	aa0c      	add	r2, sp, #48	; 0x30
 8009716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800971a:	930b      	str	r3, [sp, #44]	; 0x2c
 800971c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800971e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009722:	9c04      	ldr	r4, [sp, #16]
 8009724:	930a      	str	r3, [sp, #40]	; 0x28
 8009726:	ab98      	add	r3, sp, #608	; 0x260
 8009728:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800972c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009730:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009734:	f8cd b008 	str.w	fp, [sp, #8]
 8009738:	4625      	mov	r5, r4
 800973a:	2d00      	cmp	r5, #0
 800973c:	dc78      	bgt.n	8009830 <__kernel_rem_pio2+0x200>
 800973e:	ec47 6b10 	vmov	d0, r6, r7
 8009742:	4650      	mov	r0, sl
 8009744:	f000 fd14 	bl	800a170 <scalbn>
 8009748:	ec57 6b10 	vmov	r6, r7, d0
 800974c:	2200      	movs	r2, #0
 800974e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009752:	ee10 0a10 	vmov	r0, s0
 8009756:	4639      	mov	r1, r7
 8009758:	f7f6 fef6 	bl	8000548 <__aeabi_dmul>
 800975c:	ec41 0b10 	vmov	d0, r0, r1
 8009760:	f000 fc86 	bl	800a070 <floor>
 8009764:	4b7f      	ldr	r3, [pc, #508]	; (8009964 <__kernel_rem_pio2+0x334>)
 8009766:	ec51 0b10 	vmov	r0, r1, d0
 800976a:	2200      	movs	r2, #0
 800976c:	f7f6 feec 	bl	8000548 <__aeabi_dmul>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4630      	mov	r0, r6
 8009776:	4639      	mov	r1, r7
 8009778:	f7f6 fd2e 	bl	80001d8 <__aeabi_dsub>
 800977c:	460f      	mov	r7, r1
 800977e:	4606      	mov	r6, r0
 8009780:	f7f7 f97c 	bl	8000a7c <__aeabi_d2iz>
 8009784:	9007      	str	r0, [sp, #28]
 8009786:	f7f6 fe75 	bl	8000474 <__aeabi_i2d>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	4630      	mov	r0, r6
 8009790:	4639      	mov	r1, r7
 8009792:	f7f6 fd21 	bl	80001d8 <__aeabi_dsub>
 8009796:	f1ba 0f00 	cmp.w	sl, #0
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	dd70      	ble.n	8009882 <__kernel_rem_pio2+0x252>
 80097a0:	1e62      	subs	r2, r4, #1
 80097a2:	ab0c      	add	r3, sp, #48	; 0x30
 80097a4:	9d07      	ldr	r5, [sp, #28]
 80097a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80097aa:	f1ca 0118 	rsb	r1, sl, #24
 80097ae:	fa40 f301 	asr.w	r3, r0, r1
 80097b2:	441d      	add	r5, r3
 80097b4:	408b      	lsls	r3, r1
 80097b6:	1ac0      	subs	r0, r0, r3
 80097b8:	ab0c      	add	r3, sp, #48	; 0x30
 80097ba:	9507      	str	r5, [sp, #28]
 80097bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80097c0:	f1ca 0317 	rsb	r3, sl, #23
 80097c4:	fa40 f303 	asr.w	r3, r0, r3
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	9b02      	ldr	r3, [sp, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd66      	ble.n	800989e <__kernel_rem_pio2+0x26e>
 80097d0:	9b07      	ldr	r3, [sp, #28]
 80097d2:	2200      	movs	r2, #0
 80097d4:	3301      	adds	r3, #1
 80097d6:	9307      	str	r3, [sp, #28]
 80097d8:	4615      	mov	r5, r2
 80097da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80097de:	4294      	cmp	r4, r2
 80097e0:	f300 8099 	bgt.w	8009916 <__kernel_rem_pio2+0x2e6>
 80097e4:	f1ba 0f00 	cmp.w	sl, #0
 80097e8:	dd07      	ble.n	80097fa <__kernel_rem_pio2+0x1ca>
 80097ea:	f1ba 0f01 	cmp.w	sl, #1
 80097ee:	f000 80a5 	beq.w	800993c <__kernel_rem_pio2+0x30c>
 80097f2:	f1ba 0f02 	cmp.w	sl, #2
 80097f6:	f000 80c1 	beq.w	800997c <__kernel_rem_pio2+0x34c>
 80097fa:	9b02      	ldr	r3, [sp, #8]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d14e      	bne.n	800989e <__kernel_rem_pio2+0x26e>
 8009800:	4632      	mov	r2, r6
 8009802:	463b      	mov	r3, r7
 8009804:	4958      	ldr	r1, [pc, #352]	; (8009968 <__kernel_rem_pio2+0x338>)
 8009806:	2000      	movs	r0, #0
 8009808:	f7f6 fce6 	bl	80001d8 <__aeabi_dsub>
 800980c:	4606      	mov	r6, r0
 800980e:	460f      	mov	r7, r1
 8009810:	2d00      	cmp	r5, #0
 8009812:	d044      	beq.n	800989e <__kernel_rem_pio2+0x26e>
 8009814:	4650      	mov	r0, sl
 8009816:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009958 <__kernel_rem_pio2+0x328>
 800981a:	f000 fca9 	bl	800a170 <scalbn>
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	ec53 2b10 	vmov	r2, r3, d0
 8009826:	f7f6 fcd7 	bl	80001d8 <__aeabi_dsub>
 800982a:	4606      	mov	r6, r0
 800982c:	460f      	mov	r7, r1
 800982e:	e036      	b.n	800989e <__kernel_rem_pio2+0x26e>
 8009830:	4b4e      	ldr	r3, [pc, #312]	; (800996c <__kernel_rem_pio2+0x33c>)
 8009832:	2200      	movs	r2, #0
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f6 fe86 	bl	8000548 <__aeabi_dmul>
 800983c:	f7f7 f91e 	bl	8000a7c <__aeabi_d2iz>
 8009840:	f7f6 fe18 	bl	8000474 <__aeabi_i2d>
 8009844:	4b4a      	ldr	r3, [pc, #296]	; (8009970 <__kernel_rem_pio2+0x340>)
 8009846:	2200      	movs	r2, #0
 8009848:	4680      	mov	r8, r0
 800984a:	4689      	mov	r9, r1
 800984c:	f7f6 fe7c 	bl	8000548 <__aeabi_dmul>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f6 fcbe 	bl	80001d8 <__aeabi_dsub>
 800985c:	f7f7 f90e 	bl	8000a7c <__aeabi_d2iz>
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	f843 0b04 	str.w	r0, [r3], #4
 8009866:	3d01      	subs	r5, #1
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	ab70      	add	r3, sp, #448	; 0x1c0
 800986c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	4640      	mov	r0, r8
 8009876:	4649      	mov	r1, r9
 8009878:	f7f6 fcb0 	bl	80001dc <__adddf3>
 800987c:	4606      	mov	r6, r0
 800987e:	460f      	mov	r7, r1
 8009880:	e75b      	b.n	800973a <__kernel_rem_pio2+0x10a>
 8009882:	d105      	bne.n	8009890 <__kernel_rem_pio2+0x260>
 8009884:	1e63      	subs	r3, r4, #1
 8009886:	aa0c      	add	r2, sp, #48	; 0x30
 8009888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800988c:	15c3      	asrs	r3, r0, #23
 800988e:	e79b      	b.n	80097c8 <__kernel_rem_pio2+0x198>
 8009890:	4b38      	ldr	r3, [pc, #224]	; (8009974 <__kernel_rem_pio2+0x344>)
 8009892:	2200      	movs	r2, #0
 8009894:	f7f7 f8de 	bl	8000a54 <__aeabi_dcmpge>
 8009898:	2800      	cmp	r0, #0
 800989a:	d139      	bne.n	8009910 <__kernel_rem_pio2+0x2e0>
 800989c:	9002      	str	r0, [sp, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	2300      	movs	r3, #0
 80098a2:	4630      	mov	r0, r6
 80098a4:	4639      	mov	r1, r7
 80098a6:	f7f7 f8b7 	bl	8000a18 <__aeabi_dcmpeq>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f000 80b4 	beq.w	8009a18 <__kernel_rem_pio2+0x3e8>
 80098b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80098b4:	465b      	mov	r3, fp
 80098b6:	2200      	movs	r2, #0
 80098b8:	9904      	ldr	r1, [sp, #16]
 80098ba:	428b      	cmp	r3, r1
 80098bc:	da65      	bge.n	800998a <__kernel_rem_pio2+0x35a>
 80098be:	2a00      	cmp	r2, #0
 80098c0:	d07b      	beq.n	80099ba <__kernel_rem_pio2+0x38a>
 80098c2:	ab0c      	add	r3, sp, #48	; 0x30
 80098c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80098c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 80a0 	beq.w	8009a12 <__kernel_rem_pio2+0x3e2>
 80098d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009958 <__kernel_rem_pio2+0x328>
 80098d6:	4650      	mov	r0, sl
 80098d8:	f000 fc4a 	bl	800a170 <scalbn>
 80098dc:	4f23      	ldr	r7, [pc, #140]	; (800996c <__kernel_rem_pio2+0x33c>)
 80098de:	ec55 4b10 	vmov	r4, r5, d0
 80098e2:	46d8      	mov	r8, fp
 80098e4:	2600      	movs	r6, #0
 80098e6:	f1b8 0f00 	cmp.w	r8, #0
 80098ea:	f280 80cf 	bge.w	8009a8c <__kernel_rem_pio2+0x45c>
 80098ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009950 <__kernel_rem_pio2+0x320>
 80098f2:	465f      	mov	r7, fp
 80098f4:	f04f 0800 	mov.w	r8, #0
 80098f8:	2f00      	cmp	r7, #0
 80098fa:	f2c0 80fd 	blt.w	8009af8 <__kernel_rem_pio2+0x4c8>
 80098fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8009900:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009978 <__kernel_rem_pio2+0x348>
 8009904:	ec55 4b18 	vmov	r4, r5, d8
 8009908:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800990c:	2600      	movs	r6, #0
 800990e:	e0e5      	b.n	8009adc <__kernel_rem_pio2+0x4ac>
 8009910:	2302      	movs	r3, #2
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	e75c      	b.n	80097d0 <__kernel_rem_pio2+0x1a0>
 8009916:	f8db 3000 	ldr.w	r3, [fp]
 800991a:	b955      	cbnz	r5, 8009932 <__kernel_rem_pio2+0x302>
 800991c:	b123      	cbz	r3, 8009928 <__kernel_rem_pio2+0x2f8>
 800991e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009922:	f8cb 3000 	str.w	r3, [fp]
 8009926:	2301      	movs	r3, #1
 8009928:	3201      	adds	r2, #1
 800992a:	f10b 0b04 	add.w	fp, fp, #4
 800992e:	461d      	mov	r5, r3
 8009930:	e755      	b.n	80097de <__kernel_rem_pio2+0x1ae>
 8009932:	1acb      	subs	r3, r1, r3
 8009934:	f8cb 3000 	str.w	r3, [fp]
 8009938:	462b      	mov	r3, r5
 800993a:	e7f5      	b.n	8009928 <__kernel_rem_pio2+0x2f8>
 800993c:	1e62      	subs	r2, r4, #1
 800993e:	ab0c      	add	r3, sp, #48	; 0x30
 8009940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009944:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009948:	a90c      	add	r1, sp, #48	; 0x30
 800994a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800994e:	e754      	b.n	80097fa <__kernel_rem_pio2+0x1ca>
	...
 800995c:	3ff00000 	.word	0x3ff00000
 8009960:	0800a568 	.word	0x0800a568
 8009964:	40200000 	.word	0x40200000
 8009968:	3ff00000 	.word	0x3ff00000
 800996c:	3e700000 	.word	0x3e700000
 8009970:	41700000 	.word	0x41700000
 8009974:	3fe00000 	.word	0x3fe00000
 8009978:	0800a528 	.word	0x0800a528
 800997c:	1e62      	subs	r2, r4, #1
 800997e:	ab0c      	add	r3, sp, #48	; 0x30
 8009980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009984:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009988:	e7de      	b.n	8009948 <__kernel_rem_pio2+0x318>
 800998a:	a90c      	add	r1, sp, #48	; 0x30
 800998c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009990:	3b01      	subs	r3, #1
 8009992:	430a      	orrs	r2, r1
 8009994:	e790      	b.n	80098b8 <__kernel_rem_pio2+0x288>
 8009996:	3301      	adds	r3, #1
 8009998:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800999c:	2900      	cmp	r1, #0
 800999e:	d0fa      	beq.n	8009996 <__kernel_rem_pio2+0x366>
 80099a0:	9a08      	ldr	r2, [sp, #32]
 80099a2:	18e3      	adds	r3, r4, r3
 80099a4:	18a6      	adds	r6, r4, r2
 80099a6:	aa20      	add	r2, sp, #128	; 0x80
 80099a8:	1c65      	adds	r5, r4, #1
 80099aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80099ae:	9302      	str	r3, [sp, #8]
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	42ab      	cmp	r3, r5
 80099b4:	da04      	bge.n	80099c0 <__kernel_rem_pio2+0x390>
 80099b6:	461c      	mov	r4, r3
 80099b8:	e6b5      	b.n	8009726 <__kernel_rem_pio2+0xf6>
 80099ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099bc:	2301      	movs	r3, #1
 80099be:	e7eb      	b.n	8009998 <__kernel_rem_pio2+0x368>
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099c6:	f7f6 fd55 	bl	8000474 <__aeabi_i2d>
 80099ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80099ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d0:	46b3      	mov	fp, r6
 80099d2:	461c      	mov	r4, r3
 80099d4:	2700      	movs	r7, #0
 80099d6:	f04f 0800 	mov.w	r8, #0
 80099da:	f04f 0900 	mov.w	r9, #0
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	429f      	cmp	r7, r3
 80099e2:	dd06      	ble.n	80099f2 <__kernel_rem_pio2+0x3c2>
 80099e4:	ab70      	add	r3, sp, #448	; 0x1c0
 80099e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80099ea:	e9c3 8900 	strd	r8, r9, [r3]
 80099ee:	3501      	adds	r5, #1
 80099f0:	e7de      	b.n	80099b0 <__kernel_rem_pio2+0x380>
 80099f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80099f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80099fa:	f7f6 fda5 	bl	8000548 <__aeabi_dmul>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4640      	mov	r0, r8
 8009a04:	4649      	mov	r1, r9
 8009a06:	f7f6 fbe9 	bl	80001dc <__adddf3>
 8009a0a:	3701      	adds	r7, #1
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	4689      	mov	r9, r1
 8009a10:	e7e5      	b.n	80099de <__kernel_rem_pio2+0x3ae>
 8009a12:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009a16:	e754      	b.n	80098c2 <__kernel_rem_pio2+0x292>
 8009a18:	ec47 6b10 	vmov	d0, r6, r7
 8009a1c:	f1ca 0000 	rsb	r0, sl, #0
 8009a20:	f000 fba6 	bl	800a170 <scalbn>
 8009a24:	ec57 6b10 	vmov	r6, r7, d0
 8009a28:	4b9f      	ldr	r3, [pc, #636]	; (8009ca8 <__kernel_rem_pio2+0x678>)
 8009a2a:	ee10 0a10 	vmov	r0, s0
 8009a2e:	2200      	movs	r2, #0
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f7 f80f 	bl	8000a54 <__aeabi_dcmpge>
 8009a36:	b300      	cbz	r0, 8009a7a <__kernel_rem_pio2+0x44a>
 8009a38:	4b9c      	ldr	r3, [pc, #624]	; (8009cac <__kernel_rem_pio2+0x67c>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7f6 fd82 	bl	8000548 <__aeabi_dmul>
 8009a44:	f7f7 f81a 	bl	8000a7c <__aeabi_d2iz>
 8009a48:	4605      	mov	r5, r0
 8009a4a:	f7f6 fd13 	bl	8000474 <__aeabi_i2d>
 8009a4e:	4b96      	ldr	r3, [pc, #600]	; (8009ca8 <__kernel_rem_pio2+0x678>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	f7f6 fd79 	bl	8000548 <__aeabi_dmul>
 8009a56:	460b      	mov	r3, r1
 8009a58:	4602      	mov	r2, r0
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7f6 fbbb 	bl	80001d8 <__aeabi_dsub>
 8009a62:	f7f7 f80b 	bl	8000a7c <__aeabi_d2iz>
 8009a66:	f104 0b01 	add.w	fp, r4, #1
 8009a6a:	ab0c      	add	r3, sp, #48	; 0x30
 8009a6c:	f10a 0a18 	add.w	sl, sl, #24
 8009a70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a74:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009a78:	e72b      	b.n	80098d2 <__kernel_rem_pio2+0x2a2>
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fffd 	bl	8000a7c <__aeabi_d2iz>
 8009a82:	ab0c      	add	r3, sp, #48	; 0x30
 8009a84:	46a3      	mov	fp, r4
 8009a86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a8a:	e722      	b.n	80098d2 <__kernel_rem_pio2+0x2a2>
 8009a8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8009a8e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009a92:	ab0c      	add	r3, sp, #48	; 0x30
 8009a94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009a98:	f7f6 fcec 	bl	8000474 <__aeabi_i2d>
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	462b      	mov	r3, r5
 8009aa0:	f7f6 fd52 	bl	8000548 <__aeabi_dmul>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	e9c9 0100 	strd	r0, r1, [r9]
 8009aaa:	463b      	mov	r3, r7
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	f7f6 fd4a 	bl	8000548 <__aeabi_dmul>
 8009ab4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	e713      	b.n	80098e6 <__kernel_rem_pio2+0x2b6>
 8009abe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009ac2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009ac6:	f7f6 fd3f 	bl	8000548 <__aeabi_dmul>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 fb83 	bl	80001dc <__adddf3>
 8009ad6:	3601      	adds	r6, #1
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	429e      	cmp	r6, r3
 8009ae0:	dc01      	bgt.n	8009ae6 <__kernel_rem_pio2+0x4b6>
 8009ae2:	45b0      	cmp	r8, r6
 8009ae4:	daeb      	bge.n	8009abe <__kernel_rem_pio2+0x48e>
 8009ae6:	ab48      	add	r3, sp, #288	; 0x120
 8009ae8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009aec:	e9c3 4500 	strd	r4, r5, [r3]
 8009af0:	3f01      	subs	r7, #1
 8009af2:	f108 0801 	add.w	r8, r8, #1
 8009af6:	e6ff      	b.n	80098f8 <__kernel_rem_pio2+0x2c8>
 8009af8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	dc0b      	bgt.n	8009b16 <__kernel_rem_pio2+0x4e6>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dc6e      	bgt.n	8009be0 <__kernel_rem_pio2+0x5b0>
 8009b02:	d045      	beq.n	8009b90 <__kernel_rem_pio2+0x560>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	f003 0007 	and.w	r0, r3, #7
 8009b0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009b0e:	ecbd 8b02 	vpop	{d8}
 8009b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d1f3      	bne.n	8009b04 <__kernel_rem_pio2+0x4d4>
 8009b1c:	ab48      	add	r3, sp, #288	; 0x120
 8009b1e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009b22:	46d0      	mov	r8, sl
 8009b24:	46d9      	mov	r9, fp
 8009b26:	f1b9 0f00 	cmp.w	r9, #0
 8009b2a:	f1a8 0808 	sub.w	r8, r8, #8
 8009b2e:	dc64      	bgt.n	8009bfa <__kernel_rem_pio2+0x5ca>
 8009b30:	465c      	mov	r4, fp
 8009b32:	2c01      	cmp	r4, #1
 8009b34:	f1aa 0a08 	sub.w	sl, sl, #8
 8009b38:	dc7e      	bgt.n	8009c38 <__kernel_rem_pio2+0x608>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f1bb 0f01 	cmp.w	fp, #1
 8009b42:	f300 8097 	bgt.w	8009c74 <__kernel_rem_pio2+0x644>
 8009b46:	9b02      	ldr	r3, [sp, #8]
 8009b48:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8009b4c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f040 8099 	bne.w	8009c88 <__kernel_rem_pio2+0x658>
 8009b56:	9b01      	ldr	r3, [sp, #4]
 8009b58:	e9c3 5600 	strd	r5, r6, [r3]
 8009b5c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009b60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b64:	e7ce      	b.n	8009b04 <__kernel_rem_pio2+0x4d4>
 8009b66:	ab48      	add	r3, sp, #288	; 0x120
 8009b68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	f7f6 fb34 	bl	80001dc <__adddf3>
 8009b74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009b78:	f1bb 0f00 	cmp.w	fp, #0
 8009b7c:	daf3      	bge.n	8009b66 <__kernel_rem_pio2+0x536>
 8009b7e:	9b02      	ldr	r3, [sp, #8]
 8009b80:	b113      	cbz	r3, 8009b88 <__kernel_rem_pio2+0x558>
 8009b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b86:	4619      	mov	r1, r3
 8009b88:	9b01      	ldr	r3, [sp, #4]
 8009b8a:	e9c3 0100 	strd	r0, r1, [r3]
 8009b8e:	e7b9      	b.n	8009b04 <__kernel_rem_pio2+0x4d4>
 8009b90:	2000      	movs	r0, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	e7f0      	b.n	8009b78 <__kernel_rem_pio2+0x548>
 8009b96:	ab48      	add	r3, sp, #288	; 0x120
 8009b98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fb1c 	bl	80001dc <__adddf3>
 8009ba4:	3c01      	subs	r4, #1
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	daf5      	bge.n	8009b96 <__kernel_rem_pio2+0x566>
 8009baa:	9b02      	ldr	r3, [sp, #8]
 8009bac:	b1e3      	cbz	r3, 8009be8 <__kernel_rem_pio2+0x5b8>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bb4:	9c01      	ldr	r4, [sp, #4]
 8009bb6:	e9c4 2300 	strd	r2, r3, [r4]
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009bc2:	f7f6 fb09 	bl	80001d8 <__aeabi_dsub>
 8009bc6:	ad4a      	add	r5, sp, #296	; 0x128
 8009bc8:	2401      	movs	r4, #1
 8009bca:	45a3      	cmp	fp, r4
 8009bcc:	da0f      	bge.n	8009bee <__kernel_rem_pio2+0x5be>
 8009bce:	9b02      	ldr	r3, [sp, #8]
 8009bd0:	b113      	cbz	r3, 8009bd8 <__kernel_rem_pio2+0x5a8>
 8009bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	9b01      	ldr	r3, [sp, #4]
 8009bda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009bde:	e791      	b.n	8009b04 <__kernel_rem_pio2+0x4d4>
 8009be0:	465c      	mov	r4, fp
 8009be2:	2000      	movs	r0, #0
 8009be4:	2100      	movs	r1, #0
 8009be6:	e7de      	b.n	8009ba6 <__kernel_rem_pio2+0x576>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	e7e2      	b.n	8009bb4 <__kernel_rem_pio2+0x584>
 8009bee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009bf2:	f7f6 faf3 	bl	80001dc <__adddf3>
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	e7e7      	b.n	8009bca <__kernel_rem_pio2+0x59a>
 8009bfa:	e9d8 4500 	ldrd	r4, r5, [r8]
 8009bfe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009c02:	4620      	mov	r0, r4
 8009c04:	4632      	mov	r2, r6
 8009c06:	463b      	mov	r3, r7
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 fae7 	bl	80001dc <__adddf3>
 8009c0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4620      	mov	r0, r4
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7f6 fadd 	bl	80001d8 <__aeabi_dsub>
 8009c1e:	4632      	mov	r2, r6
 8009c20:	463b      	mov	r3, r7
 8009c22:	f7f6 fadb 	bl	80001dc <__adddf3>
 8009c26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c2a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8009c2e:	ed88 7b00 	vstr	d7, [r8]
 8009c32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009c36:	e776      	b.n	8009b26 <__kernel_rem_pio2+0x4f6>
 8009c38:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c3c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009c40:	4640      	mov	r0, r8
 8009c42:	4632      	mov	r2, r6
 8009c44:	463b      	mov	r3, r7
 8009c46:	4649      	mov	r1, r9
 8009c48:	f7f6 fac8 	bl	80001dc <__adddf3>
 8009c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4640      	mov	r0, r8
 8009c56:	4649      	mov	r1, r9
 8009c58:	f7f6 fabe 	bl	80001d8 <__aeabi_dsub>
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	463b      	mov	r3, r7
 8009c60:	f7f6 fabc 	bl	80001dc <__adddf3>
 8009c64:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c6c:	ed8a 7b00 	vstr	d7, [sl]
 8009c70:	3c01      	subs	r4, #1
 8009c72:	e75e      	b.n	8009b32 <__kernel_rem_pio2+0x502>
 8009c74:	ab48      	add	r3, sp, #288	; 0x120
 8009c76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f7f6 faad 	bl	80001dc <__adddf3>
 8009c82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009c86:	e75a      	b.n	8009b3e <__kernel_rem_pio2+0x50e>
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	601d      	str	r5, [r3, #0]
 8009c8e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009c92:	605c      	str	r4, [r3, #4]
 8009c94:	609f      	str	r7, [r3, #8]
 8009c96:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009c9a:	60d3      	str	r3, [r2, #12]
 8009c9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ca0:	6110      	str	r0, [r2, #16]
 8009ca2:	6153      	str	r3, [r2, #20]
 8009ca4:	e72e      	b.n	8009b04 <__kernel_rem_pio2+0x4d4>
 8009ca6:	bf00      	nop
 8009ca8:	41700000 	.word	0x41700000
 8009cac:	3e700000 	.word	0x3e700000

08009cb0 <__kernel_tan>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	ed2d 8b04 	vpush	{d8-d9}
 8009cb8:	ec5b ab10 	vmov	sl, fp, d0
 8009cbc:	4be2      	ldr	r3, [pc, #904]	; (800a048 <__kernel_tan+0x398>)
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009cc4:	429f      	cmp	r7, r3
 8009cc6:	ed8d 1b00 	vstr	d1, [sp]
 8009cca:	4606      	mov	r6, r0
 8009ccc:	f8cd b00c 	str.w	fp, [sp, #12]
 8009cd0:	dc24      	bgt.n	8009d1c <__kernel_tan+0x6c>
 8009cd2:	ee10 0a10 	vmov	r0, s0
 8009cd6:	4659      	mov	r1, fp
 8009cd8:	f7f6 fed0 	bl	8000a7c <__aeabi_d2iz>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d148      	bne.n	8009d72 <__kernel_tan+0xc2>
 8009ce0:	1c73      	adds	r3, r6, #1
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	433b      	orrs	r3, r7
 8009ce8:	d112      	bne.n	8009d10 <__kernel_tan+0x60>
 8009cea:	ec4b ab10 	vmov	d0, sl, fp
 8009cee:	f000 f9b3 	bl	800a058 <fabs>
 8009cf2:	49d6      	ldr	r1, [pc, #856]	; (800a04c <__kernel_tan+0x39c>)
 8009cf4:	ec53 2b10 	vmov	r2, r3, d0
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	f7f6 fd4f 	bl	800079c <__aeabi_ddiv>
 8009cfe:	4682      	mov	sl, r0
 8009d00:	468b      	mov	fp, r1
 8009d02:	ec4b ab10 	vmov	d0, sl, fp
 8009d06:	b005      	add	sp, #20
 8009d08:	ecbd 8b04 	vpop	{d8-d9}
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d10:	2e01      	cmp	r6, #1
 8009d12:	d0f6      	beq.n	8009d02 <__kernel_tan+0x52>
 8009d14:	49ce      	ldr	r1, [pc, #824]	; (800a050 <__kernel_tan+0x3a0>)
 8009d16:	465b      	mov	r3, fp
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7ee      	b.n	8009cfa <__kernel_tan+0x4a>
 8009d1c:	4bcd      	ldr	r3, [pc, #820]	; (800a054 <__kernel_tan+0x3a4>)
 8009d1e:	429f      	cmp	r7, r3
 8009d20:	dd27      	ble.n	8009d72 <__kernel_tan+0xc2>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da0a      	bge.n	8009d3e <__kernel_tan+0x8e>
 8009d28:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009d2c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d30:	469b      	mov	fp, r3
 8009d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d36:	e9cd 2300 	strd	r2, r3, [sp]
 8009d3a:	ee10 aa10 	vmov	sl, s0
 8009d3e:	4652      	mov	r2, sl
 8009d40:	465b      	mov	r3, fp
 8009d42:	a1a1      	add	r1, pc, #644	; (adr r1, 8009fc8 <__kernel_tan+0x318>)
 8009d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d48:	f7f6 fa46 	bl	80001d8 <__aeabi_dsub>
 8009d4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d50:	4604      	mov	r4, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	a19e      	add	r1, pc, #632	; (adr r1, 8009fd0 <__kernel_tan+0x320>)
 8009d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d5a:	f7f6 fa3d 	bl	80001d8 <__aeabi_dsub>
 8009d5e:	4622      	mov	r2, r4
 8009d60:	462b      	mov	r3, r5
 8009d62:	f7f6 fa3b 	bl	80001dc <__adddf3>
 8009d66:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8009fd8 <__kernel_tan+0x328>
 8009d6a:	ed8d 7b00 	vstr	d7, [sp]
 8009d6e:	4682      	mov	sl, r0
 8009d70:	468b      	mov	fp, r1
 8009d72:	4652      	mov	r2, sl
 8009d74:	465b      	mov	r3, fp
 8009d76:	4650      	mov	r0, sl
 8009d78:	4659      	mov	r1, fp
 8009d7a:	f7f6 fbe5 	bl	8000548 <__aeabi_dmul>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4680      	mov	r8, r0
 8009d84:	4689      	mov	r9, r1
 8009d86:	f7f6 fbdf 	bl	8000548 <__aeabi_dmul>
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	460d      	mov	r5, r1
 8009d90:	464b      	mov	r3, r9
 8009d92:	4650      	mov	r0, sl
 8009d94:	4659      	mov	r1, fp
 8009d96:	f7f6 fbd7 	bl	8000548 <__aeabi_dmul>
 8009d9a:	a391      	add	r3, pc, #580	; (adr r3, 8009fe0 <__kernel_tan+0x330>)
 8009d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da0:	ec41 0b18 	vmov	d8, r0, r1
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fbce 	bl	8000548 <__aeabi_dmul>
 8009dac:	a38e      	add	r3, pc, #568	; (adr r3, 8009fe8 <__kernel_tan+0x338>)
 8009dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db2:	f7f6 fa13 	bl	80001dc <__adddf3>
 8009db6:	4622      	mov	r2, r4
 8009db8:	462b      	mov	r3, r5
 8009dba:	f7f6 fbc5 	bl	8000548 <__aeabi_dmul>
 8009dbe:	a38c      	add	r3, pc, #560	; (adr r3, 8009ff0 <__kernel_tan+0x340>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f7f6 fa0a 	bl	80001dc <__adddf3>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	462b      	mov	r3, r5
 8009dcc:	f7f6 fbbc 	bl	8000548 <__aeabi_dmul>
 8009dd0:	a389      	add	r3, pc, #548	; (adr r3, 8009ff8 <__kernel_tan+0x348>)
 8009dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd6:	f7f6 fa01 	bl	80001dc <__adddf3>
 8009dda:	4622      	mov	r2, r4
 8009ddc:	462b      	mov	r3, r5
 8009dde:	f7f6 fbb3 	bl	8000548 <__aeabi_dmul>
 8009de2:	a387      	add	r3, pc, #540	; (adr r3, 800a000 <__kernel_tan+0x350>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 f9f8 	bl	80001dc <__adddf3>
 8009dec:	4622      	mov	r2, r4
 8009dee:	462b      	mov	r3, r5
 8009df0:	f7f6 fbaa 	bl	8000548 <__aeabi_dmul>
 8009df4:	a384      	add	r3, pc, #528	; (adr r3, 800a008 <__kernel_tan+0x358>)
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	f7f6 f9ef 	bl	80001dc <__adddf3>
 8009dfe:	4642      	mov	r2, r8
 8009e00:	464b      	mov	r3, r9
 8009e02:	f7f6 fba1 	bl	8000548 <__aeabi_dmul>
 8009e06:	a382      	add	r3, pc, #520	; (adr r3, 800a010 <__kernel_tan+0x360>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	ec41 0b19 	vmov	d9, r0, r1
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 fb98 	bl	8000548 <__aeabi_dmul>
 8009e18:	a37f      	add	r3, pc, #508	; (adr r3, 800a018 <__kernel_tan+0x368>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 f9dd 	bl	80001dc <__adddf3>
 8009e22:	4622      	mov	r2, r4
 8009e24:	462b      	mov	r3, r5
 8009e26:	f7f6 fb8f 	bl	8000548 <__aeabi_dmul>
 8009e2a:	a37d      	add	r3, pc, #500	; (adr r3, 800a020 <__kernel_tan+0x370>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 f9d4 	bl	80001dc <__adddf3>
 8009e34:	4622      	mov	r2, r4
 8009e36:	462b      	mov	r3, r5
 8009e38:	f7f6 fb86 	bl	8000548 <__aeabi_dmul>
 8009e3c:	a37a      	add	r3, pc, #488	; (adr r3, 800a028 <__kernel_tan+0x378>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	f7f6 f9cb 	bl	80001dc <__adddf3>
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	f7f6 fb7d 	bl	8000548 <__aeabi_dmul>
 8009e4e:	a378      	add	r3, pc, #480	; (adr r3, 800a030 <__kernel_tan+0x380>)
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f7f6 f9c2 	bl	80001dc <__adddf3>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	f7f6 fb74 	bl	8000548 <__aeabi_dmul>
 8009e60:	a375      	add	r3, pc, #468	; (adr r3, 800a038 <__kernel_tan+0x388>)
 8009e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e66:	f7f6 f9b9 	bl	80001dc <__adddf3>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	ec51 0b19 	vmov	r0, r1, d9
 8009e72:	f7f6 f9b3 	bl	80001dc <__adddf3>
 8009e76:	ec53 2b18 	vmov	r2, r3, d8
 8009e7a:	f7f6 fb65 	bl	8000548 <__aeabi_dmul>
 8009e7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e82:	f7f6 f9ab 	bl	80001dc <__adddf3>
 8009e86:	4642      	mov	r2, r8
 8009e88:	464b      	mov	r3, r9
 8009e8a:	f7f6 fb5d 	bl	8000548 <__aeabi_dmul>
 8009e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e92:	f7f6 f9a3 	bl	80001dc <__adddf3>
 8009e96:	a36a      	add	r3, pc, #424	; (adr r3, 800a040 <__kernel_tan+0x390>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	ec51 0b18 	vmov	r0, r1, d8
 8009ea4:	f7f6 fb50 	bl	8000548 <__aeabi_dmul>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 f996 	bl	80001dc <__adddf3>
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	ec41 0b18 	vmov	d8, r0, r1
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	4659      	mov	r1, fp
 8009eba:	4650      	mov	r0, sl
 8009ebc:	f7f6 f98e 	bl	80001dc <__adddf3>
 8009ec0:	4b64      	ldr	r3, [pc, #400]	; (800a054 <__kernel_tan+0x3a4>)
 8009ec2:	429f      	cmp	r7, r3
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	dd3e      	ble.n	8009f48 <__kernel_tan+0x298>
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7f6 fad2 	bl	8000474 <__aeabi_i2d>
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4680      	mov	r8, r0
 8009ed4:	4689      	mov	r9, r1
 8009ed6:	462b      	mov	r3, r5
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4629      	mov	r1, r5
 8009edc:	f7f6 fb34 	bl	8000548 <__aeabi_dmul>
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f976 	bl	80001dc <__adddf3>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fc50 	bl	800079c <__aeabi_ddiv>
 8009efc:	ec53 2b18 	vmov	r2, r3, d8
 8009f00:	f7f6 f96a 	bl	80001d8 <__aeabi_dsub>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4650      	mov	r0, sl
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	f7f6 f964 	bl	80001d8 <__aeabi_dsub>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	f7f6 f962 	bl	80001dc <__adddf3>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 f95a 	bl	80001d8 <__aeabi_dsub>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8009f2a:	f00a 0a02 	and.w	sl, sl, #2
 8009f2e:	4604      	mov	r4, r0
 8009f30:	f1ca 0001 	rsb	r0, sl, #1
 8009f34:	460d      	mov	r5, r1
 8009f36:	f7f6 fa9d 	bl	8000474 <__aeabi_i2d>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fb01 	bl	8000548 <__aeabi_dmul>
 8009f46:	e6da      	b.n	8009cfe <__kernel_tan+0x4e>
 8009f48:	2e01      	cmp	r6, #1
 8009f4a:	d038      	beq.n	8009fbe <__kernel_tan+0x30e>
 8009f4c:	460f      	mov	r7, r1
 8009f4e:	4689      	mov	r9, r1
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	2000      	movs	r0, #0
 8009f56:	493e      	ldr	r1, [pc, #248]	; (800a050 <__kernel_tan+0x3a0>)
 8009f58:	f7f6 fc20 	bl	800079c <__aeabi_ddiv>
 8009f5c:	2600      	movs	r6, #0
 8009f5e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f62:	4652      	mov	r2, sl
 8009f64:	465b      	mov	r3, fp
 8009f66:	4630      	mov	r0, r6
 8009f68:	4639      	mov	r1, r7
 8009f6a:	f7f6 f935 	bl	80001d8 <__aeabi_dsub>
 8009f6e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	ec51 0b18 	vmov	r0, r1, d8
 8009f7a:	f7f6 f92d 	bl	80001d8 <__aeabi_dsub>
 8009f7e:	4632      	mov	r2, r6
 8009f80:	462b      	mov	r3, r5
 8009f82:	f7f6 fae1 	bl	8000548 <__aeabi_dmul>
 8009f86:	46b0      	mov	r8, r6
 8009f88:	460f      	mov	r7, r1
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	4642      	mov	r2, r8
 8009f8e:	462b      	mov	r3, r5
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 fad8 	bl	8000548 <__aeabi_dmul>
 8009f98:	4b2c      	ldr	r3, [pc, #176]	; (800a04c <__kernel_tan+0x39c>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 f91e 	bl	80001dc <__adddf3>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	4639      	mov	r1, r7
 8009fa8:	f7f6 f918 	bl	80001dc <__adddf3>
 8009fac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb0:	f7f6 faca 	bl	8000548 <__aeabi_dmul>
 8009fb4:	4642      	mov	r2, r8
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	f7f6 f910 	bl	80001dc <__adddf3>
 8009fbc:	e69f      	b.n	8009cfe <__kernel_tan+0x4e>
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	e69e      	b.n	8009d02 <__kernel_tan+0x52>
 8009fc4:	f3af 8000 	nop.w
 8009fc8:	54442d18 	.word	0x54442d18
 8009fcc:	3fe921fb 	.word	0x3fe921fb
 8009fd0:	33145c07 	.word	0x33145c07
 8009fd4:	3c81a626 	.word	0x3c81a626
	...
 8009fe0:	74bf7ad4 	.word	0x74bf7ad4
 8009fe4:	3efb2a70 	.word	0x3efb2a70
 8009fe8:	32f0a7e9 	.word	0x32f0a7e9
 8009fec:	3f12b80f 	.word	0x3f12b80f
 8009ff0:	1a8d1068 	.word	0x1a8d1068
 8009ff4:	3f3026f7 	.word	0x3f3026f7
 8009ff8:	fee08315 	.word	0xfee08315
 8009ffc:	3f57dbc8 	.word	0x3f57dbc8
 800a000:	e96e8493 	.word	0xe96e8493
 800a004:	3f8226e3 	.word	0x3f8226e3
 800a008:	1bb341fe 	.word	0x1bb341fe
 800a00c:	3faba1ba 	.word	0x3faba1ba
 800a010:	db605373 	.word	0xdb605373
 800a014:	bef375cb 	.word	0xbef375cb
 800a018:	a03792a6 	.word	0xa03792a6
 800a01c:	3f147e88 	.word	0x3f147e88
 800a020:	f2f26501 	.word	0xf2f26501
 800a024:	3f4344d8 	.word	0x3f4344d8
 800a028:	c9560328 	.word	0xc9560328
 800a02c:	3f6d6d22 	.word	0x3f6d6d22
 800a030:	8406d637 	.word	0x8406d637
 800a034:	3f9664f4 	.word	0x3f9664f4
 800a038:	1110fe7a 	.word	0x1110fe7a
 800a03c:	3fc11111 	.word	0x3fc11111
 800a040:	55555563 	.word	0x55555563
 800a044:	3fd55555 	.word	0x3fd55555
 800a048:	3e2fffff 	.word	0x3e2fffff
 800a04c:	3ff00000 	.word	0x3ff00000
 800a050:	bff00000 	.word	0xbff00000
 800a054:	3fe59427 	.word	0x3fe59427

0800a058 <fabs>:
 800a058:	ec51 0b10 	vmov	r0, r1, d0
 800a05c:	ee10 2a10 	vmov	r2, s0
 800a060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a064:	ec43 2b10 	vmov	d0, r2, r3
 800a068:	4770      	bx	lr
 800a06a:	0000      	movs	r0, r0
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <floor>:
 800a070:	ec51 0b10 	vmov	r0, r1, d0
 800a074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a078:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a07c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a080:	2e13      	cmp	r6, #19
 800a082:	ee10 5a10 	vmov	r5, s0
 800a086:	ee10 8a10 	vmov	r8, s0
 800a08a:	460c      	mov	r4, r1
 800a08c:	dc32      	bgt.n	800a0f4 <floor+0x84>
 800a08e:	2e00      	cmp	r6, #0
 800a090:	da14      	bge.n	800a0bc <floor+0x4c>
 800a092:	a333      	add	r3, pc, #204	; (adr r3, 800a160 <floor+0xf0>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 f8a0 	bl	80001dc <__adddf3>
 800a09c:	2200      	movs	r2, #0
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f7f6 fce2 	bl	8000a68 <__aeabi_dcmpgt>
 800a0a4:	b138      	cbz	r0, 800a0b6 <floor+0x46>
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	da57      	bge.n	800a15a <floor+0xea>
 800a0aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a0ae:	431d      	orrs	r5, r3
 800a0b0:	d001      	beq.n	800a0b6 <floor+0x46>
 800a0b2:	4c2d      	ldr	r4, [pc, #180]	; (800a168 <floor+0xf8>)
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	e025      	b.n	800a108 <floor+0x98>
 800a0bc:	4f2b      	ldr	r7, [pc, #172]	; (800a16c <floor+0xfc>)
 800a0be:	4137      	asrs	r7, r6
 800a0c0:	ea01 0307 	and.w	r3, r1, r7
 800a0c4:	4303      	orrs	r3, r0
 800a0c6:	d01f      	beq.n	800a108 <floor+0x98>
 800a0c8:	a325      	add	r3, pc, #148	; (adr r3, 800a160 <floor+0xf0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f885 	bl	80001dc <__adddf3>
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f7f6 fcc7 	bl	8000a68 <__aeabi_dcmpgt>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0eb      	beq.n	800a0b6 <floor+0x46>
 800a0de:	2c00      	cmp	r4, #0
 800a0e0:	bfbe      	ittt	lt
 800a0e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a0e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800a0ea:	19a4      	addlt	r4, r4, r6
 800a0ec:	ea24 0407 	bic.w	r4, r4, r7
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	e7e0      	b.n	800a0b6 <floor+0x46>
 800a0f4:	2e33      	cmp	r6, #51	; 0x33
 800a0f6:	dd0b      	ble.n	800a110 <floor+0xa0>
 800a0f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a0fc:	d104      	bne.n	800a108 <floor+0x98>
 800a0fe:	ee10 2a10 	vmov	r2, s0
 800a102:	460b      	mov	r3, r1
 800a104:	f7f6 f86a 	bl	80001dc <__adddf3>
 800a108:	ec41 0b10 	vmov	d0, r0, r1
 800a10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a110:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a118:	fa23 f707 	lsr.w	r7, r3, r7
 800a11c:	4207      	tst	r7, r0
 800a11e:	d0f3      	beq.n	800a108 <floor+0x98>
 800a120:	a30f      	add	r3, pc, #60	; (adr r3, 800a160 <floor+0xf0>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 f859 	bl	80001dc <__adddf3>
 800a12a:	2200      	movs	r2, #0
 800a12c:	2300      	movs	r3, #0
 800a12e:	f7f6 fc9b 	bl	8000a68 <__aeabi_dcmpgt>
 800a132:	2800      	cmp	r0, #0
 800a134:	d0bf      	beq.n	800a0b6 <floor+0x46>
 800a136:	2c00      	cmp	r4, #0
 800a138:	da02      	bge.n	800a140 <floor+0xd0>
 800a13a:	2e14      	cmp	r6, #20
 800a13c:	d103      	bne.n	800a146 <floor+0xd6>
 800a13e:	3401      	adds	r4, #1
 800a140:	ea25 0507 	bic.w	r5, r5, r7
 800a144:	e7b7      	b.n	800a0b6 <floor+0x46>
 800a146:	2301      	movs	r3, #1
 800a148:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a14c:	fa03 f606 	lsl.w	r6, r3, r6
 800a150:	4435      	add	r5, r6
 800a152:	4545      	cmp	r5, r8
 800a154:	bf38      	it	cc
 800a156:	18e4      	addcc	r4, r4, r3
 800a158:	e7f2      	b.n	800a140 <floor+0xd0>
 800a15a:	2500      	movs	r5, #0
 800a15c:	462c      	mov	r4, r5
 800a15e:	e7aa      	b.n	800a0b6 <floor+0x46>
 800a160:	8800759c 	.word	0x8800759c
 800a164:	7e37e43c 	.word	0x7e37e43c
 800a168:	bff00000 	.word	0xbff00000
 800a16c:	000fffff 	.word	0x000fffff

0800a170 <scalbn>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	ec55 4b10 	vmov	r4, r5, d0
 800a176:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a17a:	4606      	mov	r6, r0
 800a17c:	462b      	mov	r3, r5
 800a17e:	b99a      	cbnz	r2, 800a1a8 <scalbn+0x38>
 800a180:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a184:	4323      	orrs	r3, r4
 800a186:	d036      	beq.n	800a1f6 <scalbn+0x86>
 800a188:	4b39      	ldr	r3, [pc, #228]	; (800a270 <scalbn+0x100>)
 800a18a:	4629      	mov	r1, r5
 800a18c:	ee10 0a10 	vmov	r0, s0
 800a190:	2200      	movs	r2, #0
 800a192:	f7f6 f9d9 	bl	8000548 <__aeabi_dmul>
 800a196:	4b37      	ldr	r3, [pc, #220]	; (800a274 <scalbn+0x104>)
 800a198:	429e      	cmp	r6, r3
 800a19a:	4604      	mov	r4, r0
 800a19c:	460d      	mov	r5, r1
 800a19e:	da10      	bge.n	800a1c2 <scalbn+0x52>
 800a1a0:	a32b      	add	r3, pc, #172	; (adr r3, 800a250 <scalbn+0xe0>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e03a      	b.n	800a21e <scalbn+0xae>
 800a1a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a1ac:	428a      	cmp	r2, r1
 800a1ae:	d10c      	bne.n	800a1ca <scalbn+0x5a>
 800a1b0:	ee10 2a10 	vmov	r2, s0
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 f810 	bl	80001dc <__adddf3>
 800a1bc:	4604      	mov	r4, r0
 800a1be:	460d      	mov	r5, r1
 800a1c0:	e019      	b.n	800a1f6 <scalbn+0x86>
 800a1c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	3a36      	subs	r2, #54	; 0x36
 800a1ca:	4432      	add	r2, r6
 800a1cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1d0:	428a      	cmp	r2, r1
 800a1d2:	dd08      	ble.n	800a1e6 <scalbn+0x76>
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	a120      	add	r1, pc, #128	; (adr r1, 800a258 <scalbn+0xe8>)
 800a1d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1dc:	da1c      	bge.n	800a218 <scalbn+0xa8>
 800a1de:	a120      	add	r1, pc, #128	; (adr r1, 800a260 <scalbn+0xf0>)
 800a1e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e4:	e018      	b.n	800a218 <scalbn+0xa8>
 800a1e6:	2a00      	cmp	r2, #0
 800a1e8:	dd08      	ble.n	800a1fc <scalbn+0x8c>
 800a1ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1f6:	ec45 4b10 	vmov	d0, r4, r5
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a200:	da19      	bge.n	800a236 <scalbn+0xc6>
 800a202:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a206:	429e      	cmp	r6, r3
 800a208:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a20c:	dd0a      	ble.n	800a224 <scalbn+0xb4>
 800a20e:	a112      	add	r1, pc, #72	; (adr r1, 800a258 <scalbn+0xe8>)
 800a210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e2      	bne.n	800a1de <scalbn+0x6e>
 800a218:	a30f      	add	r3, pc, #60	; (adr r3, 800a258 <scalbn+0xe8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f993 	bl	8000548 <__aeabi_dmul>
 800a222:	e7cb      	b.n	800a1bc <scalbn+0x4c>
 800a224:	a10a      	add	r1, pc, #40	; (adr r1, 800a250 <scalbn+0xe0>)
 800a226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0b8      	beq.n	800a1a0 <scalbn+0x30>
 800a22e:	a10e      	add	r1, pc, #56	; (adr r1, 800a268 <scalbn+0xf8>)
 800a230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a234:	e7b4      	b.n	800a1a0 <scalbn+0x30>
 800a236:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a23a:	3236      	adds	r2, #54	; 0x36
 800a23c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a240:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a244:	4620      	mov	r0, r4
 800a246:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <scalbn+0x108>)
 800a248:	2200      	movs	r2, #0
 800a24a:	e7e8      	b.n	800a21e <scalbn+0xae>
 800a24c:	f3af 8000 	nop.w
 800a250:	c2f8f359 	.word	0xc2f8f359
 800a254:	01a56e1f 	.word	0x01a56e1f
 800a258:	8800759c 	.word	0x8800759c
 800a25c:	7e37e43c 	.word	0x7e37e43c
 800a260:	8800759c 	.word	0x8800759c
 800a264:	fe37e43c 	.word	0xfe37e43c
 800a268:	c2f8f359 	.word	0xc2f8f359
 800a26c:	81a56e1f 	.word	0x81a56e1f
 800a270:	43500000 	.word	0x43500000
 800a274:	ffff3cb0 	.word	0xffff3cb0
 800a278:	3c900000 	.word	0x3c900000

0800a27c <_init>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	bf00      	nop
 800a280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a282:	bc08      	pop	{r3}
 800a284:	469e      	mov	lr, r3
 800a286:	4770      	bx	lr

0800a288 <_fini>:
 800a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28a:	bf00      	nop
 800a28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28e:	bc08      	pop	{r3}
 800a290:	469e      	mov	lr, r3
 800a292:	4770      	bx	lr
