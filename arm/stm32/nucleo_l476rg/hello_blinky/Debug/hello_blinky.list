
hello_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c8  080060c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d0  080060d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019fc  20000010  080060e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  080060e8  00021a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be16  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033da  00000000  00000000  0003be56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  00040858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032cf  00000000  00000000  00041d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e97  00000000  00000000  00045027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd582  00000000  00000000  0005bebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d9c  00000000  00000000  00159494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006020 	.word	0x08006020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006020 	.word	0x08006020

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa8a 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f818 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8bc 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f88a 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004dc:	f003 f814 	bl	8003508 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <main+0x30>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <main+0x34>)
 80004e6:	f003 f859 	bl	800359c <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x38>)
 80004ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f0:	f003 f82e 	bl	8003550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  for (;;)
 80004f4:	e7fe      	b.n	80004f4 <main+0x2c>
 80004f6:	bf00      	nop
 80004f8:	0800605c 	.word	0x0800605c
 80004fc:	08000721 	.word	0x08000721
 8000500:	200018f4 	.word	0x200018f4

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b0b8      	sub	sp, #224	; 0xe0
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fd7c 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2288      	movs	r2, #136	; 0x88
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 fd6e 	bl	8006010 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	2310      	movs	r3, #16
 8000544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000548:	2302      	movs	r3, #2
 800054a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800055a:	230a      	movs	r3, #10
 800055c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000560:	2307      	movs	r3, #7
 8000562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fd96 	bl	80010a8 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000582:	f000 f8ed 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a8:	2104      	movs	r1, #4
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f962 	bl	8001874 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005b6:	f000 f8d3 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005be:	2300      	movs	r3, #0
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	463b      	mov	r3, r7
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fb8d 	bl	8001ce4 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005d0:	f000 f8c6 	bl	8000760 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d8:	f000 fd10 	bl	8000ffc <HAL_PWREx_ControlVoltageScaling>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005e2:	f000 f8bd 	bl	8000760 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	37e0      	adds	r7, #224	; 0xe0
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART2_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000634:	f002 fae4 	bl	8002c00 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f88f 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200018f8 	.word	0x200018f8
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a24      	ldr	r2, [pc, #144]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0xc4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_GPIO_Init+0xc4>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_GPIO_Init+0xc4>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f000 fc55 	bl	8000f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_GPIO_Init+0xc8>)
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_GPIO_Init+0xcc>)
 80006e8:	f000 fa9e 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fa8f 	bl	8000c28 <HAL_GPIO_Init>

}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000
 8000718:	10210000 	.word	0x10210000
 800071c:	48000800 	.word	0x48000800

08000720 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000728:	2120      	movs	r1, #32
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fc3d 	bl	8000fac <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000736:	f002 ffc3 	bl	80036c0 <osDelay>
  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800073a:	e7f5      	b.n	8000728 <StartDefaultTask+0x8>

0800073c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d101      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074e:	f000 f969 	bl	8000a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40001000 	.word	0x40001000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_MspInit+0x4c>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6613      	str	r3, [r2, #96]	; 0x60
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_MspInit+0x4c>)
 8000780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <HAL_MspInit+0x4c>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_MspInit+0x4c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	6593      	str	r3, [r2, #88]	; 0x58
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 fa13 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_UART_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d128      	bne.n	8000830 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <HAL_UART_MspInit+0x80>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <HAL_UART_MspInit+0x80>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <HAL_UART_MspInit+0x80>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_UART_MspInit+0x80>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_UART_MspInit+0x80>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_UART_MspInit+0x80>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080e:	230c      	movs	r3, #12
 8000810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081e:	2307      	movs	r3, #7
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 f9fc 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	2036      	movs	r0, #54	; 0x36
 8000856:	f000 f9bd 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800085a:	2036      	movs	r0, #54	; 0x36
 800085c:	f000 f9d6 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_InitTick+0x9c>)
 8000862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_InitTick+0x9c>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6593      	str	r3, [r2, #88]	; 0x58
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_InitTick+0x9c>)
 800086e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f99c 	bl	8001bc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f001 f96e 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 800088c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <HAL_InitTick+0xa0>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3b01      	subs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_InitTick+0xa4>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_InitTick+0xa8>)
 80008a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_InitTick+0xa4>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_InitTick+0xa4>)
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_InitTick+0xa4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_InitTick+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_InitTick+0xa4>)
 80008be:	f001 fecd 	bl	800265c <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <HAL_InitTick+0xa4>)
 80008ca:	f001 ff29 	bl	8002720 <HAL_TIM_Base_Start_IT>
 80008ce:	4603      	mov	r3, r0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	2000197c 	.word	0x2000197c
 80008e8:	40001000 	.word	0x40001000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <TIM6_DAC_IRQHandler+0x10>)
 800091e:	f001 ff6f 	bl	8002800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000197c 	.word	0x2000197c

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <SystemInit+0x5c>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <SystemInit+0x5c>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x60>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <SystemInit+0x60>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <SystemInit+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <SystemInit+0x60>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0d      	ldr	r2, [pc, #52]	; (800098c <SystemInit+0x60>)
 8000958:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800095c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000960:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <SystemInit+0x60>)
 8000964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000968:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <SystemInit+0x60>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <SystemInit+0x60>)
 8000970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000974:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <SystemInit+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	40021000 	.word	0x40021000

08000990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000994:	f7ff ffca 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000998:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800099a:	e003      	b.n	80009a4 <LoopCopyDataInit>

0800099c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800099e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009a2:	3104      	adds	r1, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009ac:	d3f6      	bcc.n	800099c <CopyDataInit>
	ldr	r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009b0:	e002      	b.n	80009b8 <LoopFillZerobss>

080009b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009b4:	f842 3b04 	str.w	r3, [r2], #4

080009b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <LoopForever+0x16>)
	cmp	r2, r3
 80009ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009bc:	d3f9      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009be:	f005 faf5 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c2:	f7ff fd81 	bl	80004c8 <main>

080009c6 <LoopForever>:

LoopForever:
    b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009cc:	080060d8 	.word	0x080060d8
	ldr	r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009d4:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80009d8:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80009dc:	20001a0c 	.word	0x20001a0c

080009e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_2_IRQHandler>
	...

080009e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_Init+0x3c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <HAL_Init+0x3c>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f000 f8df 	bl	8000bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff ff1d 	bl	8000840 <HAL_InitTick>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	e001      	b.n	8000a16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a12:	f7ff feab 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200019c8 	.word	0x200019c8

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	200019c8 	.word	0x200019c8

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff4c 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be6:	f7ff ff61 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f7ff ffb1 	bl	8000b58 <NVIC_EncodePriority>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff80 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff54 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	e17f      	b.n	8000f38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8171 	beq.w	8000f32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d00b      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	2b11      	cmp	r3, #17
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b12      	cmp	r3, #18
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d118      	bne.n	8000d10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x128>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80ac 	beq.w	8000f32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a5e      	ldr	r2, [pc, #376]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b5c      	ldr	r3, [pc, #368]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df2:	4a5a      	ldr	r2, [pc, #360]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1c:	d025      	beq.n	8000e6a <HAL_GPIO_Init+0x242>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <HAL_GPIO_Init+0x338>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01f      	beq.n	8000e66 <HAL_GPIO_Init+0x23e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4e      	ldr	r2, [pc, #312]	; (8000f64 <HAL_GPIO_Init+0x33c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x23a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4d      	ldr	r2, [pc, #308]	; (8000f68 <HAL_GPIO_Init+0x340>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x236>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4c      	ldr	r2, [pc, #304]	; (8000f6c <HAL_GPIO_Init+0x344>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x232>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4b      	ldr	r2, [pc, #300]	; (8000f70 <HAL_GPIO_Init+0x348>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x22e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4a      	ldr	r2, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x22a>
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e00c      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e00a      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e56:	2305      	movs	r3, #5
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7c:	4937      	ldr	r1, [pc, #220]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eae:	4a32      	ldr	r2, [pc, #200]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f02:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_GPIO_Init+0x350>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f47f ae78 	bne.w	8000c38 <HAL_GPIO_Init+0x10>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	48000400 	.word	0x48000400
 8000f64:	48000800 	.word	0x48000800
 8000f68:	48000c00 	.word	0x48000c00
 8000f6c:	48001000 	.word	0x48001000
 8000f70:	48001400 	.word	0x48001400
 8000f74:	48001800 	.word	0x48001800
 8000f78:	40010400 	.word	0x40010400

08000f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f8c:	787b      	ldrb	r3, [r7, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f92:	887a      	ldrh	r2, [r7, #2]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43d9      	mvns	r1, r3
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	400b      	ands	r3, r1
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40007000 	.word	0x40007000

08000ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800100a:	d130      	bne.n	800106e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001018:	d038      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001022:	4a1e      	ldr	r2, [pc, #120]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2232      	movs	r2, #50	; 0x32
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	0c9b      	lsrs	r3, r3, #18
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001040:	e002      	b.n	8001048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	3b01      	subs	r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001054:	d102      	bne.n	800105c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f2      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001068:	d110      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e00f      	b.n	800108e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	d007      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000
 80010a0:	20000000 	.word	0x20000000
 80010a4:	431bde83 	.word	0x431bde83

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e3d4      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4ba1      	ldr	r3, [pc, #644]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 030c 	and.w	r3, r3, #12
 80010c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010c4:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e4 	beq.w	80012a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_RCC_OscConfig+0x4a>
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b0c      	cmp	r3, #12
 80010e6:	f040 808b 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8087 	bne.w	8001200 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010f2:	4b93      	ldr	r3, [pc, #588]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x62>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e3ac      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1a      	ldr	r2, [r3, #32]
 800110e:	4b8c      	ldr	r3, [pc, #560]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <HAL_RCC_OscConfig+0x7c>
 800111a:	4b89      	ldr	r3, [pc, #548]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001122:	e005      	b.n	8001130 <HAL_RCC_OscConfig+0x88>
 8001124:	4b86      	ldr	r3, [pc, #536]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001130:	4293      	cmp	r3, r2
 8001132:	d223      	bcs.n	800117c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fd73 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e38d      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4b7d      	ldr	r3, [pc, #500]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a7c      	ldr	r2, [pc, #496]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b7a      	ldr	r3, [pc, #488]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4977      	ldr	r1, [pc, #476]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b76      	ldr	r3, [pc, #472]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	4972      	ldr	r1, [pc, #456]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e025      	b.n	80011c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117c:	4b70      	ldr	r3, [pc, #448]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	496a      	ldr	r1, [pc, #424]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119a:	4b69      	ldr	r3, [pc, #420]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	4965      	ldr	r1, [pc, #404]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fd33 	bl	8001c24 <RCC_SetFlashLatencyFromMSIRange>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e34d      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011c8:	f000 fc36 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	495a      	ldr	r1, [pc, #360]	; (8001344 <HAL_RCC_OscConfig+0x29c>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x2a0>)
 80011e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <HAL_RCC_OscConfig+0x2a4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fb27 	bl	8000840 <HAL_InitTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d052      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	e331      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d032      	beq.n	800126e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc1a 	bl	8000a4c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff fc16 	bl	8000a4c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e31a      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123a:	4b41      	ldr	r3, [pc, #260]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b3e      	ldr	r3, [pc, #248]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	493b      	ldr	r1, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	4b39      	ldr	r3, [pc, #228]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4936      	ldr	r1, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
 800126c:	e01a      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a33      	ldr	r2, [pc, #204]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800127a:	f7ff fbe7 	bl	8000a4c <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001282:	f7ff fbe3 	bl	8000a4c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e2e7      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x1da>
 80012a0:	e000      	b.n	80012a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d074      	beq.n	800139a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d005      	beq.n	80012c2 <HAL_RCC_OscConfig+0x21a>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d10e      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d10b      	bne.n	80012da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d064      	beq.n	8001398 <HAL_RCC_OscConfig+0x2f0>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d160      	bne.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2c4      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x24a>
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a15      	ldr	r2, [pc, #84]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80012ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e01d      	b.n	800132e <HAL_RCC_OscConfig+0x286>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fa:	d10c      	bne.n	8001316 <HAL_RCC_OscConfig+0x26e>
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e00b      	b.n	800132e <HAL_RCC_OscConfig+0x286>
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 800131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_RCC_OscConfig+0x298>)
 8001328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01c      	beq.n	8001370 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001336:	f7ff fb89 	bl	8000a4c <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133c:	e011      	b.n	8001362 <HAL_RCC_OscConfig+0x2ba>
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000
 8001344:	08006080 	.word	0x08006080
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb7c 	bl	8000a4c <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e280      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	4baf      	ldr	r3, [pc, #700]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x2a8>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fb6c 	bl	8000a4c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fb68 	bl	8000a4c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e26c      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	4ba5      	ldr	r3, [pc, #660]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x2d0>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d060      	beq.n	8001468 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_OscConfig+0x310>
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d119      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d116      	bne.n	80013e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	4b99      	ldr	r3, [pc, #612]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <HAL_RCC_OscConfig+0x328>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e249      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b93      	ldr	r3, [pc, #588]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	061b      	lsls	r3, r3, #24
 80013de:	4990      	ldr	r1, [pc, #576]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e4:	e040      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a8b      	ldr	r2, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb27 	bl	8000a4c <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fb23 	bl	8000a4c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e227      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	4b82      	ldr	r3, [pc, #520]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b7f      	ldr	r3, [pc, #508]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	497c      	ldr	r1, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e018      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a79      	ldr	r2, [pc, #484]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800143c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb03 	bl	8000a4c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff faff 	bl	8000a4c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e203      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d03c      	beq.n	80014ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fade 	bl	8000a4c <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff fada 	bl	8000a4c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1de      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014a6:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ef      	beq.n	8001494 <HAL_RCC_OscConfig+0x3ec>
 80014b4:	e01b      	b.n	80014ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c6:	f7ff fac1 	bl	8000a4c <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fabd 	bl	8000a4c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e1c1      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80014e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1ef      	bne.n	80014ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80a6 	beq.w	8001648 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a43      	ldr	r2, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_OscConfig+0x57c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x57c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3a      	ldr	r2, [pc, #232]	; (8001624 <HAL_RCC_OscConfig+0x57c>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001540:	f7ff fa84 	bl	8000a4c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fa80 	bl	8000a4c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e184      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800155a:	4b32      	ldr	r3, [pc, #200]	; (8001624 <HAL_RCC_OscConfig+0x57c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x4d8>
 800156e:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800157e:	e024      	b.n	80015ca <HAL_RCC_OscConfig+0x522>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d110      	bne.n	80015aa <HAL_RCC_OscConfig+0x502>
 8001588:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a24      	ldr	r2, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a8:	e00f      	b.n	80015ca <HAL_RCC_OscConfig+0x522>
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fa3b 	bl	8000a4c <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015d8:	e00a      	b.n	80015f0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff fa37 	bl	8000a4c <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e139      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_OscConfig+0x578>)
 80015f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ed      	beq.n	80015da <HAL_RCC_OscConfig+0x532>
 80015fe:	e01a      	b.n	8001636 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fa24 	bl	8000a4c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fa20 	bl	8000a4c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d906      	bls.n	8001628 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e122      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001628:	4b90      	ldr	r3, [pc, #576]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1e8      	bne.n	8001608 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a8a      	ldr	r2, [pc, #552]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8108 	beq.w	8001862 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 80d0 	bne.w	80017fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800165c:	4b83      	ldr	r3, [pc, #524]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d130      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	3b01      	subs	r3, #1
 800167c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800167e:	429a      	cmp	r2, r3
 8001680:	d127      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d11f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800169c:	2a07      	cmp	r2, #7
 800169e:	bf14      	ite	ne
 80016a0:	2201      	movne	r2, #1
 80016a2:	2200      	moveq	r2, #0
 80016a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	3b01      	subs	r3, #1
 80016b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d06e      	beq.n	80017b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d069      	beq.n	80017ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016d8:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016e4:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b7      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016f4:	4b5d      	ldr	r3, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a5c      	ldr	r2, [pc, #368]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001700:	f7ff f9a4 	bl	8000a4c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f9a0 	bl	8000a4c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0a4      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001726:	4b51      	ldr	r3, [pc, #324]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x7c8>)
 800172c:	4013      	ands	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001736:	3a01      	subs	r2, #1
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001740:	0212      	lsls	r2, r2, #8
 8001742:	4311      	orrs	r1, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001748:	0852      	lsrs	r2, r2, #1
 800174a:	3a01      	subs	r2, #1
 800174c:	0552      	lsls	r2, r2, #21
 800174e:	4311      	orrs	r1, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001754:	0852      	lsrs	r2, r2, #1
 8001756:	3a01      	subs	r2, #1
 8001758:	0652      	lsls	r2, r2, #25
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001760:	0912      	lsrs	r2, r2, #4
 8001762:	0452      	lsls	r2, r2, #17
 8001764:	430a      	orrs	r2, r1
 8001766:	4941      	ldr	r1, [pc, #260]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3e      	ldr	r2, [pc, #248]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001776:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001778:	4b3c      	ldr	r3, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a3b      	ldr	r2, [pc, #236]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001782:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001784:	f7ff f962 	bl	8000a4c <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff f95e 	bl	8000a4c <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e062      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017aa:	e05a      	b.n	8001862 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e059      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d152      	bne.n	8001862 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017d4:	f7ff f93a 	bl	8000a4c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f936 	bl	8000a4c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e03a      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x734>
 80017fa:	e032      	b.n	8001862 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d02d      	beq.n	800185e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001808:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001820:	f023 0303 	bic.w	r3, r3, #3
 8001824:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 800182c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff f909 	bl	8000a4c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f905 	bl	8000a4c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_RCC_OscConfig+0x7c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f0      	bne.n	800183e <HAL_RCC_OscConfig+0x796>
 800185c:	e001      	b.n	8001862 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000
 8001870:	f99d808c 	.word	0xf99d808c

08001874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0c8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d910      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4961      	ldr	r1, [pc, #388]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b5f      	ldr	r3, [pc, #380]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d04c      	beq.n	800195e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018cc:	4b56      	ldr	r3, [pc, #344]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d121      	bne.n	800191c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e09e      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d115      	bne.n	800191c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e092      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fc:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e086      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e07e      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800191c:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	493f      	ldr	r1, [pc, #252]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192e:	f7ff f88d 	bl	8000a4c <HAL_GetTick>
 8001932:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001934:	e00a      	b.n	800194c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f889 	bl	8000a4c <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e066      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 020c 	and.w	r2, r3, #12
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	429a      	cmp	r2, r3
 800195c:	d1eb      	bne.n	8001936 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d008      	beq.n	800197c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	492c      	ldr	r1, [pc, #176]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d210      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b26      	ldr	r3, [pc, #152]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4924      	ldr	r1, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1b0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e036      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4918      	ldr	r1, [pc, #96]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4910      	ldr	r1, [pc, #64]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ea:	f000 f825 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_ClockConfig+0x1b4>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490c      	ldr	r1, [pc, #48]	; (8001a2c <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe ff16 	bl	8000840 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a18:	7afb      	ldrb	r3, [r7, #11]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08006080 	.word	0x08006080
 8001a30:	20000000 	.word	0x20000000
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x34>
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d121      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11e      	bne.n	8001aaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	e005      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a94:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aa8:	e00a      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d102      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e004      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001abe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d134      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0xa6>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d003      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xac>
 8001adc:	e005      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ae0:	617b      	str	r3, [r7, #20]
      break;
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae6:	617b      	str	r3, [r7, #20]
      break;
 8001ae8:	e002      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	617b      	str	r3, [r7, #20]
      break;
 8001aee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	3301      	adds	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	fb02 f203 	mul.w	r2, r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	0e5b      	lsrs	r3, r3, #25
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	3301      	adds	r3, #1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b30:	69bb      	ldr	r3, [r7, #24]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08006098 	.word	0x08006098
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4904      	ldr	r1, [pc, #16]	; (8001b90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08006090 	.word	0x08006090

08001b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b98:	f7ff ffda 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	0adb      	lsrs	r3, r3, #11
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08006090 	.word	0x08006090

08001bc0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	220f      	movs	r2, #15
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <HAL_RCC_GetClockConfig+0x60>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	601a      	str	r2, [r3, #0]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40022000 	.word	0x40022000

08001c24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c3c:	f7ff f9d0 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c40:	6178      	str	r0, [r7, #20]
 8001c42:	e014      	b.n	8001c6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a24      	ldr	r2, [pc, #144]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff f9c0 	bl	8000fe0 <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c74:	d10b      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	; 0x80
 8001c7a:	d919      	bls.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001c80:	d902      	bls.n	8001c88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c82:	2302      	movs	r3, #2
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e013      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e010      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d902      	bls.n	8001c9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c94:	2303      	movs	r3, #3
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e00a      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d102      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e004      	b.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b70      	cmp	r3, #112	; 0x70
 8001caa:	d101      	bne.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cac:	2301      	movs	r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f023 0207 	bic.w	r2, r3, #7
 8001cb8:	4909      	ldr	r1, [pc, #36]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d001      	beq.n	8001cd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cec:	2300      	movs	r3, #0
 8001cee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d041      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d08:	d02a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d0e:	d824      	bhi.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d14:	d008      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1a:	d81e      	bhi.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d24:	d010      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d26:	e018      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d28:	4b86      	ldr	r3, [pc, #536]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a85      	ldr	r2, [pc, #532]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d34:	e015      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 fabb 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 8001d42:	4603      	mov	r3, r0
 8001d44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d46:	e00c      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3320      	adds	r3, #32
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fba6 	bl	80024a0 <RCCEx_PLLSAI2_Config>
 8001d54:	4603      	mov	r3, r0
 8001d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d58:	e003      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d5e:	e000      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d62:	7cfb      	ldrb	r3, [r7, #19]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d68:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d76:	4973      	ldr	r1, [pc, #460]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d7e:	e001      	b.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d041      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d98:	d02a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d9e:	d824      	bhi.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da4:	d008      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001da6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001daa:	d81e      	bhi.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001db6:	e018      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001db8:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a61      	ldr	r2, [pc, #388]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dc4:	e015      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fa73 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dd6:	e00c      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3320      	adds	r3, #32
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fb5e 	bl	80024a0 <RCCEx_PLLSAI2_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001de8:	e003      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	74fb      	strb	r3, [r7, #19]
      break;
 8001dee:	e000      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001df2:	7cfb      	ldrb	r3, [r7, #19]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e06:	494f      	ldr	r1, [pc, #316]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e0e:	e001      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a0 	beq.w	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001e36:	2300      	movs	r3, #0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	4a40      	ldr	r2, [pc, #256]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e46:	6593      	str	r3, [r2, #88]	; 0x58
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e54:	2301      	movs	r3, #1
 8001e56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3a      	ldr	r2, [pc, #232]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e64:	f7fe fdf2 	bl	8000a4c <HAL_GetTick>
 8001e68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e6a:	e009      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe fdee 	bl	8000a4c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d902      	bls.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e7e:	e005      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0ef      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d15c      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01f      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d019      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7fe fdad 	bl	8000a4c <HAL_GetTick>
 8001ef2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef4:	e00b      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7fe fda9 	bl	8000a4c <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d902      	bls.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f0c:	e006      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ec      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f32:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f3a:	e009      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	74bb      	strb	r3, [r7, #18]
 8001f40:	e006      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f50:	7c7b      	ldrb	r3, [r7, #17]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b9e      	ldr	r3, [pc, #632]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a9d      	ldr	r2, [pc, #628]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f6e:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f023 0203 	bic.w	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	4994      	ldr	r1, [pc, #592]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f90:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 020c 	bic.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	498c      	ldr	r1, [pc, #560]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fb2:	4b87      	ldr	r3, [pc, #540]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4983      	ldr	r1, [pc, #524]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fd4:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	497b      	ldr	r1, [pc, #492]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	4972      	ldr	r1, [pc, #456]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002018:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	496a      	ldr	r1, [pc, #424]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800203a:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	4961      	ldr	r1, [pc, #388]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800205c:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	4959      	ldr	r1, [pc, #356]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800207e:	4b54      	ldr	r3, [pc, #336]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208c:	4950      	ldr	r1, [pc, #320]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020a0:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	4948      	ldr	r1, [pc, #288]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	493f      	ldr	r1, [pc, #252]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d028      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020e4:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f2:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002102:	d106      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800210e:	60d3      	str	r3, [r2, #12]
 8002110:	e011      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800211a:	d10c      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3304      	adds	r3, #4
 8002120:	2101      	movs	r1, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f8c8 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d028      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	491f      	ldr	r1, [pc, #124]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002160:	d106      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216c:	60d3      	str	r3, [r2, #12]
 800216e:	e011      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f000 f899 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d02b      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021be:	d109      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a02      	ldr	r2, [pc, #8]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ca:	60d3      	str	r3, [r2, #12]
 80021cc:	e014      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f867 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d02f      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002212:	4928      	ldr	r1, [pc, #160]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800221e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002222:	d10d      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	2102      	movs	r1, #2
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f844 	bl	80022b8 <RCCEx_PLLSAI1_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	74bb      	strb	r3, [r7, #18]
 800223e:	e011      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002248:	d10c      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3320      	adds	r3, #32
 800224e:	2102      	movs	r1, #2
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f925 	bl	80024a0 <RCCEx_PLLSAI2_Config>
 8002256:	4603      	mov	r3, r0
 8002258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002270:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800227e:	490d      	ldr	r1, [pc, #52]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022a2:	4904      	ldr	r1, [pc, #16]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000

080022b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022c6:	4b75      	ldr	r3, [pc, #468]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d018      	beq.n	8002304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022d2:	4b72      	ldr	r3, [pc, #456]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d10d      	bne.n	80022fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
       ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022ea:	4b6c      	ldr	r3, [pc, #432]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
       ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d047      	beq.n	800238e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e044      	b.n	800238e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d018      	beq.n	800233e <RCCEx_PLLSAI1_Config+0x86>
 800230c:	2b03      	cmp	r3, #3
 800230e:	d825      	bhi.n	800235c <RCCEx_PLLSAI1_Config+0xa4>
 8002310:	2b01      	cmp	r3, #1
 8002312:	d002      	beq.n	800231a <RCCEx_PLLSAI1_Config+0x62>
 8002314:	2b02      	cmp	r3, #2
 8002316:	d009      	beq.n	800232c <RCCEx_PLLSAI1_Config+0x74>
 8002318:	e020      	b.n	800235c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800231a:	4b60      	ldr	r3, [pc, #384]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232a:	e01a      	b.n	8002362 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d116      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233c:	e013      	b.n	8002366 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10f      	bne.n	800236a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800235a:	e006      	b.n	800236a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
      break;
 8002360:	e004      	b.n	800236c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002362:	bf00      	nop
 8002364:	e002      	b.n	800236c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002366:	bf00      	nop
 8002368:	e000      	b.n	800236c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800236a:	bf00      	nop
    }

    if(status == HAL_OK)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	430b      	orrs	r3, r1
 8002388:	4944      	ldr	r1, [pc, #272]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d17d      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002394:	4b41      	ldr	r3, [pc, #260]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a40      	ldr	r2, [pc, #256]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800239a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800239e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7fe fb54 	bl	8000a4c <HAL_GetTick>
 80023a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023a6:	e009      	b.n	80023bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023a8:	f7fe fb50 	bl	8000a4c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d902      	bls.n	80023bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	73fb      	strb	r3, [r7, #15]
        break;
 80023ba:	e005      	b.n	80023c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023bc:	4b37      	ldr	r3, [pc, #220]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ef      	bne.n	80023a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d160      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d111      	bne.n	80023f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6892      	ldr	r2, [r2, #8]
 80023e4:	0211      	lsls	r1, r2, #8
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	0912      	lsrs	r2, r2, #4
 80023ec:	0452      	lsls	r2, r2, #17
 80023ee:	430a      	orrs	r2, r1
 80023f0:	492a      	ldr	r1, [pc, #168]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	610b      	str	r3, [r1, #16]
 80023f6:	e027      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d112      	bne.n	8002424 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002406:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6892      	ldr	r2, [r2, #8]
 800240e:	0211      	lsls	r1, r2, #8
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6912      	ldr	r2, [r2, #16]
 8002414:	0852      	lsrs	r2, r2, #1
 8002416:	3a01      	subs	r2, #1
 8002418:	0552      	lsls	r2, r2, #21
 800241a:	430a      	orrs	r2, r1
 800241c:	491f      	ldr	r1, [pc, #124]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	610b      	str	r3, [r1, #16]
 8002422:	e011      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800242c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	0211      	lsls	r1, r2, #8
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6952      	ldr	r2, [r2, #20]
 800243a:	0852      	lsrs	r2, r2, #1
 800243c:	3a01      	subs	r2, #1
 800243e:	0652      	lsls	r2, r2, #25
 8002440:	430a      	orrs	r2, r1
 8002442:	4916      	ldr	r1, [pc, #88]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a13      	ldr	r2, [pc, #76]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe fafa 	bl	8000a4c <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe faf6 	bl	8000a4c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
          break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ef      	beq.n	800245c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	4313      	orrs	r3, r2
 800248e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024d2:	4b61      	ldr	r3, [pc, #388]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI2_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI2_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI2_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI2_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b55      	ldr	r3, [pc, #340]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4939      	ldr	r1, [pc, #228]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d167      	bne.n	800264c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a35      	ldr	r2, [pc, #212]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fa60 	bl	8000a4c <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002590:	f7fe fa5c 	bl	8000a4c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d14a      	bne.n	800264c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	0452      	lsls	r2, r2, #17
 80025d6:	430a      	orrs	r2, r1
 80025d8:	491f      	ldr	r1, [pc, #124]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	614b      	str	r3, [r1, #20]
 80025de:	e011      	b.n	8002604 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6892      	ldr	r2, [r2, #8]
 80025f0:	0211      	lsls	r1, r2, #8
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6912      	ldr	r2, [r2, #16]
 80025f6:	0852      	lsrs	r2, r2, #1
 80025f8:	3a01      	subs	r2, #1
 80025fa:	0652      	lsls	r2, r2, #25
 80025fc:	430a      	orrs	r2, r1
 80025fe:	4916      	ldr	r1, [pc, #88]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	4313      	orrs	r3, r2
 8002602:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fa1c 	bl	8000a4c <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002616:	e009      	b.n	800262c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002618:	f7fe fa18 	bl	8000a4c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	73fb      	strb	r3, [r7, #15]
          break;
 800262a:	e005      	b.n	8002638 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ef      	beq.n	8002618 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4904      	ldr	r1, [pc, #16]	; (8002658 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000

0800265c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e049      	b.n	8002702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f841 	bl	800270a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3304      	adds	r3, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f000 f9f8 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e04f      	b.n	80027d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01d      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002762:	d018      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00e      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_Base_Start_IT+0x76>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a19      	ldr	r2, [pc, #100]	; (80027f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d115      	bne.n	80027c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_TIM_Base_Start_IT+0xdc>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d015      	beq.n	80027d4 <HAL_TIM_Base_Start_IT+0xb4>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d011      	beq.n	80027d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	e008      	b.n	80027d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e000      	b.n	80027d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40013400 	.word	0x40013400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	00010007 	.word	0x00010007

08002800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b02      	cmp	r3, #2
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0202 	mvn.w	r2, #2
 800282c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f905 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8f7 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f908 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b04      	cmp	r3, #4
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0204 	mvn.w	r2, #4
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8db 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8cd 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8de 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d122      	bne.n	8002904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0208 	mvn.w	r2, #8
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2204      	movs	r2, #4
 80028da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8b1 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8a3 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f8b4 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b10      	cmp	r3, #16
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b10      	cmp	r3, #16
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0210 	mvn.w	r2, #16
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2208      	movs	r2, #8
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f887 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f879 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f88a 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0201 	mvn.w	r2, #1
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd fedc 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f914 	bl	8002bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d10e      	bne.n	80029de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b80      	cmp	r3, #128	; 0x80
 80029cc:	d107      	bne.n	80029de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f907 	bl	8002bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d10e      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d107      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f838 	bl	8002a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d10e      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d107      	bne.n	8002a36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0220 	mvn.w	r2, #32
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8c7 	bl	8002bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a40      	ldr	r2, [pc, #256]	; (8002ba4 <TIM_Base_SetConfig+0x114>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aae:	d00f      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <TIM_Base_SetConfig+0x118>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <TIM_Base_SetConfig+0x11c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3b      	ldr	r2, [pc, #236]	; (8002bb0 <TIM_Base_SetConfig+0x120>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <TIM_Base_SetConfig+0x124>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2f      	ldr	r2, [pc, #188]	; (8002ba4 <TIM_Base_SetConfig+0x114>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d01b      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <TIM_Base_SetConfig+0x118>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d017      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <TIM_Base_SetConfig+0x11c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <TIM_Base_SetConfig+0x120>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <TIM_Base_SetConfig+0x124>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <TIM_Base_SetConfig+0x128>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <TIM_Base_SetConfig+0x12c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x9a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <TIM_Base_SetConfig+0x130>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <TIM_Base_SetConfig+0x114>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00f      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <TIM_Base_SetConfig+0x124>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <TIM_Base_SetConfig+0x128>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <TIM_Base_SetConfig+0x12c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_Base_SetConfig+0xf8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <TIM_Base_SetConfig+0x130>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	615a      	str	r2, [r3, #20]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40000c00 	.word	0x40000c00
 8002bb4:	40013400 	.word	0x40013400
 8002bb8:	40014000 	.word	0x40014000
 8002bbc:	40014400 	.word	0x40014400
 8002bc0:	40014800 	.word	0x40014800

08002bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e040      	b.n	8002c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd fdca 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2224      	movs	r2, #36	; 0x24
 8002c2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f82c 	bl	8002c9c <UART_SetConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e022      	b.n	8002c94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 faaa 	bl	80031b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb31 	bl	80032f4 <UART_CheckIdleState>
 8002c92:	4603      	mov	r3, r0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c9c:	b5b0      	push	{r4, r5, r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4bad      	ldr	r3, [pc, #692]	; (8002f7c <UART_SetConfig+0x2e0>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	69f9      	ldr	r1, [r7, #28]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4aa2      	ldr	r2, [pc, #648]	; (8002f80 <UART_SetConfig+0x2e4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a99      	ldr	r2, [pc, #612]	; (8002f84 <UART_SetConfig+0x2e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d121      	bne.n	8002d66 <UART_SetConfig+0xca>
 8002d22:	4b99      	ldr	r3, [pc, #612]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d817      	bhi.n	8002d60 <UART_SetConfig+0xc4>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <UART_SetConfig+0x9c>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d55 	.word	0x08002d55
 8002d40:	08002d4f 	.word	0x08002d4f
 8002d44:	08002d5b 	.word	0x08002d5b
 8002d48:	2301      	movs	r3, #1
 8002d4a:	76fb      	strb	r3, [r7, #27]
 8002d4c:	e0e7      	b.n	8002f1e <UART_SetConfig+0x282>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	76fb      	strb	r3, [r7, #27]
 8002d52:	e0e4      	b.n	8002f1e <UART_SetConfig+0x282>
 8002d54:	2304      	movs	r3, #4
 8002d56:	76fb      	strb	r3, [r7, #27]
 8002d58:	e0e1      	b.n	8002f1e <UART_SetConfig+0x282>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	76fb      	strb	r3, [r7, #27]
 8002d5e:	e0de      	b.n	8002f1e <UART_SetConfig+0x282>
 8002d60:	2310      	movs	r3, #16
 8002d62:	76fb      	strb	r3, [r7, #27]
 8002d64:	e0db      	b.n	8002f1e <UART_SetConfig+0x282>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a88      	ldr	r2, [pc, #544]	; (8002f8c <UART_SetConfig+0x2f0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d132      	bne.n	8002dd6 <UART_SetConfig+0x13a>
 8002d70:	4b85      	ldr	r3, [pc, #532]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d828      	bhi.n	8002dd0 <UART_SetConfig+0x134>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0xe8>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002dd1 	.word	0x08002dd1
 8002d8c:	08002dd1 	.word	0x08002dd1
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dc5 	.word	0x08002dc5
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002dbf 	.word	0x08002dbf
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002dd1 	.word	0x08002dd1
 8002db0:	08002dd1 	.word	0x08002dd1
 8002db4:	08002dcb 	.word	0x08002dcb
 8002db8:	2300      	movs	r3, #0
 8002dba:	76fb      	strb	r3, [r7, #27]
 8002dbc:	e0af      	b.n	8002f1e <UART_SetConfig+0x282>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	76fb      	strb	r3, [r7, #27]
 8002dc2:	e0ac      	b.n	8002f1e <UART_SetConfig+0x282>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	76fb      	strb	r3, [r7, #27]
 8002dc8:	e0a9      	b.n	8002f1e <UART_SetConfig+0x282>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	76fb      	strb	r3, [r7, #27]
 8002dce:	e0a6      	b.n	8002f1e <UART_SetConfig+0x282>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	76fb      	strb	r3, [r7, #27]
 8002dd4:	e0a3      	b.n	8002f1e <UART_SetConfig+0x282>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a6d      	ldr	r2, [pc, #436]	; (8002f90 <UART_SetConfig+0x2f4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d120      	bne.n	8002e22 <UART_SetConfig+0x186>
 8002de0:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dea:	2b30      	cmp	r3, #48	; 0x30
 8002dec:	d013      	beq.n	8002e16 <UART_SetConfig+0x17a>
 8002dee:	2b30      	cmp	r3, #48	; 0x30
 8002df0:	d814      	bhi.n	8002e1c <UART_SetConfig+0x180>
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d009      	beq.n	8002e0a <UART_SetConfig+0x16e>
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d810      	bhi.n	8002e1c <UART_SetConfig+0x180>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <UART_SetConfig+0x168>
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d006      	beq.n	8002e10 <UART_SetConfig+0x174>
 8002e02:	e00b      	b.n	8002e1c <UART_SetConfig+0x180>
 8002e04:	2300      	movs	r3, #0
 8002e06:	76fb      	strb	r3, [r7, #27]
 8002e08:	e089      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	76fb      	strb	r3, [r7, #27]
 8002e0e:	e086      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e10:	2304      	movs	r3, #4
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e083      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e16:	2308      	movs	r3, #8
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e080      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	e07d      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5b      	ldr	r2, [pc, #364]	; (8002f94 <UART_SetConfig+0x2f8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d120      	bne.n	8002e6e <UART_SetConfig+0x1d2>
 8002e2c:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e36:	2bc0      	cmp	r3, #192	; 0xc0
 8002e38:	d013      	beq.n	8002e62 <UART_SetConfig+0x1c6>
 8002e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e3c:	d814      	bhi.n	8002e68 <UART_SetConfig+0x1cc>
 8002e3e:	2b80      	cmp	r3, #128	; 0x80
 8002e40:	d009      	beq.n	8002e56 <UART_SetConfig+0x1ba>
 8002e42:	2b80      	cmp	r3, #128	; 0x80
 8002e44:	d810      	bhi.n	8002e68 <UART_SetConfig+0x1cc>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <UART_SetConfig+0x1b4>
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d006      	beq.n	8002e5c <UART_SetConfig+0x1c0>
 8002e4e:	e00b      	b.n	8002e68 <UART_SetConfig+0x1cc>
 8002e50:	2300      	movs	r3, #0
 8002e52:	76fb      	strb	r3, [r7, #27]
 8002e54:	e063      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e56:	2302      	movs	r3, #2
 8002e58:	76fb      	strb	r3, [r7, #27]
 8002e5a:	e060      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	76fb      	strb	r3, [r7, #27]
 8002e60:	e05d      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e62:	2308      	movs	r3, #8
 8002e64:	76fb      	strb	r3, [r7, #27]
 8002e66:	e05a      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	e057      	b.n	8002f1e <UART_SetConfig+0x282>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a49      	ldr	r2, [pc, #292]	; (8002f98 <UART_SetConfig+0x2fc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d125      	bne.n	8002ec4 <UART_SetConfig+0x228>
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e86:	d017      	beq.n	8002eb8 <UART_SetConfig+0x21c>
 8002e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8c:	d817      	bhi.n	8002ebe <UART_SetConfig+0x222>
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d00b      	beq.n	8002eac <UART_SetConfig+0x210>
 8002e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e98:	d811      	bhi.n	8002ebe <UART_SetConfig+0x222>
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <UART_SetConfig+0x20a>
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d006      	beq.n	8002eb2 <UART_SetConfig+0x216>
 8002ea4:	e00b      	b.n	8002ebe <UART_SetConfig+0x222>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	76fb      	strb	r3, [r7, #27]
 8002eaa:	e038      	b.n	8002f1e <UART_SetConfig+0x282>
 8002eac:	2302      	movs	r3, #2
 8002eae:	76fb      	strb	r3, [r7, #27]
 8002eb0:	e035      	b.n	8002f1e <UART_SetConfig+0x282>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	76fb      	strb	r3, [r7, #27]
 8002eb6:	e032      	b.n	8002f1e <UART_SetConfig+0x282>
 8002eb8:	2308      	movs	r3, #8
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	e02f      	b.n	8002f1e <UART_SetConfig+0x282>
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	76fb      	strb	r3, [r7, #27]
 8002ec2:	e02c      	b.n	8002f1e <UART_SetConfig+0x282>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2d      	ldr	r2, [pc, #180]	; (8002f80 <UART_SetConfig+0x2e4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d125      	bne.n	8002f1a <UART_SetConfig+0x27e>
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <UART_SetConfig+0x2ec>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002edc:	d017      	beq.n	8002f0e <UART_SetConfig+0x272>
 8002ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ee2:	d817      	bhi.n	8002f14 <UART_SetConfig+0x278>
 8002ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee8:	d00b      	beq.n	8002f02 <UART_SetConfig+0x266>
 8002eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eee:	d811      	bhi.n	8002f14 <UART_SetConfig+0x278>
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <UART_SetConfig+0x260>
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x26c>
 8002efa:	e00b      	b.n	8002f14 <UART_SetConfig+0x278>
 8002efc:	2300      	movs	r3, #0
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	e00d      	b.n	8002f1e <UART_SetConfig+0x282>
 8002f02:	2302      	movs	r3, #2
 8002f04:	76fb      	strb	r3, [r7, #27]
 8002f06:	e00a      	b.n	8002f1e <UART_SetConfig+0x282>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	76fb      	strb	r3, [r7, #27]
 8002f0c:	e007      	b.n	8002f1e <UART_SetConfig+0x282>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	76fb      	strb	r3, [r7, #27]
 8002f12:	e004      	b.n	8002f1e <UART_SetConfig+0x282>
 8002f14:	2310      	movs	r3, #16
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e001      	b.n	8002f1e <UART_SetConfig+0x282>
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <UART_SetConfig+0x2e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	f040 8087 	bne.w	8003038 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f2a:	7efb      	ldrb	r3, [r7, #27]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d837      	bhi.n	8002fa0 <UART_SetConfig+0x304>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0x29c>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08002f65 	.word	0x08002f65
 8002f44:	08002fa1 	.word	0x08002fa1
 8002f48:	08002f6b 	.word	0x08002f6b
 8002f4c:	08002fa1 	.word	0x08002fa1
 8002f50:	08002fa1 	.word	0x08002fa1
 8002f54:	08002fa1 	.word	0x08002fa1
 8002f58:	08002f73 	.word	0x08002f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7fe fe04 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8002f60:	6178      	str	r0, [r7, #20]
        break;
 8002f62:	e022      	b.n	8002faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <UART_SetConfig+0x300>)
 8002f66:	617b      	str	r3, [r7, #20]
        break;
 8002f68:	e01f      	b.n	8002faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6a:	f7fe fd65 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 8002f6e:	6178      	str	r0, [r7, #20]
        break;
 8002f70:	e01b      	b.n	8002faa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f76:	617b      	str	r3, [r7, #20]
        break;
 8002f78:	e017      	b.n	8002faa <UART_SetConfig+0x30e>
 8002f7a:	bf00      	nop
 8002f7c:	efff69f3 	.word	0xefff69f3
 8002f80:	40008000 	.word	0x40008000
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40004c00 	.word	0x40004c00
 8002f98:	40005000 	.word	0x40005000
 8002f9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	76bb      	strb	r3, [r7, #26]
        break;
 8002fa8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80f1 	beq.w	8003194 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d305      	bcc.n	8002fce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d902      	bls.n	8002fd4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	76bb      	strb	r3, [r7, #26]
 8002fd2:	e0df      	b.n	8003194 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	020b      	lsls	r3, r1, #8
 8002fe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fea:	0202      	lsls	r2, r0, #8
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	6849      	ldr	r1, [r1, #4]
 8002ff0:	0849      	lsrs	r1, r1, #1
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	1814      	adds	r4, r2, r0
 8002ffa:	eb43 0501 	adc.w	r5, r3, r1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	461a      	mov	r2, r3
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	4620      	mov	r0, r4
 800300a:	4629      	mov	r1, r5
 800300c:	f7fd f8e0 	bl	80001d0 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800301e:	d308      	bcc.n	8003032 <UART_SetConfig+0x396>
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003026:	d204      	bcs.n	8003032 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e0b0      	b.n	8003194 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	76bb      	strb	r3, [r7, #26]
 8003036:	e0ad      	b.n	8003194 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003040:	d15c      	bne.n	80030fc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003042:	7efb      	ldrb	r3, [r7, #27]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d828      	bhi.n	800309a <UART_SetConfig+0x3fe>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <UART_SetConfig+0x3b4>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003075 	.word	0x08003075
 8003054:	0800307d 	.word	0x0800307d
 8003058:	08003085 	.word	0x08003085
 800305c:	0800309b 	.word	0x0800309b
 8003060:	0800308b 	.word	0x0800308b
 8003064:	0800309b 	.word	0x0800309b
 8003068:	0800309b 	.word	0x0800309b
 800306c:	0800309b 	.word	0x0800309b
 8003070:	08003093 	.word	0x08003093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7fe fd78 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8003078:	6178      	str	r0, [r7, #20]
        break;
 800307a:	e013      	b.n	80030a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800307c:	f7fe fd8a 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8003080:	6178      	str	r0, [r7, #20]
        break;
 8003082:	e00f      	b.n	80030a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4b49      	ldr	r3, [pc, #292]	; (80031ac <UART_SetConfig+0x510>)
 8003086:	617b      	str	r3, [r7, #20]
        break;
 8003088:	e00c      	b.n	80030a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800308a:	f7fe fcd5 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 800308e:	6178      	str	r0, [r7, #20]
        break;
 8003090:	e008      	b.n	80030a4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003096:	617b      	str	r3, [r7, #20]
        break;
 8003098:	e004      	b.n	80030a4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	76bb      	strb	r3, [r7, #26]
        break;
 80030a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d074      	beq.n	8003194 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d916      	bls.n	80030f6 <UART_SetConfig+0x45a>
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ce:	d212      	bcs.n	80030f6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f023 030f 	bic.w	r3, r3, #15
 80030d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	89fa      	ldrh	r2, [r7, #14]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e04e      	b.n	8003194 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	76bb      	strb	r3, [r7, #26]
 80030fa:	e04b      	b.n	8003194 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030fc:	7efb      	ldrb	r3, [r7, #27]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d827      	bhi.n	8003152 <UART_SetConfig+0x4b6>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0x46c>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003153 	.word	0x08003153
 8003118:	08003143 	.word	0x08003143
 800311c:	08003153 	.word	0x08003153
 8003120:	08003153 	.word	0x08003153
 8003124:	08003153 	.word	0x08003153
 8003128:	0800314b 	.word	0x0800314b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fd1c 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8003130:	6178      	str	r0, [r7, #20]
        break;
 8003132:	e013      	b.n	800315c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003134:	f7fe fd2e 	bl	8001b94 <HAL_RCC_GetPCLK2Freq>
 8003138:	6178      	str	r0, [r7, #20]
        break;
 800313a:	e00f      	b.n	800315c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <UART_SetConfig+0x510>)
 800313e:	617b      	str	r3, [r7, #20]
        break;
 8003140:	e00c      	b.n	800315c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003142:	f7fe fc79 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 8003146:	6178      	str	r0, [r7, #20]
        break;
 8003148:	e008      	b.n	800315c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800314a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e004      	b.n	800315c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	76bb      	strb	r3, [r7, #26]
        break;
 800315a:	bf00      	nop
    }

    if (pclk != 0U)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	085a      	lsrs	r2, r3, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	441a      	add	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	d908      	bls.n	8003190 <UART_SetConfig+0x4f4>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d204      	bcs.n	8003190 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	e001      	b.n	8003194 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdb0      	pop	{r4, r5, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	00f42400 	.word	0x00f42400

080031b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ae:	d10a      	bne.n	80032c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003304:	f7fd fba2 	bl	8000a4c <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d10e      	bne.n	8003336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f82d 	bl	8003386 <UART_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e023      	b.n	800337e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d10e      	bne.n	8003362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f817 	bl	8003386 <UART_WaitOnFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e00d      	b.n	800337e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003396:	e05e      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d05a      	beq.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a0:	f7fd fb54 	bl	8000a4c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11b      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033c4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e043      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02c      	beq.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340a:	d124      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003424:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00f      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	429a      	cmp	r2, r3
 8003472:	d091      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <__NVIC_SetPriority>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db0a      	blt.n	80034aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	490c      	ldr	r1, [pc, #48]	; (80034cc <__NVIC_SetPriority+0x4c>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	440b      	add	r3, r1
 80034a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034a8:	e00a      	b.n	80034c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4908      	ldr	r1, [pc, #32]	; (80034d0 <__NVIC_SetPriority+0x50>)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	3b04      	subs	r3, #4
 80034b8:	0112      	lsls	r2, r2, #4
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	440b      	add	r3, r1
 80034be:	761a      	strb	r2, [r3, #24]
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SysTick_Handler+0x1c>)
 80034da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80034dc:	f001 fcfe 	bl	8004edc <xTaskGetSchedulerState>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80034e6:	f002 fae7 	bl	8005ab8 <xPortSysTickHandler>
  }
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000e010 	.word	0xe000e010

080034f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034f8:	2100      	movs	r1, #0
 80034fa:	f06f 0004 	mvn.w	r0, #4
 80034fe:	f7ff ffbf 	bl	8003480 <__NVIC_SetPriority>
#endif
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800350e:	f3ef 8305 	mrs	r3, IPSR
 8003512:	603b      	str	r3, [r7, #0]
  return(result);
 8003514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800351a:	f06f 0305 	mvn.w	r3, #5
 800351e:	607b      	str	r3, [r7, #4]
 8003520:	e00c      	b.n	800353c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <osKernelInitialize+0x44>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <osKernelInitialize+0x44>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	e002      	b.n	800353c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	2000002c 	.word	0x2000002c

08003550 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003556:	f3ef 8305 	mrs	r3, IPSR
 800355a:	603b      	str	r3, [r7, #0]
  return(result);
 800355c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003562:	f06f 0305 	mvn.w	r3, #5
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	e010      	b.n	800358c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <osKernelStart+0x48>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d109      	bne.n	8003586 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003572:	f7ff ffbf 	bl	80034f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <osKernelStart+0x48>)
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800357c:	f001 f866 	bl	800464c <vTaskStartScheduler>
      stat = osOK;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e002      	b.n	800358c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800358c:	687b      	ldr	r3, [r7, #4]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	2000002c 	.word	0x2000002c

0800359c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af04      	add	r7, sp, #16
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035ac:	f3ef 8305 	mrs	r3, IPSR
 80035b0:	617b      	str	r3, [r7, #20]
  return(result);
 80035b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d17e      	bne.n	80036b6 <osThreadNew+0x11a>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d07b      	beq.n	80036b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035c2:	2318      	movs	r3, #24
 80035c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80035ca:	f04f 33ff 	mov.w	r3, #4294967295
 80035ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d045      	beq.n	8003662 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <osThreadNew+0x48>
        name = attr->name;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <osThreadNew+0x6e>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b38      	cmp	r3, #56	; 0x38
 80035fc:	d805      	bhi.n	800360a <osThreadNew+0x6e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <osThreadNew+0x72>
        return (NULL);
 800360a:	2300      	movs	r3, #0
 800360c:	e054      	b.n	80036b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <osThreadNew+0xa8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b5b      	cmp	r3, #91	; 0x5b
 800362c:	d90a      	bls.n	8003644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <osThreadNew+0xa8>
        mem = 1;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e010      	b.n	8003666 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <osThreadNew+0xca>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <osThreadNew+0xca>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <osThreadNew+0xca>
          mem = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e001      	b.n	8003666 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d110      	bne.n	800368e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003674:	9202      	str	r2, [sp, #8]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fe0c 	bl	80042a0 <xTaskCreateStatic>
 8003688:	4603      	mov	r3, r0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	e013      	b.n	80036b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	b29a      	uxth	r2, r3
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fe57 	bl	800435a <xTaskCreate>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d001      	beq.n	80036b6 <osThreadNew+0x11a>
            hTask = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036b6:	693b      	ldr	r3, [r7, #16]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036c8:	f3ef 8305 	mrs	r3, IPSR
 80036cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <osDelay+0x1c>
    stat = osErrorISR;
 80036d4:	f06f 0305 	mvn.w	r3, #5
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e007      	b.n	80036ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 ff7c 	bl	80045e4 <vTaskDelay>
    }
  }

  return (stat);
 80036ec:	68fb      	ldr	r3, [r7, #12]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <vApplicationGetIdleTaskMemory+0x2c>)
 8003708:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a06      	ldr	r2, [pc, #24]	; (8003728 <vApplicationGetIdleTaskMemory+0x30>)
 800370e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20000030 	.word	0x20000030
 8003728:	2000008c 	.word	0x2000008c

0800372c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4a07      	ldr	r2, [pc, #28]	; (8003758 <vApplicationGetTimerTaskMemory+0x2c>)
 800373c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4a06      	ldr	r2, [pc, #24]	; (800375c <vApplicationGetTimerTaskMemory+0x30>)
 8003742:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	2000028c 	.word	0x2000028c
 800375c:	200002e8 	.word	0x200002e8

08003760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f103 0208 	add.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f04f 32ff 	mov.w	r2, #4294967295
 8003778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f103 0208 	add.w	r2, r3, #8
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 0208 	add.w	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d103      	bne.n	8003822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e00c      	b.n	800383c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3308      	adds	r3, #8
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e002      	b.n	8003830 <vListInsert+0x2e>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	429a      	cmp	r2, r3
 800383a:	d2f6      	bcs.n	800382a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6852      	ldr	r2, [r2, #4]
 8003894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d103      	bne.n	80038a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038f2:	f002 f84f 	bl	8005994 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	3b01      	subs	r3, #1
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01a      	beq.n	8003986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3310      	adds	r3, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f903 	bl	8004b60 <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d012      	beq.n	8003986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <xQueueGenericReset+0xcc>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	e009      	b.n	8003986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3310      	adds	r3, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fef2 	bl	8003760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff feed 	bl	8003760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003986:	f002 f835 	bl	80059f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <xQueueGenericCreateStatic+0x52>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xQueueGenericCreateStatic+0x56>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericCreateStatic+0x58>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <xQueueGenericCreateStatic+0x7e>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericCreateStatic+0x82>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericCreateStatic+0x84>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61fb      	str	r3, [r7, #28]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a36:	2350      	movs	r3, #80	; 0x50
 8003a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d00a      	beq.n	8003a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	61bb      	str	r3, [r7, #24]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f805 	bl	8003a88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3730      	adds	r7, #48	; 0x30
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d103      	bne.n	8003aa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	69b8      	ldr	r0, [r7, #24]
 8003aba:	f7ff ff05 	bl	80038c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	; 0x38
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xQueueGenericSend+0x32>
	__asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <xQueueGenericSend+0x40>
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <xQueueGenericSend+0x44>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <xQueueGenericSend+0x46>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xQueueGenericSend+0x60>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x6e>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x72>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x74>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b5e:	f001 f9bd 	bl	8004edc <xTaskGetSchedulerState>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <xQueueGenericSend+0x9e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0xa2>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0xa4>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	61fb      	str	r3, [r7, #28]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b8e:	f001 ff01 	bl	8005994 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <xQueueGenericSend+0xd4>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d129      	bne.n	8003bf8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003baa:	f000 fa0b 	bl	8003fc4 <prvCopyDataToQueue>
 8003bae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	3324      	adds	r3, #36	; 0x24
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 ffcf 	bl	8004b60 <xTaskRemoveFromEventList>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	e00a      	b.n	8003bf0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bf0:	f001 ff00 	bl	80059f4 <vPortExitCritical>
				return pdPASS;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e063      	b.n	8003cc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bfe:	f001 fef9 	bl	80059f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e05c      	b.n	8003cc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 f809 	bl	8004c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c1a:	f001 feeb 	bl	80059f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c1e:	f000 fd7b 	bl	8004718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c22:	f001 feb7 	bl	8005994 <vPortEnterCritical>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d103      	bne.n	8003c3c <xQueueGenericSend+0x16c>
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c42:	b25b      	sxtb	r3, r3
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d103      	bne.n	8003c52 <xQueueGenericSend+0x182>
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c52:	f001 fecf 	bl	80059f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c56:	1d3a      	adds	r2, r7, #4
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fff8 	bl	8004c54 <xTaskCheckForTimeOut>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d124      	bne.n	8003cb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c6c:	f000 faa2 	bl	80041b4 <prvIsQueueFull>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	3310      	adds	r3, #16
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 ff1e 	bl	8004ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c86:	f000 fa2d 	bl	80040e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c8a:	f000 fd53 	bl	8004734 <xTaskResumeAll>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f47f af7c 	bne.w	8003b8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <xQueueGenericSend+0x1f8>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e772      	b.n	8003b8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003caa:	f000 fa1b 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cae:	f000 fd41 	bl	8004734 <xTaskResumeAll>
 8003cb2:	e76c      	b.n	8003b8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cb6:	f000 fa15 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cba:	f000 fd3b 	bl	8004734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3738      	adds	r7, #56	; 0x38
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b090      	sub	sp, #64	; 0x40
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <xQueueGenericSendFromISR+0x3c>
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <xQueueGenericSendFromISR+0x40>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <xQueueGenericSendFromISR+0x42>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d16:	f383 8811 	msr	BASEPRI, r3
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d24:	bf00      	nop
 8003d26:	e7fe      	b.n	8003d26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d103      	bne.n	8003d36 <xQueueGenericSendFromISR+0x6a>
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <xQueueGenericSendFromISR+0x6e>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <xQueueGenericSendFromISR+0x70>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	623b      	str	r3, [r7, #32]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d56:	f001 feff 	bl	8005b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d5a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <xQueueGenericSendFromISR+0xbc>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d12f      	bne.n	8003de8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d9e:	f000 f911 	bl	8003fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003da2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d112      	bne.n	8003dd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	3324      	adds	r3, #36	; 0x24
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fed1 	bl	8004b60 <xTaskRemoveFromEventList>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e007      	b.n	8003de2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	b25a      	sxtb	r2, r3
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003de2:	2301      	movs	r3, #1
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003de6:	e001      	b.n	8003dec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003df6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3740      	adds	r7, #64	; 0x40
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <xQueueReceive+0x30>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	623b      	str	r3, [r7, #32]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0x3e>
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <xQueueReceive+0x42>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueReceive+0x44>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xQueueReceive+0x5e>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61fb      	str	r3, [r7, #28]
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e62:	f001 f83b 	bl	8004edc <xTaskGetSchedulerState>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <xQueueReceive+0x6e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xQueueReceive+0x72>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xQueueReceive+0x74>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <xQueueReceive+0x8e>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e92:	f001 fd7f 	bl	8005994 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01f      	beq.n	8003ee2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea6:	f000 f8f7 	bl	8004098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00f      	beq.n	8003eda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fe4e 	bl	8004b60 <xTaskRemoveFromEventList>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <xQueueReceive+0x1bc>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eda:	f001 fd8b 	bl	80059f4 <vPortExitCritical>
				return pdPASS;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e069      	b.n	8003fb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ee8:	f001 fd84 	bl	80059f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e062      	b.n	8003fb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fe94 	bl	8004c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f04:	f001 fd76 	bl	80059f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f08:	f000 fc06 	bl	8004718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f0c:	f001 fd42 	bl	8005994 <vPortEnterCritical>
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d103      	bne.n	8003f26 <xQueueReceive+0x122>
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d103      	bne.n	8003f3c <xQueueReceive+0x138>
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3c:	f001 fd5a 	bl	80059f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f40:	1d3a      	adds	r2, r7, #4
 8003f42:	f107 0310 	add.w	r3, r7, #16
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fe83 	bl	8004c54 <xTaskCheckForTimeOut>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d123      	bne.n	8003f9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f56:	f000 f917 	bl	8004188 <prvIsQueueEmpty>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	3324      	adds	r3, #36	; 0x24
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fda9 	bl	8004ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f70:	f000 f8b8 	bl	80040e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f74:	f000 fbde 	bl	8004734 <xTaskResumeAll>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d189      	bne.n	8003e92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <xQueueReceive+0x1bc>)
 8003f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	e780      	b.n	8003e92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f92:	f000 f8a7 	bl	80040e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f96:	f000 fbcd 	bl	8004734 <xTaskResumeAll>
 8003f9a:	e77a      	b.n	8003e92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f9e:	f000 f8a1 	bl	80040e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fa2:	f000 fbc7 	bl	8004734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa8:	f000 f8ee 	bl	8004188 <prvIsQueueEmpty>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f43f af6f 	beq.w	8003e92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3730      	adds	r7, #48	; 0x30
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14d      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 ff92 	bl	8004f18 <xTaskPriorityDisinherit>
 8003ff4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	e043      	b.n	8004086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d119      	bne.n	8004038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6858      	ldr	r0, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	461a      	mov	r2, r3
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	f001 fff0 	bl	8005ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	441a      	add	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	d32b      	bcc.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	e026      	b.n	8004086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68d8      	ldr	r0, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	461a      	mov	r2, r3
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	f001 ffd6 	bl	8005ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	425b      	negs	r3, r3
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	425b      	negs	r3, r3
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d105      	bne.n	8004086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	3b01      	subs	r3, #1
 8004084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d303      	bcc.n	80040cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	461a      	mov	r2, r3
 80040d6:	6838      	ldr	r0, [r7, #0]
 80040d8:	f001 ff8c 	bl	8005ff4 <memcpy>
	}
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040ec:	f001 fc52 	bl	8005994 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040f8:	e011      	b.n	800411e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3324      	adds	r3, #36	; 0x24
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fd2a 	bl	8004b60 <xTaskRemoveFromEventList>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004112:	f000 fe01 	bl	8004d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3b01      	subs	r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800411e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004122:	2b00      	cmp	r3, #0
 8004124:	dce9      	bgt.n	80040fa <prvUnlockQueue+0x16>
 8004126:	e000      	b.n	800412a <prvUnlockQueue+0x46>
					break;
 8004128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004132:	f001 fc5f 	bl	80059f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004136:	f001 fc2d 	bl	8005994 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004142:	e011      	b.n	8004168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d012      	beq.n	8004172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3310      	adds	r3, #16
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fd05 	bl	8004b60 <xTaskRemoveFromEventList>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800415c:	f000 fddc 	bl	8004d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800416c:	2b00      	cmp	r3, #0
 800416e:	dce9      	bgt.n	8004144 <prvUnlockQueue+0x60>
 8004170:	e000      	b.n	8004174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	22ff      	movs	r2, #255	; 0xff
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800417c:	f001 fc3a 	bl	80059f4 <vPortExitCritical>
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004190:	f001 fc00 	bl	8005994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e001      	b.n	80041a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041a6:	f001 fc25 	bl	80059f4 <vPortExitCritical>

	return xReturn;
 80041aa:	68fb      	ldr	r3, [r7, #12]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041bc:	f001 fbea 	bl	8005994 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d102      	bne.n	80041d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e001      	b.n	80041d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041d6:	f001 fc0d 	bl	80059f4 <vPortExitCritical>

	return xReturn;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e014      	b.n	800421e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041f4:	4a0f      	ldr	r2, [pc, #60]	; (8004234 <vQueueAddToRegistry+0x50>)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004200:	490c      	ldr	r1, [pc, #48]	; (8004234 <vQueueAddToRegistry+0x50>)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800420a:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <vQueueAddToRegistry+0x50>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004216:	e006      	b.n	8004226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d9e7      	bls.n	80041f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	200019cc 	.word	0x200019cc

08004238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004248:	f001 fba4 	bl	8005994 <vPortEnterCritical>
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004252:	b25b      	sxtb	r3, r3
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d103      	bne.n	8004262 <vQueueWaitForMessageRestricted+0x2a>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004268:	b25b      	sxtb	r3, r3
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d103      	bne.n	8004278 <vQueueWaitForMessageRestricted+0x40>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004278:	f001 fbbc 	bl	80059f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3324      	adds	r3, #36	; 0x24
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fc3b 	bl	8004b08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004292:	6978      	ldr	r0, [r7, #20]
 8004294:	f7ff ff26 	bl	80040e4 <prvUnlockQueue>
	}
 8004298:	bf00      	nop
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08e      	sub	sp, #56	; 0x38
 80042a4:	af04      	add	r7, sp, #16
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	623b      	str	r3, [r7, #32]
}
 80042c6:	bf00      	nop
 80042c8:	e7fe      	b.n	80042c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61fb      	str	r3, [r7, #28]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042e6:	235c      	movs	r3, #92	; 0x5c
 80042e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b5c      	cmp	r3, #92	; 0x5c
 80042ee:	d00a      	beq.n	8004306 <xTaskCreateStatic+0x66>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	61bb      	str	r3, [r7, #24]
}
 8004302:	bf00      	nop
 8004304:	e7fe      	b.n	8004304 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004306:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01e      	beq.n	800434c <xTaskCreateStatic+0xac>
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01b      	beq.n	800434c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004326:	2300      	movs	r3, #0
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	9302      	str	r3, [sp, #8]
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f850 	bl	80043e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004346:	f000 f8dd 	bl	8004504 <prvAddNewTaskToReadyList>
 800434a:	e001      	b.n	8004350 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004350:	697b      	ldr	r3, [r7, #20]
	}
 8004352:	4618      	mov	r0, r3
 8004354:	3728      	adds	r7, #40	; 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800435a:	b580      	push	{r7, lr}
 800435c:	b08c      	sub	sp, #48	; 0x30
 800435e:	af04      	add	r7, sp, #16
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	603b      	str	r3, [r7, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4618      	mov	r0, r3
 8004370:	f001 fc32 	bl	8005bd8 <pvPortMalloc>
 8004374:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800437c:	205c      	movs	r0, #92	; 0x5c
 800437e:	f001 fc2b 	bl	8005bd8 <pvPortMalloc>
 8004382:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
 8004390:	e005      	b.n	800439e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f001 fcec 	bl	8005d70 <vPortFree>
 8004398:	e001      	b.n	800439e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ac:	88fa      	ldrh	r2, [r7, #6]
 80043ae:	2300      	movs	r3, #0
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f80e 	bl	80043e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043c8:	69f8      	ldr	r0, [r7, #28]
 80043ca:	f000 f89b 	bl	8004504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ce:	2301      	movs	r3, #1
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e002      	b.n	80043da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043d4:	f04f 33ff 	mov.w	r3, #4294967295
 80043d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043da:	69bb      	ldr	r3, [r7, #24]
	}
 80043dc:	4618      	mov	r0, r3
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	461a      	mov	r2, r3
 80043fc:	21a5      	movs	r1, #165	; 0xa5
 80043fe:	f001 fe07 	bl	8006010 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800440c:	3b01      	subs	r3, #1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	617b      	str	r3, [r7, #20]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d01f      	beq.n	8004482 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	e012      	b.n	800446e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	4413      	add	r3, r2
 800444e:	7819      	ldrb	r1, [r3, #0]
 8004450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	4413      	add	r3, r2
 8004456:	3334      	adds	r3, #52	; 0x34
 8004458:	460a      	mov	r2, r1
 800445a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3301      	adds	r3, #1
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b0f      	cmp	r3, #15
 8004472:	d9e9      	bls.n	8004448 <prvInitialiseNewTask+0x64>
 8004474:	e000      	b.n	8004478 <prvInitialiseNewTask+0x94>
			{
				break;
 8004476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004480:	e003      	b.n	800448a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2b37      	cmp	r3, #55	; 0x37
 800448e:	d901      	bls.n	8004494 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004490:	2337      	movs	r3, #55	; 0x37
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	2200      	movs	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff f978 	bl	80037a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	3318      	adds	r3, #24
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff f973 	bl	80037a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	69b8      	ldr	r0, [r7, #24]
 80044e4:	f001 f928 	bl	8005738 <pxPortInitialiseStack>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800450c:	f001 fa42 	bl	8005994 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004510:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <prvAddNewTaskToReadyList+0xc4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <prvAddNewTaskToReadyList+0xc4>)
 8004518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <prvAddNewTaskToReadyList+0xc8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004522:	4a2a      	ldr	r2, [pc, #168]	; (80045cc <prvAddNewTaskToReadyList+0xc8>)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <prvAddNewTaskToReadyList+0xc4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d110      	bne.n	8004552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004530:	f000 fc16 	bl	8004d60 <prvInitialiseTaskLists>
 8004534:	e00d      	b.n	8004552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004536:	4b26      	ldr	r3, [pc, #152]	; (80045d0 <prvAddNewTaskToReadyList+0xcc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d109      	bne.n	8004552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800453e:	4b23      	ldr	r3, [pc, #140]	; (80045cc <prvAddNewTaskToReadyList+0xc8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d802      	bhi.n	8004552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800454c:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <prvAddNewTaskToReadyList+0xc8>)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <prvAddNewTaskToReadyList+0xd0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3301      	adds	r3, #1
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <prvAddNewTaskToReadyList+0xd0>)
 800455a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <prvAddNewTaskToReadyList+0xd0>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <prvAddNewTaskToReadyList+0xd4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d903      	bls.n	8004578 <prvAddNewTaskToReadyList+0x74>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <prvAddNewTaskToReadyList+0xd4>)
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <prvAddNewTaskToReadyList+0xd8>)
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3304      	adds	r3, #4
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7ff f913 	bl	80037ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004594:	f001 fa2e 	bl	80059f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <prvAddNewTaskToReadyList+0xcc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <prvAddNewTaskToReadyList+0xc8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d207      	bcs.n	80045be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045ae:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <prvAddNewTaskToReadyList+0xdc>)
 80045b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000bbc 	.word	0x20000bbc
 80045cc:	200006e8 	.word	0x200006e8
 80045d0:	20000bc8 	.word	0x20000bc8
 80045d4:	20000bd8 	.word	0x20000bd8
 80045d8:	20000bc4 	.word	0x20000bc4
 80045dc:	200006ec 	.word	0x200006ec
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <vTaskDelay+0x60>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <vTaskDelay+0x30>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60bb      	str	r3, [r7, #8]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004614:	f000 f880 	bl	8004718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004618:	2100      	movs	r1, #0
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fcea 	bl	8004ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004620:	f000 f888 	bl	8004734 <xTaskResumeAll>
 8004624:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d107      	bne.n	800463c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <vTaskDelay+0x64>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000be4 	.word	0x20000be4
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800465a:	463a      	mov	r2, r7
 800465c:	1d39      	adds	r1, r7, #4
 800465e:	f107 0308 	add.w	r3, r7, #8
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f848 	bl	80036f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	9202      	str	r2, [sp, #8]
 8004670:	9301      	str	r3, [sp, #4]
 8004672:	2300      	movs	r3, #0
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2300      	movs	r3, #0
 8004678:	460a      	mov	r2, r1
 800467a:	4921      	ldr	r1, [pc, #132]	; (8004700 <vTaskStartScheduler+0xb4>)
 800467c:	4821      	ldr	r0, [pc, #132]	; (8004704 <vTaskStartScheduler+0xb8>)
 800467e:	f7ff fe0f 	bl	80042a0 <xTaskCreateStatic>
 8004682:	4603      	mov	r3, r0
 8004684:	4a20      	ldr	r2, [pc, #128]	; (8004708 <vTaskStartScheduler+0xbc>)
 8004686:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <vTaskStartScheduler+0xbc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e001      	b.n	800469a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046a0:	f000 fcfc 	bl	800509c <xTimerCreateTimerTask>
 80046a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d116      	bne.n	80046da <vTaskStartScheduler+0x8e>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	613b      	str	r3, [r7, #16]
}
 80046be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046c0:	4b12      	ldr	r3, [pc, #72]	; (800470c <vTaskStartScheduler+0xc0>)
 80046c2:	f04f 32ff 	mov.w	r2, #4294967295
 80046c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <vTaskStartScheduler+0xc4>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <vTaskStartScheduler+0xc8>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046d4:	f001 f8bc 	bl	8005850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046d8:	e00e      	b.n	80046f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d10a      	bne.n	80046f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60fb      	str	r3, [r7, #12]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vTaskStartScheduler+0xaa>
}
 80046f8:	bf00      	nop
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	08006044 	.word	0x08006044
 8004704:	08004d31 	.word	0x08004d31
 8004708:	20000be0 	.word	0x20000be0
 800470c:	20000bdc 	.word	0x20000bdc
 8004710:	20000bc8 	.word	0x20000bc8
 8004714:	20000bc0 	.word	0x20000bc0

08004718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <vTaskSuspendAll+0x18>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a03      	ldr	r2, [pc, #12]	; (8004730 <vTaskSuspendAll+0x18>)
 8004724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000be4 	.word	0x20000be4

08004734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <xTaskResumeAll+0x118>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <xTaskResumeAll+0x2c>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004760:	f001 f918 	bl	8005994 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004764:	4b39      	ldr	r3, [pc, #228]	; (800484c <xTaskResumeAll+0x118>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	4a38      	ldr	r2, [pc, #224]	; (800484c <xTaskResumeAll+0x118>)
 800476c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <xTaskResumeAll+0x118>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d162      	bne.n	800483c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004776:	4b36      	ldr	r3, [pc, #216]	; (8004850 <xTaskResumeAll+0x11c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d05e      	beq.n	800483c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800477e:	e02f      	b.n	80047e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <xTaskResumeAll+0x120>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3318      	adds	r3, #24
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff f871 	bl	8003874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff f86c 	bl	8003874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <xTaskResumeAll+0x124>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d903      	bls.n	80047b0 <xTaskResumeAll+0x7c>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <xTaskResumeAll+0x124>)
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4613      	mov	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a27      	ldr	r2, [pc, #156]	; (800485c <xTaskResumeAll+0x128>)
 80047be:	441a      	add	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3304      	adds	r3, #4
 80047c4:	4619      	mov	r1, r3
 80047c6:	4610      	mov	r0, r2
 80047c8:	f7fe fff7 	bl	80037ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b23      	ldr	r3, [pc, #140]	; (8004860 <xTaskResumeAll+0x12c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <xTaskResumeAll+0x130>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047e0:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <xTaskResumeAll+0x120>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1cb      	bne.n	8004780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047ee:	f000 fb55 	bl	8004e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <xTaskResumeAll+0x134>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d010      	beq.n	8004820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047fe:	f000 f847 	bl	8004890 <xTaskIncrementTick>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <xTaskResumeAll+0x130>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f1      	bne.n	80047fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <xTaskResumeAll+0x134>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <xTaskResumeAll+0x130>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <xTaskResumeAll+0x138>)
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800483c:	f001 f8da 	bl	80059f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004840:	68bb      	ldr	r3, [r7, #8]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000be4 	.word	0x20000be4
 8004850:	20000bbc 	.word	0x20000bbc
 8004854:	20000b7c 	.word	0x20000b7c
 8004858:	20000bc4 	.word	0x20000bc4
 800485c:	200006ec 	.word	0x200006ec
 8004860:	200006e8 	.word	0x200006e8
 8004864:	20000bd0 	.word	0x20000bd0
 8004868:	20000bcc 	.word	0x20000bcc
 800486c:	e000ed04 	.word	0xe000ed04

08004870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <xTaskGetTickCount+0x1c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800487c:	687b      	ldr	r3, [r7, #4]
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	20000bc0 	.word	0x20000bc0

08004890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489a:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <xTaskIncrementTick+0x148>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 808f 	bne.w	80049c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048a4:	4b4d      	ldr	r3, [pc, #308]	; (80049dc <xTaskIncrementTick+0x14c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <xTaskIncrementTick+0x14c>)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d120      	bne.n	80048fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b8:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <xTaskIncrementTick+0x150>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	603b      	str	r3, [r7, #0]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xTaskIncrementTick+0x46>
 80048d8:	4b41      	ldr	r3, [pc, #260]	; (80049e0 <xTaskIncrementTick+0x150>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	4b41      	ldr	r3, [pc, #260]	; (80049e4 <xTaskIncrementTick+0x154>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3f      	ldr	r2, [pc, #252]	; (80049e0 <xTaskIncrementTick+0x150>)
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <xTaskIncrementTick+0x154>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b3e      	ldr	r3, [pc, #248]	; (80049e8 <xTaskIncrementTick+0x158>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a3d      	ldr	r2, [pc, #244]	; (80049e8 <xTaskIncrementTick+0x158>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	f000 fad1 	bl	8004e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048fa:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <xTaskIncrementTick+0x15c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	429a      	cmp	r2, r3
 8004902:	d349      	bcc.n	8004998 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004904:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <xTaskIncrementTick+0x150>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d104      	bne.n	8004918 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490e:	4b37      	ldr	r3, [pc, #220]	; (80049ec <xTaskIncrementTick+0x15c>)
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	601a      	str	r2, [r3, #0]
					break;
 8004916:	e03f      	b.n	8004998 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004918:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <xTaskIncrementTick+0x150>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d203      	bcs.n	8004938 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004930:	4a2e      	ldr	r2, [pc, #184]	; (80049ec <xTaskIncrementTick+0x15c>)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004936:	e02f      	b.n	8004998 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe ff99 	bl	8003874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3318      	adds	r3, #24
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe ff90 	bl	8003874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <xTaskIncrementTick+0x160>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d903      	bls.n	8004968 <xTaskIncrementTick+0xd8>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a22      	ldr	r2, [pc, #136]	; (80049f0 <xTaskIncrementTick+0x160>)
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <xTaskIncrementTick+0x164>)
 8004976:	441a      	add	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fe ff1b 	bl	80037ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <xTaskIncrementTick+0x168>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	429a      	cmp	r2, r3
 8004990:	d3b8      	bcc.n	8004904 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004996:	e7b5      	b.n	8004904 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004998:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <xTaskIncrementTick+0x168>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4915      	ldr	r1, [pc, #84]	; (80049f4 <xTaskIncrementTick+0x164>)
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d901      	bls.n	80049b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049b0:	2301      	movs	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <xTaskIncrementTick+0x16c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049bc:	2301      	movs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e004      	b.n	80049cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <xTaskIncrementTick+0x170>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a0d      	ldr	r2, [pc, #52]	; (8004a00 <xTaskIncrementTick+0x170>)
 80049ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049cc:	697b      	ldr	r3, [r7, #20]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000be4 	.word	0x20000be4
 80049dc:	20000bc0 	.word	0x20000bc0
 80049e0:	20000b74 	.word	0x20000b74
 80049e4:	20000b78 	.word	0x20000b78
 80049e8:	20000bd4 	.word	0x20000bd4
 80049ec:	20000bdc 	.word	0x20000bdc
 80049f0:	20000bc4 	.word	0x20000bc4
 80049f4:	200006ec 	.word	0x200006ec
 80049f8:	200006e8 	.word	0x200006e8
 80049fc:	20000bd0 	.word	0x20000bd0
 8004a00:	20000bcc 	.word	0x20000bcc

08004a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <vTaskSwitchContext+0xa8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <vTaskSwitchContext+0xac>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a18:	e041      	b.n	8004a9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a1a:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <vTaskSwitchContext+0xac>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a20:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <vTaskSwitchContext+0xb0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e010      	b.n	8004a4a <vTaskSwitchContext+0x46>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <vTaskSwitchContext+0x3e>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	491b      	ldr	r1, [pc, #108]	; (8004ab8 <vTaskSwitchContext+0xb4>)
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0e4      	beq.n	8004a28 <vTaskSwitchContext+0x24>
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <vTaskSwitchContext+0xb4>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d104      	bne.n	8004a8e <vTaskSwitchContext+0x8a>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4a09      	ldr	r2, [pc, #36]	; (8004abc <vTaskSwitchContext+0xb8>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4a06      	ldr	r2, [pc, #24]	; (8004ab4 <vTaskSwitchContext+0xb0>)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6013      	str	r3, [r2, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000be4 	.word	0x20000be4
 8004ab0:	20000bd0 	.word	0x20000bd0
 8004ab4:	20000bc4 	.word	0x20000bc4
 8004ab8:	200006ec 	.word	0x200006ec
 8004abc:	200006e8 	.word	0x200006e8

08004ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	60fb      	str	r3, [r7, #12]
}
 8004ae2:	bf00      	nop
 8004ae4:	e7fe      	b.n	8004ae4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <vTaskPlaceOnEventList+0x44>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3318      	adds	r3, #24
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fe87 	bl	8003802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004af4:	2101      	movs	r1, #1
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f000 fa7c 	bl	8004ff4 <prvAddCurrentTaskToDelayedList>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200006e8 	.word	0x200006e8

08004b08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	617b      	str	r3, [r7, #20]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3318      	adds	r3, #24
 8004b36:	4619      	mov	r1, r3
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fe fe3e 	bl	80037ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b44:	f04f 33ff 	mov.w	r3, #4294967295
 8004b48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	f000 fa51 	bl	8004ff4 <prvAddCurrentTaskToDelayedList>
	}
 8004b52:	bf00      	nop
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200006e8 	.word	0x200006e8

08004b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	60fb      	str	r3, [r7, #12]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	3318      	adds	r3, #24
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fe6f 	bl	8003874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <xTaskRemoveFromEventList+0xb0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11d      	bne.n	8004bda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe fe66 	bl	8003874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	4b19      	ldr	r3, [pc, #100]	; (8004c14 <xTaskRemoveFromEventList+0xb4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d903      	bls.n	8004bbc <xTaskRemoveFromEventList+0x5c>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <xTaskRemoveFromEventList+0xb4>)
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <xTaskRemoveFromEventList+0xb8>)
 8004bca:	441a      	add	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f7fe fdf1 	bl	80037ba <vListInsertEnd>
 8004bd8:	e005      	b.n	8004be6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3318      	adds	r3, #24
 8004bde:	4619      	mov	r1, r3
 8004be0:	480e      	ldr	r0, [pc, #56]	; (8004c1c <xTaskRemoveFromEventList+0xbc>)
 8004be2:	f7fe fdea 	bl	80037ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	4b0d      	ldr	r3, [pc, #52]	; (8004c20 <xTaskRemoveFromEventList+0xc0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d905      	bls.n	8004c00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <xTaskRemoveFromEventList+0xc4>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e001      	b.n	8004c04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c04:	697b      	ldr	r3, [r7, #20]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000be4 	.word	0x20000be4
 8004c14:	20000bc4 	.word	0x20000bc4
 8004c18:	200006ec 	.word	0x200006ec
 8004c1c:	20000b7c 	.word	0x20000b7c
 8004c20:	200006e8 	.word	0x200006e8
 8004c24:	20000bd0 	.word	0x20000bd0

08004c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <vTaskInternalSetTimeOutState+0x24>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <vTaskInternalSetTimeOutState+0x28>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	605a      	str	r2, [r3, #4]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000bd4 	.word	0x20000bd4
 8004c50:	20000bc0 	.word	0x20000bc0

08004c54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	613b      	str	r3, [r7, #16]
}
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c96:	f000 fe7d 	bl	8005994 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <xTaskCheckForTimeOut+0xbc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d102      	bne.n	8004cba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	e023      	b.n	8004d02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <xTaskCheckForTimeOut+0xc0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d007      	beq.n	8004cd6 <xTaskCheckForTimeOut+0x82>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	e015      	b.n	8004d02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d20b      	bcs.n	8004cf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff9b 	bl	8004c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e004      	b.n	8004d02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d02:	f000 fe77 	bl	80059f4 <vPortExitCritical>

	return xReturn;
 8004d06:	69fb      	ldr	r3, [r7, #28]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000bc0 	.word	0x20000bc0
 8004d14:	20000bd4 	.word	0x20000bd4

08004d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d1c:	4b03      	ldr	r3, [pc, #12]	; (8004d2c <vTaskMissedYield+0x14>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000bd0 	.word	0x20000bd0

08004d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d38:	f000 f852 	bl	8004de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <prvIdleTask+0x28>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d9f9      	bls.n	8004d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <prvIdleTask+0x2c>)
 8004d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d54:	e7f0      	b.n	8004d38 <prvIdleTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	200006ec 	.word	0x200006ec
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e00c      	b.n	8004d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <prvInitialiseTaskLists+0x60>)
 8004d78:	4413      	add	r3, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fcf0 	bl	8003760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b37      	cmp	r3, #55	; 0x37
 8004d8a:	d9ef      	bls.n	8004d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d8c:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004d8e:	f7fe fce7 	bl	8003760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d92:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004d94:	f7fe fce4 	bl	8003760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d98:	480c      	ldr	r0, [pc, #48]	; (8004dcc <prvInitialiseTaskLists+0x6c>)
 8004d9a:	f7fe fce1 	bl	8003760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d9e:	480c      	ldr	r0, [pc, #48]	; (8004dd0 <prvInitialiseTaskLists+0x70>)
 8004da0:	f7fe fcde 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004da4:	480b      	ldr	r0, [pc, #44]	; (8004dd4 <prvInitialiseTaskLists+0x74>)
 8004da6:	f7fe fcdb 	bl	8003760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <prvInitialiseTaskLists+0x78>)
 8004dac:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <prvInitialiseTaskLists+0x64>)
 8004dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <prvInitialiseTaskLists+0x7c>)
 8004db2:	4a05      	ldr	r2, [pc, #20]	; (8004dc8 <prvInitialiseTaskLists+0x68>)
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200006ec 	.word	0x200006ec
 8004dc4:	20000b4c 	.word	0x20000b4c
 8004dc8:	20000b60 	.word	0x20000b60
 8004dcc:	20000b7c 	.word	0x20000b7c
 8004dd0:	20000b90 	.word	0x20000b90
 8004dd4:	20000ba8 	.word	0x20000ba8
 8004dd8:	20000b74 	.word	0x20000b74
 8004ddc:	20000b78 	.word	0x20000b78

08004de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004de6:	e019      	b.n	8004e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004de8:	f000 fdd4 	bl	8005994 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dec:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <prvCheckTasksWaitingTermination+0x50>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fd3b 	bl	8003874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <prvCheckTasksWaitingTermination+0x54>)
 8004e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e12:	f000 fdef 	bl	80059f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f810 	bl	8004e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <prvCheckTasksWaitingTermination+0x58>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e1      	bne.n	8004de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000b90 	.word	0x20000b90
 8004e34:	20000bbc 	.word	0x20000bbc
 8004e38:	20000ba4 	.word	0x20000ba4

08004e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d108      	bne.n	8004e60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 ff8c 	bl	8005d70 <vPortFree>
				vPortFree( pxTCB );
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 ff89 	bl	8005d70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e5e:	e018      	b.n	8004e92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d103      	bne.n	8004e72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 ff80 	bl	8005d70 <vPortFree>
	}
 8004e70:	e00f      	b.n	8004e92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d00a      	beq.n	8004e92 <prvDeleteTCB+0x56>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60fb      	str	r3, [r7, #12]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <prvDeleteTCB+0x54>
	}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <prvResetNextTaskUnblockTime+0x38>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004eb4:	e008      	b.n	8004ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <prvResetNextTaskUnblockTime+0x38>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20000b74 	.word	0x20000b74
 8004ed8:	20000bdc 	.word	0x20000bdc

08004edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <xTaskGetSchedulerState+0x34>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eea:	2301      	movs	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	e008      	b.n	8004f02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <xTaskGetSchedulerState+0x38>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	e001      	b.n	8004f02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f02:	687b      	ldr	r3, [r7, #4]
	}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	20000bc8 	.word	0x20000bc8
 8004f14:	20000be4 	.word	0x20000be4

08004f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d056      	beq.n	8004fdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f2e:	4b2e      	ldr	r3, [pc, #184]	; (8004fe8 <xTaskPriorityDisinherit+0xd0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d00a      	beq.n	8004f4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	60fb      	str	r3, [r7, #12]
}
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60bb      	str	r3, [r7, #8]
}
 8004f68:	bf00      	nop
 8004f6a:	e7fe      	b.n	8004f6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d02c      	beq.n	8004fdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d128      	bne.n	8004fdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fc70 	bl	8003874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <xTaskPriorityDisinherit+0xd4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d903      	bls.n	8004fbc <xTaskPriorityDisinherit+0xa4>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	; (8004fec <xTaskPriorityDisinherit+0xd4>)
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <xTaskPriorityDisinherit+0xd8>)
 8004fca:	441a      	add	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fe fbf1 	bl	80037ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fdc:	697b      	ldr	r3, [r7, #20]
	}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200006e8 	.word	0x200006e8
 8004fec:	20000bc4 	.word	0x20000bc4
 8004ff0:	200006ec 	.word	0x200006ec

08004ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ffe:	4b21      	ldr	r3, [pc, #132]	; (8005084 <prvAddCurrentTaskToDelayedList+0x90>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <prvAddCurrentTaskToDelayedList+0x94>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3304      	adds	r3, #4
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fc32 	bl	8003874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d10a      	bne.n	800502e <prvAddCurrentTaskToDelayedList+0x3a>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501e:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <prvAddCurrentTaskToDelayedList+0x94>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4819      	ldr	r0, [pc, #100]	; (800508c <prvAddCurrentTaskToDelayedList+0x98>)
 8005028:	f7fe fbc7 	bl	80037ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800502c:	e026      	b.n	800507c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <prvAddCurrentTaskToDelayedList+0x94>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	429a      	cmp	r2, r3
 8005044:	d209      	bcs.n	800505a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <prvAddCurrentTaskToDelayedList+0x94>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3304      	adds	r3, #4
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fe fbd5 	bl	8003802 <vListInsert>
}
 8005058:	e010      	b.n	800507c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505a:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <prvAddCurrentTaskToDelayedList+0xa0>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <prvAddCurrentTaskToDelayedList+0x94>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fe fbcb 	bl	8003802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800506c:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvAddCurrentTaskToDelayedList+0xa4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	d202      	bcs.n	800507c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6013      	str	r3, [r2, #0]
}
 800507c:	bf00      	nop
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	20000bc0 	.word	0x20000bc0
 8005088:	200006e8 	.word	0x200006e8
 800508c:	20000ba8 	.word	0x20000ba8
 8005090:	20000b78 	.word	0x20000b78
 8005094:	20000b74 	.word	0x20000b74
 8005098:	20000bdc 	.word	0x20000bdc

0800509c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050a6:	f000 fb07 	bl	80056b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050aa:	4b1c      	ldr	r3, [pc, #112]	; (800511c <xTimerCreateTimerTask+0x80>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d021      	beq.n	80050f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050ba:	1d3a      	adds	r2, r7, #4
 80050bc:	f107 0108 	add.w	r1, r7, #8
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe fb31 	bl	800372c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	9202      	str	r2, [sp, #8]
 80050d2:	9301      	str	r3, [sp, #4]
 80050d4:	2302      	movs	r3, #2
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	2300      	movs	r3, #0
 80050da:	460a      	mov	r2, r1
 80050dc:	4910      	ldr	r1, [pc, #64]	; (8005120 <xTimerCreateTimerTask+0x84>)
 80050de:	4811      	ldr	r0, [pc, #68]	; (8005124 <xTimerCreateTimerTask+0x88>)
 80050e0:	f7ff f8de 	bl	80042a0 <xTaskCreateStatic>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a10      	ldr	r2, [pc, #64]	; (8005128 <xTimerCreateTimerTask+0x8c>)
 80050e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <xTimerCreateTimerTask+0x8c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050f2:	2301      	movs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000c18 	.word	0x20000c18
 8005120:	0800604c 	.word	0x0800604c
 8005124:	08005261 	.word	0x08005261
 8005128:	20000c1c 	.word	0x20000c1c

0800512c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	623b      	str	r3, [r7, #32]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800515a:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <xTimerGenericCommand+0x98>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02a      	beq.n	80051b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b05      	cmp	r3, #5
 8005172:	dc18      	bgt.n	80051a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005174:	f7ff feb2 	bl	8004edc <xTaskGetSchedulerState>
 8005178:	4603      	mov	r3, r0
 800517a:	2b02      	cmp	r3, #2
 800517c:	d109      	bne.n	8005192 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <xTimerGenericCommand+0x98>)
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f107 0110 	add.w	r1, r7, #16
 8005186:	2300      	movs	r3, #0
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	f7fe fca1 	bl	8003ad0 <xQueueGenericSend>
 800518e:	6278      	str	r0, [r7, #36]	; 0x24
 8005190:	e012      	b.n	80051b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <xTimerGenericCommand+0x98>)
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	f107 0110 	add.w	r1, r7, #16
 800519a:	2300      	movs	r3, #0
 800519c:	2200      	movs	r2, #0
 800519e:	f7fe fc97 	bl	8003ad0 <xQueueGenericSend>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24
 80051a4:	e008      	b.n	80051b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <xTimerGenericCommand+0x98>)
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	f107 0110 	add.w	r1, r7, #16
 80051ae:	2300      	movs	r3, #0
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	f7fe fd8b 	bl	8003ccc <xQueueGenericSendFromISR>
 80051b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3728      	adds	r7, #40	; 0x28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000c18 	.word	0x20000c18

080051c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <prvProcessExpiredTimer+0x94>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	3304      	adds	r3, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fe fb47 	bl	8003874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d022      	beq.n	800523a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	18d1      	adds	r1, r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f000 f8d1 	bl	80053a8 <prvInsertTimerInActiveList>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01f      	beq.n	800524c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800520c:	2300      	movs	r3, #0
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	2300      	movs	r3, #0
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	2100      	movs	r1, #0
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff ff88 	bl	800512c <xTimerGenericCommand>
 800521c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d113      	bne.n	800524c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	4798      	blx	r3
}
 8005254:	bf00      	nop
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000c10 	.word	0x20000c10

08005260 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f857 	bl	8005320 <prvGetNextExpireTime>
 8005272:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4619      	mov	r1, r3
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f803 	bl	8005284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800527e:	f000 f8d5 	bl	800542c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005282:	e7f1      	b.n	8005268 <prvTimerTask+0x8>

08005284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800528e:	f7ff fa43 	bl	8004718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f866 	bl	8005368 <prvSampleTimeNow>
 800529c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d130      	bne.n	8005306 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10a      	bne.n	80052c0 <prvProcessTimerOrBlockTask+0x3c>
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d806      	bhi.n	80052c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052b2:	f7ff fa3f 	bl	8004734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff ff85 	bl	80051c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052be:	e024      	b.n	800530a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <prvProcessTimerOrBlockTask+0x90>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <prvProcessTimerOrBlockTask+0x50>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <prvProcessTimerOrBlockTask+0x52>
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052d8:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <prvProcessTimerOrBlockTask+0x94>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f7fe ffa7 	bl	8004238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ea:	f7ff fa23 	bl	8004734 <xTaskResumeAll>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052f4:	4b09      	ldr	r3, [pc, #36]	; (800531c <prvProcessTimerOrBlockTask+0x98>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
}
 8005304:	e001      	b.n	800530a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005306:	f7ff fa15 	bl	8004734 <xTaskResumeAll>
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000c14 	.word	0x20000c14
 8005318:	20000c18 	.word	0x20000c18
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <prvGetNextExpireTime+0x44>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <prvGetNextExpireTime+0x16>
 8005332:	2201      	movs	r2, #1
 8005334:	e000      	b.n	8005338 <prvGetNextExpireTime+0x18>
 8005336:	2200      	movs	r2, #0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d105      	bne.n	8005350 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005344:	4b07      	ldr	r3, [pc, #28]	; (8005364 <prvGetNextExpireTime+0x44>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e001      	b.n	8005354 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005354:	68fb      	ldr	r3, [r7, #12]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000c10 	.word	0x20000c10

08005368 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005370:	f7ff fa7e 	bl	8004870 <xTaskGetTickCount>
 8005374:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <prvSampleTimeNow+0x3c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d205      	bcs.n	800538c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005380:	f000 f936 	bl	80055f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e002      	b.n	8005392 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005392:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <prvSampleTimeNow+0x3c>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000c20 	.word	0x20000c20

080053a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d812      	bhi.n	80053f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d302      	bcc.n	80053e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e01b      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <prvInsertTimerInActiveList+0x7c>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe fa08 	bl	8003802 <vListInsert>
 80053f2:	e012      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d206      	bcs.n	800540a <prvInsertTimerInActiveList+0x62>
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e007      	b.n	800541a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <prvInsertTimerInActiveList+0x80>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f7fe f9f4 	bl	8003802 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800541a:	697b      	ldr	r3, [r7, #20]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000c14 	.word	0x20000c14
 8005428:	20000c10 	.word	0x20000c10

0800542c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08e      	sub	sp, #56	; 0x38
 8005430:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005432:	e0ca      	b.n	80055ca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	da18      	bge.n	800546c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	3304      	adds	r3, #4
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10a      	bne.n	800545c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61fb      	str	r3, [r7, #28]
}
 8005458:	bf00      	nop
 800545a:	e7fe      	b.n	800545a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005462:	6850      	ldr	r0, [r2, #4]
 8005464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005466:	6892      	ldr	r2, [r2, #8]
 8005468:	4611      	mov	r1, r2
 800546a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f2c0 80aa 	blt.w	80055c8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe f9f5 	bl	8003874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800548a:	463b      	mov	r3, r7
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff ff6b 	bl	8005368 <prvSampleTimeNow>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b09      	cmp	r3, #9
 8005498:	f200 8097 	bhi.w	80055ca <prvProcessReceivedCommands+0x19e>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <prvProcessReceivedCommands+0x78>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054cd 	.word	0x080054cd
 80054a8:	080054cd 	.word	0x080054cd
 80054ac:	080054cd 	.word	0x080054cd
 80054b0:	08005541 	.word	0x08005541
 80054b4:	08005555 	.word	0x08005555
 80054b8:	0800559f 	.word	0x0800559f
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054cd 	.word	0x080054cd
 80054c4:	08005541 	.word	0x08005541
 80054c8:	08005555 	.word	0x08005555
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	18d1      	adds	r1, r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ec:	f7ff ff5c 	bl	80053a8 <prvInsertTimerInActiveList>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d069      	beq.n	80055ca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05e      	beq.n	80055ca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	441a      	add	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	2300      	movs	r3, #0
 800551a:	2100      	movs	r1, #0
 800551c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800551e:	f7ff fe05 	bl	800512c <xTimerGenericCommand>
 8005522:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d14f      	bne.n	80055ca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	61bb      	str	r3, [r7, #24]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005546:	f023 0301 	bic.w	r3, r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005552:	e03a      	b.n	80055ca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	617b      	str	r3, [r7, #20]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	699a      	ldr	r2, [r3, #24]
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	18d1      	adds	r1, r2, r3
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005598:	f7ff ff06 	bl	80053a8 <prvInsertTimerInActiveList>
					break;
 800559c:	e015      	b.n	80055ca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d103      	bne.n	80055b4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ae:	f000 fbdf 	bl	8005d70 <vPortFree>
 80055b2:	e00a      	b.n	80055ca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055c6:	e000      	b.n	80055ca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055ca:	4b08      	ldr	r3, [pc, #32]	; (80055ec <prvProcessReceivedCommands+0x1c0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1d39      	adds	r1, r7, #4
 80055d0:	2200      	movs	r2, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fc16 	bl	8003e04 <xQueueReceive>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f47f af2a 	bne.w	8005434 <prvProcessReceivedCommands+0x8>
	}
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3730      	adds	r7, #48	; 0x30
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000c18 	.word	0x20000c18

080055f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f6:	e048      	b.n	800568a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005602:	4b2b      	ldr	r3, [pc, #172]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe f92f 	bl	8003874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02e      	beq.n	800568a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	429a      	cmp	r2, r3
 800563c:	d90e      	bls.n	800565c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7fe f8d4 	bl	8003802 <vListInsert>
 800565a:	e016      	b.n	800568a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2300      	movs	r3, #0
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	2100      	movs	r1, #0
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff fd60 	bl	800512c <xTimerGenericCommand>
 800566c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	603b      	str	r3, [r7, #0]
}
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800568a:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1b1      	bne.n	80055f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <prvSwitchTimerLists+0xc4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <prvSwitchTimerLists+0xc0>)
 80056a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056a2:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <prvSwitchTimerLists+0xc4>)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000c10 	.word	0x20000c10
 80056b4:	20000c14 	.word	0x20000c14

080056b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056be:	f000 f969 	bl	8005994 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <prvCheckForValidListAndQueue+0x60>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d120      	bne.n	800570c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056ca:	4814      	ldr	r0, [pc, #80]	; (800571c <prvCheckForValidListAndQueue+0x64>)
 80056cc:	f7fe f848 	bl	8003760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056d0:	4813      	ldr	r0, [pc, #76]	; (8005720 <prvCheckForValidListAndQueue+0x68>)
 80056d2:	f7fe f845 	bl	8003760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056d6:	4b13      	ldr	r3, [pc, #76]	; (8005724 <prvCheckForValidListAndQueue+0x6c>)
 80056d8:	4a10      	ldr	r2, [pc, #64]	; (800571c <prvCheckForValidListAndQueue+0x64>)
 80056da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <prvCheckForValidListAndQueue+0x70>)
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <prvCheckForValidListAndQueue+0x68>)
 80056e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056e2:	2300      	movs	r3, #0
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	4b11      	ldr	r3, [pc, #68]	; (800572c <prvCheckForValidListAndQueue+0x74>)
 80056e8:	4a11      	ldr	r2, [pc, #68]	; (8005730 <prvCheckForValidListAndQueue+0x78>)
 80056ea:	2110      	movs	r1, #16
 80056ec:	200a      	movs	r0, #10
 80056ee:	f7fe f953 	bl	8003998 <xQueueGenericCreateStatic>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4a08      	ldr	r2, [pc, #32]	; (8005718 <prvCheckForValidListAndQueue+0x60>)
 80056f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <prvCheckForValidListAndQueue+0x60>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <prvCheckForValidListAndQueue+0x60>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	490b      	ldr	r1, [pc, #44]	; (8005734 <prvCheckForValidListAndQueue+0x7c>)
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd6c 	bl	80041e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800570c:	f000 f972 	bl	80059f4 <vPortExitCritical>
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000c18 	.word	0x20000c18
 800571c:	20000be8 	.word	0x20000be8
 8005720:	20000bfc 	.word	0x20000bfc
 8005724:	20000c10 	.word	0x20000c10
 8005728:	20000c14 	.word	0x20000c14
 800572c:	20000cc4 	.word	0x20000cc4
 8005730:	20000c24 	.word	0x20000c24
 8005734:	08006054 	.word	0x08006054

08005738 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3b04      	subs	r3, #4
 8005748:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3b04      	subs	r3, #4
 8005756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3b04      	subs	r3, #4
 8005766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005768:	4a0c      	ldr	r2, [pc, #48]	; (800579c <pxPortInitialiseStack+0x64>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3b14      	subs	r3, #20
 8005772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3b04      	subs	r3, #4
 800577e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f06f 0202 	mvn.w	r2, #2
 8005786:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b20      	subs	r3, #32
 800578c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	080057a1 	.word	0x080057a1

080057a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057aa:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <prvTaskExitError+0x54>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d00a      	beq.n	80057ca <prvTaskExitError+0x2a>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60fb      	str	r3, [r7, #12]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <prvTaskExitError+0x28>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60bb      	str	r3, [r7, #8]
}
 80057dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057de:	bf00      	nop
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0fc      	beq.n	80057e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	2000000c 	.word	0x2000000c
	...

08005800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <pxCurrentTCBConst2>)
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	6808      	ldr	r0, [r1, #0]
 8005806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	f380 8809 	msr	PSP, r0
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f04f 0000 	mov.w	r0, #0
 8005816:	f380 8811 	msr	BASEPRI, r0
 800581a:	4770      	bx	lr
 800581c:	f3af 8000 	nop.w

08005820 <pxCurrentTCBConst2>:
 8005820:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop

08005828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005828:	4808      	ldr	r0, [pc, #32]	; (800584c <prvPortStartFirstTask+0x24>)
 800582a:	6800      	ldr	r0, [r0, #0]
 800582c:	6800      	ldr	r0, [r0, #0]
 800582e:	f380 8808 	msr	MSP, r0
 8005832:	f04f 0000 	mov.w	r0, #0
 8005836:	f380 8814 	msr	CONTROL, r0
 800583a:	b662      	cpsie	i
 800583c:	b661      	cpsie	f
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	df00      	svc	0
 8005848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800584a:	bf00      	nop
 800584c:	e000ed08 	.word	0xe000ed08

08005850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005856:	4b46      	ldr	r3, [pc, #280]	; (8005970 <xPortStartScheduler+0x120>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a46      	ldr	r2, [pc, #280]	; (8005974 <xPortStartScheduler+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10a      	bne.n	8005876 <xPortStartScheduler+0x26>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	613b      	str	r3, [r7, #16]
}
 8005872:	bf00      	nop
 8005874:	e7fe      	b.n	8005874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005876:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <xPortStartScheduler+0x120>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a3f      	ldr	r2, [pc, #252]	; (8005978 <xPortStartScheduler+0x128>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10a      	bne.n	8005896 <xPortStartScheduler+0x46>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	60fb      	str	r3, [r7, #12]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005896:	4b39      	ldr	r3, [pc, #228]	; (800597c <xPortStartScheduler+0x12c>)
 8005898:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <xPortStartScheduler+0x130>)
 80058bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058be:	4b31      	ldr	r3, [pc, #196]	; (8005984 <xPortStartScheduler+0x134>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058c4:	e009      	b.n	80058da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <xPortStartScheduler+0x134>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	4a2d      	ldr	r2, [pc, #180]	; (8005984 <xPortStartScheduler+0x134>)
 80058ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b80      	cmp	r3, #128	; 0x80
 80058e4:	d0ef      	beq.n	80058c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058e6:	4b27      	ldr	r3, [pc, #156]	; (8005984 <xPortStartScheduler+0x134>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d00a      	beq.n	8005908 <xPortStartScheduler+0xb8>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60bb      	str	r3, [r7, #8]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <xPortStartScheduler+0x134>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <xPortStartScheduler+0x134>)
 8005910:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <xPortStartScheduler+0x134>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <xPortStartScheduler+0x134>)
 800591c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <xPortStartScheduler+0x138>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <xPortStartScheduler+0x138>)
 800592c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005930:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <xPortStartScheduler+0x138>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a14      	ldr	r2, [pc, #80]	; (8005988 <xPortStartScheduler+0x138>)
 8005938:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800593c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800593e:	f000 f8dd 	bl	8005afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <xPortStartScheduler+0x13c>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005948:	f000 f8fc 	bl	8005b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800594c:	4b10      	ldr	r3, [pc, #64]	; (8005990 <xPortStartScheduler+0x140>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <xPortStartScheduler+0x140>)
 8005952:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005956:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005958:	f7ff ff66 	bl	8005828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800595c:	f7ff f852 	bl	8004a04 <vTaskSwitchContext>
	prvTaskExitError();
 8005960:	f7ff ff1e 	bl	80057a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	e000ed00 	.word	0xe000ed00
 8005974:	410fc271 	.word	0x410fc271
 8005978:	410fc270 	.word	0x410fc270
 800597c:	e000e400 	.word	0xe000e400
 8005980:	20000d14 	.word	0x20000d14
 8005984:	20000d18 	.word	0x20000d18
 8005988:	e000ed20 	.word	0xe000ed20
 800598c:	2000000c 	.word	0x2000000c
 8005990:	e000ef34 	.word	0xe000ef34

08005994 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	607b      	str	r3, [r7, #4]
}
 80059ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <vPortEnterCritical+0x58>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3301      	adds	r3, #1
 80059b4:	4a0d      	ldr	r2, [pc, #52]	; (80059ec <vPortEnterCritical+0x58>)
 80059b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <vPortEnterCritical+0x58>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d10f      	bne.n	80059e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <vPortEnterCritical+0x5c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	603b      	str	r3, [r7, #0]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <vPortEnterCritical+0x4a>
	}
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	2000000c 	.word	0x2000000c
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <vPortExitCritical+0x50>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <vPortExitCritical+0x24>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	607b      	str	r3, [r7, #4]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <vPortExitCritical+0x50>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	4a09      	ldr	r2, [pc, #36]	; (8005a44 <vPortExitCritical+0x50>)
 8005a20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <vPortExitCritical+0x50>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <vPortExitCritical+0x42>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f383 8811 	msr	BASEPRI, r3
}
 8005a34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2000000c 	.word	0x2000000c
	...

08005a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a50:	f3ef 8009 	mrs	r0, PSP
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <pxCurrentTCBConst>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	f01e 0f10 	tst.w	lr, #16
 8005a60:	bf08      	it	eq
 8005a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6a:	6010      	str	r0, [r2, #0]
 8005a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a74:	f380 8811 	msr	BASEPRI, r0
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f7fe ffc0 	bl	8004a04 <vTaskSwitchContext>
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f380 8811 	msr	BASEPRI, r0
 8005a8c:	bc09      	pop	{r0, r3}
 8005a8e:	6819      	ldr	r1, [r3, #0]
 8005a90:	6808      	ldr	r0, [r1, #0]
 8005a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a96:	f01e 0f10 	tst.w	lr, #16
 8005a9a:	bf08      	it	eq
 8005a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005aa0:	f380 8809 	msr	PSP, r0
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w

08005ab0 <pxCurrentTCBConst>:
 8005ab0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop

08005ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	607b      	str	r3, [r7, #4]
}
 8005ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ad2:	f7fe fedd 	bl	8004890 <xTaskIncrementTick>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <xPortSysTickHandler+0x40>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <vPortSetupTimerInterrupt+0x34>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b06:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <vPortSetupTimerInterrupt+0x38>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <vPortSetupTimerInterrupt+0x3c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0a      	ldr	r2, [pc, #40]	; (8005b3c <vPortSetupTimerInterrupt+0x40>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <vPortSetupTimerInterrupt+0x44>)
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <vPortSetupTimerInterrupt+0x34>)
 8005b20:	2207      	movs	r2, #7
 8005b22:	601a      	str	r2, [r3, #0]
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e010 	.word	0xe000e010
 8005b34:	e000e018 	.word	0xe000e018
 8005b38:	20000000 	.word	0x20000000
 8005b3c:	10624dd3 	.word	0x10624dd3
 8005b40:	e000e014 	.word	0xe000e014

08005b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b54 <vPortEnableVFP+0x10>
 8005b48:	6801      	ldr	r1, [r0, #0]
 8005b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b4e:	6001      	str	r1, [r0, #0]
 8005b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b52:	bf00      	nop
 8005b54:	e000ed88 	.word	0xe000ed88

08005b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b5e:	f3ef 8305 	mrs	r3, IPSR
 8005b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b0f      	cmp	r3, #15
 8005b68:	d914      	bls.n	8005b94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b6a:	4a17      	ldr	r2, [pc, #92]	; (8005bc8 <vPortValidateInterruptPriority+0x70>)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b74:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <vPortValidateInterruptPriority+0x74>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	7afa      	ldrb	r2, [r7, #11]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d20a      	bcs.n	8005b94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	607b      	str	r3, [r7, #4]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <vPortValidateInterruptPriority+0x78>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <vPortValidateInterruptPriority+0x7c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d90a      	bls.n	8005bba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	603b      	str	r3, [r7, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <vPortValidateInterruptPriority+0x60>
	}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	e000e3f0 	.word	0xe000e3f0
 8005bcc:	20000d14 	.word	0x20000d14
 8005bd0:	e000ed0c 	.word	0xe000ed0c
 8005bd4:	20000d18 	.word	0x20000d18

08005bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005be4:	f7fe fd98 	bl	8004718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005be8:	4b5b      	ldr	r3, [pc, #364]	; (8005d58 <pvPortMalloc+0x180>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005bf0:	f000 f920 	bl	8005e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bf4:	4b59      	ldr	r3, [pc, #356]	; (8005d5c <pvPortMalloc+0x184>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8093 	bne.w	8005d28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01d      	beq.n	8005c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c08:	2208      	movs	r2, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	3308      	adds	r3, #8
 8005c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <pvPortMalloc+0x6c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	617b      	str	r3, [r7, #20]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d06e      	beq.n	8005d28 <pvPortMalloc+0x150>
 8005c4a:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <pvPortMalloc+0x188>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d869      	bhi.n	8005d28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c54:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <pvPortMalloc+0x18c>)
 8005c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c58:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <pvPortMalloc+0x18c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c5e:	e004      	b.n	8005c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d903      	bls.n	8005c7c <pvPortMalloc+0xa4>
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1f1      	bne.n	8005c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c7c:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <pvPortMalloc+0x180>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d050      	beq.n	8005d28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2208      	movs	r2, #8
 8005c8c:	4413      	add	r3, r2
 8005c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	2308      	movs	r3, #8
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d91f      	bls.n	8005ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4413      	add	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	613b      	str	r3, [r7, #16]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	1ad2      	subs	r2, r2, r3
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ce2:	69b8      	ldr	r0, [r7, #24]
 8005ce4:	f000 f908 	bl	8005ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <pvPortMalloc+0x188>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	4a1b      	ldr	r2, [pc, #108]	; (8005d60 <pvPortMalloc+0x188>)
 8005cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <pvPortMalloc+0x188>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <pvPortMalloc+0x190>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d203      	bcs.n	8005d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d02:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <pvPortMalloc+0x188>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <pvPortMalloc+0x190>)
 8005d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <pvPortMalloc+0x184>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <pvPortMalloc+0x194>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a11      	ldr	r2, [pc, #68]	; (8005d6c <pvPortMalloc+0x194>)
 8005d26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d28:	f7fe fd04 	bl	8004734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <pvPortMalloc+0x174>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60fb      	str	r3, [r7, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <pvPortMalloc+0x172>
	return pvReturn;
 8005d4c:	69fb      	ldr	r3, [r7, #28]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3728      	adds	r7, #40	; 0x28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200018dc 	.word	0x200018dc
 8005d5c:	200018f0 	.word	0x200018f0
 8005d60:	200018e0 	.word	0x200018e0
 8005d64:	200018d4 	.word	0x200018d4
 8005d68:	200018e4 	.word	0x200018e4
 8005d6c:	200018e8 	.word	0x200018e8

08005d70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d04d      	beq.n	8005e1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d82:	2308      	movs	r3, #8
 8005d84:	425b      	negs	r3, r3
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4413      	add	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <vPortFree+0xb8>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <vPortFree+0x44>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60fb      	str	r3, [r7, #12]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <vPortFree+0x62>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60bb      	str	r3, [r7, #8]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <vPortFree+0xb8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01e      	beq.n	8005e1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11a      	bne.n	8005e1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <vPortFree+0xb8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	43db      	mvns	r3, r3
 8005df2:	401a      	ands	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005df8:	f7fe fc8e 	bl	8004718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <vPortFree+0xbc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4413      	add	r3, r2
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <vPortFree+0xbc>)
 8005e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e0a:	6938      	ldr	r0, [r7, #16]
 8005e0c:	f000 f874 	bl	8005ef8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <vPortFree+0xc0>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3301      	adds	r3, #1
 8005e16:	4a06      	ldr	r2, [pc, #24]	; (8005e30 <vPortFree+0xc0>)
 8005e18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e1a:	f7fe fc8b 	bl	8004734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e1e:	bf00      	nop
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200018f0 	.word	0x200018f0
 8005e2c:	200018e0 	.word	0x200018e0
 8005e30:	200018ec 	.word	0x200018ec

08005e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <prvHeapInit+0xac>)
 8005e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3307      	adds	r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <prvHeapInit+0xac>)
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e80:	2208      	movs	r2, #8
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <prvHeapInit+0xb4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvHeapInit+0xb4>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <prvHeapInit+0xb8>)
 8005ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <prvHeapInit+0xbc>)
 8005eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <prvHeapInit+0xc0>)
 8005ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000d1c 	.word	0x20000d1c
 8005ee4:	200018d4 	.word	0x200018d4
 8005ee8:	200018dc 	.word	0x200018dc
 8005eec:	200018e4 	.word	0x200018e4
 8005ef0:	200018e0 	.word	0x200018e0
 8005ef4:	200018f0 	.word	0x200018f0

08005ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <prvInsertBlockIntoFreeList+0xac>)
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e002      	b.n	8005f0c <prvInsertBlockIntoFreeList+0x14>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d8f7      	bhi.n	8005f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4413      	add	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d108      	bne.n	8005f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	441a      	add	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	441a      	add	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d118      	bne.n	8005f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d00d      	beq.n	8005f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e008      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e003      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d002      	beq.n	8005f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	200018d4 	.word	0x200018d4
 8005fa8:	200018dc 	.word	0x200018dc

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	; (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 f82e 	bl	8006020 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	080060d0 	.word	0x080060d0
 8005fe8:	080060d0 	.word	0x080060d0
 8005fec:	080060d0 	.word	0x080060d0
 8005ff0:	080060d4 	.word	0x080060d4

08005ff4 <memcpy>:
 8005ff4:	440a      	add	r2, r1
 8005ff6:	4291      	cmp	r1, r2
 8005ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ffc:	d100      	bne.n	8006000 <memcpy+0xc>
 8005ffe:	4770      	bx	lr
 8006000:	b510      	push	{r4, lr}
 8006002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800600a:	4291      	cmp	r1, r2
 800600c:	d1f9      	bne.n	8006002 <memcpy+0xe>
 800600e:	bd10      	pop	{r4, pc}

08006010 <memset>:
 8006010:	4402      	add	r2, r0
 8006012:	4603      	mov	r3, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <_init>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr

0800602c <_fini>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr
