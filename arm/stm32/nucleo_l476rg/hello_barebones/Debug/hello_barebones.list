
hello_barebones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008038  08008038  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08008038  08008038  00018038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008040  08008040  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08008048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  20000190  080081d8  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  080081d8  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e28f  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c08  00000000  00000000  0003e44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00042058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  00043500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a3a  00000000  00000000  00044840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bf2  00000000  00000000  0006e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f014a  00000000  00000000  00086e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176fb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005614  00000000  00000000  0017700c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000190 	.word	0x20000190
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f90 	.word	0x08007f90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000194 	.word	0x20000194
 80001c4:	08007f90 	.word	0x08007f90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb43 	bl	8000b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f816 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f94e 	bl	800076c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f89e 	bl	8000610 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80004d4:	f000 f91a 	bl	800070c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f006 ff24 	bl	8007324 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
  	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80004e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x34>)
 80004e6:	f000 fe9f 	bl	8001228 <HAL_GPIO_TogglePin>

  	HAL_Delay(200);
 80004ea:	20c8      	movs	r0, #200	; 0xc8
 80004ec:	f000 fba4 	bl	8000c38 <HAL_Delay>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 80004f0:	e7f6      	b.n	80004e0 <main+0x20>
 80004f2:	bf00      	nop
 80004f4:	48000800 	.word	0x48000800

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b0b8      	sub	sp, #224	; 0xe0
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f007 fd3a 	bl	8007f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2288      	movs	r2, #136	; 0x88
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f007 fd2c 	bl	8007f80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000528:	2310      	movs	r3, #16
 800052a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800052e:	2301      	movs	r3, #1
 8000530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800053a:	2360      	movs	r3, #96	; 0x60
 800053c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000546:	2301      	movs	r3, #1
 8000548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000552:	2328      	movs	r3, #40	; 0x28
 8000554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000558:	2307      	movs	r3, #7
 800055a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000564:	2302      	movs	r3, #2
 8000566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f8ae 	bl	80026d0 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800057a:	f000 f965 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	2303      	movs	r3, #3
 8000586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800059c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fc7a 	bl	8002e9c <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ae:	f000 f94b 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80005b2:	f242 0344 	movw	r3, #8260	; 0x2044
 80005b6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005bc:	2300      	movs	r3, #0
 80005be:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005c6:	2301      	movs	r3, #1
 80005c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005ce:	2318      	movs	r3, #24
 80005d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005e2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fe5e 	bl	80032a8 <HAL_RCCEx_PeriphCLKConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80005f2:	f000 f929 	bl	8000848 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fa:	f002 f803 	bl	8002604 <HAL_PWREx_ControlVoltageScaling>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000604:	f000 f920 	bl	8000848 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	37e0      	adds	r7, #224	; 0xe0
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_I2C1_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_I2C1_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_I2C1_Init+0x74>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <MX_I2C1_Init+0x7c>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_I2C1_Init+0x74>)
 8000628:	2201      	movs	r2, #1
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_I2C1_Init+0x74>)
 800064c:	f000 fe06 	bl	800125c <HAL_I2C_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000656:	f000 f8f7 	bl	8000848 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065a:	2100      	movs	r1, #0
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <MX_I2C1_Init+0x74>)
 800065e:	f000 fe8c 	bl	800137a <HAL_I2CEx_ConfigAnalogFilter>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8ee 	bl	8000848 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800066c:	2100      	movs	r1, #0
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2C1_Init+0x74>)
 8000670:	f000 fece 	bl	8001410 <HAL_I2CEx_ConfigDigitalFilter>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f8e5 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000454 	.word	0x20000454
 8000688:	40005400 	.word	0x40005400
 800068c:	10909cec 	.word	0x10909cec

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_SPI1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_SPI1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_SPI1_Init+0x74>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_SPI1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI1_Init+0x74>)
 80006aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_SPI1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI1_Init+0x74>)
 80006be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_SPI1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI1_Init+0x74>)
 80006de:	2207      	movs	r2, #7
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_SPI1_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI1_Init+0x74>)
 80006ea:	2208      	movs	r2, #8
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_SPI1_Init+0x74>)
 80006f0:	f003 fa96 	bl	8003c20 <HAL_SPI_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f8a5 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200004a0 	.word	0x200004a0
 8000708:	40013000 	.word	0x40013000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000712:	4a15      	ldr	r2, [pc, #84]	; (8000768 <MX_USART3_UART_Init+0x5c>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART3_UART_Init+0x58>)
 8000750:	f003 fb09 	bl	8003d66 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800075a:	f000 f875 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200003d0 	.word	0x200003d0
 8000768:	40004800 	.word	0x40004800

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	4a28      	ldr	r2, [pc, #160]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2110      	movs	r1, #16
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 fd05 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_GPIO_Init+0xd8>)
 80007f6:	f000 fcff 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f000 fb46 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000818:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xd8>)
 8000832:	f000 fb37 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	48000800 	.word	0x48000800

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6613      	str	r3, [r2, #96]	; 0x60
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6593      	str	r3, [r2, #88]	; 0x58
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a17      	ldr	r2, [pc, #92]	; (8000918 <HAL_I2C_MspInit+0x7c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d127      	bne.n	800090e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_I2C_MspInit+0x80>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <HAL_I2C_MspInit+0x80>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_I2C_MspInit+0x80>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008da:	2312      	movs	r3, #18
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e6:	2304      	movs	r3, #4
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_I2C_MspInit+0x84>)
 80008f2:	f000 fad7 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_I2C_MspInit+0x80>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_I2C_MspInit+0x80>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_I2C_MspInit+0x80>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40021000 	.word	0x40021000
 8000920:	48000400 	.word	0x48000400

08000924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <HAL_SPI_MspInit+0x7c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d128      	bne.n	8000998 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 800094c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_SPI_MspInit+0x80>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000976:	23e0      	movs	r3, #224	; 0xe0
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000986:	2305      	movs	r3, #5
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fa86 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40013000 	.word	0x40013000
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d128      	bne.n	8000a1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x84>)
 8000a18:	f000 fa44 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	48000400 	.word	0x48000400

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f8bc 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <OTG_FS_IRQHandler+0x10>)
 8000a8a:	f000 fe60 	bl	800174e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200019d8 	.word	0x200019d8

08000a98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <SystemInit+0x5c>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <SystemInit+0x5c>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <SystemInit+0x60>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <SystemInit+0x60>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <SystemInit+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <SystemInit+0x60>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <SystemInit+0x60>)
 8000ac4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ac8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000acc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <SystemInit+0x60>)
 8000ad0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <SystemInit+0x60>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <SystemInit+0x60>)
 8000adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SystemInit+0x60>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00
 8000af8:	40021000 	.word	0x40021000

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff ffca 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b06:	e003      	b.n	8000b10 <LoopCopyDataInit>

08000b08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b0e:	3104      	adds	r1, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b18:	d3f6      	bcc.n	8000b08 <CopyDataInit>
	ldr	r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b1c:	e002      	b.n	8000b24 <LoopFillZerobss>

08000b1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b20:	f842 3b04 	str.w	r3, [r2], #4

08000b24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <LoopForever+0x16>)
	cmp	r2, r3
 8000b26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b28:	d3f9      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f007 fa05 	bl	8007f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fcc7 	bl	80004c0 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b38:	08008048 	.word	0x08008048
	ldr	r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b40:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 8000b44:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 8000b48:	20001de0 	.word	0x20001de0

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>

08000b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f961 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f80e 	bl	8000b80 <HAL_InitTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e001      	b.n	8000b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b70:	f7ff fe70 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_InitTick+0x6c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d023      	beq.n	8000bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x70>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f96d 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d809      	bhi.n	8000bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 f937 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e001      	b.n	8000be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000504 	.word	0x20000504

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000504 	.word	0x20000504

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff29 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff3e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff31 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e17f      	b.n	80011b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8171 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d00b      	beq.n	8000eec <HAL_GPIO_Init+0x48>
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	2b11      	cmp	r3, #17
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b12      	cmp	r3, #18
 8000eea:	d130      	bne.n	8000f4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f22:	2201      	movs	r2, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	f003 0201 	and.w	r2, r3, #1
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d118      	bne.n	8000f8c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	08db      	lsrs	r3, r3, #3
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x128>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b12      	cmp	r3, #18
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80ac 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_Init+0x330>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x242>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x338>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x33c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x23a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x340>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x236>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x344>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x348>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x34c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x22a>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e6:	2300      	movs	r3, #0
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f8:	4937      	ldr	r1, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x334>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <HAL_GPIO_Init+0x350>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_GPIO_Init+0x350>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_GPIO_Init+0x350>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f ae78 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48000800 	.word	0x48000800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48001000 	.word	0x48001000
 80011ec:	48001400 	.word	0x48001400
 80011f0:	48001800 	.word	0x48001800
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001214:	e002      	b.n	800121c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43d9      	mvns	r1, r3
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	400b      	ands	r3, r1
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e081      	b.n	8001372 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fb0a 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0201 	bic.w	r2, r2, #1
 800129e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d107      	bne.n	80012d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	e006      	b.n	80012e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d104      	bne.n	80012f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001308:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68da      	ldr	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001318:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	ea42 0103 	orr.w	r1, r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	021a      	lsls	r2, r3, #8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69d9      	ldr	r1, [r3, #28]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0201 	orr.w	r2, r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2220      	movs	r2, #32
 800135e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b20      	cmp	r3, #32
 800138e:	d138      	bne.n	8001402 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800139a:	2302      	movs	r3, #2
 800139c:	e032      	b.n	8001404 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2224      	movs	r2, #36	; 0x24
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2220      	movs	r2, #32
 80013f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001402:	2302      	movs	r3, #2
  }
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b20      	cmp	r3, #32
 8001424:	d139      	bne.n	800149a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001430:	2302      	movs	r3, #2
 8001432:	e033      	b.n	800149c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2224      	movs	r2, #36	; 0x24
 8001440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001462:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800149a:	2302      	movs	r3, #2
  }
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b08f      	sub	sp, #60	; 0x3c
 80014ac:	af0a      	add	r7, sp, #40	; 0x28
 80014ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e116      	b.n	80016e8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f006 f917 	bl	8007708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 f94e 	bl	800479a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	687e      	ldr	r6, [r7, #4]
 8001506:	466d      	mov	r5, sp
 8001508:	f106 0410 	add.w	r4, r6, #16
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001518:	e885 0003 	stmia.w	r5, {r0, r1}
 800151c:	1d33      	adds	r3, r6, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f003 f860 	bl	80045e6 <USB_CoreInit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0d7      	b.n	80016e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f93c 	bl	80047bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e04a      	b.n	80015e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	333d      	adds	r3, #61	; 0x3d
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	1a9b      	subs	r3, r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	333c      	adds	r3, #60	; 0x3c
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	b298      	uxth	r0, r3
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3342      	adds	r3, #66	; 0x42
 8001586:	4602      	mov	r2, r0
 8001588:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	333f      	adds	r3, #63	; 0x3f
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3344      	adds	r3, #68	; 0x44
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3348      	adds	r3, #72	; 0x48
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3350      	adds	r3, #80	; 0x50
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3af      	bcc.n	800154a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e044      	b.n	800167a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3b5      	bcc.n	80015f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	687e      	ldr	r6, [r7, #4]
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169e:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a2:	1d33      	adds	r3, r6, #4
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f003 f8b2 	bl	8004810 <USB_DevInit>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e014      	b.n	80016e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 ff62 	bl	80025a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f834 	bl	800574e <USB_DevDisconnect>

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_Start+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e01c      	b.n	8001746 <HAL_PCD_Start+0x56>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f003 f823 	bl	8004778 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f003 ffe8 	bl	800570c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b08d      	sub	sp, #52	; 0x34
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f004 f8a6 	bl	80058b6 <USB_GetMode>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	f040 838f 	bne.w	8001e90 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f004 f80a 	bl	8005790 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8385 	beq.w	8001e8e <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f004 f801 	bl	8005790 <USB_ReadInterrupts>
 800178e:	4603      	mov	r3, r0
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b02      	cmp	r3, #2
 8001796:	d107      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f002 0202 	and.w	r2, r2, #2
 80017a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 ffef 	bl	8005790 <USB_ReadInterrupts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d161      	bne.n	8001880 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0210 	bic.w	r2, r2, #16
 80017ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	f003 020f 	and.w	r2, r3, #15
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	0c5b      	lsrs	r3, r3, #17
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d124      	bne.n	8001842 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d035      	beq.n	8001870 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800180e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001812:	b29b      	uxth	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	6a38      	ldr	r0, [r7, #32]
 8001818:	f003 fe55 	bl	80054c6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001828:	441a      	add	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800183a:	441a      	add	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	e016      	b.n	8001870 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	0c5b      	lsrs	r3, r3, #17
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	2b06      	cmp	r3, #6
 800184c:	d110      	bne.n	8001870 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001854:	2208      	movs	r2, #8
 8001856:	4619      	mov	r1, r3
 8001858:	6a38      	ldr	r0, [r7, #32]
 800185a:	f003 fe34 	bl	80054c6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800186a:	441a      	add	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0210 	orr.w	r2, r2, #16
 800187e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 ff83 	bl	8005790 <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001894:	d16e      	bne.n	8001974 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 ff89 	bl	80057b6 <USB_ReadDevAllOutEpInterrupt>
 80018a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018a6:	e062      	b.n	800196e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d057      	beq.n	8001962 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 ffae 	bl	800581e <USB_ReadDevOutEPInterrupt>
 80018c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018da:	461a      	mov	r2, r3
 80018dc:	2301      	movs	r3, #1
 80018de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fd82 	bl	80023ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00c      	beq.n	800190c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	015a      	lsls	r2, r3, #5
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	4413      	add	r3, r2
 80018fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fe:	461a      	mov	r2, r3
 8001900:	2308      	movs	r3, #8
 8001902:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fdbe 	bl	8002488 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001922:	461a      	mov	r2, r3
 8001924:	2310      	movs	r3, #16
 8001926:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f003 0320 	and.w	r3, r3, #32
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015a      	lsls	r2, r3, #5
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193e:	461a      	mov	r2, r3
 8001940:	2320      	movs	r3, #32
 8001942:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	461a      	mov	r2, r3
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	2b00      	cmp	r3, #0
 8001972:	d199      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 ff09 	bl	8005790 <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001988:	f040 8087 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f003 ff2a 	bl	80057ea <USB_ReadDevAllInEpInterrupt>
 8001996:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800199c:	e07a      	b.n	8001a94 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d06f      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 ff51 	bl	800585a <USB_ReadDevInEPInterrupt>
 80019b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	2201      	movs	r2, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69f9      	ldr	r1, [r7, #28]
 80019e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019e4:	4013      	ands	r3, r2
 80019e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019f4:	461a      	mov	r2, r3
 80019f6:	2301      	movs	r3, #1
 80019f8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f005 ff14 	bl	800782e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2308      	movs	r3, #8
 8001a20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	015a      	lsls	r2, r3, #5
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a38:	461a      	mov	r2, r3
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a54:	461a      	mov	r2, r3
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	015a      	lsls	r2, r3, #5
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a70:	461a      	mov	r2, r3
 8001a72:	2302      	movs	r3, #2
 8001a74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fc29 	bl	80022da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d181      	bne.n	800199e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 fe76 	bl	8005790 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aae:	d122      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f006 f9c1 	bl	8007e60 <HAL_PCDEx_LPM_Callback>
 8001ade:	e002      	b.n	8001ae6 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f005 ff11 	bl	8007908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f003 fe48 	bl	8005790 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b0a:	d112      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d102      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f005 fecd 	bl	80078bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fe2a 	bl	8005790 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b46:	d121      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b56:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d111      	bne.n	8001b86 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f006 f96e 	bl	8007e60 <HAL_PCDEx_LPM_Callback>
 8001b84:	e002      	b.n	8001b8c <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f005 fe98 	bl	80078bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fdfd 	bl	8005790 <USB_ReadInterrupts>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba0:	f040 80c5 	bne.w	8001d2e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 ff72 	bl	8004aa8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	e056      	b.n	8001c78 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bdc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bee:	0151      	lsls	r1, r2, #5
 8001bf0:	69fa      	ldr	r2, [r7, #28]
 8001bf2:	440a      	add	r2, r1
 8001bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bfc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0e:	0151      	lsls	r1, r2, #5
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	440a      	add	r2, r1
 8001c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c42:	0151      	lsls	r1, r2, #5
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	440a      	add	r2, r1
 8001c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	015a      	lsls	r2, r3, #5
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c62:	0151      	lsls	r1, r2, #5
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	440a      	add	r2, r1
 8001c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	3301      	adds	r3, #1
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3a3      	bcc.n	8001bca <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c90:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cae:	f043 030b 	orr.w	r3, r3, #11
 8001cb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc4:	f043 030b 	orr.w	r3, r3, #11
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	e015      	b.n	8001cf8 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	69fa      	ldr	r2, [r7, #28]
 8001cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cde:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ce2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf2:	f043 030b 	orr.w	r3, r3, #11
 8001cf6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f003 fdfd 	bl	8005918 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fd2c 	bl	8005790 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d42:	d124      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fdc2 	bl	80058d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 ff09 	bl	8004b6a <USB_GetDevSpeed>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	f001 fa08 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8001d68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4620      	mov	r0, r4
 8001d74:	f002 fc64 	bl	8004640 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f005 fd80 	bl	800787e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fcfc 	bl	8005790 <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d10a      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f005 fd5d 	bl	8007862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f002 0208 	and.w	r2, r2, #8
 8001db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fce7 	bl	8005790 <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dcc:	d10f      	bne.n	8001dee <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f005 fdcf 	bl	800797c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fccc 	bl	8005790 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e02:	d10f      	bne.n	8001e24 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f005 fda2 	bl	8007958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 fcb1 	bl	8005790 <USB_ReadInterrupts>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d10a      	bne.n	8001e50 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f005 fdb0 	bl	80079a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fc9b 	bl	8005790 <USB_ReadInterrupts>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d115      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f005 fda0 	bl	80079bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	e000      	b.n	8001e90 <HAL_PCD_IRQHandler+0x742>
      return;
 8001e8e:	bf00      	nop
    }
  }
}
 8001e90:	3734      	adds	r7, #52	; 0x34
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd90      	pop	{r4, r7, pc}

08001e96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_SetAddress+0x1a>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e013      	b.n	8001ed8 <HAL_PCD_SetAddress+0x42>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	78fa      	ldrb	r2, [r7, #3]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fbf9 	bl	80056c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	70fb      	strb	r3, [r7, #3]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	803b      	strh	r3, [r7, #0]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0f      	bge.n	8001f26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3338      	adds	r3, #56	; 0x38
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00f      	b.n	8001f46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f52:	883a      	ldrh	r2, [r7, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	78ba      	ldrb	r2, [r7, #2]
 8001f5c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d102      	bne.n	8001f7c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_EP_Open+0xaa>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e00e      	b.n	8001fa8 <HAL_PCD_EP_Open+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f002 fe05 	bl	8004ba8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da0f      	bge.n	8001fe4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	3338      	adds	r3, #56	; 0x38
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3304      	adds	r3, #4
 8001fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	705a      	strb	r2, [r3, #1]
 8001fe2:	e00f      	b.n	8002004 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	b2da      	uxtb	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_PCD_EP_Close+0x6e>
 800201a:	2302      	movs	r3, #2
 800201c:	e00e      	b.n	800203c <HAL_PCD_EP_Close+0x8c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fe43 	bl	8004cb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	f003 020f 	and.w	r2, r3, #15
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	3304      	adds	r3, #4
 800206c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002092:	7afb      	ldrb	r3, [r7, #11]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6979      	ldr	r1, [r7, #20]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 f8c0 	bl	8005228 <USB_EP0StartXfer>
 80020a8:	e005      	b.n	80020b6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fedd 	bl	8004e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f003 020f 	and.w	r2, r3, #15
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2201      	movs	r2, #1
 800212e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	b2da      	uxtb	r2, r3
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	2b00      	cmp	r3, #0
 8002144:	d106      	bne.n	8002154 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 f86b 	bl	8005228 <USB_EP0StartXfer>
 8002152:	e005      	b.n	8002160 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fe88 	bl	8004e70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b084      	sub	sp, #16
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	f003 020f 	and.w	r2, r3, #15
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d901      	bls.n	8002188 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e04e      	b.n	8002226 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218c:	2b00      	cmp	r3, #0
 800218e:	da0f      	bge.n	80021b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00d      	b.n	80021cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	3304      	adds	r3, #4
 80021c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_PCD_EP_SetStall+0x82>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e01c      	b.n	8002226 <HAL_PCD_EP_SetStall+0xbc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68f9      	ldr	r1, [r7, #12]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 f98c 	bl	8005518 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f003 fb7e 	bl	8005918 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d901      	bls.n	800224c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e042      	b.n	80022d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800224c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002250:	2b00      	cmp	r3, #0
 8002252:	da0f      	bge.n	8002274 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 020f 	and.w	r2, r3, #15
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3338      	adds	r3, #56	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	3304      	adds	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
 8002272:	e00f      	b.n	8002294 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_EP_ClrStall+0x86>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e00e      	b.n	80022d2 <HAL_PCD_EP_ClrStall+0xa4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f996 	bl	80055f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b088      	sub	sp, #32
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	3338      	adds	r3, #56	; 0x38
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	3304      	adds	r3, #4
 8002300:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	429a      	cmp	r2, r3
 800230c:	d901      	bls.n	8002312 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e067      	b.n	80023e2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3303      	adds	r3, #3
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002336:	e026      	b.n	8002386 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	429a      	cmp	r2, r3
 800234c:	d902      	bls.n	8002354 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	3303      	adds	r3, #3
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68d9      	ldr	r1, [r3, #12]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	b29b      	uxth	r3, r3
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f003 f87b 	bl	8005464 <USB_WritePacket>

    ep->xfer_buff  += len;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	441a      	add	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	b29b      	uxth	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d809      	bhi.n	80023b0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d203      	bcs.n	80023b0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1c3      	bne.n	8002338 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d811      	bhi.n	80023e0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2201      	movs	r2, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023dc:	4013      	ands	r3, r2
 80023de:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3720      	adds	r7, #32
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	333c      	adds	r3, #60	; 0x3c
 8002404:	3304      	adds	r3, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <PCD_EP_OutXfrComplete_int+0x98>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d124      	bne.n	800246c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	6093      	str	r3, [r2, #8]
 8002440:	e01a      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002458:	461a      	mov	r2, r3
 800245a:	2320      	movs	r3, #32
 800245c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f005 f9c7 	bl	80077f8 <HAL_PCD_DataOutStageCallback>
 800246a:	e005      	b.n	8002478 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f005 f9c0 	bl	80077f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3718      	adds	r7, #24
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	4f54310a 	.word	0x4f54310a

08002488 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	333c      	adds	r3, #60	; 0x3c
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <PCD_EP_OutSetupPacket_int+0x64>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d90e      	bls.n	80024dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d009      	beq.n	80024dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d4:	461a      	mov	r2, r3
 80024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f005 f979 	bl	80077d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	4f54300a 	.word	0x4f54300a

080024f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	70fb      	strb	r3, [r7, #3]
 80024fc:	4613      	mov	r3, r2
 80024fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800250e:	883b      	ldrh	r3, [r7, #0]
 8002510:	0419      	lsls	r1, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	430a      	orrs	r2, r1
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
 800251c:	e028      	b.n	8002570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e00d      	b.n	800254e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3340      	adds	r3, #64	; 0x40
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0c1b      	lsrs	r3, r3, #16
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4413      	add	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	3301      	adds	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	3b01      	subs	r3, #1
 8002554:	429a      	cmp	r2, r3
 8002556:	d3ec      	bcc.n	8002532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002558:	883b      	ldrh	r3, [r7, #0]
 800255a:	0418      	lsls	r0, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6819      	ldr	r1, [r3, #0]
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	3b01      	subs	r3, #1
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4302      	orrs	r2, r0
 8002568:	3340      	adds	r3, #64	; 0x40
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d2:	f043 0303 	orr.w	r3, r3, #3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_PWREx_GetVoltageRange+0x18>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000

08002604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002612:	d130      	bne.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d038      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2232      	movs	r2, #50	; 0x32
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	e002      	b.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d102      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x60>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f2      	bne.n	800264a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	d110      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e00f      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d007      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800268c:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_PWREx_EnableVddUSB+0x1c>)
 80026ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026be:	6053      	str	r3, [r2, #4]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e3d4      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e2:	4ba1      	ldr	r3, [pc, #644]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ec:	4b9e      	ldr	r3, [pc, #632]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80e4 	beq.w	80028cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_RCC_OscConfig+0x4a>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	f040 808b 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 8087 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271a:	4b93      	ldr	r3, [pc, #588]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e3ac      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <HAL_RCC_OscConfig+0x7c>
 8002742:	4b89      	ldr	r3, [pc, #548]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x88>
 800274c:	4b86      	ldr	r3, [pc, #536]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002758:	4293      	cmp	r3, r2
 800275a:	d223      	bcs.n	80027a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd41 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e38d      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4977      	ldr	r1, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4972      	ldr	r1, [pc, #456]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	e025      	b.n	80027f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6f      	ldr	r2, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	496a      	ldr	r1, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	4965      	ldr	r1, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd01 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e34d      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f0:	f000 fc36 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	495a      	ldr	r1, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x29c>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x2a0>)
 800280e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_OscConfig+0x2a4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe f9b3 	bl	8000b80 <HAL_InitTick>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d052      	beq.n	80028ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	e331      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d032      	beq.n	8002896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002830:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283c:	f7fe f9f0 	bl	8000c20 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002844:	f7fe f9ec 	bl	8000c20 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e31a      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002856:	4b44      	ldr	r3, [pc, #272]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a40      	ldr	r2, [pc, #256]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	493b      	ldr	r1, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	4936      	ldr	r1, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002896:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a33      	ldr	r2, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a2:	f7fe f9bd 	bl	8000c20 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028aa:	f7fe f9b9 	bl	8000c20 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e2e7      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x1da>
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d074      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x21a>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d10e      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d064      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d160      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e2c4      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x24a>
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e01d      	b.n	8002956 <HAL_RCC_OscConfig+0x286>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x26e>
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800292a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x286>
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a09      	ldr	r2, [pc, #36]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b07      	ldr	r3, [pc, #28]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a06      	ldr	r2, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01c      	beq.n	8002998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe f95f 	bl	8000c20 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002964:	e011      	b.n	800298a <HAL_RCC_OscConfig+0x2ba>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	08007ff0 	.word	0x08007ff0
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe f952 	bl	8000c20 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e280      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4baf      	ldr	r3, [pc, #700]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2a8>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe f942 	bl	8000c20 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe f93e 	bl	8000c20 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e26c      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4ba5      	ldr	r3, [pc, #660]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d0>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d060      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x310>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	4b99      	ldr	r3, [pc, #612]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x328>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e249      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4990      	ldr	r1, [pc, #576]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	e040      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a8b      	ldr	r2, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe f8fd 	bl	8000c20 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe f8f9 	bl	8000c20 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e227      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	497c      	ldr	r1, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe f8d9 	bl	8000c20 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe f8d5 	bl	8000c20 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e203      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aaa:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe f8b4 	bl	8000c20 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe f8b0 	bl	8000c20 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1de      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCC_OscConfig+0x3ec>
 8002adc:	e01b      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe f897 	bl	8000c20 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe f893 	bl	8000c20 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1c1      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a6 	beq.w	8002c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3a      	ldr	r2, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe f85a 	bl	8000c20 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe f856 	bl	8000c20 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e184      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba6:	e024      	b.n	8002bf2 <HAL_RCC_OscConfig+0x522>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d110      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x502>
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd0:	e00f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x522>
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7fe f811 	bl	8000c20 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe f80d 	bl	8000c20 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e139      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ed      	beq.n	8002c02 <HAL_RCC_OscConfig+0x532>
 8002c26:	e01a      	b.n	8002c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fd fffa 	bl	8000c20 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c30:	f7fd fff6 	bl	8000c20 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d906      	bls.n	8002c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e122      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	4b90      	ldr	r3, [pc, #576]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e8      	bne.n	8002c30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a8a      	ldr	r2, [pc, #552]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8108 	beq.w	8002e8a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 80d0 	bne.w	8002e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c84:	4b83      	ldr	r3, [pc, #524]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d130      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d127      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cc4:	2a07      	cmp	r2, #7
 8002cc6:	bf14      	ite	ne
 8002cc8:	2201      	movne	r2, #1
 8002cca:	2200      	moveq	r2, #0
 8002ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d113      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d06e      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d069      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d00:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d0c:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b7      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b5d      	ldr	r3, [pc, #372]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5c      	ldr	r2, [pc, #368]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d28:	f7fd ff7a 	bl	8000c20 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fd ff76 	bl	8000c20 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0a4      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d42:	4b54      	ldr	r3, [pc, #336]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	4b51      	ldr	r3, [pc, #324]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b51      	ldr	r3, [pc, #324]	; (8002e98 <HAL_RCC_OscConfig+0x7c8>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d68:	0212      	lsls	r2, r2, #8
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d70:	0852      	lsrs	r2, r2, #1
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0552      	lsls	r2, r2, #21
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d7c:	0852      	lsrs	r2, r2, #1
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0652      	lsls	r2, r2, #25
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d88:	0912      	lsrs	r2, r2, #4
 8002d8a:	0452      	lsls	r2, r2, #17
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4941      	ldr	r1, [pc, #260]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d94:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a3e      	ldr	r2, [pc, #248]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a3b      	ldr	r2, [pc, #236]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dac:	f7fd ff38 	bl	8000c20 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fd ff34 	bl	8000c20 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e062      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd2:	e05a      	b.n	8002e8a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e059      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd8:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d152      	bne.n	8002e8a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002de4:	4b2b      	ldr	r3, [pc, #172]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfc:	f7fd ff10 	bl	8000c20 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fd ff0c 	bl	8000c20 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e03a      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x734>
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d02d      	beq.n	8002e86 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e42:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e48:	f023 0303 	bic.w	r3, r3, #3
 8002e4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fedf 	bl	8000c20 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fd fedb 	bl	8000c20 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e009      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_OscConfig+0x7c4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x796>
 8002e84:	e001      	b.n	8002e8a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	f99d808c 	.word	0xf99d808c

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0c8      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b66      	ldr	r3, [pc, #408]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d910      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b63      	ldr	r3, [pc, #396]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4961      	ldr	r1, [pc, #388]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b5f      	ldr	r3, [pc, #380]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0b0      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d04c      	beq.n	8002f86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef4:	4b56      	ldr	r3, [pc, #344]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d121      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e09e      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d107      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0c:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d115      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e092      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f24:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e086      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	4b46      	ldr	r3, [pc, #280]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e07e      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f44:	4b42      	ldr	r3, [pc, #264]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 0203 	bic.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	493f      	ldr	r1, [pc, #252]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f56:	f7fd fe63 	bl	8000c20 <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5e:	f7fd fe5f 	bl	8000c20 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e066      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f74:	4b36      	ldr	r3, [pc, #216]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 020c 	and.w	r2, r3, #12
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d1eb      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	492c      	ldr	r1, [pc, #176]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d210      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4924      	ldr	r1, [pc, #144]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_ClockConfig+0x1b0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e036      	b.n	8003042 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	4918      	ldr	r1, [pc, #96]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffe:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4910      	ldr	r1, [pc, #64]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003012:	f000 f825 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HAL_RCC_ClockConfig+0x1b4>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490c      	ldr	r1, [pc, #48]	; (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fda2 	bl	8000b80 <HAL_InitTick>
 800303c:	4603      	mov	r3, r0
 800303e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003040:	7afb      	ldrb	r3, [r7, #11]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40022000 	.word	0x40022000
 8003050:	40021000 	.word	0x40021000
 8003054:	08007ff0 	.word	0x08007ff0
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306e:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003078:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d121      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d11e      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003094:	4b34      	ldr	r3, [pc, #208]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e005      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d102      	bne.n	80030de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e004      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030e4:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 80030e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d134      	bne.n	8003158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ee:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_RCC_GetSysClockFreq+0xa6>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0xac>
 8003104:	e005      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_RCC_GetSysClockFreq+0x110>)
 8003108:	617b      	str	r3, [r7, #20]
      break;
 800310a:	e005      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	617b      	str	r3, [r7, #20]
      break;
 8003110:	e002      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	617b      	str	r3, [r7, #20]
      break;
 8003116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	3301      	adds	r3, #1
 8003124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	fb02 f203 	mul.w	r2, r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_GetSysClockFreq+0x108>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	0e5b      	lsrs	r3, r3, #25
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	3301      	adds	r3, #1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003158:	69bb      	ldr	r3, [r7, #24]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	08008008 	.word	0x08008008
 8003170:	00f42400 	.word	0x00f42400
 8003174:	003d0900 	.word	0x003d0900

08003178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08008000 	.word	0x08008000

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031c0:	f7ff ffda 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0adb      	lsrs	r3, r3, #11
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08008000 	.word	0x08008000

080031e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003200:	f7ff f9f2 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 8003204:	6178      	str	r0, [r7, #20]
 8003206:	e014      	b.n	8003232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320c:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003220:	f7ff f9e2 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 8003224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003238:	d10b      	bne.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b80      	cmp	r3, #128	; 0x80
 800323e:	d919      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2ba0      	cmp	r3, #160	; 0xa0
 8003244:	d902      	bls.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003246:	2302      	movs	r3, #2
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	e013      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e010      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d902      	bls.n	800325e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003258:	2303      	movs	r3, #3
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	e00a      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d102      	bne.n	800326a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003264:	2302      	movs	r3, #2
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	e004      	b.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d101      	bne.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003270:	2301      	movs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	4909      	ldr	r1, [pc, #36]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40022000 	.word	0x40022000

080032a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032b0:	2300      	movs	r3, #0
 80032b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032b4:	2300      	movs	r3, #0
 80032b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d041      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032cc:	d02a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e8:	d010      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032ea:	e018      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ec:	4b86      	ldr	r3, [pc, #536]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a85      	ldr	r2, [pc, #532]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f8:	e015      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fabb 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800330a:	e00c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3320      	adds	r3, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fba6 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	74fb      	strb	r3, [r7, #19]
      break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800332c:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333a:	4973      	ldr	r1, [pc, #460]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d041      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800335c:	d02a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800335e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003362:	d824      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003368:	d008      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800336a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800336e:	d81e      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d010      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800337a:	e018      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800337c:	4b62      	ldr	r3, [pc, #392]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a61      	ldr	r2, [pc, #388]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003388:	e015      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fa73 	bl	800387c <RCCEx_PLLSAI1_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800339a:	e00c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3320      	adds	r3, #32
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fb5e 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	74fb      	strb	r3, [r7, #19]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033bc:	4b52      	ldr	r3, [pc, #328]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ca:	494f      	ldr	r1, [pc, #316]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a0 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b41      	ldr	r3, [pc, #260]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a3a      	ldr	r2, [pc, #232]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fd fbfa 	bl	8000c20 <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342e:	e009      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fd fbf6 	bl	8000c20 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
        break;
 8003442:	e005      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003444:	4b31      	ldr	r3, [pc, #196]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d15c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01f      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	d019      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003480:	4b21      	ldr	r3, [pc, #132]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034a0:	4a19      	ldr	r2, [pc, #100]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fd fbb5 	bl	8000c20 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fbb1 	bl	8000c20 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d902      	bls.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	74fb      	strb	r3, [r7, #19]
            break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0ec      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f6:	4904      	ldr	r1, [pc, #16]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034fe:	e009      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	74bb      	strb	r3, [r7, #18]
 8003504:	e006      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003514:	7c7b      	ldrb	r3, [r7, #17]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d105      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351a:	4b9e      	ldr	r3, [pc, #632]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	4a9d      	ldr	r2, [pc, #628]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003532:	4b98      	ldr	r3, [pc, #608]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f023 0203 	bic.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	4994      	ldr	r1, [pc, #592]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 020c 	bic.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	498c      	ldr	r1, [pc, #560]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003576:	4b87      	ldr	r3, [pc, #540]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	4983      	ldr	r1, [pc, #524]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003598:	4b7e      	ldr	r3, [pc, #504]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	497b      	ldr	r1, [pc, #492]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c8:	4972      	ldr	r1, [pc, #456]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035dc:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	496a      	ldr	r1, [pc, #424]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	4961      	ldr	r1, [pc, #388]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003620:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	4959      	ldr	r1, [pc, #356]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	4950      	ldr	r1, [pc, #320]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	4948      	ldr	r1, [pc, #288]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	493f      	ldr	r1, [pc, #252]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d028      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b6:	4937      	ldr	r1, [pc, #220]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a31      	ldr	r2, [pc, #196]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e011      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036de:	d10c      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8c8 	bl	800387c <RCCEx_PLLSAI1_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036f6:	7cfb      	ldrb	r3, [r7, #19]
 80036f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	491f      	ldr	r1, [pc, #124]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d106      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	4a1a      	ldr	r2, [pc, #104]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003730:	60d3      	str	r3, [r2, #12]
 8003732:	e011      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2101      	movs	r1, #1
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f899 	bl	800387c <RCCEx_PLLSAI1_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374e:	7cfb      	ldrb	r3, [r7, #19]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d02b      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4908      	ldr	r1, [pc, #32]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003782:	d109      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a02      	ldr	r2, [pc, #8]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
 8003790:	e014      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f867 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d6:	4928      	ldr	r1, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	d10d      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f844 	bl	800387c <RCCEx_PLLSAI1_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037fe:	7cfb      	ldrb	r3, [r7, #19]
 8003800:	74bb      	strb	r3, [r7, #18]
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d10c      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3320      	adds	r3, #32
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f925 	bl	8003a64 <RCCEx_PLLSAI2_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003834:	4b10      	ldr	r3, [pc, #64]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003842:	490d      	ldr	r1, [pc, #52]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800386e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000

0800387c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388a:	4b75      	ldr	r3, [pc, #468]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d018      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003896:	4b72      	ldr	r3, [pc, #456]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
       ||
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038ae:	4b6c      	ldr	r3, [pc, #432]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
       ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d047      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e044      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d018      	beq.n	8003902 <RCCEx_PLLSAI1_Config+0x86>
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d825      	bhi.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d002      	beq.n	80038de <RCCEx_PLLSAI1_Config+0x62>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d009      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x74>
 80038dc:	e020      	b.n	8003920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038de:	4b60      	ldr	r3, [pc, #384]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11d      	bne.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ee:	e01a      	b.n	8003926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f0:	4b5b      	ldr	r3, [pc, #364]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d116      	bne.n	800392a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003900:	e013      	b.n	800392a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390e:	4b54      	ldr	r3, [pc, #336]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391e:	e006      	b.n	800392e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e004      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800392e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003936:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	430b      	orrs	r3, r1
 800394c:	4944      	ldr	r1, [pc, #272]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d17d      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003958:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd f95c 	bl	8000c20 <HAL_GetTick>
 8003968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800396a:	e009      	b.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800396c:	f7fd f958 	bl	8000c20 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d902      	bls.n	8003980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
        break;
 800397e:	e005      	b.n	800398c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003980:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ef      	bne.n	800396c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d160      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d111      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	0912      	lsrs	r2, r2, #4
 80039b0:	0452      	lsls	r2, r2, #17
 80039b2:	430a      	orrs	r2, r1
 80039b4:	492a      	ldr	r1, [pc, #168]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	610b      	str	r3, [r1, #16]
 80039ba:	e027      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d112      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c2:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	0211      	lsls	r1, r2, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6912      	ldr	r2, [r2, #16]
 80039d8:	0852      	lsrs	r2, r2, #1
 80039da:	3a01      	subs	r2, #1
 80039dc:	0552      	lsls	r2, r2, #21
 80039de:	430a      	orrs	r2, r1
 80039e0:	491f      	ldr	r1, [pc, #124]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	610b      	str	r3, [r1, #16]
 80039e6:	e011      	b.n	8003a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6952      	ldr	r2, [r2, #20]
 80039fe:	0852      	lsrs	r2, r2, #1
 8003a00:	3a01      	subs	r2, #1
 8003a02:	0652      	lsls	r2, r2, #25
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4916      	ldr	r1, [pc, #88]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a18:	f7fd f902 	bl	8000c20 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a20:	f7fd f8fe 	bl	8000c20 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
          break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ef      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a7e:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a96:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d047      	beq.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e044      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d018      	beq.n	8003aea <RCCEx_PLLSAI2_Config+0x86>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d825      	bhi.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <RCCEx_PLLSAI2_Config+0x62>
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d009      	beq.n	8003ad8 <RCCEx_PLLSAI2_Config+0x74>
 8003ac4:	e020      	b.n	8003b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac6:	4b55      	ldr	r3, [pc, #340]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11d      	bne.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e01a      	b.n	8003b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e013      	b.n	8003b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e004      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	430b      	orrs	r3, r1
 8003b34:	4939      	ldr	r1, [pc, #228]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d167      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fd f868 	bl	8000c20 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b54:	f7fd f864 	bl	8000c20 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
        break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b68:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ef      	bne.n	8003b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d14a      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b80:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	0912      	lsrs	r2, r2, #4
 8003b98:	0452      	lsls	r2, r2, #17
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	491f      	ldr	r1, [pc, #124]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	614b      	str	r3, [r1, #20]
 8003ba2:	e011      	b.n	8003bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6912      	ldr	r2, [r2, #16]
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0652      	lsls	r2, r2, #25
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	4916      	ldr	r1, [pc, #88]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bc8:	4b14      	ldr	r3, [pc, #80]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd4:	f7fd f824 	bl	8000c20 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bda:	e009      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bdc:	f7fd f820 	bl	8000c20 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	73fb      	strb	r3, [r7, #15]
          break;
 8003bee:	e005      	b.n	8003bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	4904      	ldr	r1, [pc, #16]	; (8003c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e095      	b.n	8003d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d108      	bne.n	8003c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c42:	d009      	beq.n	8003c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	61da      	str	r2, [r3, #28]
 8003c4a:	e005      	b.n	8003c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fc fe56 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c98:	d902      	bls.n	8003ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e002      	b.n	8003ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cae:	d007      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb8:	d002      	beq.n	8003cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	ea42 0103 	orr.w	r1, r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 0204 	and.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e040      	b.n	8003dfa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fc fe0d 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2224      	movs	r2, #36	; 0x24
 8003d92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f82d 	bl	8003e04 <UART_SetConfig>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e022      	b.n	8003dfa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 faab 	bl	8004318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fb32 	bl	800445c <UART_CheckIdleState>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	b5b0      	push	{r4, r5, r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4bad      	ldr	r3, [pc, #692]	; (80040e4 <UART_SetConfig+0x2e0>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	69f9      	ldr	r1, [r7, #28]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4aa2      	ldr	r2, [pc, #648]	; (80040e8 <UART_SetConfig+0x2e4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a99      	ldr	r2, [pc, #612]	; (80040ec <UART_SetConfig+0x2e8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d121      	bne.n	8003ece <UART_SetConfig+0xca>
 8003e8a:	4b99      	ldr	r3, [pc, #612]	; (80040f0 <UART_SetConfig+0x2ec>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d817      	bhi.n	8003ec8 <UART_SetConfig+0xc4>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x9c>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ebd 	.word	0x08003ebd
 8003ea8:	08003eb7 	.word	0x08003eb7
 8003eac:	08003ec3 	.word	0x08003ec3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	e0e7      	b.n	8004086 <UART_SetConfig+0x282>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	76fb      	strb	r3, [r7, #27]
 8003eba:	e0e4      	b.n	8004086 <UART_SetConfig+0x282>
 8003ebc:	2304      	movs	r3, #4
 8003ebe:	76fb      	strb	r3, [r7, #27]
 8003ec0:	e0e1      	b.n	8004086 <UART_SetConfig+0x282>
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	76fb      	strb	r3, [r7, #27]
 8003ec6:	e0de      	b.n	8004086 <UART_SetConfig+0x282>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e0db      	b.n	8004086 <UART_SetConfig+0x282>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a88      	ldr	r2, [pc, #544]	; (80040f4 <UART_SetConfig+0x2f0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d132      	bne.n	8003f3e <UART_SetConfig+0x13a>
 8003ed8:	4b85      	ldr	r3, [pc, #532]	; (80040f0 <UART_SetConfig+0x2ec>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d828      	bhi.n	8003f38 <UART_SetConfig+0x134>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <UART_SetConfig+0xe8>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f21 	.word	0x08003f21
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f39 	.word	0x08003f39
 8003ef8:	08003f39 	.word	0x08003f39
 8003efc:	08003f2d 	.word	0x08003f2d
 8003f00:	08003f39 	.word	0x08003f39
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f39 	.word	0x08003f39
 8003f0c:	08003f27 	.word	0x08003f27
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f39 	.word	0x08003f39
 8003f1c:	08003f33 	.word	0x08003f33
 8003f20:	2300      	movs	r3, #0
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e0af      	b.n	8004086 <UART_SetConfig+0x282>
 8003f26:	2302      	movs	r3, #2
 8003f28:	76fb      	strb	r3, [r7, #27]
 8003f2a:	e0ac      	b.n	8004086 <UART_SetConfig+0x282>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e0a9      	b.n	8004086 <UART_SetConfig+0x282>
 8003f32:	2308      	movs	r3, #8
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e0a6      	b.n	8004086 <UART_SetConfig+0x282>
 8003f38:	2310      	movs	r3, #16
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e0a3      	b.n	8004086 <UART_SetConfig+0x282>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <UART_SetConfig+0x2f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <UART_SetConfig+0x186>
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <UART_SetConfig+0x2ec>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f52:	2b30      	cmp	r3, #48	; 0x30
 8003f54:	d013      	beq.n	8003f7e <UART_SetConfig+0x17a>
 8003f56:	2b30      	cmp	r3, #48	; 0x30
 8003f58:	d814      	bhi.n	8003f84 <UART_SetConfig+0x180>
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d009      	beq.n	8003f72 <UART_SetConfig+0x16e>
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d810      	bhi.n	8003f84 <UART_SetConfig+0x180>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <UART_SetConfig+0x168>
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x174>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x180>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	76fb      	strb	r3, [r7, #27]
 8003f70:	e089      	b.n	8004086 <UART_SetConfig+0x282>
 8003f72:	2302      	movs	r3, #2
 8003f74:	76fb      	strb	r3, [r7, #27]
 8003f76:	e086      	b.n	8004086 <UART_SetConfig+0x282>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	76fb      	strb	r3, [r7, #27]
 8003f7c:	e083      	b.n	8004086 <UART_SetConfig+0x282>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	76fb      	strb	r3, [r7, #27]
 8003f82:	e080      	b.n	8004086 <UART_SetConfig+0x282>
 8003f84:	2310      	movs	r3, #16
 8003f86:	76fb      	strb	r3, [r7, #27]
 8003f88:	e07d      	b.n	8004086 <UART_SetConfig+0x282>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5b      	ldr	r2, [pc, #364]	; (80040fc <UART_SetConfig+0x2f8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0x1d2>
 8003f94:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <UART_SetConfig+0x2ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa0:	d013      	beq.n	8003fca <UART_SetConfig+0x1c6>
 8003fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa4:	d814      	bhi.n	8003fd0 <UART_SetConfig+0x1cc>
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d009      	beq.n	8003fbe <UART_SetConfig+0x1ba>
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d810      	bhi.n	8003fd0 <UART_SetConfig+0x1cc>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <UART_SetConfig+0x1b4>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d006      	beq.n	8003fc4 <UART_SetConfig+0x1c0>
 8003fb6:	e00b      	b.n	8003fd0 <UART_SetConfig+0x1cc>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	76fb      	strb	r3, [r7, #27]
 8003fbc:	e063      	b.n	8004086 <UART_SetConfig+0x282>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	76fb      	strb	r3, [r7, #27]
 8003fc2:	e060      	b.n	8004086 <UART_SetConfig+0x282>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	76fb      	strb	r3, [r7, #27]
 8003fc8:	e05d      	b.n	8004086 <UART_SetConfig+0x282>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	76fb      	strb	r3, [r7, #27]
 8003fce:	e05a      	b.n	8004086 <UART_SetConfig+0x282>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	76fb      	strb	r3, [r7, #27]
 8003fd4:	e057      	b.n	8004086 <UART_SetConfig+0x282>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a49      	ldr	r2, [pc, #292]	; (8004100 <UART_SetConfig+0x2fc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d125      	bne.n	800402c <UART_SetConfig+0x228>
 8003fe0:	4b43      	ldr	r3, [pc, #268]	; (80040f0 <UART_SetConfig+0x2ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fee:	d017      	beq.n	8004020 <UART_SetConfig+0x21c>
 8003ff0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ff4:	d817      	bhi.n	8004026 <UART_SetConfig+0x222>
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d00b      	beq.n	8004014 <UART_SetConfig+0x210>
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d811      	bhi.n	8004026 <UART_SetConfig+0x222>
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <UART_SetConfig+0x20a>
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d006      	beq.n	800401a <UART_SetConfig+0x216>
 800400c:	e00b      	b.n	8004026 <UART_SetConfig+0x222>
 800400e:	2300      	movs	r3, #0
 8004010:	76fb      	strb	r3, [r7, #27]
 8004012:	e038      	b.n	8004086 <UART_SetConfig+0x282>
 8004014:	2302      	movs	r3, #2
 8004016:	76fb      	strb	r3, [r7, #27]
 8004018:	e035      	b.n	8004086 <UART_SetConfig+0x282>
 800401a:	2304      	movs	r3, #4
 800401c:	76fb      	strb	r3, [r7, #27]
 800401e:	e032      	b.n	8004086 <UART_SetConfig+0x282>
 8004020:	2308      	movs	r3, #8
 8004022:	76fb      	strb	r3, [r7, #27]
 8004024:	e02f      	b.n	8004086 <UART_SetConfig+0x282>
 8004026:	2310      	movs	r3, #16
 8004028:	76fb      	strb	r3, [r7, #27]
 800402a:	e02c      	b.n	8004086 <UART_SetConfig+0x282>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <UART_SetConfig+0x2e4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d125      	bne.n	8004082 <UART_SetConfig+0x27e>
 8004036:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <UART_SetConfig+0x2ec>)
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004044:	d017      	beq.n	8004076 <UART_SetConfig+0x272>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d817      	bhi.n	800407c <UART_SetConfig+0x278>
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004050:	d00b      	beq.n	800406a <UART_SetConfig+0x266>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d811      	bhi.n	800407c <UART_SetConfig+0x278>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <UART_SetConfig+0x260>
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d006      	beq.n	8004070 <UART_SetConfig+0x26c>
 8004062:	e00b      	b.n	800407c <UART_SetConfig+0x278>
 8004064:	2300      	movs	r3, #0
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e00d      	b.n	8004086 <UART_SetConfig+0x282>
 800406a:	2302      	movs	r3, #2
 800406c:	76fb      	strb	r3, [r7, #27]
 800406e:	e00a      	b.n	8004086 <UART_SetConfig+0x282>
 8004070:	2304      	movs	r3, #4
 8004072:	76fb      	strb	r3, [r7, #27]
 8004074:	e007      	b.n	8004086 <UART_SetConfig+0x282>
 8004076:	2308      	movs	r3, #8
 8004078:	76fb      	strb	r3, [r7, #27]
 800407a:	e004      	b.n	8004086 <UART_SetConfig+0x282>
 800407c:	2310      	movs	r3, #16
 800407e:	76fb      	strb	r3, [r7, #27]
 8004080:	e001      	b.n	8004086 <UART_SetConfig+0x282>
 8004082:	2310      	movs	r3, #16
 8004084:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <UART_SetConfig+0x2e4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	f040 8087 	bne.w	80041a0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004092:	7efb      	ldrb	r3, [r7, #27]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d837      	bhi.n	8004108 <UART_SetConfig+0x304>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x29c>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040c5 	.word	0x080040c5
 80040a4:	08004109 	.word	0x08004109
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	08004109 	.word	0x08004109
 80040b0:	080040d3 	.word	0x080040d3
 80040b4:	08004109 	.word	0x08004109
 80040b8:	08004109 	.word	0x08004109
 80040bc:	08004109 	.word	0x08004109
 80040c0:	080040db 	.word	0x080040db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c4:	f7ff f864 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80040c8:	6178      	str	r0, [r7, #20]
        break;
 80040ca:	e022      	b.n	8004112 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <UART_SetConfig+0x300>)
 80040ce:	617b      	str	r3, [r7, #20]
        break;
 80040d0:	e01f      	b.n	8004112 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fe ffc5 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80040d6:	6178      	str	r0, [r7, #20]
        break;
 80040d8:	e01b      	b.n	8004112 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040de:	617b      	str	r3, [r7, #20]
        break;
 80040e0:	e017      	b.n	8004112 <UART_SetConfig+0x30e>
 80040e2:	bf00      	nop
 80040e4:	efff69f3 	.word	0xefff69f3
 80040e8:	40008000 	.word	0x40008000
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40004400 	.word	0x40004400
 80040f8:	40004800 	.word	0x40004800
 80040fc:	40004c00 	.word	0x40004c00
 8004100:	40005000 	.word	0x40005000
 8004104:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	76bb      	strb	r3, [r7, #26]
        break;
 8004110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80f1 	beq.w	80042fc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	429a      	cmp	r2, r3
 8004128:	d305      	bcc.n	8004136 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	429a      	cmp	r2, r3
 8004134:	d902      	bls.n	800413c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	76bb      	strb	r3, [r7, #26]
 800413a:	e0df      	b.n	80042fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	4618      	mov	r0, r3
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	020b      	lsls	r3, r1, #8
 800414e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004152:	0202      	lsls	r2, r0, #8
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	6849      	ldr	r1, [r1, #4]
 8004158:	0849      	lsrs	r1, r1, #1
 800415a:	4608      	mov	r0, r1
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	1814      	adds	r4, r2, r0
 8004162:	eb43 0501 	adc.w	r5, r3, r1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	461a      	mov	r2, r3
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc f828 	bl	80001c8 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d308      	bcc.n	800419a <UART_SetConfig+0x396>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d204      	bcs.n	800419a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	60da      	str	r2, [r3, #12]
 8004198:	e0b0      	b.n	80042fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	76bb      	strb	r3, [r7, #26]
 800419e:	e0ad      	b.n	80042fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a8:	d15c      	bne.n	8004264 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80041aa:	7efb      	ldrb	r3, [r7, #27]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d828      	bhi.n	8004202 <UART_SetConfig+0x3fe>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <UART_SetConfig+0x3b4>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	08004203 	.word	0x08004203
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	08004203 	.word	0x08004203
 80041d0:	08004203 	.word	0x08004203
 80041d4:	08004203 	.word	0x08004203
 80041d8:	080041fb 	.word	0x080041fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041dc:	f7fe ffd8 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80041e0:	6178      	str	r0, [r7, #20]
        break;
 80041e2:	e013      	b.n	800420c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7fe ffea 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 80041e8:	6178      	str	r0, [r7, #20]
        break;
 80041ea:	e00f      	b.n	800420c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ec:	4b49      	ldr	r3, [pc, #292]	; (8004314 <UART_SetConfig+0x510>)
 80041ee:	617b      	str	r3, [r7, #20]
        break;
 80041f0:	e00c      	b.n	800420c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f2:	f7fe ff35 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80041f6:	6178      	str	r0, [r7, #20]
        break;
 80041f8:	e008      	b.n	800420c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fe:	617b      	str	r3, [r7, #20]
        break;
 8004200:	e004      	b.n	800420c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	76bb      	strb	r3, [r7, #26]
        break;
 800420a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d074      	beq.n	80042fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005a      	lsls	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	441a      	add	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	fbb2 f3f3 	udiv	r3, r2, r3
 8004226:	b29b      	uxth	r3, r3
 8004228:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d916      	bls.n	800425e <UART_SetConfig+0x45a>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004236:	d212      	bcs.n	800425e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f023 030f 	bic.w	r3, r3, #15
 8004240:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	b29a      	uxth	r2, r3
 800424e:	89fb      	ldrh	r3, [r7, #14]
 8004250:	4313      	orrs	r3, r2
 8004252:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	89fa      	ldrh	r2, [r7, #14]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	e04e      	b.n	80042fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	76bb      	strb	r3, [r7, #26]
 8004262:	e04b      	b.n	80042fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004264:	7efb      	ldrb	r3, [r7, #27]
 8004266:	2b08      	cmp	r3, #8
 8004268:	d827      	bhi.n	80042ba <UART_SetConfig+0x4b6>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x46c>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	080042bb 	.word	0x080042bb
 8004280:	080042ab 	.word	0x080042ab
 8004284:	080042bb 	.word	0x080042bb
 8004288:	080042bb 	.word	0x080042bb
 800428c:	080042bb 	.word	0x080042bb
 8004290:	080042b3 	.word	0x080042b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004294:	f7fe ff7c 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004298:	6178      	str	r0, [r7, #20]
        break;
 800429a:	e013      	b.n	80042c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429c:	f7fe ff8e 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 80042a0:	6178      	str	r0, [r7, #20]
        break;
 80042a2:	e00f      	b.n	80042c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <UART_SetConfig+0x510>)
 80042a6:	617b      	str	r3, [r7, #20]
        break;
 80042a8:	e00c      	b.n	80042c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042aa:	f7fe fed9 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 80042ae:	6178      	str	r0, [r7, #20]
        break;
 80042b0:	e008      	b.n	80042c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b6:	617b      	str	r3, [r7, #20]
        break;
 80042b8:	e004      	b.n	80042c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	76bb      	strb	r3, [r7, #26]
        break;
 80042c2:	bf00      	nop
    }

    if (pclk != 0U)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d018      	beq.n	80042fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085a      	lsrs	r2, r3, #1
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	441a      	add	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	b29b      	uxth	r3, r3
 80042de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	d908      	bls.n	80042f8 <UART_SetConfig+0x4f4>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d204      	bcs.n	80042f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e001      	b.n	80042fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004308:	7ebb      	ldrb	r3, [r7, #26]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bdb0      	pop	{r4, r5, r7, pc}
 8004312:	bf00      	nop
 8004314:	00f42400 	.word	0x00f42400

08004318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01a      	beq.n	800442e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004416:	d10a      	bne.n	800442e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800446c:	f7fc fbd8 	bl	8000c20 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10e      	bne.n	800449e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f82d 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e023      	b.n	80044e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d10e      	bne.n	80044ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f817 	bl	80044ee <UART_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00d      	b.n	80044e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	60f8      	str	r0, [r7, #12]
 80044f6:	60b9      	str	r1, [r7, #8]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	e05e      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004506:	d05a      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004508:	f7fc fb8a 	bl	8000c20 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	429a      	cmp	r2, r3
 8004516:	d302      	bcc.n	800451e <UART_WaitOnFlagUntilTimeout+0x30>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11b      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800452c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e043      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02c      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004572:	d124      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800458c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d091      	beq.n	8004500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e6:	b084      	sub	sp, #16
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	f107 001c 	add.w	r0, r7, #28
 80045f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f001 f9cf 	bl	80059a8 <USB_CoreReset>
 800460a:	4603      	mov	r3, r0
 800460c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800460e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
 8004620:	e005      	b.n	800462e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800463a:	b004      	add	sp, #16
 800463c:	4770      	bx	lr
	...

08004640 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d165      	bne.n	8004720 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a3e      	ldr	r2, [pc, #248]	; (8004750 <USB_SetTurnaroundTime+0x110>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d906      	bls.n	800466a <USB_SetTurnaroundTime+0x2a>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a3d      	ldr	r2, [pc, #244]	; (8004754 <USB_SetTurnaroundTime+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d202      	bcs.n	800466a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004664:	230f      	movs	r3, #15
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e05c      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a39      	ldr	r2, [pc, #228]	; (8004754 <USB_SetTurnaroundTime+0x114>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d306      	bcc.n	8004680 <USB_SetTurnaroundTime+0x40>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a38      	ldr	r2, [pc, #224]	; (8004758 <USB_SetTurnaroundTime+0x118>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d202      	bcs.n	8004680 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800467a:	230e      	movs	r3, #14
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e051      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a35      	ldr	r2, [pc, #212]	; (8004758 <USB_SetTurnaroundTime+0x118>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d306      	bcc.n	8004696 <USB_SetTurnaroundTime+0x56>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a34      	ldr	r2, [pc, #208]	; (800475c <USB_SetTurnaroundTime+0x11c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d202      	bcs.n	8004696 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004690:	230d      	movs	r3, #13
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e046      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a30      	ldr	r2, [pc, #192]	; (800475c <USB_SetTurnaroundTime+0x11c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d306      	bcc.n	80046ac <USB_SetTurnaroundTime+0x6c>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <USB_SetTurnaroundTime+0x120>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e03b      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a2c      	ldr	r2, [pc, #176]	; (8004760 <USB_SetTurnaroundTime+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d906      	bls.n	80046c2 <USB_SetTurnaroundTime+0x82>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a2b      	ldr	r2, [pc, #172]	; (8004764 <USB_SetTurnaroundTime+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d802      	bhi.n	80046c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046bc:	230b      	movs	r3, #11
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e030      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <USB_SetTurnaroundTime+0x124>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d906      	bls.n	80046d8 <USB_SetTurnaroundTime+0x98>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <USB_SetTurnaroundTime+0x128>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d802      	bhi.n	80046d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046d2:	230a      	movs	r3, #10
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e025      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <USB_SetTurnaroundTime+0x128>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d906      	bls.n	80046ee <USB_SetTurnaroundTime+0xae>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4a22      	ldr	r2, [pc, #136]	; (800476c <USB_SetTurnaroundTime+0x12c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d202      	bcs.n	80046ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046e8:	2309      	movs	r3, #9
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e01a      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a1e      	ldr	r2, [pc, #120]	; (800476c <USB_SetTurnaroundTime+0x12c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d306      	bcc.n	8004704 <USB_SetTurnaroundTime+0xc4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <USB_SetTurnaroundTime+0x130>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d802      	bhi.n	8004704 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046fe:	2308      	movs	r3, #8
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e00f      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <USB_SetTurnaroundTime+0x130>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d906      	bls.n	800471a <USB_SetTurnaroundTime+0xda>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a19      	ldr	r2, [pc, #100]	; (8004774 <USB_SetTurnaroundTime+0x134>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d202      	bcs.n	800471a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004714:	2307      	movs	r3, #7
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e004      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800471a:	2306      	movs	r3, #6
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e001      	b.n	8004724 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004720:	2309      	movs	r3, #9
 8004722:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	029b      	lsls	r3, r3, #10
 8004738:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	00d8acbf 	.word	0x00d8acbf
 8004754:	00e4e1c0 	.word	0x00e4e1c0
 8004758:	00f42400 	.word	0x00f42400
 800475c:	01067380 	.word	0x01067380
 8004760:	011a499f 	.word	0x011a499f
 8004764:	01312cff 	.word	0x01312cff
 8004768:	014ca43f 	.word	0x014ca43f
 800476c:	016e3600 	.word	0x016e3600
 8004770:	01a6ab1f 	.word	0x01a6ab1f
 8004774:	01e84800 	.word	0x01e84800

08004778 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f043 0201 	orr.w	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f023 0201 	bic.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d106      	bne.n	80047e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e00b      	b.n	8004800 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	e001      	b.n	8004800 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e003      	b.n	8004808 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004800:	2032      	movs	r0, #50	; 0x32
 8004802:	f7fc fa19 	bl	8000c38 <HAL_Delay>

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004810:	b084      	sub	sp, #16
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800481e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	e009      	b.n	8004844 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	3340      	adds	r3, #64	; 0x40
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3301      	adds	r3, #1
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b0e      	cmp	r3, #14
 8004848:	d9f2      	bls.n	8004830 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800484a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11c      	bne.n	800488a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485e:	f043 0302 	orr.w	r3, r3, #2
 8004862:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	e005      	b.n	8004896 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800489c:	461a      	mov	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	4619      	mov	r1, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	461a      	mov	r2, r3
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048b6:	2103      	movs	r1, #3
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f93d 	bl	8004b38 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048be:	2110      	movs	r1, #16
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8f1 	bl	8004aa8 <USB_FlushTxFifo>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f90f 	bl	8004af4 <USB_FlushRxFifo>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e6:	461a      	mov	r2, r3
 80048e8:	2300      	movs	r3, #0
 80048ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	461a      	mov	r2, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e043      	b.n	8004992 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004920:	d118      	bne.n	8004954 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e013      	b.n	8004966 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e008      	b.n	8004966 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	461a      	mov	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800498a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	3301      	adds	r3, #1
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	d3b7      	bcc.n	800490a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800499a:	2300      	movs	r3, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e043      	b.n	8004a28 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049b6:	d118      	bne.n	80049ea <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e013      	b.n	80049fc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	e008      	b.n	80049fc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3b7      	bcc.n	80049a0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f043 0210 	orr.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <USB_DevInit+0x294>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f043 0208 	orr.w	r2, r3, #8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d107      	bne.n	8004a92 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a9e:	b004      	add	sp, #16
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	803c3800 	.word	0x803c3800

08004aa8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a09      	ldr	r2, [pc, #36]	; (8004af0 <USB_FlushTxFifo+0x48>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d901      	bls.n	8004ad4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e006      	b.n	8004ae2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d0f0      	beq.n	8004ac2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	00030d40 	.word	0x00030d40

08004af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2210      	movs	r2, #16
 8004b04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <USB_FlushRxFifo+0x40>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e006      	b.n	8004b26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d0f0      	beq.n	8004b06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	00030d40 	.word	0x00030d40

08004b38 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b087      	sub	sp, #28
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0306 	and.w	r3, r3, #6
 8004b82:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d002      	beq.n	8004b90 <USB_GetDevSpeed+0x26>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b06      	cmp	r3, #6
 8004b8e:	d102      	bne.n	8004b96 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b90:	2302      	movs	r3, #2
 8004b92:	75fb      	strb	r3, [r7, #23]
 8004b94:	e001      	b.n	8004b9a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004b96:	230f      	movs	r3, #15
 8004b98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d13a      	bne.n	8004c3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d155      	bne.n	8004ca8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	059b      	lsls	r3, r3, #22
 8004c1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c20:	4313      	orrs	r3, r2
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e036      	b.n	8004ca8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	69da      	ldr	r2, [r3, #28]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	68f9      	ldr	r1, [r7, #12]
 8004c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d11a      	bne.n	8004ca8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	78db      	ldrb	r3, [r3, #3]
 8004c8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	4313      	orrs	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	785b      	ldrb	r3, [r3, #1]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d161      	bne.n	8004d98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cea:	d11f      	bne.n	8004d2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	43db      	mvns	r3, r3
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2101      	movs	r1, #1
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d70:	4013      	ands	r3, r2
 8004d72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	0159      	lsls	r1, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	440b      	add	r3, r1
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <USB_DeactivateEndpoint+0x1b0>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
 8004d96:	e060      	b.n	8004e5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dae:	d11f      	bne.n	8004df0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e10:	4013      	ands	r3, r2
 8004e12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	041b      	lsls	r3, r3, #16
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	0159      	lsls	r1, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	4619      	mov	r1, r3
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <USB_DeactivateEndpoint+0x1b4>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	ec337800 	.word	0xec337800
 8004e6c:	eff37800 	.word	0xeff37800

08004e70 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	785b      	ldrb	r3, [r3, #1]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f040 810a 	bne.w	80050a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d132      	bne.n	8004efc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	0cdb      	lsrs	r3, r3, #19
 8004ef6:	04db      	lsls	r3, r3, #19
 8004ef8:	6113      	str	r3, [r2, #16]
 8004efa:	e074      	b.n	8004fe6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f16:	0cdb      	lsrs	r3, r3, #19
 8004f18:	04db      	lsls	r3, r3, #19
 8004f1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6959      	ldr	r1, [r3, #20]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	440b      	add	r3, r1
 8004f58:	1e59      	subs	r1, r3, #1
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f62:	04d9      	lsls	r1, r3, #19
 8004f64:	4baf      	ldr	r3, [pc, #700]	; (8005224 <USB_EPStartXfer+0x3b4>)
 8004f66:	400b      	ands	r3, r1
 8004f68:	6939      	ldr	r1, [r7, #16]
 8004f6a:	0148      	lsls	r0, r1, #5
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	4401      	add	r1, r0
 8004f70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f74:	4313      	orrs	r3, r2
 8004f76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8e:	6939      	ldr	r1, [r7, #16]
 8004f90:	0148      	lsls	r0, r1, #5
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	4401      	add	r1, r0
 8004f96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	78db      	ldrb	r3, [r3, #3]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d11f      	bne.n	8004fe6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005004:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	78db      	ldrb	r3, [r3, #3]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d015      	beq.n	800503a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8100 	beq.w	8005218 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	2101      	movs	r1, #1
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	6979      	ldr	r1, [r7, #20]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4313      	orrs	r3, r2
 8005036:	634b      	str	r3, [r1, #52]	; 0x34
 8005038:	e0ee      	b.n	8005218 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005046:	2b00      	cmp	r3, #0
 8005048:	d110      	bne.n	800506c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e00f      	b.n	800508c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	0151      	lsls	r1, r2, #5
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	440a      	add	r2, r1
 8005082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68d9      	ldr	r1, [r3, #12]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	b29b      	uxth	r3, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f9e2 	bl	8005464 <USB_WritePacket>
 80050a0:	e0ba      	b.n	8005218 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	0cdb      	lsrs	r3, r3, #19
 80050be:	04db      	lsls	r3, r3, #19
 80050c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	0151      	lsls	r1, r2, #5
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	440a      	add	r2, r1
 80050d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d123      	bne.n	8005136 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005104:	6939      	ldr	r1, [r7, #16]
 8005106:	0148      	lsls	r0, r1, #5
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	4401      	add	r1, r0
 800510c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005110:	4313      	orrs	r3, r2
 8005112:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005132:	6113      	str	r3, [r2, #16]
 8005134:	e033      	b.n	800519e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4413      	add	r3, r2
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005158:	691a      	ldr	r2, [r3, #16]
 800515a:	89fb      	ldrh	r3, [r7, #14]
 800515c:	04d9      	lsls	r1, r3, #19
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <USB_EPStartXfer+0x3b4>)
 8005160:	400b      	ands	r3, r1
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	0148      	lsls	r0, r1, #5
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	4401      	add	r1, r0
 800516a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	89f9      	ldrh	r1, [r7, #14]
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	0148      	lsls	r0, r1, #5
 8005192:	6979      	ldr	r1, [r7, #20]
 8005194:	4401      	add	r1, r0
 8005196:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800519a:	4313      	orrs	r3, r2
 800519c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	78db      	ldrb	r3, [r3, #3]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d128      	bne.n	80051f8 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d110      	bne.n	80051d8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00f      	b.n	80051f8 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005216:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	1ff80000 	.word	0x1ff80000

08005228 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 80ab 	bne.w	800539c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d132      	bne.n	80052b4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800526c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	440a      	add	r2, r1
 8005288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ac:	0cdb      	lsrs	r3, r3, #19
 80052ae:	04db      	lsls	r3, r3, #19
 80052b0:	6113      	str	r3, [r2, #16]
 80052b2:	e04e      	b.n	8005352 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ce:	0cdb      	lsrs	r3, r3, #19
 80052d0:	04db      	lsls	r3, r3, #19
 80052d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	0148      	lsls	r0, r1, #5
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	4401      	add	r1, r0
 800534a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800534e:	4313      	orrs	r3, r2
 8005350:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005370:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d06d      	beq.n	8005456 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	2101      	movs	r1, #1
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005396:	4313      	orrs	r3, r2
 8005398:	634b      	str	r3, [r1, #52]	; 0x34
 800539a:	e05c      	b.n	8005456 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	0cdb      	lsrs	r3, r3, #19
 80053b8:	04db      	lsls	r3, r3, #19
 80053ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053de:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800540e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	0148      	lsls	r0, r1, #5
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	4401      	add	r1, r0
 800542e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005432:	4313      	orrs	r3, r2
 8005434:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005464:	b480      	push	{r7}
 8005466:	b089      	sub	sp, #36	; 0x24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4611      	mov	r1, r2
 8005470:	461a      	mov	r2, r3
 8005472:	460b      	mov	r3, r1
 8005474:	71fb      	strb	r3, [r7, #7]
 8005476:	4613      	mov	r3, r2
 8005478:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005482:	88bb      	ldrh	r3, [r7, #4]
 8005484:	3303      	adds	r3, #3
 8005486:	089b      	lsrs	r3, r3, #2
 8005488:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	e00f      	b.n	80054b0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	031a      	lsls	r2, r3, #12
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	4413      	add	r3, r2
 8005498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549c:	461a      	mov	r2, r3
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3304      	adds	r3, #4
 80054a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d3eb      	bcc.n	8005490 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3724      	adds	r7, #36	; 0x24
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b089      	sub	sp, #36	; 0x24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80054dc:	88fb      	ldrh	r3, [r7, #6]
 80054de:	3303      	adds	r3, #3
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80054e4:	2300      	movs	r3, #0
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e00b      	b.n	8005502 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3304      	adds	r3, #4
 80054fa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	3301      	adds	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	429a      	cmp	r2, r3
 8005508:	d3ef      	bcc.n	80054ea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800550a:	69fb      	ldr	r3, [r7, #28]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3724      	adds	r7, #36	; 0x24
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d12c      	bne.n	800558e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	db12      	blt.n	800556c <USB_EPSetStall+0x54>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00f      	beq.n	800556c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800556a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	0151      	lsls	r1, r2, #5
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	440a      	add	r2, r1
 8005582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	e02b      	b.n	80055e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	db12      	blt.n	80055c6 <USB_EPSetStall+0xae>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00f      	beq.n	80055c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d128      	bne.n	8005662 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	0151      	lsls	r1, r2, #5
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	440a      	add	r2, r1
 8005626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800562e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	78db      	ldrb	r3, [r3, #3]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d003      	beq.n	8005640 <USB_EPClearStall+0x4c>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	78db      	ldrb	r3, [r3, #3]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d138      	bne.n	80056b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800565a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	e027      	b.n	80056b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005680:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	78db      	ldrb	r3, [r3, #3]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d003      	beq.n	8005692 <USB_EPClearStall+0x9e>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d10f      	bne.n	80056b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573a:	f023 0302 	bic.w	r3, r3, #2
 800573e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800574e:	b480      	push	{r7}
 8005750:	b085      	sub	sp, #20
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005768:	f023 0303 	bic.w	r3, r3, #3
 800576c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577c:	f043 0302 	orr.w	r3, r3, #2
 8005780:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4013      	ands	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80057a8:	68fb      	ldr	r3, [r7, #12]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	4013      	ands	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	0c1b      	lsrs	r3, r3, #16
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	b29b      	uxth	r3, r3
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800584c:	68bb      	ldr	r3, [r7, #8]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800585a:	b480      	push	{r7}
 800585c:	b087      	sub	sp, #28
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	01db      	lsls	r3, r3, #7
 800588c:	b2db      	uxtb	r3, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4013      	ands	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058a8:	68bb      	ldr	r3, [r7, #8]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0301 	and.w	r3, r3, #1
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058f0:	f023 0307 	bic.w	r3, r3, #7
 80058f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	333c      	adds	r3, #60	; 0x3c
 800592a:	3304      	adds	r3, #4
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <USB_EP0_OutStart+0x8c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d90a      	bls.n	800594e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d101      	bne.n	800594e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e024      	b.n	8005998 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	461a      	mov	r2, r3
 8005956:	2300      	movs	r3, #0
 8005958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800596c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597c:	f043 0318 	orr.w	r3, r3, #24
 8005980:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005994:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	4f54300a 	.word	0x4f54300a

080059a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <USB_CoreReset+0x64>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e01b      	b.n	80059fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	daf2      	bge.n	80059b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f043 0201 	orr.w	r2, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <USB_CoreReset+0x64>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d901      	bls.n	80059f0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e006      	b.n	80059fe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d0f0      	beq.n	80059de <USB_CoreReset+0x36>

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	00030d40 	.word	0x00030d40

08005a10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a20:	f002 fa6c 	bl	8007efc <USBD_static_malloc>
 8005a24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a34:	2302      	movs	r3, #2
 8005a36:	e066      	b.n	8005b06 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	7c1b      	ldrb	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d119      	bne.n	8005a7c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2181      	movs	r1, #129	; 0x81
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 f83f 	bl	8007ad4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a60:	2202      	movs	r2, #2
 8005a62:	2101      	movs	r1, #1
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 f835 	bl	8007ad4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2210      	movs	r2, #16
 8005a76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a7a:	e016      	b.n	8005aaa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	2202      	movs	r2, #2
 8005a80:	2181      	movs	r1, #129	; 0x81
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f002 f826 	bl	8007ad4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	2202      	movs	r2, #2
 8005a92:	2101      	movs	r1, #1
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f002 f81d 	bl	8007ad4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aaa:	2308      	movs	r3, #8
 8005aac:	2203      	movs	r2, #3
 8005aae:	2182      	movs	r1, #130	; 0x82
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f002 f80f 	bl	8007ad4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	7c1b      	ldrb	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aea:	2101      	movs	r1, #1
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f002 f96b 	bl	8007dc8 <USBD_LL_PrepareReceive>
 8005af2:	e007      	b.n	8005b04 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	2101      	movs	r1, #1
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f002 f962 	bl	8007dc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b1a:	2181      	movs	r1, #129	; 0x81
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f002 f817 	bl	8007b50 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b28:	2101      	movs	r1, #1
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f002 f810 	bl	8007b50 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b38:	2182      	movs	r1, #130	; 0x82
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f002 f808 	bl	8007b50 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00e      	beq.n	8005b78 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f002 f9d4 	bl	8007f18 <USBD_static_free>
    pdev->pClassData = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e0af      	b.n	8005d0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d03f      	beq.n	8005c38 <USBD_CDC_Setup+0xb4>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	f040 809f 	bne.w	8005cfc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	88db      	ldrh	r3, [r3, #6]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d02e      	beq.n	8005c24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	da16      	bge.n	8005bfe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005bdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	88d2      	ldrh	r2, [r2, #6]
 8005be2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	88db      	ldrh	r3, [r3, #6]
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	bf28      	it	cs
 8005bec:	2307      	movcs	r3, #7
 8005bee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	89fa      	ldrh	r2, [r7, #14]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 fb13 	bl	8007222 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005bfc:	e085      	b.n	8005d0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	785a      	ldrb	r2, [r3, #1]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	88db      	ldrh	r3, [r3, #6]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c14:	6939      	ldr	r1, [r7, #16]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	88db      	ldrh	r3, [r3, #6]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f001 fb2c 	bl	800727a <USBD_CtlPrepareRx>
      break;
 8005c22:	e072      	b.n	8005d0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	7850      	ldrb	r0, [r2, #1]
 8005c30:	2200      	movs	r2, #0
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	4798      	blx	r3
      break;
 8005c36:	e068      	b.n	8005d0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	2b0b      	cmp	r3, #11
 8005c3e:	d852      	bhi.n	8005ce6 <USBD_CDC_Setup+0x162>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <USBD_CDC_Setup+0xc4>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c79 	.word	0x08005c79
 8005c4c:	08005cf5 	.word	0x08005cf5
 8005c50:	08005ce7 	.word	0x08005ce7
 8005c54:	08005ce7 	.word	0x08005ce7
 8005c58:	08005ce7 	.word	0x08005ce7
 8005c5c:	08005ce7 	.word	0x08005ce7
 8005c60:	08005ce7 	.word	0x08005ce7
 8005c64:	08005ce7 	.word	0x08005ce7
 8005c68:	08005ce7 	.word	0x08005ce7
 8005c6c:	08005ce7 	.word	0x08005ce7
 8005c70:	08005ca3 	.word	0x08005ca3
 8005c74:	08005ccd 	.word	0x08005ccd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d107      	bne.n	8005c94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c84:	f107 030a 	add.w	r3, r7, #10
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 fac8 	bl	8007222 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c92:	e032      	b.n	8005cfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fa52 	bl	8007140 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca0:	e02b      	b.n	8005cfa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d107      	bne.n	8005cbe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cae:	f107 030d 	add.w	r3, r7, #13
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fab3 	bl	8007222 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cbc:	e01d      	b.n	8005cfa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f001 fa3d 	bl	8007140 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cca:	e016      	b.n	8005cfa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d00f      	beq.n	8005cf8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fa30 	bl	8007140 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ce4:	e008      	b.n	8005cf8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 fa29 	bl	8007140 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf2:	e002      	b.n	8005cfa <USBD_CDC_Setup+0x176>
          break;
 8005cf4:	bf00      	nop
 8005cf6:	e008      	b.n	8005d0a <USBD_CDC_Setup+0x186>
          break;
 8005cf8:	bf00      	nop
      }
      break;
 8005cfa:	e006      	b.n	8005d0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f001 fa1e 	bl	8007140 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d04:	2303      	movs	r3, #3
 8005d06:	75fb      	strb	r3, [r7, #23]
      break;
 8005d08:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e04f      	b.n	8005dd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	3318      	adds	r3, #24
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d029      	beq.n	8005da8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	3318      	adds	r3, #24
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	78f9      	ldrb	r1, [r7, #3]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	1a5b      	subs	r3, r3, r1
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4403      	add	r3, r0
 8005d74:	3344      	adds	r3, #68	; 0x44
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d7c:	fb03 f301 	mul.w	r3, r3, r1
 8005d80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d110      	bne.n	8005da8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3318      	adds	r3, #24
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d9a:	78f9      	ldrb	r1, [r7, #3]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2200      	movs	r2, #0
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 ffd9 	bl	8007d58 <USBD_LL_Transmit>
 8005da6:	e015      	b.n	8005dd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e015      	b.n	8005e2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f002 f817 	bl	8007e38 <USBD_LL_GetRxDataSize>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e26:	4611      	mov	r1, r2
 8005e28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e01b      	b.n	8005e86 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <USBD_CDC_EP0_RxReady+0x50>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d010      	beq.n	8005e84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e78:	b292      	uxth	r2, r2
 8005e7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	22ff      	movs	r2, #255	; 0xff
 8005e80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2243      	movs	r2, #67	; 0x43
 8005e9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000094 	.word	0x20000094

08005eb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2243      	movs	r2, #67	; 0x43
 8005ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000050 	.word	0x20000050

08005ed0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2243      	movs	r2, #67	; 0x43
 8005edc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ede:	4b03      	ldr	r3, [pc, #12]	; (8005eec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	200000d8 	.word	0x200000d8

08005ef0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	220a      	movs	r2, #10
 8005efc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005efe:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	2000000c 	.word	0x2000000c

08005f10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e004      	b.n	8005f2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e008      	b.n	8005f6a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e004      	b.n	8005f9c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e016      	b.n	8005ff4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7c1b      	ldrb	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f001 fef4 	bl	8007dc8 <USBD_LL_PrepareReceive>
 8005fe0:	e007      	b.n	8005ff2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fe8:	2340      	movs	r3, #64	; 0x40
 8005fea:	2101      	movs	r1, #1
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 feeb 	bl	8007dc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e01f      	b.n	8006054 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	79fa      	ldrb	r2, [r7, #7]
 8006046:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f001 fcc5 	bl	80079d8 <USBD_LL_Init>
 800604e:	4603      	mov	r3, r0
 8006050:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006070:	2303      	movs	r3, #3
 8006072:	e016      	b.n	80060a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f107 020e 	add.w	r2, r7, #14
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fcdc 	bl	8007a70 <USBD_LL_Start>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060e4:	2303      	movs	r3, #3
 80060e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	4611      	mov	r1, r2
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006106:	7bfb      	ldrb	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	4611      	mov	r1, r2
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	4798      	blx	r3
  }

  return USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ffba 	bl	80070cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2b02      	cmp	r3, #2
 800617a:	d01a      	beq.n	80061b2 <USBD_LL_SetupStage+0x72>
 800617c:	2b02      	cmp	r3, #2
 800617e:	d822      	bhi.n	80061c6 <USBD_LL_SetupStage+0x86>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <USBD_LL_SetupStage+0x4a>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d00a      	beq.n	800619e <USBD_LL_SetupStage+0x5e>
 8006188:	e01d      	b.n	80061c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa62 	bl	800665c <USBD_StdDevReq>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
      break;
 800619c:	e020      	b.n	80061e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fac6 	bl	8006738 <USBD_StdItfReq>
 80061ac:	4603      	mov	r3, r0
 80061ae:	73fb      	strb	r3, [r7, #15]
      break;
 80061b0:	e016      	b.n	80061e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fb05 	bl	80067ca <USBD_StdEPReq>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e00c      	b.n	80061e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fcf1 	bl	8007bbc <USBD_LL_StallEP>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
      break;
 80061de:	bf00      	nop
  }

  return ret;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	460b      	mov	r3, r1
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d138      	bne.n	8006270 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006204:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800620c:	2b03      	cmp	r3, #3
 800620e:	d14a      	bne.n	80062a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d913      	bls.n	8006244 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4293      	cmp	r3, r2
 8006234:	bf28      	it	cs
 8006236:	4613      	movcs	r3, r2
 8006238:	461a      	mov	r2, r3
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 f839 	bl	80072b4 <USBD_CtlContinueRx>
 8006242:	e030      	b.n	80062a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b03      	cmp	r3, #3
 800624e:	d10b      	bne.n	8006268 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f001 f834 	bl	80072d6 <USBD_CtlSendStatus>
 800626e:	e01a      	b.n	80062a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b03      	cmp	r3, #3
 800627a:	d114      	bne.n	80062a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00e      	beq.n	80062a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	7afa      	ldrb	r2, [r7, #11]
 8006292:	4611      	mov	r1, r2
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	4798      	blx	r3
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	e000      	b.n	80062a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	460b      	mov	r3, r1
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062be:	7afb      	ldrb	r3, [r7, #11]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d16b      	bne.n	800639c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3314      	adds	r3, #20
 80062c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d156      	bne.n	8006382 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d914      	bls.n	800630a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 ffae 	bl	8007258 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062fc:	2300      	movs	r3, #0
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 fd60 	bl	8007dc8 <USBD_LL_PrepareReceive>
 8006308:	e03b      	b.n	8006382 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d11c      	bne.n	8006350 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800631e:	429a      	cmp	r2, r3
 8006320:	d316      	bcc.n	8006350 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800632c:	429a      	cmp	r2, r3
 800632e:	d20f      	bcs.n	8006350 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 ff8f 	bl	8007258 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006342:	2300      	movs	r3, #0
 8006344:	2200      	movs	r2, #0
 8006346:	2100      	movs	r1, #0
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f001 fd3d 	bl	8007dc8 <USBD_LL_PrepareReceive>
 800634e:	e018      	b.n	8006382 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d10b      	bne.n	8006374 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f001 fc20 	bl	8007bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 ffbd 	bl	80072fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d122      	bne.n	80063d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fe98 	bl	80060c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800639a:	e01a      	b.n	80063d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d114      	bne.n	80063d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	7afa      	ldrb	r2, [r7, #11]
 80063be:	4611      	mov	r1, r2
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	4798      	blx	r3
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	e000      	b.n	80063d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800640c:	2303      	movs	r3, #3
 800640e:	e02f      	b.n	8006470 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6852      	ldr	r2, [r2, #4]
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	4611      	mov	r1, r2
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	2200      	movs	r2, #0
 800643e:	2100      	movs	r1, #0
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fb47 	bl	8007ad4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2240      	movs	r2, #64	; 0x40
 8006452:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	2200      	movs	r2, #0
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fb39 	bl	8007ad4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2240      	movs	r2, #64	; 0x40
 800646c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2204      	movs	r2, #4
 80064b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d106      	bne.n	80064e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006506:	2303      	movs	r3, #3
 8006508:	e012      	b.n	8006530 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d10b      	bne.n	800652e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	e014      	b.n	800657c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b03      	cmp	r3, #3
 800655c:	d10d      	bne.n	800657a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	4611      	mov	r1, r2
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800659a:	2303      	movs	r3, #3
 800659c:	e014      	b.n	80065c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d10d      	bne.n	80065c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	4611      	mov	r1, r2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6852      	ldr	r2, [r2, #4]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	4611      	mov	r1, r2
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
  }

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800661e:	b480      	push	{r7}
 8006620:	b087      	sub	sp, #28
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	3301      	adds	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800663c:	8a3b      	ldrh	r3, [r7, #16]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	b21a      	sxth	r2, r3
 8006642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006646:	4313      	orrs	r3, r2
 8006648:	b21b      	sxth	r3, r3
 800664a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800664c:	89fb      	ldrh	r3, [r7, #14]
}
 800664e:	4618      	mov	r0, r3
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006672:	2b40      	cmp	r3, #64	; 0x40
 8006674:	d005      	beq.n	8006682 <USBD_StdDevReq+0x26>
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d853      	bhi.n	8006722 <USBD_StdDevReq+0xc6>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <USBD_StdDevReq+0x3a>
 800667e:	2b20      	cmp	r3, #32
 8006680:	d14f      	bne.n	8006722 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e04a      	b.n	800672c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	2b09      	cmp	r3, #9
 800669c:	d83b      	bhi.n	8006716 <USBD_StdDevReq+0xba>
 800669e:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <USBD_StdDevReq+0x48>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	0800670d 	.word	0x0800670d
 80066ac:	08006717 	.word	0x08006717
 80066b0:	08006703 	.word	0x08006703
 80066b4:	08006717 	.word	0x08006717
 80066b8:	080066d7 	.word	0x080066d7
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	08006717 	.word	0x08006717
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	080066e1 	.word	0x080066e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f9de 	bl	8006a90 <USBD_GetDescriptor>
          break;
 80066d4:	e024      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb6d 	bl	8006db8 <USBD_SetAddress>
          break;
 80066de:	e01f      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fbac 	bl	8006e40 <USBD_SetConfig>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
          break;
 80066ec:	e018      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fc4b 	bl	8006f8c <USBD_GetConfig>
          break;
 80066f6:	e013      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fc7c 	bl	8006ff8 <USBD_GetStatus>
          break;
 8006700:	e00e      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fcab 	bl	8007060 <USBD_SetFeature>
          break;
 800670a:	e009      	b.n	8006720 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800670c:	6839      	ldr	r1, [r7, #0]
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fcba 	bl	8007088 <USBD_ClrFeature>
          break;
 8006714:	e004      	b.n	8006720 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fd11 	bl	8007140 <USBD_CtlError>
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e004      	b.n	800672c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fd0b 	bl	8007140 <USBD_CtlError>
      break;
 800672a:	bf00      	nop
  }

  return ret;
 800672c:	7bfb      	ldrb	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop

08006738 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d005      	beq.n	800675e <USBD_StdItfReq+0x26>
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d82f      	bhi.n	80067b6 <USBD_StdItfReq+0x7e>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <USBD_StdItfReq+0x26>
 800675a:	2b20      	cmp	r3, #32
 800675c:	d12b      	bne.n	80067b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006764:	b2db      	uxtb	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	2b02      	cmp	r3, #2
 800676a:	d81d      	bhi.n	80067a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	889b      	ldrh	r3, [r3, #4]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d813      	bhi.n	800679e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	88db      	ldrh	r3, [r3, #6]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d110      	bne.n	80067b2 <USBD_StdItfReq+0x7a>
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fd9d 	bl	80072d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800679c:	e009      	b.n	80067b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fccd 	bl	8007140 <USBD_CtlError>
          break;
 80067a6:	e004      	b.n	80067b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fcc8 	bl	8007140 <USBD_CtlError>
          break;
 80067b0:	e000      	b.n	80067b4 <USBD_StdItfReq+0x7c>
          break;
 80067b2:	bf00      	nop
      }
      break;
 80067b4:	e004      	b.n	80067c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fcc1 	bl	8007140 <USBD_CtlError>
      break;
 80067be:	bf00      	nop
  }

  return ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	889b      	ldrh	r3, [r3, #4]
 80067dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d007      	beq.n	80067fa <USBD_StdEPReq+0x30>
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	f200 8145 	bhi.w	8006a7a <USBD_StdEPReq+0x2b0>
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <USBD_StdEPReq+0x44>
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	f040 8140 	bne.w	8006a7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
      break;
 800680c:	e13a      	b.n	8006a84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	785b      	ldrb	r3, [r3, #1]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d007      	beq.n	8006826 <USBD_StdEPReq+0x5c>
 8006816:	2b03      	cmp	r3, #3
 8006818:	f300 8129 	bgt.w	8006a6e <USBD_StdEPReq+0x2a4>
 800681c:	2b00      	cmp	r3, #0
 800681e:	d07f      	beq.n	8006920 <USBD_StdEPReq+0x156>
 8006820:	2b01      	cmp	r3, #1
 8006822:	d03c      	beq.n	800689e <USBD_StdEPReq+0xd4>
 8006824:	e123      	b.n	8006a6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d002      	beq.n	8006838 <USBD_StdEPReq+0x6e>
 8006832:	2b03      	cmp	r3, #3
 8006834:	d016      	beq.n	8006864 <USBD_StdEPReq+0x9a>
 8006836:	e02c      	b.n	8006892 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006838:	7bbb      	ldrb	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00d      	beq.n	800685a <USBD_StdEPReq+0x90>
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d00a      	beq.n	800685a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 f9b7 	bl	8007bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f9b3 	bl	8007bbc <USBD_LL_StallEP>
 8006856:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006858:	e020      	b.n	800689c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc6f 	bl	8007140 <USBD_CtlError>
              break;
 8006862:	e01b      	b.n	800689c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	885b      	ldrh	r3, [r3, #2]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10e      	bne.n	800688a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <USBD_StdEPReq+0xc0>
 8006872:	7bbb      	ldrb	r3, [r7, #14]
 8006874:	2b80      	cmp	r3, #128	; 0x80
 8006876:	d008      	beq.n	800688a <USBD_StdEPReq+0xc0>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	88db      	ldrh	r3, [r3, #6]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006880:	7bbb      	ldrb	r3, [r7, #14]
 8006882:	4619      	mov	r1, r3
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 f999 	bl	8007bbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fd23 	bl	80072d6 <USBD_CtlSendStatus>

              break;
 8006890:	e004      	b.n	800689c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fc53 	bl	8007140 <USBD_CtlError>
              break;
 800689a:	bf00      	nop
          }
          break;
 800689c:	e0ec      	b.n	8006a78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d002      	beq.n	80068b0 <USBD_StdEPReq+0xe6>
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d016      	beq.n	80068dc <USBD_StdEPReq+0x112>
 80068ae:	e030      	b.n	8006912 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <USBD_StdEPReq+0x108>
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d00a      	beq.n	80068d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f97b 	bl	8007bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f977 	bl	8007bbc <USBD_LL_StallEP>
 80068ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d0:	e025      	b.n	800691e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fc33 	bl	8007140 <USBD_CtlError>
              break;
 80068da:	e020      	b.n	800691e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	885b      	ldrh	r3, [r3, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d11b      	bne.n	800691c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068ee:	7bbb      	ldrb	r3, [r7, #14]
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 f998 	bl	8007c28 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fcec 	bl	80072d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006910:	e004      	b.n	800691c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fc13 	bl	8007140 <USBD_CtlError>
              break;
 800691a:	e000      	b.n	800691e <USBD_StdEPReq+0x154>
              break;
 800691c:	bf00      	nop
          }
          break;
 800691e:	e0ab      	b.n	8006a78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b02      	cmp	r3, #2
 800692a:	d002      	beq.n	8006932 <USBD_StdEPReq+0x168>
 800692c:	2b03      	cmp	r3, #3
 800692e:	d032      	beq.n	8006996 <USBD_StdEPReq+0x1cc>
 8006930:	e097      	b.n	8006a62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006932:	7bbb      	ldrb	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d007      	beq.n	8006948 <USBD_StdEPReq+0x17e>
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b80      	cmp	r3, #128	; 0x80
 800693c:	d004      	beq.n	8006948 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fbfd 	bl	8007140 <USBD_CtlError>
                break;
 8006946:	e091      	b.n	8006a6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	da0b      	bge.n	8006968 <USBD_StdEPReq+0x19e>
 8006950:	7bbb      	ldrb	r3, [r7, #14]
 8006952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	3310      	adds	r3, #16
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4413      	add	r3, r2
 8006964:	3304      	adds	r3, #4
 8006966:	e00b      	b.n	8006980 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006968:	7bbb      	ldrb	r3, [r7, #14]
 800696a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	3304      	adds	r3, #4
 8006980:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2202      	movs	r2, #2
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc47 	bl	8007222 <USBD_CtlSendData>
              break;
 8006994:	e06a      	b.n	8006a6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	da11      	bge.n	80069c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d117      	bne.n	80069e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fbc0 	bl	8007140 <USBD_CtlError>
                  break;
 80069c0:	e054      	b.n	8006a6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069c2:	7bbb      	ldrb	r3, [r7, #14]
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d104      	bne.n	80069e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fbad 	bl	8007140 <USBD_CtlError>
                  break;
 80069e6:	e041      	b.n	8006a6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da0b      	bge.n	8006a08 <USBD_StdEPReq+0x23e>
 80069f0:	7bbb      	ldrb	r3, [r7, #14]
 80069f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	3310      	adds	r3, #16
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	3304      	adds	r3, #4
 8006a06:	e00b      	b.n	8006a20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <USBD_StdEPReq+0x264>
 8006a28:	7bbb      	ldrb	r3, [r7, #14]
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d103      	bne.n	8006a36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e00e      	b.n	8006a54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a36:	7bbb      	ldrb	r3, [r7, #14]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 f92a 	bl	8007c94 <USBD_LL_IsStallEP>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e002      	b.n	8006a54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2202      	movs	r2, #2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fbe1 	bl	8007222 <USBD_CtlSendData>
              break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fb6b 	bl	8007140 <USBD_CtlError>
              break;
 8006a6a:	bf00      	nop
          }
          break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb65 	bl	8007140 <USBD_CtlError>
          break;
 8006a76:	bf00      	nop
      }
      break;
 8006a78:	e004      	b.n	8006a84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb5f 	bl	8007140 <USBD_CtlError>
      break;
 8006a82:	bf00      	nop
  }

  return ret;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	0a1b      	lsrs	r3, r3, #8
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	2b0e      	cmp	r3, #14
 8006ab2:	f200 8152 	bhi.w	8006d5a <USBD_GetDescriptor+0x2ca>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <USBD_GetDescriptor+0x2c>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006b2d 	.word	0x08006b2d
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006b85 	.word	0x08006b85
 8006ac8:	08006d5b 	.word	0x08006d5b
 8006acc:	08006d5b 	.word	0x08006d5b
 8006ad0:	08006cfb 	.word	0x08006cfb
 8006ad4:	08006d27 	.word	0x08006d27
 8006ad8:	08006d5b 	.word	0x08006d5b
 8006adc:	08006d5b 	.word	0x08006d5b
 8006ae0:	08006d5b 	.word	0x08006d5b
 8006ae4:	08006d5b 	.word	0x08006d5b
 8006ae8:	08006d5b 	.word	0x08006d5b
 8006aec:	08006d5b 	.word	0x08006d5b
 8006af0:	08006d5b 	.word	0x08006d5b
 8006af4:	08006af9 	.word	0x08006af9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	7c12      	ldrb	r2, [r2, #16]
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b1a:	e126      	b.n	8006d6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb0e 	bl	8007140 <USBD_CtlError>
        err++;
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	3301      	adds	r3, #1
 8006b28:	72fb      	strb	r3, [r7, #11]
      break;
 8006b2a:	e11e      	b.n	8006d6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	f107 0108 	add.w	r1, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
      break;
 8006b42:	e112      	b.n	8006d6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7c1b      	ldrb	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	f107 0208 	add.w	r2, r7, #8
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
 8006b5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	2202      	movs	r2, #2
 8006b64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b66:	e100      	b.n	8006d6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	f107 0208 	add.w	r2, r7, #8
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3
 8006b78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	2202      	movs	r2, #2
 8006b80:	701a      	strb	r2, [r3, #0]
      break;
 8006b82:	e0f2      	b.n	8006d6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	885b      	ldrh	r3, [r3, #2]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b05      	cmp	r3, #5
 8006b8c:	f200 80ac 	bhi.w	8006ce8 <USBD_GetDescriptor+0x258>
 8006b90:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USBD_GetDescriptor+0x108>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bb1 	.word	0x08006bb1
 8006b9c:	08006be5 	.word	0x08006be5
 8006ba0:	08006c19 	.word	0x08006c19
 8006ba4:	08006c4d 	.word	0x08006c4d
 8006ba8:	08006c81 	.word	0x08006c81
 8006bac:	08006cb5 	.word	0x08006cb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	7c12      	ldrb	r2, [r2, #16]
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4798      	blx	r3
 8006bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd2:	e091      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fab2 	bl	8007140 <USBD_CtlError>
            err++;
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	3301      	adds	r3, #1
 8006be0:	72fb      	strb	r3, [r7, #11]
          break;
 8006be2:	e089      	b.n	8006cf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00b      	beq.n	8006c08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	7c12      	ldrb	r2, [r2, #16]
 8006bfc:	f107 0108 	add.w	r1, r7, #8
 8006c00:	4610      	mov	r0, r2
 8006c02:	4798      	blx	r3
 8006c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c06:	e077      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa98 	bl	8007140 <USBD_CtlError>
            err++;
 8006c10:	7afb      	ldrb	r3, [r7, #11]
 8006c12:	3301      	adds	r3, #1
 8006c14:	72fb      	strb	r3, [r7, #11]
          break;
 8006c16:	e06f      	b.n	8006cf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	7c12      	ldrb	r2, [r2, #16]
 8006c30:	f107 0108 	add.w	r1, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3a:	e05d      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa7e 	bl	8007140 <USBD_CtlError>
            err++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4a:	e055      	b.n	8006cf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	7c12      	ldrb	r2, [r2, #16]
 8006c64:	f107 0108 	add.w	r1, r7, #8
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
 8006c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6e:	e043      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fa64 	bl	8007140 <USBD_CtlError>
            err++;
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7e:	e03b      	b.n	8006cf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	7c12      	ldrb	r2, [r2, #16]
 8006c98:	f107 0108 	add.w	r1, r7, #8
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4798      	blx	r3
 8006ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca2:	e029      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa4a 	bl	8007140 <USBD_CtlError>
            err++;
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb2:	e021      	b.n	8006cf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	7c12      	ldrb	r2, [r2, #16]
 8006ccc:	f107 0108 	add.w	r1, r7, #8
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
 8006cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cd6:	e00f      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa30 	bl	8007140 <USBD_CtlError>
            err++;
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ce6:	e007      	b.n	8006cf8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa28 	bl	8007140 <USBD_CtlError>
          err++;
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cf6:	bf00      	nop
      }
      break;
 8006cf8:	e037      	b.n	8006d6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	7c1b      	ldrb	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0a:	f107 0208 	add.w	r2, r7, #8
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4798      	blx	r3
 8006d12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d14:	e029      	b.n	8006d6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa11 	bl	8007140 <USBD_CtlError>
        err++;
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	3301      	adds	r3, #1
 8006d22:	72fb      	strb	r3, [r7, #11]
      break;
 8006d24:	e021      	b.n	8006d6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7c1b      	ldrb	r3, [r3, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10d      	bne.n	8006d4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	f107 0208 	add.w	r2, r7, #8
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4798      	blx	r3
 8006d3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	2207      	movs	r2, #7
 8006d46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d48:	e00f      	b.n	8006d6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f9f7 	bl	8007140 <USBD_CtlError>
        err++;
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	3301      	adds	r3, #1
 8006d56:	72fb      	strb	r3, [r7, #11]
      break;
 8006d58:	e007      	b.n	8006d6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f9ef 	bl	8007140 <USBD_CtlError>
      err++;
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	3301      	adds	r3, #1
 8006d66:	72fb      	strb	r3, [r7, #11]
      break;
 8006d68:	bf00      	nop
  }

  if (err != 0U)
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d11e      	bne.n	8006dae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	88db      	ldrh	r3, [r3, #6]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d016      	beq.n	8006da6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006d78:	893b      	ldrh	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00e      	beq.n	8006d9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	88da      	ldrh	r2, [r3, #6]
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	4293      	cmp	r3, r2
 8006d86:	bf28      	it	cs
 8006d88:	4613      	movcs	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d8e:	893b      	ldrh	r3, [r7, #8]
 8006d90:	461a      	mov	r2, r3
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fa44 	bl	8007222 <USBD_CtlSendData>
 8006d9a:	e009      	b.n	8006db0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d9c:	6839      	ldr	r1, [r7, #0]
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9ce 	bl	8007140 <USBD_CtlError>
 8006da4:	e004      	b.n	8006db0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fa95 	bl	80072d6 <USBD_CtlSendStatus>
 8006dac:	e000      	b.n	8006db0 <USBD_GetDescriptor+0x320>
    return;
 8006dae:	bf00      	nop
  }
}
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop

08006db8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	889b      	ldrh	r3, [r3, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d131      	bne.n	8006e2e <USBD_SetAddress+0x76>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	88db      	ldrh	r3, [r3, #6]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d12d      	bne.n	8006e2e <USBD_SetAddress+0x76>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	885b      	ldrh	r3, [r3, #2]
 8006dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd8:	d829      	bhi.n	8006e2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d104      	bne.n	8006dfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f9a3 	bl	8007140 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfa:	e01d      	b.n	8006e38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7bfa      	ldrb	r2, [r7, #15]
 8006e00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 ff6f 	bl	8007cec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa61 	bl	80072d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d004      	beq.n	8006e24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	e009      	b.n	8006e38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2c:	e004      	b.n	8006e38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f985 	bl	8007140 <USBD_CtlError>
  }
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	885b      	ldrh	r3, [r3, #2]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	4b4c      	ldr	r3, [pc, #304]	; (8006f88 <USBD_SetConfig+0x148>)
 8006e56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e58:	4b4b      	ldr	r3, [pc, #300]	; (8006f88 <USBD_SetConfig+0x148>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d905      	bls.n	8006e6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e60:	6839      	ldr	r1, [r7, #0]
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f96c 	bl	8007140 <USBD_CtlError>
    return USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e088      	b.n	8006f7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d002      	beq.n	8006e7e <USBD_SetConfig+0x3e>
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d025      	beq.n	8006ec8 <USBD_SetConfig+0x88>
 8006e7c:	e071      	b.n	8006f62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e7e:	4b42      	ldr	r3, [pc, #264]	; (8006f88 <USBD_SetConfig+0x148>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01c      	beq.n	8006ec0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e86:	4b40      	ldr	r3, [pc, #256]	; (8006f88 <USBD_SetConfig+0x148>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e90:	4b3d      	ldr	r3, [pc, #244]	; (8006f88 <USBD_SetConfig+0x148>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff f91e 	bl	80060d8 <USBD_SetClassConfig>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f949 	bl	8007140 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eae:	e065      	b.n	8006f7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa10 	bl	80072d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2203      	movs	r2, #3
 8006eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ebe:	e05d      	b.n	8006f7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fa08 	bl	80072d6 <USBD_CtlSendStatus>
      break;
 8006ec6:	e059      	b.n	8006f7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	; (8006f88 <USBD_SetConfig+0x148>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d112      	bne.n	8006ef6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ed8:	4b2b      	ldr	r3, [pc, #172]	; (8006f88 <USBD_SetConfig+0x148>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ee2:	4b29      	ldr	r3, [pc, #164]	; (8006f88 <USBD_SetConfig+0x148>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff f911 	bl	8006110 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f9f1 	bl	80072d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ef4:	e042      	b.n	8006f7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006ef6:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <USBD_SetConfig+0x148>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d02a      	beq.n	8006f5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff f8ff 	bl	8006110 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f12:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <USBD_SetConfig+0x148>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	; (8006f88 <USBD_SetConfig+0x148>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff f8d8 	bl	80060d8 <USBD_SetClassConfig>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00f      	beq.n	8006f52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f903 	bl	8007140 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff f8e4 	bl	8006110 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f50:	e014      	b.n	8006f7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9bf 	bl	80072d6 <USBD_CtlSendStatus>
      break;
 8006f58:	e010      	b.n	8006f7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9bb 	bl	80072d6 <USBD_CtlSendStatus>
      break;
 8006f60:	e00c      	b.n	8006f7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8eb 	bl	8007140 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <USBD_SetConfig+0x148>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff f8cd 	bl	8006110 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
      break;
 8006f7a:	bf00      	nop
  }

  return ret;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200001ac 	.word	0x200001ac

08006f8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	88db      	ldrh	r3, [r3, #6]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d004      	beq.n	8006fa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f8cd 	bl	8007140 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fa6:	e023      	b.n	8006ff0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	dc02      	bgt.n	8006fba <USBD_GetConfig+0x2e>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	dc03      	bgt.n	8006fc0 <USBD_GetConfig+0x34>
 8006fb8:	e015      	b.n	8006fe6 <USBD_GetConfig+0x5a>
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d00b      	beq.n	8006fd6 <USBD_GetConfig+0x4a>
 8006fbe:	e012      	b.n	8006fe6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f927 	bl	8007222 <USBD_CtlSendData>
        break;
 8006fd4:	e00c      	b.n	8006ff0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f91f 	bl	8007222 <USBD_CtlSendData>
        break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8a9 	bl	8007140 <USBD_CtlError>
        break;
 8006fee:	bf00      	nop
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	2b02      	cmp	r3, #2
 800700e:	d81e      	bhi.n	800704e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	88db      	ldrh	r3, [r3, #6]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d004      	beq.n	8007022 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f890 	bl	8007140 <USBD_CtlError>
        break;
 8007020:	e01a      	b.n	8007058 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f043 0202 	orr.w	r2, r3, #2
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	330c      	adds	r3, #12
 8007042:	2202      	movs	r2, #2
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8eb 	bl	8007222 <USBD_CtlSendData>
      break;
 800704c:	e004      	b.n	8007058 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f875 	bl	8007140 <USBD_CtlError>
      break;
 8007056:	bf00      	nop
  }
}
 8007058:	bf00      	nop
 800705a:	3708      	adds	r7, #8
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d106      	bne.n	8007080 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f92b 	bl	80072d6 <USBD_CtlSendStatus>
  }
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	2b02      	cmp	r3, #2
 800709e:	d80b      	bhi.n	80070b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	885b      	ldrh	r3, [r3, #2]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10c      	bne.n	80070c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f910 	bl	80072d6 <USBD_CtlSendStatus>
      }
      break;
 80070b6:	e004      	b.n	80070c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f840 	bl	8007140 <USBD_CtlError>
      break;
 80070c0:	e000      	b.n	80070c4 <USBD_ClrFeature+0x3c>
      break;
 80070c2:	bf00      	nop
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	781a      	ldrb	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	3301      	adds	r3, #1
 80070f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff fa91 	bl	800661e <SWAPBYTE>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fa84 	bl	800661e <SWAPBYTE>
 8007116:	4603      	mov	r3, r0
 8007118:	461a      	mov	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff fa77 	bl	800661e <SWAPBYTE>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	80da      	strh	r2, [r3, #6]
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800714a:	2180      	movs	r1, #128	; 0x80
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fd35 	bl	8007bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007152:	2100      	movs	r1, #0
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd31 	bl	8007bbc <USBD_LL_StallEP>
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d036      	beq.n	80071e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800717c:	6938      	ldr	r0, [r7, #16]
 800717e:	f000 f836 	bl	80071ee <USBD_GetLen>
 8007182:	4603      	mov	r3, r0
 8007184:	3301      	adds	r3, #1
 8007186:	b29b      	uxth	r3, r3
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	4413      	add	r3, r2
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	701a      	strb	r2, [r3, #0]
  idx++;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	3301      	adds	r3, #1
 80071a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	4413      	add	r3, r2
 80071a8:	2203      	movs	r2, #3
 80071aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	3301      	adds	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071b2:	e013      	b.n	80071dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4413      	add	r3, r2
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	3301      	adds	r3, #1
 80071c4:	613b      	str	r3, [r7, #16]
    idx++;
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	3301      	adds	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4413      	add	r3, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
 80071d8:	3301      	adds	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e7      	bne.n	80071b4 <USBD_GetString+0x52>
 80071e4:	e000      	b.n	80071e8 <USBD_GetString+0x86>
    return;
 80071e6:	bf00      	nop
  }
}
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b085      	sub	sp, #20
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071fe:	e005      	b.n	800720c <USBD_GetLen+0x1e>
  {
    len++;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	3301      	adds	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	3301      	adds	r3, #1
 800720a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f5      	bne.n	8007200 <USBD_GetLen+0x12>
  }

  return len;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2202      	movs	r2, #2
 8007232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fd85 	bl	8007d58 <USBD_LL_Transmit>

  return USBD_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	2100      	movs	r1, #0
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fd74 	bl	8007d58 <USBD_LL_Transmit>

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2203      	movs	r2, #3
 800728a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	2100      	movs	r1, #0
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fd8f 	bl	8007dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fd7e 	bl	8007dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2204      	movs	r2, #4
 80072e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072e6:	2300      	movs	r3, #0
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fd33 	bl	8007d58 <USBD_LL_Transmit>

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2205      	movs	r2, #5
 8007308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800730c:	2300      	movs	r3, #0
 800730e:	2200      	movs	r2, #0
 8007310:	2100      	movs	r1, #0
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fd58 	bl	8007dc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007328:	2200      	movs	r2, #0
 800732a:	4912      	ldr	r1, [pc, #72]	; (8007374 <MX_USB_DEVICE_Init+0x50>)
 800732c:	4812      	ldr	r0, [pc, #72]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 800732e:	f7fe fe65 	bl	8005ffc <USBD_Init>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007338:	f7f9 fa86 	bl	8000848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800733c:	490f      	ldr	r1, [pc, #60]	; (800737c <MX_USB_DEVICE_Init+0x58>)
 800733e:	480e      	ldr	r0, [pc, #56]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007340:	f7fe fe8c 	bl	800605c <USBD_RegisterClass>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800734a:	f7f9 fa7d 	bl	8000848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800734e:	490c      	ldr	r1, [pc, #48]	; (8007380 <MX_USB_DEVICE_Init+0x5c>)
 8007350:	4809      	ldr	r0, [pc, #36]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007352:	f7fe fddd 	bl	8005f10 <USBD_CDC_RegisterInterface>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800735c:	f7f9 fa74 	bl	8000848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007360:	4805      	ldr	r0, [pc, #20]	; (8007378 <MX_USB_DEVICE_Init+0x54>)
 8007362:	f7fe fea2 	bl	80060aa <USBD_Start>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800736c:	f7f9 fa6c 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007370:	bf00      	nop
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000130 	.word	0x20000130
 8007378:	20000508 	.word	0x20000508
 800737c:	20000018 	.word	0x20000018
 8007380:	2000011c 	.word	0x2000011c

08007384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007388:	2200      	movs	r2, #0
 800738a:	4905      	ldr	r1, [pc, #20]	; (80073a0 <CDC_Init_FS+0x1c>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <CDC_Init_FS+0x20>)
 800738e:	f7fe fdd4 	bl	8005f3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007392:	4905      	ldr	r1, [pc, #20]	; (80073a8 <CDC_Init_FS+0x24>)
 8007394:	4803      	ldr	r0, [pc, #12]	; (80073a4 <CDC_Init_FS+0x20>)
 8007396:	f7fe fdee 	bl	8005f76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800739a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800739c:	4618      	mov	r0, r3
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000fd8 	.word	0x20000fd8
 80073a4:	20000508 	.word	0x20000508
 80073a8:	200007d8 	.word	0x200007d8

080073ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
 80073c8:	4613      	mov	r3, r2
 80073ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b23      	cmp	r3, #35	; 0x23
 80073d0:	d84a      	bhi.n	8007468 <CDC_Control_FS+0xac>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <CDC_Control_FS+0x1c>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	08007469 	.word	0x08007469
 80073dc:	08007469 	.word	0x08007469
 80073e0:	08007469 	.word	0x08007469
 80073e4:	08007469 	.word	0x08007469
 80073e8:	08007469 	.word	0x08007469
 80073ec:	08007469 	.word	0x08007469
 80073f0:	08007469 	.word	0x08007469
 80073f4:	08007469 	.word	0x08007469
 80073f8:	08007469 	.word	0x08007469
 80073fc:	08007469 	.word	0x08007469
 8007400:	08007469 	.word	0x08007469
 8007404:	08007469 	.word	0x08007469
 8007408:	08007469 	.word	0x08007469
 800740c:	08007469 	.word	0x08007469
 8007410:	08007469 	.word	0x08007469
 8007414:	08007469 	.word	0x08007469
 8007418:	08007469 	.word	0x08007469
 800741c:	08007469 	.word	0x08007469
 8007420:	08007469 	.word	0x08007469
 8007424:	08007469 	.word	0x08007469
 8007428:	08007469 	.word	0x08007469
 800742c:	08007469 	.word	0x08007469
 8007430:	08007469 	.word	0x08007469
 8007434:	08007469 	.word	0x08007469
 8007438:	08007469 	.word	0x08007469
 800743c:	08007469 	.word	0x08007469
 8007440:	08007469 	.word	0x08007469
 8007444:	08007469 	.word	0x08007469
 8007448:	08007469 	.word	0x08007469
 800744c:	08007469 	.word	0x08007469
 8007450:	08007469 	.word	0x08007469
 8007454:	08007469 	.word	0x08007469
 8007458:	08007469 	.word	0x08007469
 800745c:	08007469 	.word	0x08007469
 8007460:	08007469 	.word	0x08007469
 8007464:	08007469 	.word	0x08007469
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007468:	bf00      	nop
  }

  return (USBD_OK);
 800746a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4805      	ldr	r0, [pc, #20]	; (800749c <CDC_Receive_FS+0x24>)
 8007486:	f7fe fd76 	bl	8005f76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800748a:	4804      	ldr	r0, [pc, #16]	; (800749c <CDC_Receive_FS+0x24>)
 800748c:	f7fe fd8c 	bl	8005fa8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000508 	.word	0x20000508

080074a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2212      	movs	r2, #18
 80074d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074d6:	4b03      	ldr	r3, [pc, #12]	; (80074e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	20000150 	.word	0x20000150

080074e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	6039      	str	r1, [r7, #0]
 80074f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2204      	movs	r2, #4
 80074f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074fa:	4b03      	ldr	r3, [pc, #12]	; (8007508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr
 8007508:	20000170 	.word	0x20000170

0800750c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d105      	bne.n	800752a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4907      	ldr	r1, [pc, #28]	; (8007540 <USBD_FS_ProductStrDescriptor+0x34>)
 8007522:	4808      	ldr	r0, [pc, #32]	; (8007544 <USBD_FS_ProductStrDescriptor+0x38>)
 8007524:	f7ff fe1d 	bl	8007162 <USBD_GetString>
 8007528:	e004      	b.n	8007534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	4904      	ldr	r1, [pc, #16]	; (8007540 <USBD_FS_ProductStrDescriptor+0x34>)
 800752e:	4805      	ldr	r0, [pc, #20]	; (8007544 <USBD_FS_ProductStrDescriptor+0x38>)
 8007530:	f7ff fe17 	bl	8007162 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007534:	4b02      	ldr	r3, [pc, #8]	; (8007540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200017d8 	.word	0x200017d8
 8007544:	08007fa8 	.word	0x08007fa8

08007548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800755a:	f7ff fe02 	bl	8007162 <USBD_GetString>
  return USBD_StrDesc;
 800755e:	4b02      	ldr	r3, [pc, #8]	; (8007568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007560:	4618      	mov	r0, r3
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200017d8 	.word	0x200017d8
 800756c:	08007fc0 	.word	0x08007fc0

08007570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	221a      	movs	r2, #26
 8007580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007582:	f000 f855 	bl	8007630 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007586:	4b02      	ldr	r3, [pc, #8]	; (8007590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000174 	.word	0x20000174

08007594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	4603      	mov	r3, r0
 800759c:	6039      	str	r1, [r7, #0]
 800759e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d105      	bne.n	80075b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	4907      	ldr	r1, [pc, #28]	; (80075c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075aa:	4808      	ldr	r0, [pc, #32]	; (80075cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80075ac:	f7ff fdd9 	bl	8007162 <USBD_GetString>
 80075b0:	e004      	b.n	80075bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4904      	ldr	r1, [pc, #16]	; (80075c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075b6:	4805      	ldr	r0, [pc, #20]	; (80075cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80075b8:	f7ff fdd3 	bl	8007162 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075bc:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200017d8 	.word	0x200017d8
 80075cc:	08007fd4 	.word	0x08007fd4

080075d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	4907      	ldr	r1, [pc, #28]	; (8007604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075e6:	4808      	ldr	r0, [pc, #32]	; (8007608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075e8:	f7ff fdbb 	bl	8007162 <USBD_GetString>
 80075ec:	e004      	b.n	80075f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4904      	ldr	r1, [pc, #16]	; (8007604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075f2:	4805      	ldr	r0, [pc, #20]	; (8007608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075f4:	f7ff fdb5 	bl	8007162 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075f8:	4b02      	ldr	r3, [pc, #8]	; (8007604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200017d8 	.word	0x200017d8
 8007608:	08007fe0 	.word	0x08007fe0

0800760c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	220c      	movs	r2, #12
 800761c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800761e:	4b03      	ldr	r3, [pc, #12]	; (800762c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20000164 	.word	0x20000164

08007630 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <Get_SerialNum+0x44>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800763c:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <Get_SerialNum+0x48>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <Get_SerialNum+0x4c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4413      	add	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007656:	2208      	movs	r2, #8
 8007658:	4909      	ldr	r1, [pc, #36]	; (8007680 <Get_SerialNum+0x50>)
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 f814 	bl	8007688 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007660:	2204      	movs	r2, #4
 8007662:	4908      	ldr	r1, [pc, #32]	; (8007684 <Get_SerialNum+0x54>)
 8007664:	68b8      	ldr	r0, [r7, #8]
 8007666:	f000 f80f 	bl	8007688 <IntToUnicode>
  }
}
 800766a:	bf00      	nop
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	1fff7590 	.word	0x1fff7590
 8007678:	1fff7594 	.word	0x1fff7594
 800767c:	1fff7598 	.word	0x1fff7598
 8007680:	20000176 	.word	0x20000176
 8007684:	20000186 	.word	0x20000186

08007688 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e027      	b.n	80076f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0f1b      	lsrs	r3, r3, #28
 80076a4:	2b09      	cmp	r3, #9
 80076a6:	d80b      	bhi.n	80076c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0f1b      	lsrs	r3, r3, #28
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4619      	mov	r1, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	440b      	add	r3, r1
 80076b8:	3230      	adds	r2, #48	; 0x30
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	e00a      	b.n	80076d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	4619      	mov	r1, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	440b      	add	r3, r1
 80076d0:	3237      	adds	r2, #55	; 0x37
 80076d2:	b2d2      	uxtb	r2, r2
 80076d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	3301      	adds	r3, #1
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	4413      	add	r3, r2
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	3301      	adds	r3, #1
 80076ee:	75fb      	strb	r3, [r7, #23]
 80076f0:	7dfa      	ldrb	r2, [r7, #23]
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d3d3      	bcc.n	80076a0 <IntToUnicode+0x18>
  }
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007710:	f107 0314 	add.w	r3, r7, #20
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007728:	d14e      	bne.n	80077c8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800772a:	4b29      	ldr	r3, [pc, #164]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	4a28      	ldr	r2, [pc, #160]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007736:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007748:	2302      	movs	r3, #2
 800774a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007750:	2303      	movs	r3, #3
 8007752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007754:	230a      	movs	r3, #10
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	4619      	mov	r1, r3
 800775e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007762:	f7f9 fb9f 	bl	8000ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776a:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 800776c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007772:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d114      	bne.n	80077b4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800778a:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	4a10      	ldr	r2, [pc, #64]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007794:	6593      	str	r3, [r2, #88]	; 0x58
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 8007798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80077a2:	f7fa ff85 	bl	80026b0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <HAL_PCD_MspInit+0xc8>)
 80077ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6593      	str	r3, [r2, #88]	; 0x58
 80077b2:	e001      	b.n	80077b8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80077b4:	f7fa ff7c 	bl	80026b0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	2043      	movs	r0, #67	; 0x43
 80077be:	f7f9 fb3a 	bl	8000e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077c2:	2043      	movs	r0, #67	; 0x43
 80077c4:	f7f9 fb53 	bl	8000e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077c8:	bf00      	nop
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	40021000 	.word	0x40021000

080077d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7fe fca8 	bl	8006140 <USBD_LL_SetupStage>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800780a:	78fa      	ldrb	r2, [r7, #3]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	1a9b      	subs	r3, r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	4619      	mov	r1, r3
 8007822:	f7fe fce2 	bl	80061ea <USBD_LL_DataOutStage>
}
 8007826:	bf00      	nop
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	4613      	mov	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	440b      	add	r3, r1
 800784e:	3348      	adds	r3, #72	; 0x48
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	4619      	mov	r1, r3
 8007856:	f7fe fd2b 	bl	80062b0 <USBD_LL_DataInStage>
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007870:	4618      	mov	r0, r3
 8007872:	f7fe fe3f 	bl	80064f4 <USBD_LL_SOF>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007886:	2301      	movs	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d001      	beq.n	8007896 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007892:	f7f8 ffd9 	bl	8000848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800789c:	7bfa      	ldrb	r2, [r7, #15]
 800789e:	4611      	mov	r1, r2
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fe fde9 	bl	8006478 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fe fd95 	bl	80063dc <USBD_LL_Reset>
}
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fdd8 	bl	8006498 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078f0:	4b04      	ldr	r3, [pc, #16]	; (8007904 <HAL_PCD_SuspendCallback+0x48>)
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	4a03      	ldr	r2, [pc, #12]	; (8007904 <HAL_PCD_SuspendCallback+0x48>)
 80078f6:	f043 0306 	orr.w	r3, r3, #6
 80078fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed00 	.word	0xe000ed00

08007908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6812      	ldr	r2, [r2, #0]
 800791e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007922:	f023 0301 	bic.w	r3, r3, #1
 8007926:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1b      	ldr	r3, [r3, #32]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <HAL_PCD_ResumeCallback+0x4c>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	4a07      	ldr	r2, [pc, #28]	; (8007954 <HAL_PCD_ResumeCallback+0x4c>)
 8007936:	f023 0306 	bic.w	r3, r3, #6
 800793a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800793c:	f000 faf6 	bl	8007f2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fdbc 	bl	80064c4 <USBD_LL_Resume>
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fe08 	bl	8006584 <USBD_LL_IsoOUTIncomplete>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe fdd0 	bl	8006538 <USBD_LL_IsoINIncomplete>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fe0e 	bl	80065d0 <USBD_LL_DevConnected>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe fe0b 	bl	80065e6 <USBD_LL_DevDisconnected>
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d13c      	bne.n	8007a62 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079e8:	4a20      	ldr	r2, [pc, #128]	; (8007a6c <USBD_LL_Init+0x94>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <USBD_LL_Init+0x94>)
 80079f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <USBD_LL_Init+0x94>)
 80079fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a02:	2206      	movs	r2, #6
 8007a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a08:	2202      	movs	r2, #2
 8007a0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a0c:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a0e:	2202      	movs	r2, #2
 8007a10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a12:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007a24:	4b11      	ldr	r3, [pc, #68]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a38:	f7f9 fd36 	bl	80014a8 <HAL_PCD_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a42:	f7f8 ff01 	bl	8000848 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a4a:	f7fa fd98 	bl	800257e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a4e:	2240      	movs	r2, #64	; 0x40
 8007a50:	2100      	movs	r1, #0
 8007a52:	4806      	ldr	r0, [pc, #24]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a54:	f7fa fd4c 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a58:	2280      	movs	r2, #128	; 0x80
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <USBD_LL_Init+0x94>)
 8007a5e:	f7fa fd47 	bl	80024f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	200019d8 	.word	0x200019d8

08007a70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f9 fe32 	bl	80016f0 <HAL_PCD_Start>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d816      	bhi.n	8007ac4 <USBD_LL_Start+0x54>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <USBD_LL_Start+0x2c>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007ab3 	.word	0x08007ab3
 8007aa4:	08007ab9 	.word	0x08007ab9
 8007aa8:	08007abf 	.word	0x08007abf
    case HAL_OK :
      usb_status = USBD_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab0:	e00b      	b.n	8007aca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab6:	e008      	b.n	8007aca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
    break;
 8007abc:	e005      	b.n	8007aca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac2:	e002      	b.n	8007aca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac8:	bf00      	nop
  }
  return usb_status;
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	4608      	mov	r0, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	70fb      	strb	r3, [r7, #3]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70bb      	strb	r3, [r7, #2]
 8007aea:	4613      	mov	r3, r2
 8007aec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007afc:	78bb      	ldrb	r3, [r7, #2]
 8007afe:	883a      	ldrh	r2, [r7, #0]
 8007b00:	78f9      	ldrb	r1, [r7, #3]
 8007b02:	f7fa f9ed 	bl	8001ee0 <HAL_PCD_EP_Open>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b03      	cmp	r3, #3
 8007b0e:	d817      	bhi.n	8007b40 <USBD_LL_OpenEP+0x6c>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <USBD_LL_OpenEP+0x44>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b29 	.word	0x08007b29
 8007b1c:	08007b2f 	.word	0x08007b2f
 8007b20:	08007b35 	.word	0x08007b35
 8007b24:	08007b3b 	.word	0x08007b3b
    case HAL_OK :
      usb_status = USBD_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2c:	e00b      	b.n	8007b46 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	73fb      	strb	r3, [r7, #15]
    break;
 8007b32:	e008      	b.n	8007b46 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
    break;
 8007b38:	e005      	b.n	8007b46 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3e:	e002      	b.n	8007b46 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007b40:	2303      	movs	r3, #3
 8007b42:	73fb      	strb	r3, [r7, #15]
    break;
 8007b44:	bf00      	nop
  }
  return usb_status;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fa fa1e 	bl	8001fb0 <HAL_PCD_EP_Close>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	d816      	bhi.n	8007bac <USBD_LL_CloseEP+0x5c>
 8007b7e:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <USBD_LL_CloseEP+0x34>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007b9b 	.word	0x08007b9b
 8007b8c:	08007ba1 	.word	0x08007ba1
 8007b90:	08007ba7 	.word	0x08007ba7
    case HAL_OK :
      usb_status = USBD_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
    break;
 8007b98:	e00b      	b.n	8007bb2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b9e:	e008      	b.n	8007bb2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ba4:	e005      	b.n	8007bb2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8007baa:	e002      	b.n	8007bb2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb0:	bf00      	nop
  }
  return usb_status;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bd6:	78fa      	ldrb	r2, [r7, #3]
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fa fac5 	bl	800216a <HAL_PCD_EP_SetStall>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d816      	bhi.n	8007c18 <USBD_LL_StallEP+0x5c>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <USBD_LL_StallEP+0x34>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c07 	.word	0x08007c07
 8007bf8:	08007c0d 	.word	0x08007c0d
 8007bfc:	08007c13 	.word	0x08007c13
    case HAL_OK :
      usb_status = USBD_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
    break;
 8007c04:	e00b      	b.n	8007c1e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	73fb      	strb	r3, [r7, #15]
    break;
 8007c0a:	e008      	b.n	8007c1e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c10:	e005      	b.n	8007c1e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c12:	2303      	movs	r3, #3
 8007c14:	73fb      	strb	r3, [r7, #15]
    break;
 8007c16:	e002      	b.n	8007c1e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	bf00      	nop
  }
  return usb_status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fa faf1 	bl	800222e <HAL_PCD_EP_ClrStall>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d816      	bhi.n	8007c84 <USBD_LL_ClearStallEP+0x5c>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USBD_LL_ClearStallEP+0x34>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c73 	.word	0x08007c73
 8007c64:	08007c79 	.word	0x08007c79
 8007c68:	08007c7f 	.word	0x08007c7f
    case HAL_OK :
      usb_status = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c70:	e00b      	b.n	8007c8a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
    break;
 8007c76:	e008      	b.n	8007c8a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c7c:	e005      	b.n	8007c8a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	73fb      	strb	r3, [r7, #15]
    break;
 8007c82:	e002      	b.n	8007c8a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	73fb      	strb	r3, [r7, #15]
    break;
 8007c88:	bf00      	nop
  }
  return usb_status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ca6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da0b      	bge.n	8007cc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	333e      	adds	r3, #62	; 0x3e
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	e00b      	b.n	8007ce0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fa f8c3 	bl	8001e96 <HAL_PCD_SetAddress>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d816      	bhi.n	8007d48 <USBD_LL_SetUSBAddress+0x5c>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <USBD_LL_SetUSBAddress+0x34>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d31 	.word	0x08007d31
 8007d24:	08007d37 	.word	0x08007d37
 8007d28:	08007d3d 	.word	0x08007d3d
 8007d2c:	08007d43 	.word	0x08007d43
    case HAL_OK :
      usb_status = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
    break;
 8007d34:	e00b      	b.n	8007d4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d36:	2303      	movs	r3, #3
 8007d38:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3a:	e008      	b.n	8007d4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d40:	e005      	b.n	8007d4e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d42:	2303      	movs	r3, #3
 8007d44:	73fb      	strb	r3, [r7, #15]
    break;
 8007d46:	e002      	b.n	8007d4e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4c:	bf00      	nop
  }
  return usb_status;
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	607a      	str	r2, [r7, #4]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	460b      	mov	r3, r1
 8007d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d76:	7af9      	ldrb	r1, [r7, #11]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f7fa f9b8 	bl	80020f0 <HAL_PCD_EP_Transmit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d84:	7dbb      	ldrb	r3, [r7, #22]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d816      	bhi.n	8007db8 <USBD_LL_Transmit+0x60>
 8007d8a:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <USBD_LL_Transmit+0x38>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007da1 	.word	0x08007da1
 8007d94:	08007da7 	.word	0x08007da7
 8007d98:	08007dad 	.word	0x08007dad
 8007d9c:	08007db3 	.word	0x08007db3
    case HAL_OK :
      usb_status = USBD_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	75fb      	strb	r3, [r7, #23]
    break;
 8007da4:	e00b      	b.n	8007dbe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	75fb      	strb	r3, [r7, #23]
    break;
 8007daa:	e008      	b.n	8007dbe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dac:	2301      	movs	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]
    break;
 8007db0:	e005      	b.n	8007dbe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007db2:	2303      	movs	r3, #3
 8007db4:	75fb      	strb	r3, [r7, #23]
    break;
 8007db6:	e002      	b.n	8007dbe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	75fb      	strb	r3, [r7, #23]
    break;
 8007dbc:	bf00      	nop
  }
  return usb_status;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007de6:	7af9      	ldrb	r1, [r7, #11]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	f7fa f92a 	bl	8002044 <HAL_PCD_EP_Receive>
 8007df0:	4603      	mov	r3, r0
 8007df2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007df4:	7dbb      	ldrb	r3, [r7, #22]
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d816      	bhi.n	8007e28 <USBD_LL_PrepareReceive+0x60>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <USBD_LL_PrepareReceive+0x38>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e11 	.word	0x08007e11
 8007e04:	08007e17 	.word	0x08007e17
 8007e08:	08007e1d 	.word	0x08007e1d
 8007e0c:	08007e23 	.word	0x08007e23
    case HAL_OK :
      usb_status = USBD_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
    break;
 8007e14:	e00b      	b.n	8007e2e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e16:	2303      	movs	r3, #3
 8007e18:	75fb      	strb	r3, [r7, #23]
    break;
 8007e1a:	e008      	b.n	8007e2e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
    break;
 8007e20:	e005      	b.n	8007e2e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	75fb      	strb	r3, [r7, #23]
    break;
 8007e26:	e002      	b.n	8007e2e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	75fb      	strb	r3, [r7, #23]
    break;
 8007e2c:	bf00      	nop
  }
  return usb_status;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e4a:	78fa      	ldrb	r2, [r7, #3]
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fa f936 	bl	80020c0 <HAL_PCD_EP_GetRxCount>
 8007e54:	4603      	mov	r3, r0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <HAL_PCDEx_LPM_Callback+0x18>
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d01f      	beq.n	8007eb6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007e76:	e03b      	b.n	8007ef0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d007      	beq.n	8007e90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007e80:	f000 f854 	bl	8007f2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e84:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	4a1b      	ldr	r2, [pc, #108]	; (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007e8a:	f023 0306 	bic.w	r3, r3, #6
 8007e8e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fb08 	bl	80064c4 <USBD_LL_Resume>
    break;
 8007eb4:	e01c      	b.n	8007ef0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fadf 	bl	8006498 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ee8:	f043 0306 	orr.w	r3, r3, #6
 8007eec:	6113      	str	r3, [r2, #16]
    break;
 8007eee:	bf00      	nop
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed00 	.word	0xe000ed00

08007efc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f04:	4b03      	ldr	r3, [pc, #12]	; (8007f14 <USBD_static_malloc+0x18>)
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	200001b0 	.word	0x200001b0

08007f18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007f30:	f7f8 fae2 	bl	80004f8 <SystemClock_Config>
}
 8007f34:	bf00      	nop
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <__libc_init_array>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	4d0d      	ldr	r5, [pc, #52]	; (8007f70 <__libc_init_array+0x38>)
 8007f3c:	4c0d      	ldr	r4, [pc, #52]	; (8007f74 <__libc_init_array+0x3c>)
 8007f3e:	1b64      	subs	r4, r4, r5
 8007f40:	10a4      	asrs	r4, r4, #2
 8007f42:	2600      	movs	r6, #0
 8007f44:	42a6      	cmp	r6, r4
 8007f46:	d109      	bne.n	8007f5c <__libc_init_array+0x24>
 8007f48:	4d0b      	ldr	r5, [pc, #44]	; (8007f78 <__libc_init_array+0x40>)
 8007f4a:	4c0c      	ldr	r4, [pc, #48]	; (8007f7c <__libc_init_array+0x44>)
 8007f4c:	f000 f820 	bl	8007f90 <_init>
 8007f50:	1b64      	subs	r4, r4, r5
 8007f52:	10a4      	asrs	r4, r4, #2
 8007f54:	2600      	movs	r6, #0
 8007f56:	42a6      	cmp	r6, r4
 8007f58:	d105      	bne.n	8007f66 <__libc_init_array+0x2e>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f60:	4798      	blx	r3
 8007f62:	3601      	adds	r6, #1
 8007f64:	e7ee      	b.n	8007f44 <__libc_init_array+0xc>
 8007f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f6a:	4798      	blx	r3
 8007f6c:	3601      	adds	r6, #1
 8007f6e:	e7f2      	b.n	8007f56 <__libc_init_array+0x1e>
 8007f70:	08008040 	.word	0x08008040
 8007f74:	08008040 	.word	0x08008040
 8007f78:	08008040 	.word	0x08008040
 8007f7c:	08008044 	.word	0x08008044

08007f80 <memset>:
 8007f80:	4402      	add	r2, r0
 8007f82:	4603      	mov	r3, r0
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d100      	bne.n	8007f8a <memset+0xa>
 8007f88:	4770      	bx	lr
 8007f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f8e:	e7f9      	b.n	8007f84 <memset+0x4>

08007f90 <_init>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr

08007f9c <_fini>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr
