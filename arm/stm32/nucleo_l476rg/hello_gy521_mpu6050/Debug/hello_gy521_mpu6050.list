
hello_gy521_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a908  0800a908  0001a908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf4  0800adf4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adfc  0800adfc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0001ae00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a70  200001e0  0800afe4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  0800afe4  00021c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002196a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d70  00000000  00000000  00041b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  000458f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00047310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005544  00000000  00000000  00048bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b769  00000000  00000000  0004e10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015b3  00000000  00000000  00069875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ae28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008030  00000000  00000000  0016ae7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8ec 	.word	0x0800a8ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a8ec 	.word	0x0800a8ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MPU6050_I2C_vConfig>:
} MPU6050Handle_t;



HAL_StatusTypeDef MPU6050_I2C_vConfig(MPU6050Handle_t *pxMPU6050, MPU6050ConfigHandle_t *pxMPU6050Config)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	uint8_t pwrmgmt1Data = 0x80;
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_PWR_MGMT_1, 1, &pwrmgmt1Data, 1, MPU6050_DEFAULT_TIMEOUT);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	2332      	movs	r3, #50	; 0x32
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 030e 	add.w	r3, r7, #14
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	226b      	movs	r2, #107	; 0x6b
 8000f64:	21d0      	movs	r1, #208	; 0xd0
 8000f66:	f001 f8cb 	bl	8002100 <HAL_I2C_Mem_Write>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fd86 	bl	8001a80 <HAL_Delay>




	uint8_t ucBuffer;
	ucBuffer = pxMPU6050Config->ucClockSource & 0x07;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	737b      	strb	r3, [r7, #13]
	ucBuffer |= (pxMPU6050Config->ucSleepMode << 6) & 0x40;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	791b      	ldrb	r3, [r3, #4]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	7b7b      	ldrb	r3, [r7, #13]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	737b      	strb	r3, [r7, #13]
	xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_PWR_MGMT_1, 1, &ucBuffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	2332      	movs	r3, #50	; 0x32
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	f107 030d 	add.w	r3, r7, #13
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	226b      	movs	r2, #107	; 0x6b
 8000fb0:	21d0      	movs	r1, #208	; 0xd0
 8000fb2:	f001 f8a5 	bl	8002100 <HAL_I2C_Mem_Write>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8000fba:	2064      	movs	r0, #100	; 0x64
 8000fbc:	f000 fd60 	bl	8001a80 <HAL_Delay>


	ucBuffer = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	737b      	strb	r3, [r7, #13]
	ucBuffer = pxMPU6050Config->ucConfigDLPF & 0x07;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	78db      	ldrb	r3, [r3, #3]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	737b      	strb	r3, [r7, #13]
	xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_CONFIG, 1, &ucBuffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	f107 030d 	add.w	r3, r7, #13
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	221a      	movs	r2, #26
 8000fe6:	21d0      	movs	r1, #208	; 0xd0
 8000fe8:	f001 f88a 	bl	8002100 <HAL_I2C_Mem_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]


	ucBuffer = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	737b      	strb	r3, [r7, #13]
	ucBuffer = pxMPU6050Config->ucGyroFullScale & 0x18;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	785b      	ldrb	r3, [r3, #1]
 8000ff8:	f003 0318 	and.w	r3, r3, #24
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
	xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_GYRO_CONFIG, 1, &ucBuffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	2332      	movs	r3, #50	; 0x32
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	f107 030d 	add.w	r3, r7, #13
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	221b      	movs	r2, #27
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	f001 f872 	bl	8002100 <HAL_I2C_Mem_Write>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]


	ucBuffer = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	737b      	strb	r3, [r7, #13]
	ucBuffer = pxMPU6050Config->ucAcellFullScale & 0x18;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	f003 0318 	and.w	r3, r3, #24
 800102c:	b2db      	uxtb	r3, r3
 800102e:	737b      	strb	r3, [r7, #13]
	xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_ACCEL_CONFIG, 1, &ucBuffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	2332      	movs	r3, #50	; 0x32
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	2301      	movs	r3, #1
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	f107 030d 	add.w	r3, r7, #13
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	221c      	movs	r2, #28
 8001046:	21d0      	movs	r1, #208	; 0xd0
 8001048:	f001 f85a 	bl	8002100 <HAL_I2C_Mem_Write>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]


	ucBuffer = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	737b      	strb	r3, [r7, #13]
	ucBuffer = 0x04;
 8001054:	2304      	movs	r3, #4
 8001056:	737b      	strb	r3, [r7, #13]
	xStatus = HAL_I2C_Mem_Write(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_SMPRT_DIV, 1, &ucBuffer, 1, MPU6050_DEFAULT_TIMEOUT);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	2332      	movs	r3, #50	; 0x32
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 030d 	add.w	r3, r7, #13
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2219      	movs	r2, #25
 800106e:	21d0      	movs	r1, #208	; 0xd0
 8001070:	f001 f846 	bl	8002100 <HAL_I2C_Mem_Write>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
}
 8001078:	bf00      	nop
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <MPU6050_I2C_vInit>:


HAL_StatusTypeDef MPU6050_I2C_vInit(MPU6050Handle_t *pxMPU6050,
		I2C_HandleTypeDef *pxI2C,
		MPU6050ConfigHandle_t *pxMPU6050Config)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
	pxMPU6050->pxI2C = pxI2C;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	601a      	str	r2, [r3, #0]

	if (pxMPU6050->pxI2C == NULL)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d101      	bne.n	80010a0 <MPU6050_I2C_vInit+0x1e>
	{
		return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e004      	b.n	80010aa <MPU6050_I2C_vInit+0x28>
	}

	MPU6050_I2C_vConfig(pxMPU6050, pxMPU6050Config);
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f7ff ff4c 	bl	8000f40 <MPU6050_I2C_vConfig>

	return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	0000      	movs	r0, r0
 80010b4:	0000      	movs	r0, r0
	...

080010b8 <MPU6050_I2C_Debug_vReadAccelerometer>:




void MPU6050_I2C_Debug_vReadAccelerometer(MPU6050Handle_t *pxMPU6050)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b092      	sub	sp, #72	; 0x48
 80010bc:	af04      	add	r7, sp, #16
 80010be:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	HAL_StatusTypeDef xStatus = HAL_I2C_Mem_Read(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_INT_STATUS, 1, &i2cBuf[1], 1, MPU6050_DEFAULT_TIMEOUT);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	2332      	movs	r3, #50	; 0x32
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	3301      	adds	r3, #1
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	223a      	movs	r2, #58	; 0x3a
 80010d8:	21d0      	movs	r1, #208	; 0xd0
 80010da:	f001 f925 	bl	8002328 <HAL_I2C_Mem_Read>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (i2cBuf[1] && 0x01)
 80010e4:	7f7b      	ldrb	r3, [r7, #29]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 809a 	beq.w	8001220 <MPU6050_I2C_Debug_vReadAccelerometer+0x168>
	{
		xStatus = HAL_I2C_Mem_Read(pxMPU6050->pxI2C, (uint16_t)(MPU6050_SLAVE_ADDRESS << 1), (uint16_t)MPU6050_REGISTER_ACELL_XOUT, 1, AcceArr, 6, MPU6050_DEFAULT_TIMEOUT);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	2332      	movs	r3, #50	; 0x32
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2306      	movs	r3, #6
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	223b      	movs	r2, #59	; 0x3b
 8001102:	21d0      	movs	r1, #208	; 0xd0
 8001104:	f001 f910 	bl	8002328 <HAL_I2C_Mem_Read>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		int16_t aX = (AcceArr[0] << 8) + AcceArr[1];
 800110e:	7d3b      	ldrb	r3, [r7, #20]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	7d7b      	ldrb	r3, [r7, #21]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	863b      	strh	r3, [r7, #48]	; 0x30
		int16_t aY = (AcceArr[2] << 8) + AcceArr[3];
 8001120:	7dbb      	ldrb	r3, [r7, #22]
 8001122:	b29b      	uxth	r3, r3
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b29a      	uxth	r2, r3
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	85fb      	strh	r3, [r7, #46]	; 0x2e
		int16_t aZ = (AcceArr[4] << 8) + AcceArr[5];
 8001132:	7e3b      	ldrb	r3, [r7, #24]
 8001134:	b29b      	uxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b29a      	uxth	r2, r3
 800113a:	7e7b      	ldrb	r3, [r7, #25]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	85bb      	strh	r3, [r7, #44]	; 0x2c
		//printf("fAccelerometer X: %.8f\r\n", (float)aX * fScale);
		//printf("fAccelerometer Y: %.8f\r\n", (float)aY * fScale);
		//printf("fAccelerometer Z: %.8f\r\n", (float)aZ * fScale);


		float fAX = ((float)aX/32768.0f) * 90.0f;
 8001144:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001150:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001230 <MPU6050_I2C_Debug_vReadAccelerometer+0x178>
 8001154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001158:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001234 <MPU6050_I2C_Debug_vReadAccelerometer+0x17c>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float fAY = ((float)aY/32768.0f) * 90.0f;
 8001164:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001230 <MPU6050_I2C_Debug_vReadAccelerometer+0x178>
 8001174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001178:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001234 <MPU6050_I2C_Debug_vReadAccelerometer+0x17c>
 800117c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001180:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float fAZ = ((float)aZ/32768.0f) * 90.0f;
 8001184:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001230 <MPU6050_I2C_Debug_vReadAccelerometer+0x178>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001234 <MPU6050_I2C_Debug_vReadAccelerometer+0x17c>
 800119c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a0:	edc7 7a08 	vstr	s15, [r7, #32]


		float fPitch = atan2f(-fAY, fAZ);// - M_PI;
 80011a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011a8:	eef1 7a67 	vneg.f32	s15, s15
 80011ac:	edd7 0a08 	vldr	s1, [r7, #32]
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f009 fa1c 	bl	800a5f0 <atan2f>
 80011b8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

		fPitch = fPitch * 180.0 / M_PI;
 80011bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MPU6050_I2C_Debug_vReadAccelerometer+0x180>)
 80011c8:	f7ff fa16 	bl	80005f8 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	a314      	add	r3, pc, #80	; (adr r3, 8001228 <MPU6050_I2C_Debug_vReadAccelerometer+0x170>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcdf 	bl	8000ba8 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
		if (fPitch < -180.0f) fPitch += 360.0f;
 80011ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80011f2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800123c <MPU6050_I2C_Debug_vReadAccelerometer+0x184>
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d507      	bpl.n	8001210 <MPU6050_I2C_Debug_vReadAccelerometer+0x158>
 8001200:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001204:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001240 <MPU6050_I2C_Debug_vReadAccelerometer+0x188>
 8001208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800120c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		printf("fPitch Z: %.8f\r\n", fPitch);
 8001210:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001212:	f7ff f999 	bl	8000548 <__aeabi_f2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <MPU6050_I2C_Debug_vReadAccelerometer+0x18c>)
 800121c:	f007 f978 	bl	8008510 <iprintf>

	}
}
 8001220:	bf00      	nop
 8001222:	3738      	adds	r7, #56	; 0x38
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	54442d18 	.word	0x54442d18
 800122c:	400921fb 	.word	0x400921fb
 8001230:	47000000 	.word	0x47000000
 8001234:	42b40000 	.word	0x42b40000
 8001238:	40668000 	.word	0x40668000
 800123c:	c3340000 	.word	0xc3340000
 8001240:	43b40000 	.word	0x43b40000
 8001244:	0800a930 	.word	0x0800a930

08001248 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, pdMS_TO_TICKS(1000));
 8001250:	1d39      	adds	r1, r7, #4
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	2201      	movs	r2, #1
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <__io_putchar+0x20>)
 800125a:	f003 fa91 	bl	8004780 <HAL_UART_Transmit>
	return ch;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20001b2c 	.word	0x20001b2c

0800126c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001270:	f000 fbc6 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001274:	f000 f834 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001278:	f000 f91a 	bl	80014b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800127c:	f000 f8e8 	bl	8001450 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001280:	f000 f8a6 	bl	80013d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  mpu6050Config.ucClockSource = 0x00;
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <main+0x5c>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
  mpu6050Config.ucGyroFullScale = 0x01;
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <main+0x5c>)
 800128c:	2201      	movs	r2, #1
 800128e:	705a      	strb	r2, [r3, #1]
  mpu6050Config.ucAcellFullScale = 0x03;//0x01;
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <main+0x5c>)
 8001292:	2203      	movs	r2, #3
 8001294:	709a      	strb	r2, [r3, #2]
  mpu6050Config.ucConfigDLPF= 0x06;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <main+0x5c>)
 8001298:	2206      	movs	r2, #6
 800129a:	70da      	strb	r2, [r3, #3]
  mpu6050Config.ucSleepMode = 0x00;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <main+0x5c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	711a      	strb	r2, [r3, #4]


  MPU6050_I2C_vInit(&mpu6050, &hi2c1, &mpu6050Config);
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <main+0x5c>)
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <main+0x60>)
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <main+0x64>)
 80012a8:	f7ff feeb 	bl	8001082 <MPU6050_I2C_vInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012ac:	f003 ff32 	bl	8005114 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <main+0x68>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <main+0x6c>)
 80012b6:	f003 ff77 	bl	80051a8 <osThreadNew>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <main+0x70>)
 80012be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012c0:	f003 ff4c 	bl	800515c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <main+0x58>
 80012c6:	bf00      	nop
 80012c8:	20001b24 	.word	0x20001b24
 80012cc:	20001ad8 	.word	0x20001ad8
 80012d0:	20001ad4 	.word	0x20001ad4
 80012d4:	0800a970 	.word	0x0800a970
 80012d8:	08001529 	.word	0x08001529
 80012dc:	20001ad0 	.word	0x20001ad0

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b8      	sub	sp, #224	; 0xe0
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ea:	2244      	movs	r2, #68	; 0x44
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fc9c 	bl	8007c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2288      	movs	r2, #136	; 0x88
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 fc8e 	bl	8007c2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131e:	2310      	movs	r3, #16
 8001320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fc1a 	bl	8002b8c <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135e:	f000 f903 	bl	8001568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2303      	movs	r3, #3
 800136a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001380:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001384:	2104      	movs	r1, #4
 8001386:	4618      	mov	r0, r3
 8001388:	f001 ffe6 	bl	8003358 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001392:	f000 f8e9 	bl	8001568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001396:	2342      	movs	r3, #66	; 0x42
 8001398:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800139a:	2300      	movs	r3, #0
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800139e:	2300      	movs	r3, #0
 80013a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fa0f 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013b0:	f000 f8da 	bl	8001568 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b8:	f001 fb92 	bl	8002ae0 <HAL_PWREx_ControlVoltageScaling>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80013c2:	f000 f8d1 	bl	8001568 <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	37e0      	adds	r7, #224	; 0xe0
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_I2C1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_I2C1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_I2C1_Init+0x74>)
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <MX_I2C1_Init+0x7c>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_I2C1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_I2C1_Init+0x74>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <MX_I2C1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_I2C1_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_I2C1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_I2C1_Init+0x74>)
 800140c:	f000 fde8 	bl	8001fe0 <HAL_I2C_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001416:	f000 f8a7 	bl	8001568 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800141a:	2100      	movs	r1, #0
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <MX_I2C1_Init+0x74>)
 800141e:	f001 fab9 	bl	8002994 <HAL_I2CEx_ConfigAnalogFilter>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001428:	f000 f89e 	bl	8001568 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800142c:	2100      	movs	r1, #0
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_I2C1_Init+0x74>)
 8001430:	f001 fafb 	bl	8002a2a <HAL_I2CEx_ConfigDigitalFilter>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f000 f895 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20001ad8 	.word	0x20001ad8
 8001448:	40005400 	.word	0x40005400
 800144c:	10909cec 	.word	0x10909cec

08001450 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_USART2_UART_Init+0x5c>)
 8001458:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART2_UART_Init+0x58>)
 8001494:	f003 f926 	bl	80046e4 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149e:	f000 f863 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20001b2c 	.word	0x20001b2c
 80014ac:	40004400 	.word	0x40004400

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_GPIO_Init+0x74>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <MX_GPIO_Init+0x74>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_GPIO_Init+0x74>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_GPIO_Init+0x74>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <MX_GPIO_Init+0x74>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_GPIO_Init+0x74>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_GPIO_Init+0x74>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <MX_GPIO_Init+0x74>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_GPIO_Init+0x74>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_GPIO_Init+0x74>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <MX_GPIO_Init+0x74>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_GPIO_Init+0x74>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
  	//printf("Hello, world!\r\n");

  	osDelay(100);
 8001530:	2064      	movs	r0, #100	; 0x64
 8001532:	f003 fecb 	bl	80052cc <osDelay>
  	//MPU6050_I2C_Debug_vReadWhoAmI(&mpu6050);
  	MPU6050_I2C_Debug_vReadAccelerometer(&mpu6050);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <StartDefaultTask+0x18>)
 8001538:	f7ff fdbe 	bl	80010b8 <MPU6050_I2C_Debug_vReadAccelerometer>
  	osDelay(100);
 800153c:	e7f8      	b.n	8001530 <StartDefaultTask+0x8>
 800153e:	bf00      	nop
 8001540:	20001ad4 	.word	0x20001ad4

08001544 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001556:	f000 fa73 	bl	8001a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40001000 	.word	0x40001000

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_MspInit+0x4c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_MspInit+0x4c>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_MspInit+0x4c>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_MspInit+0x4c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	6593      	str	r3, [r2, #88]	; 0x58
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	210f      	movs	r1, #15
 80015ae:	f06f 0001 	mvn.w	r0, #1
 80015b2:	f000 fb41 	bl	8001c38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x7c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d128      	bne.n	8001638 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_I2C_MspInit+0x80>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_I2C_MspInit+0x80>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_I2C_MspInit+0x80>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001604:	2312      	movs	r3, #18
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	480b      	ldr	r0, [pc, #44]	; (8001648 <HAL_I2C_MspInit+0x84>)
 800161c:	f000 fb36 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_I2C_MspInit+0x80>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_I2C_MspInit+0x80>)
 8001626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162a:	6593      	str	r3, [r2, #88]	; 0x58
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_I2C_MspInit+0x80>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40005400 	.word	0x40005400
 8001644:	40021000 	.word	0x40021000
 8001648:	48000400 	.word	0x48000400

0800164c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_UART_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d128      	bne.n	80016c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_UART_MspInit+0x80>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_UART_MspInit+0x80>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6593      	str	r3, [r2, #88]	; 0x58
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_UART_MspInit+0x80>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_UART_MspInit+0x80>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_UART_MspInit+0x80>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_UART_MspInit+0x80>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800169e:	230c      	movs	r3, #12
 80016a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ae:	2307      	movs	r3, #7
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f000 fae6 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40004400 	.word	0x40004400
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2036      	movs	r0, #54	; 0x36
 80016e6:	f000 faa7 	bl	8001c38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ea:	2036      	movs	r0, #54	; 0x36
 80016ec:	f000 fac0 	bl	8001c70 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_InitTick+0x9c>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	4a1d      	ldr	r2, [pc, #116]	; (800176c <HAL_InitTick+0x9c>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6593      	str	r3, [r2, #88]	; 0x58
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_InitTick+0x9c>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 0210 	add.w	r2, r7, #16
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f001 ffc6 	bl	80036a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001718:	f001 ff98 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 800171c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_InitTick+0xa0>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_InitTick+0xa4>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_InitTick+0xa8>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_InitTick+0xa4>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_InitTick+0xa4>)
 800173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_InitTick+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_InitTick+0xa4>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <HAL_InitTick+0xa4>)
 800174e:	f002 fcf7 	bl	8004140 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <HAL_InitTick+0xa4>)
 800175a:	f002 fd53 	bl	8004204 <HAL_TIM_Base_Start_IT>
 800175e:	4603      	mov	r3, r0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3730      	adds	r7, #48	; 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	431bde83 	.word	0x431bde83
 8001774:	20001bb0 	.word	0x20001bb0
 8001778:	40001000 	.word	0x40001000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <TIM6_DAC_IRQHandler+0x10>)
 80017ae:	f002 fd99 	bl	80042e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20001bb0 	.word	0x20001bb0

080017bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_kill>:

int _kill(int pid, int sig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d6:	f006 f9f1 	bl	8007bbc <__errno>
 80017da:	4603      	mov	r3, r0
 80017dc:	2216      	movs	r2, #22
 80017de:	601a      	str	r2, [r3, #0]
	return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_exit>:

void _exit (int status)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe7 	bl	80017cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fe:	e7fe      	b.n	80017fe <_exit+0x12>

08001800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e00a      	b.n	8001828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001812:	f3af 8000 	nop.w
 8001816:	4601      	mov	r1, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	b2ca      	uxtb	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf0      	blt.n	8001812 <_read+0x12>
	}

return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e009      	b.n	8001860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fcf7 	bl	8001248 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf1      	blt.n	800184c <_write+0x12>
	}
	return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_close>:

int _close(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189a:	605a      	str	r2, [r3, #4]
	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_isatty>:

int _isatty(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d207      	bcs.n	800191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800190c:	f006 f956 	bl	8007bbc <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	220c      	movs	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191a:	e009      	b.n	8001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_sbrk+0x64>)
 800192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20018000 	.word	0x20018000
 800193c:	00000400 	.word	0x00000400
 8001940:	200001fc 	.word	0x200001fc
 8001944:	20001c50 	.word	0x20001c50

08001948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <SystemInit+0x5c>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001952:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <SystemInit+0x5c>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <SystemInit+0x60>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <SystemInit+0x60>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <SystemInit+0x60>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <SystemInit+0x60>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <SystemInit+0x60>)
 8001974:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001978:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800197c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <SystemInit+0x60>)
 8001980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001984:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <SystemInit+0x60>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <SystemInit+0x60>)
 800198c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SystemInit+0x60>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	40021000 	.word	0x40021000

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff ffca 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
	ldr	r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LoopForever+0x16>)
	cmp	r2, r3
 80019d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f006 f8f5 	bl	8007bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fc45 	bl	800126c <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019e8:	0800ae04 	.word	0x0800ae04
	ldr	r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019f0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80019f4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80019f8:	20001c50 	.word	0x20001c50

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>
	...

08001a00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <HAL_Init+0x3c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_Init+0x3c>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a16:	2003      	movs	r0, #3
 8001a18:	f000 f903 	bl	8001c22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fe57 	bl	80016d0 <HAL_InitTick>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	e001      	b.n	8001a32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a2e:	f7ff fda1 	bl	8001574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a32:	79fb      	ldrb	r3, [r7, #7]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40022000 	.word	0x40022000

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000008 	.word	0x20000008
 8001a64:	20001bfc 	.word	0x20001bfc

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20001bfc 	.word	0x20001bfc

08001a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff ffee 	bl	8001a68 <HAL_GetTick>
 8001a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a98:	d005      	beq.n	8001aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_Delay+0x44>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aa6:	bf00      	nop
 8001aa8:	f7ff ffde 	bl	8001a68 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d8f7      	bhi.n	8001aa8 <HAL_Delay+0x28>
  {
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000008 	.word	0x20000008

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff4c 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c4a:	f7ff ff61 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	6978      	ldr	r0, [r7, #20]
 8001c56:	f7ff ffb1 	bl	8001bbc <NVIC_EncodePriority>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff80 	bl	8001b68 <__NVIC_SetPriority>
}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff54 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e17f      	b.n	8001f9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8171 	beq.w	8001f96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d00b      	beq.n	8001cd4 <HAL_GPIO_Init+0x48>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc8:	2b11      	cmp	r3, #17
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d118      	bne.n	8001d74 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x128>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b12      	cmp	r3, #18
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	6939      	ldr	r1, [r7, #16]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80ac 	beq.w	8001f96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	4a5e      	ldr	r2, [pc, #376]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e56:	4a5a      	ldr	r2, [pc, #360]	; (8001fc0 <HAL_GPIO_Init+0x334>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e80:	d025      	beq.n	8001ece <HAL_GPIO_Init+0x242>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x338>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x23e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_GPIO_Init+0x33c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x23a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x340>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x236>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x344>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x232>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_GPIO_Init+0x348>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <HAL_GPIO_Init+0x34c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00c      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00a      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001eba:	2305      	movs	r3, #5
 8001ebc:	e008      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e006      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e004      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_GPIO_Init+0x244>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	f002 0203 	and.w	r2, r2, #3
 8001ed6:	0092      	lsls	r2, r2, #2
 8001ed8:	4093      	lsls	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee0:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <HAL_GPIO_Init+0x334>)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f12:	4a32      	ldr	r2, [pc, #200]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f3c:	4a27      	ldr	r2, [pc, #156]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f66:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f ae78 	bne.w	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	48000c00 	.word	0x48000c00
 8001fd0:	48001000 	.word	0x48001000
 8001fd4:	48001400 	.word	0x48001400
 8001fd8:	48001800 	.word	0x48001800
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e081      	b.n	80020f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fadc 	bl	80015c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002030:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002040:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	e006      	b.n	8002068 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002066:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d104      	bne.n	800207a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	ea42 0103 	orr.w	r1, r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	021a      	lsls	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69d9      	ldr	r1, [r3, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af02      	add	r7, sp, #8
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	4608      	mov	r0, r1
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	4603      	mov	r3, r0
 8002110:	817b      	strh	r3, [r7, #10]
 8002112:	460b      	mov	r3, r1
 8002114:	813b      	strh	r3, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	f040 80f9 	bne.w	800231a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <HAL_I2C_Mem_Write+0x34>
 800212e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0ed      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_I2C_Mem_Write+0x4e>
 800214a:	2302      	movs	r3, #2
 800214c:	e0e6      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002156:	f7ff fc87 	bl	8001a68 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2319      	movs	r3, #25
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fac3 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0d1      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2221      	movs	r2, #33	; 0x21
 800217c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021a0:	88f8      	ldrh	r0, [r7, #6]
 80021a2:	893a      	ldrh	r2, [r7, #8]
 80021a4:	8979      	ldrh	r1, [r7, #10]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4603      	mov	r3, r0
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f9d3 	bl	800255c <I2C_RequestMemoryWrite>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0a9      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d90e      	bls.n	80021f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	22ff      	movs	r2, #255	; 0xff
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	2300      	movs	r3, #0
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fba5 	bl	8002938 <I2C_TransferConfig>
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fb94 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 faad 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e07b      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d034      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x1c8>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d130      	bne.n	80022c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	2200      	movs	r2, #0
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fa3f 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e04d      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d90e      	bls.n	80022a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002294:	b2da      	uxtb	r2, r3
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	2300      	movs	r3, #0
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fb49 	bl	8002938 <I2C_TransferConfig>
 80022a6:	e00f      	b.n	80022c8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fb38 	bl	8002938 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d19e      	bne.n	8002210 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fa8c 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e01a      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2220      	movs	r2, #32
 80022ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_I2C_Mem_Write+0x224>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800231a:	2302      	movs	r3, #2
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	fe00e800 	.word	0xfe00e800

08002328 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b20      	cmp	r3, #32
 800234c:	f040 80fd 	bne.w	800254a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_I2C_Mem_Read+0x34>
 8002356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d105      	bne.n	8002368 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0f1      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Mem_Read+0x4e>
 8002372:	2302      	movs	r3, #2
 8002374:	e0ea      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800237e:	f7ff fb73 	bl	8001a68 <HAL_GetTick>
 8002382:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2319      	movs	r3, #25
 800238a:	2201      	movs	r2, #1
 800238c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f9af 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0d5      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2222      	movs	r2, #34	; 0x22
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023c8:	88f8      	ldrh	r0, [r7, #6]
 80023ca:	893a      	ldrh	r2, [r7, #8]
 80023cc:	8979      	ldrh	r1, [r7, #10]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4603      	mov	r3, r0
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f913 	bl	8002604 <I2C_RequestMemoryRead>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0ad      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2bff      	cmp	r3, #255	; 0xff
 80023f8:	d90e      	bls.n	8002418 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	b2da      	uxtb	r2, r3
 8002406:	8979      	ldrh	r1, [r7, #10]
 8002408:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_I2C_Mem_Read+0x22c>)
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fa91 	bl	8002938 <I2C_TransferConfig>
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	b2da      	uxtb	r2, r3
 8002428:	8979      	ldrh	r1, [r7, #10]
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_I2C_Mem_Read+0x22c>)
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa80 	bl	8002938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	2200      	movs	r2, #0
 8002440:	2104      	movs	r1, #4
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f956 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07c      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d034      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x1d0>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d130      	bne.n	80024f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f927 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e04d      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2bff      	cmp	r3, #255	; 0xff
 80024b8:	d90e      	bls.n	80024d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	22ff      	movs	r2, #255	; 0xff
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	2300      	movs	r3, #0
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fa31 	bl	8002938 <I2C_TransferConfig>
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	8979      	ldrh	r1, [r7, #10]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa20 	bl	8002938 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d19a      	bne.n	8002438 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f974 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e01a      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2220      	movs	r2, #32
 800251c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_I2C_Mem_Read+0x230>)
 800252a:	400b      	ands	r3, r1
 800252c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800254a:	2302      	movs	r3, #2
  }
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	80002400 	.word	0x80002400
 8002558:	fe00e800 	.word	0xfe00e800

0800255c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	4608      	mov	r0, r1
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4603      	mov	r3, r0
 800256c:	817b      	strh	r3, [r7, #10]
 800256e:	460b      	mov	r3, r1
 8002570:	813b      	strh	r3, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	8979      	ldrh	r1, [r7, #10]
 800257c:	4b20      	ldr	r3, [pc, #128]	; (8002600 <I2C_RequestMemoryWrite+0xa4>)
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f9d7 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f8f0 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e02c      	b.n	80025f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025a4:	893b      	ldrh	r3, [r7, #8]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
 80025ae:	e015      	b.n	80025dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025b0:	893b      	ldrh	r3, [r7, #8]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	69b9      	ldr	r1, [r7, #24]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f8d6 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e012      	b.n	80025f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025d2:	893b      	ldrh	r3, [r7, #8]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	2200      	movs	r2, #0
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f884 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	80002000 	.word	0x80002000

08002604 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	4608      	mov	r0, r1
 800260e:	4611      	mov	r1, r2
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	817b      	strh	r3, [r7, #10]
 8002616:	460b      	mov	r3, r1
 8002618:	813b      	strh	r3, [r7, #8]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	8979      	ldrh	r1, [r7, #10]
 8002624:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <I2C_RequestMemoryRead+0xa4>)
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	2300      	movs	r3, #0
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f984 	bl	8002938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f89d 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02c      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800264a:	893b      	ldrh	r3, [r7, #8]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
 8002654:	e015      	b.n	8002682 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002656:	893b      	ldrh	r3, [r7, #8]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b29b      	uxth	r3, r3
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	69b9      	ldr	r1, [r7, #24]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f883 	bl	8002774 <I2C_WaitOnTXISFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e012      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002678:	893b      	ldrh	r3, [r7, #8]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2200      	movs	r2, #0
 800268a:	2140      	movs	r1, #64	; 0x40
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f831 	bl	80026f4 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	80002000 	.word	0x80002000

080026ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d103      	bne.n	80026ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d007      	beq.n	80026e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	619a      	str	r2, [r3, #24]
  }
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002704:	e022      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d01e      	beq.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7ff f9ab 	bl	8001a68 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d113      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e00f      	b.n	800276c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	4013      	ands	r3, r2
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	bf0c      	ite	eq
 800275c:	2301      	moveq	r3, #1
 800275e:	2300      	movne	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	429a      	cmp	r2, r3
 8002768:	d0cd      	beq.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002780:	e02c      	b.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f870 	bl	800286c <I2C_IsAcknowledgeFailed>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e02a      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279c:	d01e      	beq.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279e:	f7ff f963 	bl	8001a68 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d302      	bcc.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d1cb      	bne.n	8002782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e028      	b.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f830 	bl	800286c <I2C_IsAcknowledgeFailed>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e026      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7ff f927 	bl	8001a68 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d113      	bne.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d1cf      	bne.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b10      	cmp	r3, #16
 8002884:	d151      	bne.n	800292a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002886:	e022      	b.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800288e:	d01e      	beq.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002890:	f7ff f8ea 	bl	8001a68 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d302      	bcc.n	80028a6 <I2C_IsAcknowledgeFailed+0x3a>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e02e      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d1d5      	bne.n	8002888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2220      	movs	r2, #32
 80028ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fedd 	bl	80026ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <I2C_IsAcknowledgeFailed+0xc8>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	fe00e800 	.word	0xfe00e800

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	4613      	mov	r3, r2
 8002948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	0d5b      	lsrs	r3, r3, #21
 8002954:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <I2C_TransferConfig+0x58>)
 800295a:	430b      	orrs	r3, r1
 800295c:	43db      	mvns	r3, r3
 800295e:	ea02 0103 	and.w	r1, r2, r3
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002968:	7a7b      	ldrb	r3, [r7, #9]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	03ff63ff 	.word	0x03ff63ff

08002994 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d138      	bne.n	8002a1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e032      	b.n	8002a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b20      	cmp	r3, #32
 8002a3e:	d139      	bne.n	8002ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e033      	b.n	8002ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2224      	movs	r2, #36	; 0x24
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40007000 	.word	0x40007000

08002ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aee:	d130      	bne.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af0:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afc:	d038      	beq.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2232      	movs	r2, #50	; 0x32
 8002b14:	fb02 f303 	mul.w	r3, r2, r3
 8002b18:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	3301      	adds	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b24:	e002      	b.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b38:	d102      	bne.n	8002b40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f2      	bne.n	8002b26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d110      	bne.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e00f      	b.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5e:	d007      	beq.n	8002b70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40007000 	.word	0x40007000
 8002b84:	20000000 	.word	0x20000000
 8002b88:	431bde83 	.word	0x431bde83

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e3d4      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b9e:	4ba1      	ldr	r3, [pc, #644]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ba8:	4b9e      	ldr	r3, [pc, #632]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80e4 	beq.w	8002d88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x4a>
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	f040 808b 	bne.w	8002ce4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	f040 8087 	bne.w	8002ce4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd6:	4b93      	ldr	r3, [pc, #588]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x62>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e3ac      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1a      	ldr	r2, [r3, #32]
 8002bf2:	4b8c      	ldr	r3, [pc, #560]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d004      	beq.n	8002c08 <HAL_RCC_OscConfig+0x7c>
 8002bfe:	4b89      	ldr	r3, [pc, #548]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c06:	e005      	b.n	8002c14 <HAL_RCC_OscConfig+0x88>
 8002c08:	4b86      	ldr	r3, [pc, #536]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d223      	bcs.n	8002c60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fd73 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e38d      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2c:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c32:	f043 0308 	orr.w	r3, r3, #8
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	4977      	ldr	r1, [pc, #476]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	4972      	ldr	r1, [pc, #456]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
 8002c5e:	e025      	b.n	8002cac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c60:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6f      	ldr	r2, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	496a      	ldr	r1, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7e:	4b69      	ldr	r3, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fd33 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e34d      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cac:	f000 fc36 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	495a      	ldr	r1, [pc, #360]	; (8002e28 <HAL_RCC_OscConfig+0x29c>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_RCC_OscConfig+0x2a0>)
 8002cca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCC_OscConfig+0x2a4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe fcfd 	bl	80016d0 <HAL_InitTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d052      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	e331      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d032      	beq.n	8002d52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cec:	4b4d      	ldr	r3, [pc, #308]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4c      	ldr	r2, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe feb6 	bl	8001a68 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d00:	f7fe feb2 	bl	8001a68 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e31a      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d12:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1e:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a40      	ldr	r2, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	493b      	ldr	r1, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	4936      	ldr	r1, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e01a      	b.n	8002d88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d5e:	f7fe fe83 	bl	8001a68 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d66:	f7fe fe7f 	bl	8001a68 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e2e7      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x1da>
 8002d84:	e000      	b.n	8002d88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d074      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x21a>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	d10e      	bne.n	8002dbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d064      	beq.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d160      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e2c4      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x24a>
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e01d      	b.n	8002e12 <HAL_RCC_OscConfig+0x286>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x26e>
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	e00b      	b.n	8002e12 <HAL_RCC_OscConfig+0x286>
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a06      	ldr	r2, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x298>)
 8002e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fe25 	bl	8001a68 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e20:	e011      	b.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000
 8002e28:	0800a994 	.word	0x0800a994
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fe18 	bl	8001a68 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e280      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4baf      	ldr	r3, [pc, #700]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f0      	beq.n	8002e34 <HAL_RCC_OscConfig+0x2a8>
 8002e52:	e014      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fe08 	bl	8001a68 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5c:	f7fe fe04 	bl	8001a68 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b64      	cmp	r3, #100	; 0x64
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e26c      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e6e:	4ba5      	ldr	r3, [pc, #660]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2d0>
 8002e7a:	e000      	b.n	8002e7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d060      	beq.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x310>
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d119      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d116      	bne.n	8002eca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e9c:	4b99      	ldr	r3, [pc, #612]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x328>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e249      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b93      	ldr	r3, [pc, #588]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	4990      	ldr	r1, [pc, #576]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec8:	e040      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed2:	4b8c      	ldr	r3, [pc, #560]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a8b      	ldr	r2, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fdc3 	bl	8001a68 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fdbf 	bl	8001a68 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e227      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef8:	4b82      	ldr	r3, [pc, #520]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	497c      	ldr	r1, [pc, #496]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
 8002f18:	e018      	b.n	8002f4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a79      	ldr	r2, [pc, #484]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fd9f 	bl	8001a68 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fd9b 	bl	8001a68 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e203      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f40:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f66:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7fe fd7a 	bl	8001a68 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fd76 	bl	8001a68 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e1de      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3ec>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9a:	4b5a      	ldr	r3, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe fd5d 	bl	8001a68 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fd59 	bl	8001a68 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1c1      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80a6 	beq.w	800312c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fe4:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10d      	bne.n	800300c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b44      	ldr	r3, [pc, #272]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a43      	ldr	r2, [pc, #268]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d118      	bne.n	800304a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3a      	ldr	r2, [pc, #232]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 800301e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003022:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003024:	f7fe fd20 	bl	8001a68 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302c:	f7fe fd1c 	bl	8001a68 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e184      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303e:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_RCC_OscConfig+0x57c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x4d8>
 8003052:	4b2c      	ldr	r3, [pc, #176]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003062:	e024      	b.n	80030ae <HAL_RCC_OscConfig+0x522>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d110      	bne.n	800308e <HAL_RCC_OscConfig+0x502>
 800306c:	4b25      	ldr	r3, [pc, #148]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003082:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800308c:	e00f      	b.n	80030ae <HAL_RCC_OscConfig+0x522>
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe fcd7 	bl	8001a68 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fcd3 	bl	8001a68 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e139      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x578>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ed      	beq.n	80030be <HAL_RCC_OscConfig+0x532>
 80030e2:	e01a      	b.n	800311a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe fcc0 	bl	8001a68 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030ea:	e00f      	b.n	800310c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fcbc 	bl	8001a68 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d906      	bls.n	800310c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e122      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800310c:	4b90      	ldr	r3, [pc, #576]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e8      	bne.n	80030ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800311a:	7ffb      	ldrb	r3, [r7, #31]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d105      	bne.n	800312c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8108 	beq.w	8003346 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 80d0 	bne.w	80032e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003140:	4b83      	ldr	r3, [pc, #524]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d130      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	3b01      	subs	r3, #1
 8003160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d127      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003172:	429a      	cmp	r2, r3
 8003174:	d11f      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003180:	2a07      	cmp	r2, #7
 8003182:	bf14      	ite	ne
 8003184:	2201      	movne	r2, #1
 8003186:	2200      	moveq	r2, #0
 8003188:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d109      	bne.n	80031b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d06e      	beq.n	8003294 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	d069      	beq.n	8003290 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d105      	bne.n	80031d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031c8:	4b61      	ldr	r3, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b7      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031d8:	4b5d      	ldr	r3, [pc, #372]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031e4:	f7fe fc40 	bl	8001a68 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fc3c 	bl	8001a68 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0a4      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fe:	4b54      	ldr	r3, [pc, #336]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCC_OscConfig+0x7c8>)
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800321a:	3a01      	subs	r2, #1
 800321c:	0112      	lsls	r2, r2, #4
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003224:	0212      	lsls	r2, r2, #8
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800322c:	0852      	lsrs	r2, r2, #1
 800322e:	3a01      	subs	r2, #1
 8003230:	0552      	lsls	r2, r2, #21
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003238:	0852      	lsrs	r2, r2, #1
 800323a:	3a01      	subs	r2, #1
 800323c:	0652      	lsls	r2, r2, #25
 800323e:	4311      	orrs	r1, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003244:	0912      	lsrs	r2, r2, #4
 8003246:	0452      	lsls	r2, r2, #17
 8003248:	430a      	orrs	r2, r1
 800324a:	4941      	ldr	r1, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003250:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3e      	ldr	r2, [pc, #248]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800325c:	4b3c      	ldr	r3, [pc, #240]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003268:	f7fe fbfe 	bl	8001a68 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fbfa 	bl	8001a68 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e062      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800328e:	e05a      	b.n	8003346 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e059      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003294:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d152      	bne.n	8003346 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a0:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a27      	ldr	r2, [pc, #156]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032b8:	f7fe fbd6 	bl	8001a68 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fbd2 	bl	8001a68 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e03a      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x734>
 80032de:	e032      	b.n	8003346 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d02d      	beq.n	8003342 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003310:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003318:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fba5 	bl	8001a68 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003322:	f7fe fba1 	bl	8001a68 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e009      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_OscConfig+0x7c4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x796>
 8003340:	e001      	b.n	8003346 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	f99d808c 	.word	0xf99d808c

08003358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0c8      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800336c:	4b66      	ldr	r3, [pc, #408]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d910      	bls.n	800339c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b63      	ldr	r3, [pc, #396]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4961      	ldr	r1, [pc, #388]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b5f      	ldr	r3, [pc, #380]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b0      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d04c      	beq.n	8003442 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b0:	4b56      	ldr	r3, [pc, #344]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d121      	bne.n	8003400 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e09e      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c8:	4b50      	ldr	r3, [pc, #320]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d115      	bne.n	8003400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e092      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e0:	4b4a      	ldr	r3, [pc, #296]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d109      	bne.n	8003400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e086      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	4b46      	ldr	r3, [pc, #280]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e07e      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 0203 	bic.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	493f      	ldr	r1, [pc, #252]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003412:	f7fe fb29 	bl	8001a68 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003418:	e00a      	b.n	8003430 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341a:	f7fe fb25 	bl	8001a68 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e066      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 020c 	and.w	r2, r3, #12
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	429a      	cmp	r2, r3
 8003440:	d1eb      	bne.n	800341a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	492c      	ldr	r1, [pc, #176]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d210      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 0207 	bic.w	r2, r3, #7
 8003476:	4924      	ldr	r1, [pc, #144]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_RCC_ClockConfig+0x1b0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e036      	b.n	80034fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4918      	ldr	r1, [pc, #96]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4910      	ldr	r1, [pc, #64]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ce:	f000 f825 	bl	800351c <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b0d      	ldr	r3, [pc, #52]	; (800350c <HAL_RCC_ClockConfig+0x1b4>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490c      	ldr	r1, [pc, #48]	; (8003510 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f8ec 	bl	80016d0 <HAL_InitTick>
 80034f8:	4603      	mov	r3, r0
 80034fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80034fc:	7afb      	ldrb	r3, [r7, #11]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40022000 	.word	0x40022000
 800350c:	40021000 	.word	0x40021000
 8003510:	0800a994 	.word	0x0800a994
 8003514:	20000000 	.word	0x20000000
 8003518:	20000004 	.word	0x20000004

0800351c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	; 0x24
 8003520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003534:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x34>
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d121      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11e      	bne.n	800358e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003550:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e005      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	091b      	lsrs	r3, r3, #4
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	2b04      	cmp	r3, #4
 8003592:	d102      	bne.n	800359a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <HAL_RCC_GetSysClockFreq+0x110>)
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	e004      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HAL_RCC_GetSysClockFreq+0x114>)
 80035a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d134      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	d003      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0xac>
 80035c0:	e005      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035c2:	4b1a      	ldr	r3, [pc, #104]	; (800362c <HAL_RCC_GetSysClockFreq+0x110>)
 80035c4:	617b      	str	r3, [r7, #20]
      break;
 80035c6:	e005      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ca:	617b      	str	r3, [r7, #20]
      break;
 80035cc:	e002      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	617b      	str	r3, [r7, #20]
      break;
 80035d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	3301      	adds	r3, #1
 80035e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	fb02 f203 	mul.w	r2, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0e5b      	lsrs	r3, r3, #25
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	3301      	adds	r3, #1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003614:	69bb      	ldr	r3, [r7, #24]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3724      	adds	r7, #36	; 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000
 8003628:	0800a9ac 	.word	0x0800a9ac
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4904      	ldr	r1, [pc, #16]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	0800a9a4 	.word	0x0800a9a4

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800367c:	f7ff ffda 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0adb      	lsrs	r3, r3, #11
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	0800a9a4 	.word	0x0800a9a4

080036a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	220f      	movs	r2, #15
 80036b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0203 	and.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <HAL_RCC_GetClockConfig+0x60>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0207 	and.w	r2, r3, #7
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40022000 	.word	0x40022000

08003708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003720:	f7ff f9d0 	bl	8002ac4 <HAL_PWREx_GetVoltageRange>
 8003724:	6178      	str	r0, [r7, #20]
 8003726:	e014      	b.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	; 0x58
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003740:	f7ff f9c0 	bl	8002ac4 <HAL_PWREx_GetVoltageRange>
 8003744:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003758:	d10b      	bne.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d919      	bls.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2ba0      	cmp	r3, #160	; 0xa0
 8003764:	d902      	bls.n	800376c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003766:	2302      	movs	r3, #2
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e013      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e010      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d902      	bls.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003778:	2303      	movs	r3, #3
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e00a      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d102      	bne.n	800378a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003784:	2302      	movs	r3, #2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e004      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b70      	cmp	r3, #112	; 0x70
 800378e:	d101      	bne.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003790:	2301      	movs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 0207 	bic.w	r2, r3, #7
 800379c:	4909      	ldr	r1, [pc, #36]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40022000 	.word	0x40022000

080037c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d041      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ec:	d02a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f2:	d824      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fe:	d81e      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003808:	d010      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800380a:	e018      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800380c:	4b86      	ldr	r3, [pc, #536]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a85      	ldr	r2, [pc, #532]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003818:	e015      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fabb 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800382a:	e00c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3320      	adds	r3, #32
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fba6 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	74fb      	strb	r3, [r7, #19]
      break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385a:	4973      	ldr	r1, [pc, #460]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003862:	e001      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d041      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800387c:	d02a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800387e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003882:	d824      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800388a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388e:	d81e      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003898:	d010      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800389a:	e018      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800389c:	4b62      	ldr	r3, [pc, #392]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a8:	e015      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa73 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3320      	adds	r3, #32
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb5e 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	74fb      	strb	r3, [r7, #19]
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038dc:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	494f      	ldr	r1, [pc, #316]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a0 	beq.w	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003938:	2301      	movs	r3, #1
 800393a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003948:	f7fe f88e 	bl	8001a68 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7fe f88a 	bl	8001a68 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d902      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	74fb      	strb	r3, [r7, #19]
        break;
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d15c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01f      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d019      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe f849 	bl	8001a68 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d8:	e00b      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe f845 	bl	8001a68 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d902      	bls.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	74fb      	strb	r3, [r7, #19]
            break;
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ec      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a16:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a34:	7c7b      	ldrb	r3, [r7, #17]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3a:	4b9e      	ldr	r3, [pc, #632]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a9d      	ldr	r2, [pc, #628]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a52:	4b98      	ldr	r3, [pc, #608]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f023 0203 	bic.w	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	4994      	ldr	r1, [pc, #592]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a74:	4b8f      	ldr	r3, [pc, #572]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 020c 	bic.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	498c      	ldr	r1, [pc, #560]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a96:	4b87      	ldr	r3, [pc, #540]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4983      	ldr	r1, [pc, #524]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab8:	4b7e      	ldr	r3, [pc, #504]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	497b      	ldr	r1, [pc, #492]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ada:	4b76      	ldr	r3, [pc, #472]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	4972      	ldr	r1, [pc, #456]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003afc:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	496a      	ldr	r1, [pc, #424]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	4961      	ldr	r1, [pc, #388]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b40:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	4959      	ldr	r1, [pc, #356]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	4950      	ldr	r1, [pc, #320]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	4948      	ldr	r1, [pc, #288]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	493f      	ldr	r1, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc8:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd6:	4937      	ldr	r1, [pc, #220]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f8c8 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d028      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d106      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c50:	60d3      	str	r3, [r2, #12]
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f899 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a02      	ldr	r2, [pc, #8]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
 8003cb0:	e014      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f867 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f844 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3320      	adds	r3, #32
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f925 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d54:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d62:	490d      	ldr	r1, [pc, #52]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d86:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000

08003d9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003daa:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003db6:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10d      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dce:	4b6c      	ldr	r3, [pc, #432]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d047      	beq.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e044      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d018      	beq.n	8003e22 <RCCEx_PLLSAI1_Config+0x86>
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d825      	bhi.n	8003e40 <RCCEx_PLLSAI1_Config+0xa4>
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d002      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x62>
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d009      	beq.n	8003e10 <RCCEx_PLLSAI1_Config+0x74>
 8003dfc:	e020      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dfe:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11d      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0e:	e01a      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e10:	4b5b      	ldr	r3, [pc, #364]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e013      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e004      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	4944      	ldr	r1, [pc, #272]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d17d      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fd fdf0 	bl	8001a68 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e8a:	e009      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e8c:	f7fd fdec 	bl	8001a68 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9e:	e005      	b.n	8003eac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ef      	bne.n	8003e8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d160      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	0211      	lsls	r1, r2, #8
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68d2      	ldr	r2, [r2, #12]
 8003ece:	0912      	lsrs	r2, r2, #4
 8003ed0:	0452      	lsls	r2, r2, #17
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	492a      	ldr	r1, [pc, #168]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
 8003eda:	e027      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d112      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	0211      	lsls	r1, r2, #8
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6912      	ldr	r2, [r2, #16]
 8003ef8:	0852      	lsrs	r2, r2, #1
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0552      	lsls	r2, r2, #21
 8003efe:	430a      	orrs	r2, r1
 8003f00:	491f      	ldr	r1, [pc, #124]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
 8003f06:	e011      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6952      	ldr	r2, [r2, #20]
 8003f1e:	0852      	lsrs	r2, r2, #1
 8003f20:	3a01      	subs	r2, #1
 8003f22:	0652      	lsls	r2, r2, #25
 8003f24:	430a      	orrs	r2, r1
 8003f26:	4916      	ldr	r1, [pc, #88]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd fd96 	bl	8001a68 <HAL_GetTick>
 8003f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f3e:	e009      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f40:	f7fd fd92 	bl	8001a68 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d902      	bls.n	8003f54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	73fb      	strb	r3, [r7, #15]
          break;
 8003f52:	e005      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ef      	beq.n	8003f40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f92:	4b6a      	ldr	r3, [pc, #424]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f9e:	4b67      	ldr	r3, [pc, #412]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fb6:	4b61      	ldr	r3, [pc, #388]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d047      	beq.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e044      	b.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d018      	beq.n	800400a <RCCEx_PLLSAI2_Config+0x86>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d825      	bhi.n	8004028 <RCCEx_PLLSAI2_Config+0xa4>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <RCCEx_PLLSAI2_Config+0x62>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d009      	beq.n	8003ff8 <RCCEx_PLLSAI2_Config+0x74>
 8003fe4:	e020      	b.n	8004028 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe6:	4b55      	ldr	r3, [pc, #340]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e01a      	b.n	800402e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e013      	b.n	8004032 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400a:	4b4c      	ldr	r3, [pc, #304]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004016:	4b49      	ldr	r3, [pc, #292]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004026:	e006      	b.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e004      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004036:	bf00      	nop
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	430b      	orrs	r3, r1
 8004054:	4939      	ldr	r1, [pc, #228]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d167      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004060:	4b36      	ldr	r3, [pc, #216]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a35      	ldr	r2, [pc, #212]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd fcfc 	bl	8001a68 <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004074:	f7fd fcf8 	bl	8001a68 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d14a      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	0912      	lsrs	r2, r2, #4
 80040b8:	0452      	lsls	r2, r2, #17
 80040ba:	430a      	orrs	r2, r1
 80040bc:	491f      	ldr	r1, [pc, #124]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	614b      	str	r3, [r1, #20]
 80040c2:	e011      	b.n	80040e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6892      	ldr	r2, [r2, #8]
 80040d4:	0211      	lsls	r1, r2, #8
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6912      	ldr	r2, [r2, #16]
 80040da:	0852      	lsrs	r2, r2, #1
 80040dc:	3a01      	subs	r2, #1
 80040de:	0652      	lsls	r2, r2, #25
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4916      	ldr	r1, [pc, #88]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd fcb8 	bl	8001a68 <HAL_GetTick>
 80040f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040fa:	e009      	b.n	8004110 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040fc:	f7fd fcb4 	bl	8001a68 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	73fb      	strb	r3, [r7, #15]
          break;
 800410e:	e005      	b.n	800411c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ef      	beq.n	80040fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e049      	b.n	80041e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f841 	bl	80041ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 f9f8 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d001      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e04f      	b.n	80042bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01d      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d018      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <HAL_TIM_Base_Start_IT+0xc8>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00e      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_TIM_Base_Start_IT+0x76>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a19      	ldr	r2, [pc, #100]	; (80042dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d115      	bne.n	80042a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b17      	ldr	r3, [pc, #92]	; (80042e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004282:	4013      	ands	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b06      	cmp	r3, #6
 800428a:	d015      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0xb4>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004292:	d011      	beq.n	80042b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a4:	e008      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e000      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	00010007 	.word	0x00010007

080042e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b02      	cmp	r3, #2
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0202 	mvn.w	r2, #2
 8004310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f905 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8f7 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f908 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b04      	cmp	r3, #4
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0204 	mvn.w	r2, #4
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8db 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8cd 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8de 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0208 	mvn.w	r2, #8
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f8b1 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8a3 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8b4 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b10      	cmp	r3, #16
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0210 	mvn.w	r2, #16
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2208      	movs	r2, #8
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f887 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f879 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f88a 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd f86e 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f914 	bl	80046bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a2:	d10e      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d107      	bne.n	80044c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f907 	bl	80046d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b40      	cmp	r3, #64	; 0x40
 80044ce:	d10e      	bne.n	80044ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d107      	bne.n	80044ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f838 	bl	800455e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d10e      	bne.n	800451a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b20      	cmp	r3, #32
 8004508:	d107      	bne.n	800451a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f06f 0220 	mvn.w	r2, #32
 8004512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8c7 	bl	80046a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a40      	ldr	r2, [pc, #256]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a3d      	ldr	r2, [pc, #244]	; (800468c <TIM_Base_SetConfig+0x118>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a3c      	ldr	r2, [pc, #240]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3b      	ldr	r2, [pc, #236]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3a      	ldr	r2, [pc, #232]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <TIM_Base_SetConfig+0x114>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01f      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d01b      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <TIM_Base_SetConfig+0x118>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d017      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2b      	ldr	r2, [pc, #172]	; (8004690 <TIM_Base_SetConfig+0x11c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00f      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a29      	ldr	r2, [pc, #164]	; (8004698 <TIM_Base_SetConfig+0x124>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00b      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <TIM_Base_SetConfig+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a27      	ldr	r2, [pc, #156]	; (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d003      	beq.n	800460e <TIM_Base_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <TIM_Base_SetConfig+0x130>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d108      	bne.n	8004620 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4313      	orrs	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a10      	ldr	r2, [pc, #64]	; (8004688 <TIM_Base_SetConfig+0x114>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d00f      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a12      	ldr	r2, [pc, #72]	; (8004698 <TIM_Base_SetConfig+0x124>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a11      	ldr	r2, [pc, #68]	; (800469c <TIM_Base_SetConfig+0x128>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <TIM_Base_SetConfig+0x12c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <TIM_Base_SetConfig+0x130>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	615a      	str	r2, [r3, #20]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40014400 	.word	0x40014400
 80046a4:	40014800 	.word	0x40014800

080046a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc ffa0 	bl	800164c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8c0 	bl	80048a8 <UART_SetConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e022      	b.n	8004778 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb3e 	bl	8004dbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fbc5 	bl	8004f00 <UART_CheckIdleState>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4613      	mov	r3, r2
 800478e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004794:	2b20      	cmp	r3, #32
 8004796:	f040 8082 	bne.w	800489e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_Transmit+0x26>
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07a      	b.n	80048a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x38>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e073      	b.n	80048a0 <HAL_UART_Transmit+0x120>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047ce:	f7fd f94b 	bl	8001a68 <HAL_GetTick>
 80047d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d108      	bne.n	8004800 <HAL_UART_Transmit+0x80>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d104      	bne.n	8004800 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	e003      	b.n	8004808 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004810:	e02d      	b.n	800486e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fbb8 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e039      	b.n	80048a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800483e:	b292      	uxth	r2, r2
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	3302      	adds	r3, #2
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e008      	b.n	800485c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	b292      	uxth	r2, r2
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1cb      	bne.n	8004812 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2200      	movs	r2, #0
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fb84 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e005      	b.n	80048a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800489e:	2302      	movs	r3, #2
  }
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69db      	ldr	r3, [r3, #28]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4bad      	ldr	r3, [pc, #692]	; (8004b88 <UART_SetConfig+0x2e0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	69f9      	ldr	r1, [r7, #28]
 80048dc:	430b      	orrs	r3, r1
 80048de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4aa2      	ldr	r2, [pc, #648]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d004      	beq.n	8004910 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	430a      	orrs	r2, r1
 8004922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a99      	ldr	r2, [pc, #612]	; (8004b90 <UART_SetConfig+0x2e8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d121      	bne.n	8004972 <UART_SetConfig+0xca>
 800492e:	4b99      	ldr	r3, [pc, #612]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b03      	cmp	r3, #3
 800493a:	d817      	bhi.n	800496c <UART_SetConfig+0xc4>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x9c>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004955 	.word	0x08004955
 8004948:	08004961 	.word	0x08004961
 800494c:	0800495b 	.word	0x0800495b
 8004950:	08004967 	.word	0x08004967
 8004954:	2301      	movs	r3, #1
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e0e7      	b.n	8004b2a <UART_SetConfig+0x282>
 800495a:	2302      	movs	r3, #2
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e0e4      	b.n	8004b2a <UART_SetConfig+0x282>
 8004960:	2304      	movs	r3, #4
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	e0e1      	b.n	8004b2a <UART_SetConfig+0x282>
 8004966:	2308      	movs	r3, #8
 8004968:	76fb      	strb	r3, [r7, #27]
 800496a:	e0de      	b.n	8004b2a <UART_SetConfig+0x282>
 800496c:	2310      	movs	r3, #16
 800496e:	76fb      	strb	r3, [r7, #27]
 8004970:	e0db      	b.n	8004b2a <UART_SetConfig+0x282>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a88      	ldr	r2, [pc, #544]	; (8004b98 <UART_SetConfig+0x2f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d132      	bne.n	80049e2 <UART_SetConfig+0x13a>
 800497c:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <UART_SetConfig+0x2ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d828      	bhi.n	80049dc <UART_SetConfig+0x134>
 800498a:	a201      	add	r2, pc, #4	; (adr r2, 8004990 <UART_SetConfig+0xe8>)
 800498c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004990:	080049c5 	.word	0x080049c5
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049d1 	.word	0x080049d1
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049dd 	.word	0x080049dd
 80049b0:	080049cb 	.word	0x080049cb
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049dd 	.word	0x080049dd
 80049c0:	080049d7 	.word	0x080049d7
 80049c4:	2300      	movs	r3, #0
 80049c6:	76fb      	strb	r3, [r7, #27]
 80049c8:	e0af      	b.n	8004b2a <UART_SetConfig+0x282>
 80049ca:	2302      	movs	r3, #2
 80049cc:	76fb      	strb	r3, [r7, #27]
 80049ce:	e0ac      	b.n	8004b2a <UART_SetConfig+0x282>
 80049d0:	2304      	movs	r3, #4
 80049d2:	76fb      	strb	r3, [r7, #27]
 80049d4:	e0a9      	b.n	8004b2a <UART_SetConfig+0x282>
 80049d6:	2308      	movs	r3, #8
 80049d8:	76fb      	strb	r3, [r7, #27]
 80049da:	e0a6      	b.n	8004b2a <UART_SetConfig+0x282>
 80049dc:	2310      	movs	r3, #16
 80049de:	76fb      	strb	r3, [r7, #27]
 80049e0:	e0a3      	b.n	8004b2a <UART_SetConfig+0x282>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6d      	ldr	r2, [pc, #436]	; (8004b9c <UART_SetConfig+0x2f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d120      	bne.n	8004a2e <UART_SetConfig+0x186>
 80049ec:	4b69      	ldr	r3, [pc, #420]	; (8004b94 <UART_SetConfig+0x2ec>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d013      	beq.n	8004a22 <UART_SetConfig+0x17a>
 80049fa:	2b30      	cmp	r3, #48	; 0x30
 80049fc:	d814      	bhi.n	8004a28 <UART_SetConfig+0x180>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d009      	beq.n	8004a16 <UART_SetConfig+0x16e>
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d810      	bhi.n	8004a28 <UART_SetConfig+0x180>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <UART_SetConfig+0x168>
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d006      	beq.n	8004a1c <UART_SetConfig+0x174>
 8004a0e:	e00b      	b.n	8004a28 <UART_SetConfig+0x180>
 8004a10:	2300      	movs	r3, #0
 8004a12:	76fb      	strb	r3, [r7, #27]
 8004a14:	e089      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a16:	2302      	movs	r3, #2
 8004a18:	76fb      	strb	r3, [r7, #27]
 8004a1a:	e086      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	76fb      	strb	r3, [r7, #27]
 8004a20:	e083      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a22:	2308      	movs	r3, #8
 8004a24:	76fb      	strb	r3, [r7, #27]
 8004a26:	e080      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	76fb      	strb	r3, [r7, #27]
 8004a2c:	e07d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a5b      	ldr	r2, [pc, #364]	; (8004ba0 <UART_SetConfig+0x2f8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d120      	bne.n	8004a7a <UART_SetConfig+0x1d2>
 8004a38:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a42:	2bc0      	cmp	r3, #192	; 0xc0
 8004a44:	d013      	beq.n	8004a6e <UART_SetConfig+0x1c6>
 8004a46:	2bc0      	cmp	r3, #192	; 0xc0
 8004a48:	d814      	bhi.n	8004a74 <UART_SetConfig+0x1cc>
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d009      	beq.n	8004a62 <UART_SetConfig+0x1ba>
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d810      	bhi.n	8004a74 <UART_SetConfig+0x1cc>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <UART_SetConfig+0x1b4>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d006      	beq.n	8004a68 <UART_SetConfig+0x1c0>
 8004a5a:	e00b      	b.n	8004a74 <UART_SetConfig+0x1cc>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	76fb      	strb	r3, [r7, #27]
 8004a60:	e063      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a62:	2302      	movs	r3, #2
 8004a64:	76fb      	strb	r3, [r7, #27]
 8004a66:	e060      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a68:	2304      	movs	r3, #4
 8004a6a:	76fb      	strb	r3, [r7, #27]
 8004a6c:	e05d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a6e:	2308      	movs	r3, #8
 8004a70:	76fb      	strb	r3, [r7, #27]
 8004a72:	e05a      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a74:	2310      	movs	r3, #16
 8004a76:	76fb      	strb	r3, [r7, #27]
 8004a78:	e057      	b.n	8004b2a <UART_SetConfig+0x282>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a49      	ldr	r2, [pc, #292]	; (8004ba4 <UART_SetConfig+0x2fc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d125      	bne.n	8004ad0 <UART_SetConfig+0x228>
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a92:	d017      	beq.n	8004ac4 <UART_SetConfig+0x21c>
 8004a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a98:	d817      	bhi.n	8004aca <UART_SetConfig+0x222>
 8004a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9e:	d00b      	beq.n	8004ab8 <UART_SetConfig+0x210>
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d811      	bhi.n	8004aca <UART_SetConfig+0x222>
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <UART_SetConfig+0x20a>
 8004aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aae:	d006      	beq.n	8004abe <UART_SetConfig+0x216>
 8004ab0:	e00b      	b.n	8004aca <UART_SetConfig+0x222>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	76fb      	strb	r3, [r7, #27]
 8004ab6:	e038      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e035      	b.n	8004b2a <UART_SetConfig+0x282>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	76fb      	strb	r3, [r7, #27]
 8004ac2:	e032      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	76fb      	strb	r3, [r7, #27]
 8004ac8:	e02f      	b.n	8004b2a <UART_SetConfig+0x282>
 8004aca:	2310      	movs	r3, #16
 8004acc:	76fb      	strb	r3, [r7, #27]
 8004ace:	e02c      	b.n	8004b2a <UART_SetConfig+0x282>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a2d      	ldr	r2, [pc, #180]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d125      	bne.n	8004b26 <UART_SetConfig+0x27e>
 8004ada:	4b2e      	ldr	r3, [pc, #184]	; (8004b94 <UART_SetConfig+0x2ec>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ae4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ae8:	d017      	beq.n	8004b1a <UART_SetConfig+0x272>
 8004aea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004aee:	d817      	bhi.n	8004b20 <UART_SetConfig+0x278>
 8004af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af4:	d00b      	beq.n	8004b0e <UART_SetConfig+0x266>
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d811      	bhi.n	8004b20 <UART_SetConfig+0x278>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <UART_SetConfig+0x260>
 8004b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b04:	d006      	beq.n	8004b14 <UART_SetConfig+0x26c>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x278>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e00d      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	76fb      	strb	r3, [r7, #27]
 8004b12:	e00a      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b14:	2304      	movs	r3, #4
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e007      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e004      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b20:	2310      	movs	r3, #16
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e001      	b.n	8004b2a <UART_SetConfig+0x282>
 8004b26:	2310      	movs	r3, #16
 8004b28:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <UART_SetConfig+0x2e4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	f040 8087 	bne.w	8004c44 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b36:	7efb      	ldrb	r3, [r7, #27]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d837      	bhi.n	8004bac <UART_SetConfig+0x304>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <UART_SetConfig+0x29c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004b77 	.word	0x08004b77
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fd70 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004b6c:	6178      	str	r0, [r7, #20]
        break;
 8004b6e:	e022      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <UART_SetConfig+0x300>)
 8004b72:	617b      	str	r3, [r7, #20]
        break;
 8004b74:	e01f      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fe fcd1 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8004b7a:	6178      	str	r0, [r7, #20]
        break;
 8004b7c:	e01b      	b.n	8004bb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b82:	617b      	str	r3, [r7, #20]
        break;
 8004b84:	e017      	b.n	8004bb6 <UART_SetConfig+0x30e>
 8004b86:	bf00      	nop
 8004b88:	efff69f3 	.word	0xefff69f3
 8004b8c:	40008000 	.word	0x40008000
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	40004c00 	.word	0x40004c00
 8004ba4:	40005000 	.word	0x40005000
 8004ba8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	76bb      	strb	r3, [r7, #26]
        break;
 8004bb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80f1 	beq.w	8004da0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d305      	bcc.n	8004bda <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d902      	bls.n	8004be0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	76bb      	strb	r3, [r7, #26]
 8004bde:	e0df      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	020b      	lsls	r3, r1, #8
 8004bf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bf6:	0202      	lsls	r2, r0, #8
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6849      	ldr	r1, [r1, #4]
 8004bfc:	0849      	lsrs	r1, r1, #1
 8004bfe:	4608      	mov	r0, r1
 8004c00:	f04f 0100 	mov.w	r1, #0
 8004c04:	1814      	adds	r4, r2, r0
 8004c06:	eb43 0501 	adc.w	r5, r3, r1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fc f816 	bl	8000c48 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4613      	mov	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d308      	bcc.n	8004c3e <UART_SetConfig+0x396>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d204      	bcs.n	8004c3e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e0b0      	b.n	8004da0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	76bb      	strb	r3, [r7, #26]
 8004c42:	e0ad      	b.n	8004da0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	d15c      	bne.n	8004d08 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004c4e:	7efb      	ldrb	r3, [r7, #27]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d828      	bhi.n	8004ca6 <UART_SetConfig+0x3fe>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x3b4>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004ca7 	.word	0x08004ca7
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fe fce4 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004c84:	6178      	str	r0, [r7, #20]
        break;
 8004c86:	e013      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fe fcf6 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6178      	str	r0, [r7, #20]
        break;
 8004c8e:	e00f      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c90:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <UART_SetConfig+0x510>)
 8004c92:	617b      	str	r3, [r7, #20]
        break;
 8004c94:	e00c      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fe fc41 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8004c9a:	6178      	str	r0, [r7, #20]
        break;
 8004c9c:	e008      	b.n	8004cb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ca2:	617b      	str	r3, [r7, #20]
        break;
 8004ca4:	e004      	b.n	8004cb0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	76bb      	strb	r3, [r7, #26]
        break;
 8004cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d074      	beq.n	8004da0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	005a      	lsls	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	441a      	add	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d916      	bls.n	8004d02 <UART_SetConfig+0x45a>
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cda:	d212      	bcs.n	8004d02 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f023 030f 	bic.w	r3, r3, #15
 8004ce4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	89fa      	ldrh	r2, [r7, #14]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	e04e      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	76bb      	strb	r3, [r7, #26]
 8004d06:	e04b      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d08:	7efb      	ldrb	r3, [r7, #27]
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d827      	bhi.n	8004d5e <UART_SetConfig+0x4b6>
 8004d0e:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <UART_SetConfig+0x46c>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d41 	.word	0x08004d41
 8004d1c:	08004d49 	.word	0x08004d49
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d4f 	.word	0x08004d4f
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d5f 	.word	0x08004d5f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fe fc88 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004d3c:	6178      	str	r0, [r7, #20]
        break;
 8004d3e:	e013      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7fe fc9a 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8004d44:	6178      	str	r0, [r7, #20]
        break;
 8004d46:	e00f      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <UART_SetConfig+0x510>)
 8004d4a:	617b      	str	r3, [r7, #20]
        break;
 8004d4c:	e00c      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe fbe5 	bl	800351c <HAL_RCC_GetSysClockFreq>
 8004d52:	6178      	str	r0, [r7, #20]
        break;
 8004d54:	e008      	b.n	8004d68 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	617b      	str	r3, [r7, #20]
        break;
 8004d5c:	e004      	b.n	8004d68 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	76bb      	strb	r3, [r7, #26]
        break;
 8004d66:	bf00      	nop
    }

    if (pclk != 0U)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d018      	beq.n	8004da0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085a      	lsrs	r2, r3, #1
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	441a      	add	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d908      	bls.n	8004d9c <UART_SetConfig+0x4f4>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d204      	bcs.n	8004d9c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e001      	b.n	8004da0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004dac:	7ebb      	ldrb	r3, [r7, #26]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bdb0      	pop	{r4, r5, r7, pc}
 8004db6:	bf00      	nop
 8004db8:	00f42400 	.word	0x00f42400

08004dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01a      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d10a      	bne.n	8004ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f10:	f7fc fdaa 	bl	8001a68 <HAL_GetTick>
 8004f14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10e      	bne.n	8004f42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f82d 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e023      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d10e      	bne.n	8004f6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f817 	bl	8004f92 <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e00d      	b.n	8004f8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa2:	e05e      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004faa:	d05a      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fac:	f7fc fd5c 	bl	8001a68 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11b      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004fd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e043      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02c      	beq.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005016:	d124      	bne.n	8005062 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005020:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005030:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e00f      	b.n	8005082 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d091      	beq.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <__NVIC_SetPriority>:
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	; (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <SysTick_Handler+0x1c>)
 80050e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050e8:	f001 fcfe 	bl	8006ae8 <xTaskGetSchedulerState>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050f2:	f002 fae9 	bl	80076c8 <xPortSysTickHandler>
  }
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	e000e010 	.word	0xe000e010

08005100 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005104:	2100      	movs	r1, #0
 8005106:	f06f 0004 	mvn.w	r0, #4
 800510a:	f7ff ffbf 	bl	800508c <__NVIC_SetPriority>
#endif
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800511a:	f3ef 8305 	mrs	r3, IPSR
 800511e:	603b      	str	r3, [r7, #0]
  return(result);
 8005120:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005126:	f06f 0305 	mvn.w	r3, #5
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	e00c      	b.n	8005148 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800512e:	4b0a      	ldr	r3, [pc, #40]	; (8005158 <osKernelInitialize+0x44>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005136:	4b08      	ldr	r3, [pc, #32]	; (8005158 <osKernelInitialize+0x44>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800513c:	2300      	movs	r3, #0
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	e002      	b.n	8005148 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005146:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005148:	687b      	ldr	r3, [r7, #4]
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000200 	.word	0x20000200

0800515c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005162:	f3ef 8305 	mrs	r3, IPSR
 8005166:	603b      	str	r3, [r7, #0]
  return(result);
 8005168:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <osKernelStart+0x1a>
    stat = osErrorISR;
 800516e:	f06f 0305 	mvn.w	r3, #5
 8005172:	607b      	str	r3, [r7, #4]
 8005174:	e010      	b.n	8005198 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <osKernelStart+0x48>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d109      	bne.n	8005192 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800517e:	f7ff ffbf 	bl	8005100 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <osKernelStart+0x48>)
 8005184:	2202      	movs	r2, #2
 8005186:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005188:	f001 f866 	bl	8006258 <vTaskStartScheduler>
      stat = osOK;
 800518c:	2300      	movs	r3, #0
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	e002      	b.n	8005198 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005196:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005198:	687b      	ldr	r3, [r7, #4]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000200 	.word	0x20000200

080051a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08e      	sub	sp, #56	; 0x38
 80051ac:	af04      	add	r7, sp, #16
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b8:	f3ef 8305 	mrs	r3, IPSR
 80051bc:	617b      	str	r3, [r7, #20]
  return(result);
 80051be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d17e      	bne.n	80052c2 <osThreadNew+0x11a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d07b      	beq.n	80052c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051ce:	2318      	movs	r3, #24
 80051d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d045      	beq.n	800526e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <osThreadNew+0x48>
        name = attr->name;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <osThreadNew+0x6e>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b38      	cmp	r3, #56	; 0x38
 8005208:	d805      	bhi.n	8005216 <osThreadNew+0x6e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <osThreadNew+0x72>
        return (NULL);
 8005216:	2300      	movs	r3, #0
 8005218:	e054      	b.n	80052c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00e      	beq.n	8005250 <osThreadNew+0xa8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	2b5b      	cmp	r3, #91	; 0x5b
 8005238:	d90a      	bls.n	8005250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <osThreadNew+0xa8>
        mem = 1;
 800524a:	2301      	movs	r3, #1
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	e010      	b.n	8005272 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10c      	bne.n	8005272 <osThreadNew+0xca>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <osThreadNew+0xca>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <osThreadNew+0xca>
          mem = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e001      	b.n	8005272 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d110      	bne.n	800529a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005280:	9202      	str	r2, [sp, #8]
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6a3a      	ldr	r2, [r7, #32]
 800528c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 fe0c 	bl	8005eac <xTaskCreateStatic>
 8005294:	4603      	mov	r3, r0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e013      	b.n	80052c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d110      	bne.n	80052c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	f107 0310 	add.w	r3, r7, #16
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fe57 	bl	8005f66 <xTaskCreate>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <osThreadNew+0x11a>
            hTask = NULL;
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052c2:	693b      	ldr	r3, [r7, #16]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d4:	f3ef 8305 	mrs	r3, IPSR
 80052d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <osDelay+0x1c>
    stat = osErrorISR;
 80052e0:	f06f 0305 	mvn.w	r3, #5
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e007      	b.n	80052f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff7c 	bl	80061f0 <vTaskDelay>
    }
  }

  return (stat);
 80052f8:	68fb      	ldr	r3, [r7, #12]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <vApplicationGetIdleTaskMemory+0x2c>)
 8005314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vApplicationGetIdleTaskMemory+0x30>)
 800531a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	601a      	str	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000204 	.word	0x20000204
 8005334:	20000260 	.word	0x20000260

08005338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4a07      	ldr	r2, [pc, #28]	; (8005364 <vApplicationGetTimerTaskMemory+0x2c>)
 8005348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a06      	ldr	r2, [pc, #24]	; (8005368 <vApplicationGetTimerTaskMemory+0x30>)
 800534e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005356:	601a      	str	r2, [r3, #0]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000460 	.word	0x20000460
 8005368:	200004bc 	.word	0x200004bc

0800536c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 0208 	add.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0208 	add.w	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f103 0208 	add.w	r2, r3, #8
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005424:	d103      	bne.n	800542e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e00c      	b.n	8005448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3308      	adds	r3, #8
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e002      	b.n	800543c <vListInsert+0x2e>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	429a      	cmp	r2, r3
 8005446:	d2f6      	bcs.n	8005436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6892      	ldr	r2, [r2, #8]
 8005496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6852      	ldr	r2, [r2, #4]
 80054a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d103      	bne.n	80054b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054fe:	f002 f851 	bl	80075a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	441a      	add	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552e:	3b01      	subs	r3, #1
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	441a      	add	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	22ff      	movs	r2, #255	; 0xff
 8005542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d114      	bne.n	800557e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01a      	beq.n	8005592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3310      	adds	r3, #16
 8005560:	4618      	mov	r0, r3
 8005562:	f001 f903 	bl	800676c <xTaskRemoveFromEventList>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <xQueueGenericReset+0xcc>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	e009      	b.n	8005592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3310      	adds	r3, #16
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fef2 	bl	800536c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3324      	adds	r3, #36	; 0x24
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff feed 	bl	800536c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005592:	f002 f837 	bl	8007604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005596:	2301      	movs	r3, #1
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	; 0x38
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <xQueueGenericCreateStatic+0x52>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <xQueueGenericCreateStatic+0x56>
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <xQueueGenericCreateStatic+0x58>
 80055fa:	2300      	movs	r3, #0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	623b      	str	r3, [r7, #32]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d102      	bne.n	8005622 <xQueueGenericCreateStatic+0x7e>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <xQueueGenericCreateStatic+0x82>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <xQueueGenericCreateStatic+0x84>
 8005626:	2300      	movs	r3, #0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	61fb      	str	r3, [r7, #28]
}
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005642:	2350      	movs	r3, #80	; 0x50
 8005644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b50      	cmp	r3, #80	; 0x50
 800564a:	d00a      	beq.n	8005662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	61bb      	str	r3, [r7, #24]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00d      	beq.n	800568a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800566e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f805 	bl	8005694 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800568c:	4618      	mov	r0, r3
 800568e:	3730      	adds	r7, #48	; 0x30
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e002      	b.n	80056b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056c2:	2101      	movs	r1, #1
 80056c4:	69b8      	ldr	r0, [r7, #24]
 80056c6:	f7ff ff05 	bl	80054d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056ea:	2300      	movs	r3, #0
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericSend+0x32>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <xQueueGenericSend+0x40>
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <xQueueGenericSend+0x44>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <xQueueGenericSend+0x46>
 8005720:	2300      	movs	r3, #0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <xQueueGenericSend+0x60>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x6e>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <xQueueGenericSend+0x72>
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <xQueueGenericSend+0x74>
 800574e:	2300      	movs	r3, #0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xQueueGenericSend+0x8e>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	623b      	str	r3, [r7, #32]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800576a:	f001 f9bd 	bl	8006ae8 <xTaskGetSchedulerState>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <xQueueGenericSend+0x9e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <xQueueGenericSend+0xa2>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xQueueGenericSend+0xa4>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xQueueGenericSend+0xbe>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	61fb      	str	r3, [r7, #28]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800579a:	f001 ff03 	bl	80075a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <xQueueGenericSend+0xd4>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d129      	bne.n	8005804 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	68b9      	ldr	r1, [r7, #8]
 80057b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b6:	f000 fa0b 	bl	8005bd0 <prvCopyDataToQueue>
 80057ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d010      	beq.n	80057e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	3324      	adds	r3, #36	; 0x24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 ffcf 	bl	800676c <xTaskRemoveFromEventList>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057d4:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <xQueueGenericSend+0x1f8>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	e00a      	b.n	80057fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057ec:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <xQueueGenericSend+0x1f8>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057fc:	f001 ff02 	bl	8007604 <vPortExitCritical>
				return pdPASS;
 8005800:	2301      	movs	r3, #1
 8005802:	e063      	b.n	80058cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800580a:	f001 fefb 	bl	8007604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800580e:	2300      	movs	r3, #0
 8005810:	e05c      	b.n	80058cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	4618      	mov	r0, r3
 800581e:	f001 f809 	bl	8006834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005822:	2301      	movs	r3, #1
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005826:	f001 feed 	bl	8007604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800582a:	f000 fd7b 	bl	8006324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800582e:	f001 feb9 	bl	80075a4 <vPortEnterCritical>
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005838:	b25b      	sxtb	r3, r3
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583e:	d103      	bne.n	8005848 <xQueueGenericSend+0x16c>
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800584e:	b25b      	sxtb	r3, r3
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005854:	d103      	bne.n	800585e <xQueueGenericSend+0x182>
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800585e:	f001 fed1 	bl	8007604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005862:	1d3a      	adds	r2, r7, #4
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f000 fff8 	bl	8006860 <xTaskCheckForTimeOut>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d124      	bne.n	80058c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005878:	f000 faa2 	bl	8005dc0 <prvIsQueueFull>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d018      	beq.n	80058b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	3310      	adds	r3, #16
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4611      	mov	r1, r2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 ff1e 	bl	80066cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005892:	f000 fa2d 	bl	8005cf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005896:	f000 fd53 	bl	8006340 <xTaskResumeAll>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f af7c 	bne.w	800579a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058a2:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <xQueueGenericSend+0x1f8>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	e772      	b.n	800579a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b6:	f000 fa1b 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058ba:	f000 fd41 	bl	8006340 <xTaskResumeAll>
 80058be:	e76c      	b.n	800579a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058c2:	f000 fa15 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058c6:	f000 fd3b 	bl	8006340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3738      	adds	r7, #56	; 0x38
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	e000ed04 	.word	0xe000ed04

080058d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b090      	sub	sp, #64	; 0x40
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <xQueueGenericSendFromISR+0x3c>
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <xQueueGenericSendFromISR+0x40>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <xQueueGenericSendFromISR+0x42>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d103      	bne.n	8005942 <xQueueGenericSendFromISR+0x6a>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <xQueueGenericSendFromISR+0x6e>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGenericSendFromISR+0x70>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	623b      	str	r3, [r7, #32]
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005962:	f001 ff01 	bl	8007768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005966:	f3ef 8211 	mrs	r2, BASEPRI
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	61fa      	str	r2, [r7, #28]
 800597c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800597e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <xQueueGenericSendFromISR+0xbc>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d12f      	bne.n	80059f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059aa:	f000 f911 	bl	8005bd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b6:	d112      	bne.n	80059de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d016      	beq.n	80059ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	3324      	adds	r3, #36	; 0x24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fed1 	bl	800676c <xTaskRemoveFromEventList>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00e      	beq.n	80059ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e007      	b.n	80059ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059e2:	3301      	adds	r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	b25a      	sxtb	r2, r3
 80059e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059ee:	2301      	movs	r3, #1
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059f2:	e001      	b.n	80059f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3740      	adds	r7, #64	; 0x40
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08c      	sub	sp, #48	; 0x30
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <xQueueReceive+0x30>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	623b      	str	r3, [r7, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueReceive+0x3e>
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueReceive+0x42>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueReceive+0x44>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueReceive+0x5e>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61fb      	str	r3, [r7, #28]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a6e:	f001 f83b 	bl	8006ae8 <xTaskGetSchedulerState>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d102      	bne.n	8005a7e <xQueueReceive+0x6e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <xQueueReceive+0x72>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <xQueueReceive+0x74>
 8005a82:	2300      	movs	r3, #0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <xQueueReceive+0x8e>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	61bb      	str	r3, [r7, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a9e:	f001 fd81 	bl	80075a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01f      	beq.n	8005aee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ab2:	f000 f8f7 	bl	8005ca4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00f      	beq.n	8005ae6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	3310      	adds	r3, #16
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fe4e 	bl	800676c <xTaskRemoveFromEventList>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ad6:	4b3d      	ldr	r3, [pc, #244]	; (8005bcc <xQueueReceive+0x1bc>)
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ae6:	f001 fd8d 	bl	8007604 <vPortExitCritical>
				return pdPASS;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e069      	b.n	8005bc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005af4:	f001 fd86 	bl	8007604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e062      	b.n	8005bc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b02:	f107 0310 	add.w	r3, r7, #16
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fe94 	bl	8006834 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b10:	f001 fd78 	bl	8007604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b14:	f000 fc06 	bl	8006324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b18:	f001 fd44 	bl	80075a4 <vPortEnterCritical>
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b28:	d103      	bne.n	8005b32 <xQueueReceive+0x122>
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b3e:	d103      	bne.n	8005b48 <xQueueReceive+0x138>
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b48:	f001 fd5c 	bl	8007604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b4c:	1d3a      	adds	r2, r7, #4
 8005b4e:	f107 0310 	add.w	r3, r7, #16
 8005b52:	4611      	mov	r1, r2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fe83 	bl	8006860 <xTaskCheckForTimeOut>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d123      	bne.n	8005ba8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b62:	f000 f917 	bl	8005d94 <prvIsQueueEmpty>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d017      	beq.n	8005b9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	3324      	adds	r3, #36	; 0x24
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fda9 	bl	80066cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7c:	f000 f8b8 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b80:	f000 fbde 	bl	8006340 <xTaskResumeAll>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d189      	bne.n	8005a9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <xQueueReceive+0x1bc>)
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	e780      	b.n	8005a9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b9e:	f000 f8a7 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba2:	f000 fbcd 	bl	8006340 <xTaskResumeAll>
 8005ba6:	e77a      	b.n	8005a9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005baa:	f000 f8a1 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bae:	f000 fbc7 	bl	8006340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb4:	f000 f8ee 	bl	8005d94 <prvIsQueueEmpty>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f43f af6f 	beq.w	8005a9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3730      	adds	r7, #48	; 0x30
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10d      	bne.n	8005c0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d14d      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 ff92 	bl	8006b24 <xTaskPriorityDisinherit>
 8005c00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e043      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d119      	bne.n	8005c44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6858      	ldr	r0, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	461a      	mov	r2, r3
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	f001 fff8 	bl	8007c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d32b      	bcc.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e026      	b.n	8005c92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68d8      	ldr	r0, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	f001 ffde 	bl	8007c10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	425b      	negs	r3, r3
 8005c5e:	441a      	add	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d207      	bcs.n	8005c80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	425b      	negs	r3, r3
 8005c7a:	441a      	add	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d105      	bne.n	8005c92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c9a:	697b      	ldr	r3, [r7, #20]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	441a      	add	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d303      	bcc.n	8005cd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68d9      	ldr	r1, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6838      	ldr	r0, [r7, #0]
 8005ce4:	f001 ff94 	bl	8007c10 <memcpy>
	}
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf8:	f001 fc54 	bl	80075a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d04:	e011      	b.n	8005d2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d012      	beq.n	8005d34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd2a 	bl	800676c <xTaskRemoveFromEventList>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1e:	f000 fe01 	bl	8006924 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dce9      	bgt.n	8005d06 <prvUnlockQueue+0x16>
 8005d32:	e000      	b.n	8005d36 <prvUnlockQueue+0x46>
					break;
 8005d34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d3e:	f001 fc61 	bl	8007604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d42:	f001 fc2f 	bl	80075a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4e:	e011      	b.n	8005d74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d012      	beq.n	8005d7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3310      	adds	r3, #16
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fd05 	bl	800676c <xTaskRemoveFromEventList>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d68:	f000 fddc 	bl	8006924 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dce9      	bgt.n	8005d50 <prvUnlockQueue+0x60>
 8005d7c:	e000      	b.n	8005d80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	22ff      	movs	r2, #255	; 0xff
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d88:	f001 fc3c 	bl	8007604 <vPortExitCritical>
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d9c:	f001 fc02 	bl	80075a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e001      	b.n	8005db2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f001 fc27 	bl	8007604 <vPortExitCritical>

	return xReturn;
 8005db6:	68fb      	ldr	r3, [r7, #12]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc8:	f001 fbec 	bl	80075a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d102      	bne.n	8005dde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e001      	b.n	8005de2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005de2:	f001 fc0f 	bl	8007604 <vPortExitCritical>

	return xReturn;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e014      	b.n	8005e2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e00:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e0c:	490c      	ldr	r1, [pc, #48]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <vQueueAddToRegistry+0x50>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e22:	e006      	b.n	8005e32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b07      	cmp	r3, #7
 8005e2e:	d9e7      	bls.n	8005e00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20001c00 	.word	0x20001c00

08005e44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e54:	f001 fba6 	bl	80075a4 <vPortEnterCritical>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e5e:	b25b      	sxtb	r3, r3
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e64:	d103      	bne.n	8005e6e <vQueueWaitForMessageRestricted+0x2a>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e74:	b25b      	sxtb	r3, r3
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7a:	d103      	bne.n	8005e84 <vQueueWaitForMessageRestricted+0x40>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e84:	f001 fbbe 	bl	8007604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3324      	adds	r3, #36	; 0x24
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fc3b 	bl	8006714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e9e:	6978      	ldr	r0, [r7, #20]
 8005ea0:	f7ff ff26 	bl	8005cf0 <prvUnlockQueue>
	}
 8005ea4:	bf00      	nop
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af04      	add	r7, sp, #16
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	623b      	str	r3, [r7, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61fb      	str	r3, [r7, #28]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ef2:	235c      	movs	r3, #92	; 0x5c
 8005ef4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8005efa:	d00a      	beq.n	8005f12 <xTaskCreateStatic+0x66>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61bb      	str	r3, [r7, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01e      	beq.n	8005f58 <xTaskCreateStatic+0xac>
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f32:	2300      	movs	r3, #0
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	9302      	str	r3, [sp, #8]
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 f850 	bl	8005ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f52:	f000 f8dd 	bl	8006110 <prvAddNewTaskToReadyList>
 8005f56:	e001      	b.n	8005f5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f5c:	697b      	ldr	r3, [r7, #20]
	}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3728      	adds	r7, #40	; 0x28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b08c      	sub	sp, #48	; 0x30
 8005f6a:	af04      	add	r7, sp, #16
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fc34 	bl	80077e8 <pvPortMalloc>
 8005f80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f88:	205c      	movs	r0, #92	; 0x5c
 8005f8a:	f001 fc2d 	bl	80077e8 <pvPortMalloc>
 8005f8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f9c:	e005      	b.n	8005faa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f001 fcee 	bl	8007980 <vPortFree>
 8005fa4:	e001      	b.n	8005faa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d017      	beq.n	8005fe0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fb8:	88fa      	ldrh	r2, [r7, #6]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	9303      	str	r3, [sp, #12]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	9302      	str	r3, [sp, #8]
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 f80e 	bl	8005ff0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fd4:	69f8      	ldr	r0, [r7, #28]
 8005fd6:	f000 f89b 	bl	8006110 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e002      	b.n	8005fe6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
	}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	461a      	mov	r2, r3
 8006008:	21a5      	movs	r1, #165	; 0xa5
 800600a:	f001 fe0f 	bl	8007c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006018:	3b01      	subs	r3, #1
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	617b      	str	r3, [r7, #20]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d01f      	beq.n	800608e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
 8006052:	e012      	b.n	800607a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4413      	add	r3, r2
 800605a:	7819      	ldrb	r1, [r3, #0]
 800605c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	3334      	adds	r3, #52	; 0x34
 8006064:	460a      	mov	r2, r1
 8006066:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d006      	beq.n	8006082 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3301      	adds	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d9e9      	bls.n	8006054 <prvInitialiseNewTask+0x64>
 8006080:	e000      	b.n	8006084 <prvInitialiseNewTask+0x94>
			{
				break;
 8006082:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800608c:	e003      	b.n	8006096 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	2b37      	cmp	r3, #55	; 0x37
 800609a:	d901      	bls.n	80060a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800609c:	2337      	movs	r3, #55	; 0x37
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	2200      	movs	r2, #0
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff f978 	bl	80053ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	3318      	adds	r3, #24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff f973 	bl	80053ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	2200      	movs	r2, #0
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	68f9      	ldr	r1, [r7, #12]
 80060ee:	69b8      	ldr	r0, [r7, #24]
 80060f0:	f001 f928 	bl	8007344 <pxPortInitialiseStack>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006106:	bf00      	nop
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006118:	f001 fa44 	bl	80075a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800611c:	4b2d      	ldr	r3, [pc, #180]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006124:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006126:	4b2c      	ldr	r3, [pc, #176]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800612e:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <prvAddNewTaskToReadyList+0xc4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d110      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800613c:	f000 fc16 	bl	800696c <prvInitialiseTaskLists>
 8006140:	e00d      	b.n	800615e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006142:	4b26      	ldr	r3, [pc, #152]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006158:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3301      	adds	r3, #1
 8006164:	4a1e      	ldr	r2, [pc, #120]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 8006166:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <prvAddNewTaskToReadyList+0xd0>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <prvAddNewTaskToReadyList+0x74>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <prvAddNewTaskToReadyList+0xd4>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <prvAddNewTaskToReadyList+0xd8>)
 8006192:	441a      	add	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7ff f913 	bl	80053c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061a0:	f001 fa30 	bl	8007604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061a4:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <prvAddNewTaskToReadyList+0xcc>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00e      	beq.n	80061ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <prvAddNewTaskToReadyList+0xc8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d207      	bcs.n	80061ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <prvAddNewTaskToReadyList+0xdc>)
 80061bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000d90 	.word	0x20000d90
 80061d8:	200008bc 	.word	0x200008bc
 80061dc:	20000d9c 	.word	0x20000d9c
 80061e0:	20000dac 	.word	0x20000dac
 80061e4:	20000d98 	.word	0x20000d98
 80061e8:	200008c0 	.word	0x200008c0
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d017      	beq.n	8006232 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006202:	4b13      	ldr	r3, [pc, #76]	; (8006250 <vTaskDelay+0x60>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <vTaskDelay+0x30>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	60bb      	str	r3, [r7, #8]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006220:	f000 f880 	bl	8006324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fcea 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800622c:	f000 f888 	bl	8006340 <xTaskResumeAll>
 8006230:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006238:	4b06      	ldr	r3, [pc, #24]	; (8006254 <vTaskDelay+0x64>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000db8 	.word	0x20000db8
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006266:	463a      	mov	r2, r7
 8006268:	1d39      	adds	r1, r7, #4
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f848 	bl	8005304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	9301      	str	r3, [sp, #4]
 800627e:	2300      	movs	r3, #0
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2300      	movs	r3, #0
 8006284:	460a      	mov	r2, r1
 8006286:	4921      	ldr	r1, [pc, #132]	; (800630c <vTaskStartScheduler+0xb4>)
 8006288:	4821      	ldr	r0, [pc, #132]	; (8006310 <vTaskStartScheduler+0xb8>)
 800628a:	f7ff fe0f 	bl	8005eac <xTaskCreateStatic>
 800628e:	4603      	mov	r3, r0
 8006290:	4a20      	ldr	r2, [pc, #128]	; (8006314 <vTaskStartScheduler+0xbc>)
 8006292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006294:	4b1f      	ldr	r3, [pc, #124]	; (8006314 <vTaskStartScheduler+0xbc>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800629c:	2301      	movs	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e001      	b.n	80062a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062ac:	f000 fcfc 	bl	8006ca8 <xTimerCreateTimerTask>
 80062b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d116      	bne.n	80062e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80062b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062bc:	f383 8811 	msr	BASEPRI, r3
 80062c0:	f3bf 8f6f 	isb	sy
 80062c4:	f3bf 8f4f 	dsb	sy
 80062c8:	613b      	str	r3, [r7, #16]
}
 80062ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <vTaskStartScheduler+0xc0>)
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062d4:	4b11      	ldr	r3, [pc, #68]	; (800631c <vTaskStartScheduler+0xc4>)
 80062d6:	2201      	movs	r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062da:	4b11      	ldr	r3, [pc, #68]	; (8006320 <vTaskStartScheduler+0xc8>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062e0:	f001 f8be 	bl	8007460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062e4:	e00e      	b.n	8006304 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ec:	d10a      	bne.n	8006304 <vTaskStartScheduler+0xac>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	60fb      	str	r3, [r7, #12]
}
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <vTaskStartScheduler+0xaa>
}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	0800a958 	.word	0x0800a958
 8006310:	0800693d 	.word	0x0800693d
 8006314:	20000db4 	.word	0x20000db4
 8006318:	20000db0 	.word	0x20000db0
 800631c:	20000d9c 	.word	0x20000d9c
 8006320:	20000d94 	.word	0x20000d94

08006324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <vTaskSuspendAll+0x18>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	4a03      	ldr	r2, [pc, #12]	; (800633c <vTaskSuspendAll+0x18>)
 8006330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006332:	bf00      	nop
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000db8 	.word	0x20000db8

08006340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800634e:	4b42      	ldr	r3, [pc, #264]	; (8006458 <xTaskResumeAll+0x118>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <xTaskResumeAll+0x2c>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	603b      	str	r3, [r7, #0]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800636c:	f001 f91a 	bl	80075a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006370:	4b39      	ldr	r3, [pc, #228]	; (8006458 <xTaskResumeAll+0x118>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	4a38      	ldr	r2, [pc, #224]	; (8006458 <xTaskResumeAll+0x118>)
 8006378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <xTaskResumeAll+0x118>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d162      	bne.n	8006448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006382:	4b36      	ldr	r3, [pc, #216]	; (800645c <xTaskResumeAll+0x11c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d05e      	beq.n	8006448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638a:	e02f      	b.n	80063ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638c:	4b34      	ldr	r3, [pc, #208]	; (8006460 <xTaskResumeAll+0x120>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3318      	adds	r3, #24
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff f871 	bl	8005480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3304      	adds	r3, #4
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f86c 	bl	8005480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4b2d      	ldr	r3, [pc, #180]	; (8006464 <xTaskResumeAll+0x124>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d903      	bls.n	80063bc <xTaskResumeAll+0x7c>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <xTaskResumeAll+0x124>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4a27      	ldr	r2, [pc, #156]	; (8006468 <xTaskResumeAll+0x128>)
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f7fe fff7 	bl	80053c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <xTaskResumeAll+0x12c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <xTaskResumeAll+0x130>)
 80063e8:	2201      	movs	r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <xTaskResumeAll+0x120>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1cb      	bne.n	800638c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063fa:	f000 fb55 	bl	8006aa8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063fe:	4b1d      	ldr	r3, [pc, #116]	; (8006474 <xTaskResumeAll+0x134>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d010      	beq.n	800642c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800640a:	f000 f847 	bl	800649c <xTaskIncrementTick>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006414:	4b16      	ldr	r3, [pc, #88]	; (8006470 <xTaskResumeAll+0x130>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3b01      	subs	r3, #1
 800641e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1f1      	bne.n	800640a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006426:	4b13      	ldr	r3, [pc, #76]	; (8006474 <xTaskResumeAll+0x134>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <xTaskResumeAll+0x130>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006434:	2301      	movs	r3, #1
 8006436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <xTaskResumeAll+0x138>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006448:	f001 f8dc 	bl	8007604 <vPortExitCritical>

	return xAlreadyYielded;
 800644c:	68bb      	ldr	r3, [r7, #8]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000db8 	.word	0x20000db8
 800645c:	20000d90 	.word	0x20000d90
 8006460:	20000d50 	.word	0x20000d50
 8006464:	20000d98 	.word	0x20000d98
 8006468:	200008c0 	.word	0x200008c0
 800646c:	200008bc 	.word	0x200008bc
 8006470:	20000da4 	.word	0x20000da4
 8006474:	20000da0 	.word	0x20000da0
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006482:	4b05      	ldr	r3, [pc, #20]	; (8006498 <xTaskGetTickCount+0x1c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006488:	687b      	ldr	r3, [r7, #4]
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20000d94 	.word	0x20000d94

0800649c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a6:	4b4f      	ldr	r3, [pc, #316]	; (80065e4 <xTaskIncrementTick+0x148>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 808f 	bne.w	80065ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064b0:	4b4d      	ldr	r3, [pc, #308]	; (80065e8 <xTaskIncrementTick+0x14c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b8:	4a4b      	ldr	r2, [pc, #300]	; (80065e8 <xTaskIncrementTick+0x14c>)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d120      	bne.n	8006506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <xTaskIncrementTick+0x150>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	603b      	str	r3, [r7, #0]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xTaskIncrementTick+0x46>
 80064e4:	4b41      	ldr	r3, [pc, #260]	; (80065ec <xTaskIncrementTick+0x150>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	4b41      	ldr	r3, [pc, #260]	; (80065f0 <xTaskIncrementTick+0x154>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a3f      	ldr	r2, [pc, #252]	; (80065ec <xTaskIncrementTick+0x150>)
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4a3f      	ldr	r2, [pc, #252]	; (80065f0 <xTaskIncrementTick+0x154>)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <xTaskIncrementTick+0x158>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	4a3d      	ldr	r2, [pc, #244]	; (80065f4 <xTaskIncrementTick+0x158>)
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	f000 fad1 	bl	8006aa8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006506:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <xTaskIncrementTick+0x15c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	429a      	cmp	r2, r3
 800650e:	d349      	bcc.n	80065a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <xTaskIncrementTick+0x150>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800651a:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <xTaskIncrementTick+0x15c>)
 800651c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006520:	601a      	str	r2, [r3, #0]
					break;
 8006522:	e03f      	b.n	80065a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006524:	4b31      	ldr	r3, [pc, #196]	; (80065ec <xTaskIncrementTick+0x150>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d203      	bcs.n	8006544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800653c:	4a2e      	ldr	r2, [pc, #184]	; (80065f8 <xTaskIncrementTick+0x15c>)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006542:	e02f      	b.n	80065a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe ff99 	bl	8005480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d004      	beq.n	8006560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	3318      	adds	r3, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe ff90 	bl	8005480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <xTaskIncrementTick+0x160>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d903      	bls.n	8006574 <xTaskIncrementTick+0xd8>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <xTaskIncrementTick+0x160>)
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <xTaskIncrementTick+0x164>)
 8006582:	441a      	add	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3304      	adds	r3, #4
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f7fe ff1b 	bl	80053c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <xTaskIncrementTick+0x168>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	429a      	cmp	r2, r3
 800659c:	d3b8      	bcc.n	8006510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a2:	e7b5      	b.n	8006510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a4:	4b17      	ldr	r3, [pc, #92]	; (8006604 <xTaskIncrementTick+0x168>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	4915      	ldr	r1, [pc, #84]	; (8006600 <xTaskIncrementTick+0x164>)
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d901      	bls.n	80065c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065c0:	4b11      	ldr	r3, [pc, #68]	; (8006608 <xTaskIncrementTick+0x16c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e004      	b.n	80065d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <xTaskIncrementTick+0x170>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <xTaskIncrementTick+0x170>)
 80065d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000db8 	.word	0x20000db8
 80065e8:	20000d94 	.word	0x20000d94
 80065ec:	20000d48 	.word	0x20000d48
 80065f0:	20000d4c 	.word	0x20000d4c
 80065f4:	20000da8 	.word	0x20000da8
 80065f8:	20000db0 	.word	0x20000db0
 80065fc:	20000d98 	.word	0x20000d98
 8006600:	200008c0 	.word	0x200008c0
 8006604:	200008bc 	.word	0x200008bc
 8006608:	20000da4 	.word	0x20000da4
 800660c:	20000da0 	.word	0x20000da0

08006610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006616:	4b28      	ldr	r3, [pc, #160]	; (80066b8 <vTaskSwitchContext+0xa8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800661e:	4b27      	ldr	r3, [pc, #156]	; (80066bc <vTaskSwitchContext+0xac>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006624:	e041      	b.n	80066aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006626:	4b25      	ldr	r3, [pc, #148]	; (80066bc <vTaskSwitchContext+0xac>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <vTaskSwitchContext+0xb0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e010      	b.n	8006656 <vTaskSwitchContext+0x46>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <vTaskSwitchContext+0x40>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	607b      	str	r3, [r7, #4]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <vTaskSwitchContext+0x3e>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3b01      	subs	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	491b      	ldr	r1, [pc, #108]	; (80066c4 <vTaskSwitchContext+0xb4>)
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0e4      	beq.n	8006634 <vTaskSwitchContext+0x24>
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <vTaskSwitchContext+0xb4>)
 8006676:	4413      	add	r3, r2
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	3308      	adds	r3, #8
 800668c:	429a      	cmp	r2, r3
 800668e:	d104      	bne.n	800669a <vTaskSwitchContext+0x8a>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <vTaskSwitchContext+0xb8>)
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4a06      	ldr	r2, [pc, #24]	; (80066c0 <vTaskSwitchContext+0xb0>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000db8 	.word	0x20000db8
 80066bc:	20000da4 	.word	0x20000da4
 80066c0:	20000d98 	.word	0x20000d98
 80066c4:	200008c0 	.word	0x200008c0
 80066c8:	200008bc 	.word	0x200008bc

080066cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <vTaskPlaceOnEventList+0x44>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fe fe87 	bl	800540e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006700:	2101      	movs	r1, #1
 8006702:	6838      	ldr	r0, [r7, #0]
 8006704:	f000 fa7c 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200008bc 	.word	0x200008bc

08006714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	617b      	str	r3, [r7, #20]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800673c:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <vTaskPlaceOnEventListRestricted+0x54>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3318      	adds	r3, #24
 8006742:	4619      	mov	r1, r3
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7fe fe3e 	bl	80053c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006754:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006756:	6879      	ldr	r1, [r7, #4]
 8006758:	68b8      	ldr	r0, [r7, #8]
 800675a:	f000 fa51 	bl	8006c00 <prvAddCurrentTaskToDelayedList>
	}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200008bc 	.word	0x200008bc

0800676c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60fb      	str	r3, [r7, #12]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3318      	adds	r3, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fe6f 	bl	8005480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067a2:	4b1e      	ldr	r3, [pc, #120]	; (800681c <xTaskRemoveFromEventList+0xb0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11d      	bne.n	80067e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fe66 	bl	8005480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b8:	4b19      	ldr	r3, [pc, #100]	; (8006820 <xTaskRemoveFromEventList+0xb4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d903      	bls.n	80067c8 <xTaskRemoveFromEventList+0x5c>
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <xTaskRemoveFromEventList+0xb4>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4a13      	ldr	r2, [pc, #76]	; (8006824 <xTaskRemoveFromEventList+0xb8>)
 80067d6:	441a      	add	r2, r3
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	3304      	adds	r3, #4
 80067dc:	4619      	mov	r1, r3
 80067de:	4610      	mov	r0, r2
 80067e0:	f7fe fdf1 	bl	80053c6 <vListInsertEnd>
 80067e4:	e005      	b.n	80067f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3318      	adds	r3, #24
 80067ea:	4619      	mov	r1, r3
 80067ec:	480e      	ldr	r0, [pc, #56]	; (8006828 <xTaskRemoveFromEventList+0xbc>)
 80067ee:	f7fe fdea 	bl	80053c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	4b0d      	ldr	r3, [pc, #52]	; (800682c <xTaskRemoveFromEventList+0xc0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d905      	bls.n	800680c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006800:	2301      	movs	r3, #1
 8006802:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006804:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <xTaskRemoveFromEventList+0xc4>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e001      	b.n	8006810 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006810:	697b      	ldr	r3, [r7, #20]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000db8 	.word	0x20000db8
 8006820:	20000d98 	.word	0x20000d98
 8006824:	200008c0 	.word	0x200008c0
 8006828:	20000d50 	.word	0x20000d50
 800682c:	200008bc 	.word	0x200008bc
 8006830:	20000da4 	.word	0x20000da4

08006834 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <vTaskInternalSetTimeOutState+0x24>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <vTaskInternalSetTimeOutState+0x28>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	605a      	str	r2, [r3, #4]
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	20000da8 	.word	0x20000da8
 800685c:	20000d94 	.word	0x20000d94

08006860 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10a      	bne.n	80068a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800688c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	60fb      	str	r3, [r7, #12]
}
 800689e:	bf00      	nop
 80068a0:	e7fe      	b.n	80068a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068a2:	f000 fe7f 	bl	80075a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068a6:	4b1d      	ldr	r3, [pc, #116]	; (800691c <xTaskCheckForTimeOut+0xbc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068be:	d102      	bne.n	80068c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e023      	b.n	800690e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b15      	ldr	r3, [pc, #84]	; (8006920 <xTaskCheckForTimeOut+0xc0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d007      	beq.n	80068e2 <xTaskCheckForTimeOut+0x82>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d302      	bcc.n	80068e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e015      	b.n	800690e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d20b      	bcs.n	8006904 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	1ad2      	subs	r2, r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ff9b 	bl	8006834 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	e004      	b.n	800690e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800690e:	f000 fe79 	bl	8007604 <vPortExitCritical>

	return xReturn;
 8006912:	69fb      	ldr	r3, [r7, #28]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000d94 	.word	0x20000d94
 8006920:	20000da8 	.word	0x20000da8

08006924 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006928:	4b03      	ldr	r3, [pc, #12]	; (8006938 <vTaskMissedYield+0x14>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
}
 800692e:	bf00      	nop
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000da4 	.word	0x20000da4

0800693c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006944:	f000 f852 	bl	80069ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <prvIdleTask+0x28>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d9f9      	bls.n	8006944 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <prvIdleTask+0x2c>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006960:	e7f0      	b.n	8006944 <prvIdleTask+0x8>
 8006962:	bf00      	nop
 8006964:	200008c0 	.word	0x200008c0
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006972:	2300      	movs	r3, #0
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	e00c      	b.n	8006992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <prvInitialiseTaskLists+0x60>)
 8006984:	4413      	add	r3, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fcf0 	bl	800536c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3301      	adds	r3, #1
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b37      	cmp	r3, #55	; 0x37
 8006996:	d9ef      	bls.n	8006978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006998:	480d      	ldr	r0, [pc, #52]	; (80069d0 <prvInitialiseTaskLists+0x64>)
 800699a:	f7fe fce7 	bl	800536c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <prvInitialiseTaskLists+0x68>)
 80069a0:	f7fe fce4 	bl	800536c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069a4:	480c      	ldr	r0, [pc, #48]	; (80069d8 <prvInitialiseTaskLists+0x6c>)
 80069a6:	f7fe fce1 	bl	800536c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069aa:	480c      	ldr	r0, [pc, #48]	; (80069dc <prvInitialiseTaskLists+0x70>)
 80069ac:	f7fe fcde 	bl	800536c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069b0:	480b      	ldr	r0, [pc, #44]	; (80069e0 <prvInitialiseTaskLists+0x74>)
 80069b2:	f7fe fcdb 	bl	800536c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <prvInitialiseTaskLists+0x78>)
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <prvInitialiseTaskLists+0x64>)
 80069ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <prvInitialiseTaskLists+0x7c>)
 80069be:	4a05      	ldr	r2, [pc, #20]	; (80069d4 <prvInitialiseTaskLists+0x68>)
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200008c0 	.word	0x200008c0
 80069d0:	20000d20 	.word	0x20000d20
 80069d4:	20000d34 	.word	0x20000d34
 80069d8:	20000d50 	.word	0x20000d50
 80069dc:	20000d64 	.word	0x20000d64
 80069e0:	20000d7c 	.word	0x20000d7c
 80069e4:	20000d48 	.word	0x20000d48
 80069e8:	20000d4c 	.word	0x20000d4c

080069ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069f2:	e019      	b.n	8006a28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069f4:	f000 fdd6 	bl	80075a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f8:	4b10      	ldr	r3, [pc, #64]	; (8006a3c <prvCheckTasksWaitingTermination+0x50>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe fd3b 	bl	8005480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <prvCheckTasksWaitingTermination+0x54>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	4a0b      	ldr	r2, [pc, #44]	; (8006a40 <prvCheckTasksWaitingTermination+0x54>)
 8006a12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <prvCheckTasksWaitingTermination+0x58>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <prvCheckTasksWaitingTermination+0x58>)
 8006a1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a1e:	f000 fdf1 	bl	8007604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f810 	bl	8006a48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a28:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <prvCheckTasksWaitingTermination+0x58>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e1      	bne.n	80069f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000d64 	.word	0x20000d64
 8006a40:	20000d90 	.word	0x20000d90
 8006a44:	20000d78 	.word	0x20000d78

08006a48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d108      	bne.n	8006a6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 ff8e 	bl	8007980 <vPortFree>
				vPortFree( pxTCB );
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 ff8b 	bl	8007980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a6a:	e018      	b.n	8006a9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d103      	bne.n	8006a7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 ff82 	bl	8007980 <vPortFree>
	}
 8006a7c:	e00f      	b.n	8006a9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d00a      	beq.n	8006a9e <prvDeleteTCB+0x56>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <prvDeleteTCB+0x54>
	}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <prvResetNextTaskUnblockTime+0x38>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006abe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ac0:	e008      	b.n	8006ad4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <prvResetNextTaskUnblockTime+0x38>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4a04      	ldr	r2, [pc, #16]	; (8006ae4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20000d48 	.word	0x20000d48
 8006ae4:	20000db0 	.word	0x20000db0

08006ae8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <xTaskGetSchedulerState+0x34>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006af6:	2301      	movs	r3, #1
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	e008      	b.n	8006b0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <xTaskGetSchedulerState+0x38>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b04:	2302      	movs	r3, #2
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e001      	b.n	8006b0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b0e:	687b      	ldr	r3, [r7, #4]
	}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	20000d9c 	.word	0x20000d9c
 8006b20:	20000db8 	.word	0x20000db8

08006b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d056      	beq.n	8006be8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	; (8006bf4 <xTaskPriorityDisinherit+0xd0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d00a      	beq.n	8006b5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
}
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60bb      	str	r3, [r7, #8]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d02c      	beq.n	8006be8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d128      	bne.n	8006be8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fc70 	bl	8005480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <xTaskPriorityDisinherit+0xd4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <xTaskPriorityDisinherit+0xa4>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <xTaskPriorityDisinherit+0xd4>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <xTaskPriorityDisinherit+0xd8>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7fe fbf1 	bl	80053c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006be8:	697b      	ldr	r3, [r7, #20]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	200008bc 	.word	0x200008bc
 8006bf8:	20000d98 	.word	0x20000d98
 8006bfc:	200008c0 	.word	0x200008c0

08006c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c0a:	4b21      	ldr	r3, [pc, #132]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c10:	4b20      	ldr	r3, [pc, #128]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc32 	bl	8005480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c22:	d10a      	bne.n	8006c3a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c2a:	4b1a      	ldr	r3, [pc, #104]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	4819      	ldr	r0, [pc, #100]	; (8006c98 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c34:	f7fe fbc7 	bl	80053c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c38:	e026      	b.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4413      	add	r3, r2
 8006c40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d209      	bcs.n	8006c66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7fe fbd5 	bl	800540e <vListInsert>
}
 8006c64:	e010      	b.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f7fe fbcb 	bl	800540e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d202      	bcs.n	8006c88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c82:	4a08      	ldr	r2, [pc, #32]	; (8006ca4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6013      	str	r3, [r2, #0]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20000d94 	.word	0x20000d94
 8006c94:	200008bc 	.word	0x200008bc
 8006c98:	20000d7c 	.word	0x20000d7c
 8006c9c:	20000d4c 	.word	0x20000d4c
 8006ca0:	20000d48 	.word	0x20000d48
 8006ca4:	20000db0 	.word	0x20000db0

08006ca8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cb2:	f000 fb07 	bl	80072c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <xTimerCreateTimerTask+0x80>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d021      	beq.n	8006d02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cc6:	1d3a      	adds	r2, r7, #4
 8006cc8:	f107 0108 	add.w	r1, r7, #8
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fb31 	bl	8005338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	460a      	mov	r2, r1
 8006ce8:	4910      	ldr	r1, [pc, #64]	; (8006d2c <xTimerCreateTimerTask+0x84>)
 8006cea:	4811      	ldr	r0, [pc, #68]	; (8006d30 <xTimerCreateTimerTask+0x88>)
 8006cec:	f7ff f8de 	bl	8005eac <xTaskCreateStatic>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4a10      	ldr	r2, [pc, #64]	; (8006d34 <xTimerCreateTimerTask+0x8c>)
 8006cf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <xTimerCreateTimerTask+0x8c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	613b      	str	r3, [r7, #16]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d1e:	697b      	ldr	r3, [r7, #20]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000dec 	.word	0x20000dec
 8006d2c:	0800a960 	.word	0x0800a960
 8006d30:	08006e6d 	.word	0x08006e6d
 8006d34:	20000df0 	.word	0x20000df0

08006d38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	; 0x28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	623b      	str	r3, [r7, #32]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d66:	4b1a      	ldr	r3, [pc, #104]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02a      	beq.n	8006dc4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	dc18      	bgt.n	8006db2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d80:	f7ff feb2 	bl	8006ae8 <xTaskGetSchedulerState>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d109      	bne.n	8006d9e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f107 0110 	add.w	r1, r7, #16
 8006d92:	2300      	movs	r3, #0
 8006d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d96:	f7fe fca1 	bl	80056dc <xQueueGenericSend>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d9c:	e012      	b.n	8006dc4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f107 0110 	add.w	r1, r7, #16
 8006da6:	2300      	movs	r3, #0
 8006da8:	2200      	movs	r2, #0
 8006daa:	f7fe fc97 	bl	80056dc <xQueueGenericSend>
 8006dae:	6278      	str	r0, [r7, #36]	; 0x24
 8006db0:	e008      	b.n	8006dc4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <xTimerGenericCommand+0x98>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f107 0110 	add.w	r1, r7, #16
 8006dba:	2300      	movs	r3, #0
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	f7fe fd8b 	bl	80058d8 <xQueueGenericSendFromISR>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3728      	adds	r7, #40	; 0x28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000dec 	.word	0x20000dec

08006dd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <prvProcessExpiredTimer+0x94>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fb47 	bl	8005480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d022      	beq.n	8006e46 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	699a      	ldr	r2, [r3, #24]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	18d1      	adds	r1, r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	f000 f8d1 	bl	8006fb4 <prvInsertTimerInActiveList>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01f      	beq.n	8006e58 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	2100      	movs	r1, #0
 8006e22:	6978      	ldr	r0, [r7, #20]
 8006e24:	f7ff ff88 	bl	8006d38 <xTimerGenericCommand>
 8006e28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d113      	bne.n	8006e58 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	6978      	ldr	r0, [r7, #20]
 8006e5e:	4798      	blx	r3
}
 8006e60:	bf00      	nop
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000de4 	.word	0x20000de4

08006e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e74:	f107 0308 	add.w	r3, r7, #8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 f857 	bl	8006f2c <prvGetNextExpireTime>
 8006e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 f803 	bl	8006e90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e8a:	f000 f8d5 	bl	8007038 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e8e:	e7f1      	b.n	8006e74 <prvTimerTask+0x8>

08006e90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e9a:	f7ff fa43 	bl	8006324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f866 	bl	8006f74 <prvSampleTimeNow>
 8006ea8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d130      	bne.n	8006f12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <prvProcessTimerOrBlockTask+0x3c>
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d806      	bhi.n	8006ecc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ebe:	f7ff fa3f 	bl	8006340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ff85 	bl	8006dd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eca:	e024      	b.n	8006f16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ed2:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <prvProcessTimerOrBlockTask+0x90>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <prvProcessTimerOrBlockTask+0x50>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <prvProcessTimerOrBlockTask+0x52>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <prvProcessTimerOrBlockTask+0x94>)
 8006ee6:	6818      	ldr	r0, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	f7fe ffa7 	bl	8005e44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ef6:	f7ff fa23 	bl	8006340 <xTaskResumeAll>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f00:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <prvProcessTimerOrBlockTask+0x98>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
}
 8006f10:	e001      	b.n	8006f16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f12:	f7ff fa15 	bl	8006340 <xTaskResumeAll>
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000de8 	.word	0x20000de8
 8006f24:	20000dec 	.word	0x20000dec
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f34:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <prvGetNextExpireTime+0x44>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <prvGetNextExpireTime+0x16>
 8006f3e:	2201      	movs	r2, #1
 8006f40:	e000      	b.n	8006f44 <prvGetNextExpireTime+0x18>
 8006f42:	2200      	movs	r2, #0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <prvGetNextExpireTime+0x44>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e001      	b.n	8006f60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f60:	68fb      	ldr	r3, [r7, #12]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000de4 	.word	0x20000de4

08006f74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f7c:	f7ff fa7e 	bl	800647c <xTaskGetTickCount>
 8006f80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <prvSampleTimeNow+0x3c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d205      	bcs.n	8006f98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f8c:	f000 f936 	bl	80071fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f9e:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <prvSampleTimeNow+0x3c>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000df4 	.word	0x20000df4

08006fb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d812      	bhi.n	8007000 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d302      	bcc.n	8006fee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e01b      	b.n	8007026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fee:	4b10      	ldr	r3, [pc, #64]	; (8007030 <prvInsertTimerInActiveList+0x7c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7fe fa08 	bl	800540e <vListInsert>
 8006ffe:	e012      	b.n	8007026 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d206      	bcs.n	8007016 <prvInsertTimerInActiveList+0x62>
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e007      	b.n	8007026 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <prvInsertTimerInActiveList+0x80>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fe f9f4 	bl	800540e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007026:	697b      	ldr	r3, [r7, #20]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000de8 	.word	0x20000de8
 8007034:	20000de4 	.word	0x20000de4

08007038 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08e      	sub	sp, #56	; 0x38
 800703c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800703e:	e0ca      	b.n	80071d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da18      	bge.n	8007078 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007046:	1d3b      	adds	r3, r7, #4
 8007048:	3304      	adds	r3, #4
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	61fb      	str	r3, [r7, #28]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706e:	6850      	ldr	r0, [r2, #4]
 8007070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007072:	6892      	ldr	r2, [r2, #8]
 8007074:	4611      	mov	r1, r2
 8007076:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f2c0 80aa 	blt.w	80071d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	3304      	adds	r3, #4
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe f9f5 	bl	8005480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007096:	463b      	mov	r3, r7
 8007098:	4618      	mov	r0, r3
 800709a:	f7ff ff6b 	bl	8006f74 <prvSampleTimeNow>
 800709e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	f200 8097 	bhi.w	80071d6 <prvProcessReceivedCommands+0x19e>
 80070a8:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <prvProcessReceivedCommands+0x78>)
 80070aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ae:	bf00      	nop
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070d9 	.word	0x080070d9
 80070bc:	0800714d 	.word	0x0800714d
 80070c0:	08007161 	.word	0x08007161
 80070c4:	080071ab 	.word	0x080071ab
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070d9 	.word	0x080070d9
 80070d0:	0800714d 	.word	0x0800714d
 80070d4:	08007161 	.word	0x08007161
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	18d1      	adds	r1, r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f8:	f7ff ff5c 	bl	8006fb4 <prvInsertTimerInActiveList>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d069      	beq.n	80071d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007108:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d05e      	beq.n	80071d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	441a      	add	r2, r3
 8007120:	2300      	movs	r3, #0
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	2100      	movs	r1, #0
 8007128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800712a:	f7ff fe05 	bl	8006d38 <xTimerGenericCommand>
 800712e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d14f      	bne.n	80071d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61bb      	str	r3, [r7, #24]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	b2da      	uxtb	r2, r3
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800715e:	e03a      	b.n	80071d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007166:	f043 0301 	orr.w	r3, r3, #1
 800716a:	b2da      	uxtb	r2, r3
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	617b      	str	r3, [r7, #20]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	18d1      	adds	r1, r2, r3
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a4:	f7ff ff06 	bl	8006fb4 <prvInsertTimerInActiveList>
					break;
 80071a8:	e015      	b.n	80071d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d103      	bne.n	80071c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ba:	f000 fbe1 	bl	8007980 <vPortFree>
 80071be:	e00a      	b.n	80071d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071d2:	e000      	b.n	80071d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <prvProcessReceivedCommands+0x1c0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	1d39      	adds	r1, r7, #4
 80071dc:	2200      	movs	r2, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fc16 	bl	8005a10 <xQueueReceive>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f47f af2a 	bne.w	8007040 <prvProcessReceivedCommands+0x8>
	}
}
 80071ec:	bf00      	nop
 80071ee:	bf00      	nop
 80071f0:	3730      	adds	r7, #48	; 0x30
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000dec 	.word	0x20000dec

080071fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007202:	e048      	b.n	8007296 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007204:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <prvSwitchTimerLists+0xc0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720e:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <prvSwitchTimerLists+0xc0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3304      	adds	r3, #4
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe f92f 	bl	8005480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02e      	beq.n	8007296 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4413      	add	r3, r2
 8007240:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	429a      	cmp	r2, r3
 8007248:	d90e      	bls.n	8007268 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007256:	4b19      	ldr	r3, [pc, #100]	; (80072bc <prvSwitchTimerLists+0xc0>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3304      	adds	r3, #4
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7fe f8d4 	bl	800540e <vListInsert>
 8007266:	e016      	b.n	8007296 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007268:	2300      	movs	r3, #0
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	2300      	movs	r3, #0
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	2100      	movs	r1, #0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff fd60 	bl	8006d38 <xTimerGenericCommand>
 8007278:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	603b      	str	r3, [r7, #0]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <prvSwitchTimerLists+0xc0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1b1      	bne.n	8007204 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <prvSwitchTimerLists+0xc0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <prvSwitchTimerLists+0xc4>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a04      	ldr	r2, [pc, #16]	; (80072bc <prvSwitchTimerLists+0xc0>)
 80072ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ae:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <prvSwitchTimerLists+0xc4>)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	6013      	str	r3, [r2, #0]
}
 80072b4:	bf00      	nop
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000de4 	.word	0x20000de4
 80072c0:	20000de8 	.word	0x20000de8

080072c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ca:	f000 f96b 	bl	80075a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ce:	4b15      	ldr	r3, [pc, #84]	; (8007324 <prvCheckForValidListAndQueue+0x60>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d120      	bne.n	8007318 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072d6:	4814      	ldr	r0, [pc, #80]	; (8007328 <prvCheckForValidListAndQueue+0x64>)
 80072d8:	f7fe f848 	bl	800536c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072dc:	4813      	ldr	r0, [pc, #76]	; (800732c <prvCheckForValidListAndQueue+0x68>)
 80072de:	f7fe f845 	bl	800536c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072e2:	4b13      	ldr	r3, [pc, #76]	; (8007330 <prvCheckForValidListAndQueue+0x6c>)
 80072e4:	4a10      	ldr	r2, [pc, #64]	; (8007328 <prvCheckForValidListAndQueue+0x64>)
 80072e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072e8:	4b12      	ldr	r3, [pc, #72]	; (8007334 <prvCheckForValidListAndQueue+0x70>)
 80072ea:	4a10      	ldr	r2, [pc, #64]	; (800732c <prvCheckForValidListAndQueue+0x68>)
 80072ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072ee:	2300      	movs	r3, #0
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4b11      	ldr	r3, [pc, #68]	; (8007338 <prvCheckForValidListAndQueue+0x74>)
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <prvCheckForValidListAndQueue+0x78>)
 80072f6:	2110      	movs	r1, #16
 80072f8:	200a      	movs	r0, #10
 80072fa:	f7fe f953 	bl	80055a4 <xQueueGenericCreateStatic>
 80072fe:	4603      	mov	r3, r0
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <prvCheckForValidListAndQueue+0x60>)
 8007302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <prvCheckForValidListAndQueue+0x60>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800730c:	4b05      	ldr	r3, [pc, #20]	; (8007324 <prvCheckForValidListAndQueue+0x60>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	490b      	ldr	r1, [pc, #44]	; (8007340 <prvCheckForValidListAndQueue+0x7c>)
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd6c 	bl	8005df0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007318:	f000 f974 	bl	8007604 <vPortExitCritical>
}
 800731c:	bf00      	nop
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000dec 	.word	0x20000dec
 8007328:	20000dbc 	.word	0x20000dbc
 800732c:	20000dd0 	.word	0x20000dd0
 8007330:	20000de4 	.word	0x20000de4
 8007334:	20000de8 	.word	0x20000de8
 8007338:	20000e98 	.word	0x20000e98
 800733c:	20000df8 	.word	0x20000df8
 8007340:	0800a968 	.word	0x0800a968

08007344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3b04      	subs	r3, #4
 8007354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800735c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3b04      	subs	r3, #4
 8007362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3b04      	subs	r3, #4
 8007372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007374:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <pxPortInitialiseStack+0x64>)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3b14      	subs	r3, #20
 800737e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3b04      	subs	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f06f 0202 	mvn.w	r2, #2
 8007392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3b20      	subs	r3, #32
 8007398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	080073ad 	.word	0x080073ad

080073ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <prvTaskExitError+0x54>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073be:	d00a      	beq.n	80073d6 <prvTaskExitError+0x2a>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60fb      	str	r3, [r7, #12]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <prvTaskExitError+0x28>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	60bb      	str	r3, [r7, #8]
}
 80073e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073ea:	bf00      	nop
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0fc      	beq.n	80073ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	2000000c 	.word	0x2000000c
	...

08007410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <pxCurrentTCBConst2>)
 8007412:	6819      	ldr	r1, [r3, #0]
 8007414:	6808      	ldr	r0, [r1, #0]
 8007416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741a:	f380 8809 	msr	PSP, r0
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	4770      	bx	lr
 800742c:	f3af 8000 	nop.w

08007430 <pxCurrentTCBConst2>:
 8007430:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007438:	4808      	ldr	r0, [pc, #32]	; (800745c <prvPortStartFirstTask+0x24>)
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	6800      	ldr	r0, [r0, #0]
 800743e:	f380 8808 	msr	MSP, r0
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8814 	msr	CONTROL, r0
 800744a:	b662      	cpsie	i
 800744c:	b661      	cpsie	f
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	df00      	svc	0
 8007458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800745a:	bf00      	nop
 800745c:	e000ed08 	.word	0xe000ed08

08007460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007466:	4b46      	ldr	r3, [pc, #280]	; (8007580 <xPortStartScheduler+0x120>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a46      	ldr	r2, [pc, #280]	; (8007584 <xPortStartScheduler+0x124>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10a      	bne.n	8007486 <xPortStartScheduler+0x26>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	613b      	str	r3, [r7, #16]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007486:	4b3e      	ldr	r3, [pc, #248]	; (8007580 <xPortStartScheduler+0x120>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a3f      	ldr	r2, [pc, #252]	; (8007588 <xPortStartScheduler+0x128>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10a      	bne.n	80074a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074a6:	4b39      	ldr	r3, [pc, #228]	; (800758c <xPortStartScheduler+0x12c>)
 80074a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	4b31      	ldr	r3, [pc, #196]	; (8007590 <xPortStartScheduler+0x130>)
 80074cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ce:	4b31      	ldr	r3, [pc, #196]	; (8007594 <xPortStartScheduler+0x134>)
 80074d0:	2207      	movs	r2, #7
 80074d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074d4:	e009      	b.n	80074ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074d6:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <xPortStartScheduler+0x134>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3b01      	subs	r3, #1
 80074dc:	4a2d      	ldr	r2, [pc, #180]	; (8007594 <xPortStartScheduler+0x134>)
 80074de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	2b80      	cmp	r3, #128	; 0x80
 80074f4:	d0ef      	beq.n	80074d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074f6:	4b27      	ldr	r3, [pc, #156]	; (8007594 <xPortStartScheduler+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f1c3 0307 	rsb	r3, r3, #7
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d00a      	beq.n	8007518 <xPortStartScheduler+0xb8>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60bb      	str	r3, [r7, #8]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007518:	4b1e      	ldr	r3, [pc, #120]	; (8007594 <xPortStartScheduler+0x134>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	4a1d      	ldr	r2, [pc, #116]	; (8007594 <xPortStartScheduler+0x134>)
 8007520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007522:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <xPortStartScheduler+0x134>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800752a:	4a1a      	ldr	r2, [pc, #104]	; (8007594 <xPortStartScheduler+0x134>)
 800752c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	b2da      	uxtb	r2, r3
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007536:	4b18      	ldr	r3, [pc, #96]	; (8007598 <xPortStartScheduler+0x138>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <xPortStartScheduler+0x138>)
 800753c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007542:	4b15      	ldr	r3, [pc, #84]	; (8007598 <xPortStartScheduler+0x138>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a14      	ldr	r2, [pc, #80]	; (8007598 <xPortStartScheduler+0x138>)
 8007548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800754c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800754e:	f000 f8dd 	bl	800770c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <xPortStartScheduler+0x13c>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007558:	f000 f8fc 	bl	8007754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800755c:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <xPortStartScheduler+0x140>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0f      	ldr	r2, [pc, #60]	; (80075a0 <xPortStartScheduler+0x140>)
 8007562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007568:	f7ff ff66 	bl	8007438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800756c:	f7ff f850 	bl	8006610 <vTaskSwitchContext>
	prvTaskExitError();
 8007570:	f7ff ff1c 	bl	80073ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	e000ed00 	.word	0xe000ed00
 8007584:	410fc271 	.word	0x410fc271
 8007588:	410fc270 	.word	0x410fc270
 800758c:	e000e400 	.word	0xe000e400
 8007590:	20000ee8 	.word	0x20000ee8
 8007594:	20000eec 	.word	0x20000eec
 8007598:	e000ed20 	.word	0xe000ed20
 800759c:	2000000c 	.word	0x2000000c
 80075a0:	e000ef34 	.word	0xe000ef34

080075a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	607b      	str	r3, [r7, #4]
}
 80075bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <vPortEnterCritical+0x58>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3301      	adds	r3, #1
 80075c4:	4a0d      	ldr	r2, [pc, #52]	; (80075fc <vPortEnterCritical+0x58>)
 80075c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <vPortEnterCritical+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d10f      	bne.n	80075f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075d0:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <vPortEnterCritical+0x5c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	603b      	str	r3, [r7, #0]
}
 80075ec:	bf00      	nop
 80075ee:	e7fe      	b.n	80075ee <vPortEnterCritical+0x4a>
	}
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	2000000c 	.word	0x2000000c
 8007600:	e000ed04 	.word	0xe000ed04

08007604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800760a:	4b12      	ldr	r3, [pc, #72]	; (8007654 <vPortExitCritical+0x50>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <vPortExitCritical+0x24>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	607b      	str	r3, [r7, #4]
}
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <vPortExitCritical+0x50>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	4a09      	ldr	r2, [pc, #36]	; (8007654 <vPortExitCritical+0x50>)
 8007630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007632:	4b08      	ldr	r3, [pc, #32]	; (8007654 <vPortExitCritical+0x50>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <vPortExitCritical+0x42>
 800763a:	2300      	movs	r3, #0
 800763c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f383 8811 	msr	BASEPRI, r3
}
 8007644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	2000000c 	.word	0x2000000c
	...

08007660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007660:	f3ef 8009 	mrs	r0, PSP
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <pxCurrentTCBConst>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	f01e 0f10 	tst.w	lr, #16
 8007670:	bf08      	it	eq
 8007672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	6010      	str	r0, [r2, #0]
 800767c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007684:	f380 8811 	msr	BASEPRI, r0
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f7fe ffbe 	bl	8006610 <vTaskSwitchContext>
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	f380 8811 	msr	BASEPRI, r0
 800769c:	bc09      	pop	{r0, r3}
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	6808      	ldr	r0, [r1, #0]
 80076a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a6:	f01e 0f10 	tst.w	lr, #16
 80076aa:	bf08      	it	eq
 80076ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076b0:	f380 8809 	msr	PSP, r0
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst>:
 80076c0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
}
 80076e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076e2:	f7fe fedb 	bl	800649c <xTaskIncrementTick>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <xPortSysTickHandler+0x40>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f383 8811 	msr	BASEPRI, r3
}
 80076fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007700:	bf00      	nop
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <vPortSetupTimerInterrupt+0x34>)
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <vPortSetupTimerInterrupt+0x38>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <vPortSetupTimerInterrupt+0x3c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <vPortSetupTimerInterrupt+0x40>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	099b      	lsrs	r3, r3, #6
 8007728:	4a09      	ldr	r2, [pc, #36]	; (8007750 <vPortSetupTimerInterrupt+0x44>)
 800772a:	3b01      	subs	r3, #1
 800772c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800772e:	4b04      	ldr	r3, [pc, #16]	; (8007740 <vPortSetupTimerInterrupt+0x34>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	e000e010 	.word	0xe000e010
 8007744:	e000e018 	.word	0xe000e018
 8007748:	20000000 	.word	0x20000000
 800774c:	10624dd3 	.word	0x10624dd3
 8007750:	e000e014 	.word	0xe000e014

08007754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007764 <vPortEnableVFP+0x10>
 8007758:	6801      	ldr	r1, [r0, #0]
 800775a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800775e:	6001      	str	r1, [r0, #0]
 8007760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007762:	bf00      	nop
 8007764:	e000ed88 	.word	0xe000ed88

08007768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800776e:	f3ef 8305 	mrs	r3, IPSR
 8007772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d914      	bls.n	80077a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <vPortValidateInterruptPriority+0x70>)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007784:	4b15      	ldr	r3, [pc, #84]	; (80077dc <vPortValidateInterruptPriority+0x74>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	7afa      	ldrb	r2, [r7, #11]
 800778a:	429a      	cmp	r2, r3
 800778c:	d20a      	bcs.n	80077a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077a4:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <vPortValidateInterruptPriority+0x78>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077ac:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <vPortValidateInterruptPriority+0x7c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d90a      	bls.n	80077ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	603b      	str	r3, [r7, #0]
}
 80077c6:	bf00      	nop
 80077c8:	e7fe      	b.n	80077c8 <vPortValidateInterruptPriority+0x60>
	}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	e000e3f0 	.word	0xe000e3f0
 80077dc:	20000ee8 	.word	0x20000ee8
 80077e0:	e000ed0c 	.word	0xe000ed0c
 80077e4:	20000eec 	.word	0x20000eec

080077e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077f4:	f7fe fd96 	bl	8006324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077f8:	4b5b      	ldr	r3, [pc, #364]	; (8007968 <pvPortMalloc+0x180>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007800:	f000 f920 	bl	8007a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007804:	4b59      	ldr	r3, [pc, #356]	; (800796c <pvPortMalloc+0x184>)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8093 	bne.w	8007938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01d      	beq.n	8007854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007818:	2208      	movs	r2, #8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	2b00      	cmp	r3, #0
 8007828:	d014      	beq.n	8007854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f023 0307 	bic.w	r3, r3, #7
 8007830:	3308      	adds	r3, #8
 8007832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <pvPortMalloc+0x6c>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	617b      	str	r3, [r7, #20]
}
 8007850:	bf00      	nop
 8007852:	e7fe      	b.n	8007852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d06e      	beq.n	8007938 <pvPortMalloc+0x150>
 800785a:	4b45      	ldr	r3, [pc, #276]	; (8007970 <pvPortMalloc+0x188>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d869      	bhi.n	8007938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007864:	4b43      	ldr	r3, [pc, #268]	; (8007974 <pvPortMalloc+0x18c>)
 8007866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007868:	4b42      	ldr	r3, [pc, #264]	; (8007974 <pvPortMalloc+0x18c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786e:	e004      	b.n	800787a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d903      	bls.n	800788c <pvPortMalloc+0xa4>
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f1      	bne.n	8007870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <pvPortMalloc+0x180>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	429a      	cmp	r2, r3
 8007894:	d050      	beq.n	8007938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2208      	movs	r2, #8
 800789c:	4413      	add	r3, r2
 800789e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	2308      	movs	r3, #8
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d91f      	bls.n	80078f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <pvPortMalloc+0xf8>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	613b      	str	r3, [r7, #16]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078f2:	69b8      	ldr	r0, [r7, #24]
 80078f4:	f000 f908 	bl	8007b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078f8:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <pvPortMalloc+0x188>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <pvPortMalloc+0x188>)
 8007904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <pvPortMalloc+0x188>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <pvPortMalloc+0x190>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d203      	bcs.n	800791a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007912:	4b17      	ldr	r3, [pc, #92]	; (8007970 <pvPortMalloc+0x188>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a18      	ldr	r2, [pc, #96]	; (8007978 <pvPortMalloc+0x190>)
 8007918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <pvPortMalloc+0x184>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	431a      	orrs	r2, r3
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <pvPortMalloc+0x194>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	4a11      	ldr	r2, [pc, #68]	; (800797c <pvPortMalloc+0x194>)
 8007936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007938:	f7fe fd02 	bl	8006340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <pvPortMalloc+0x174>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	60fb      	str	r3, [r7, #12]
}
 8007958:	bf00      	nop
 800795a:	e7fe      	b.n	800795a <pvPortMalloc+0x172>
	return pvReturn;
 800795c:	69fb      	ldr	r3, [r7, #28]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	; 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20001ab0 	.word	0x20001ab0
 800796c:	20001ac4 	.word	0x20001ac4
 8007970:	20001ab4 	.word	0x20001ab4
 8007974:	20001aa8 	.word	0x20001aa8
 8007978:	20001ab8 	.word	0x20001ab8
 800797c:	20001abc 	.word	0x20001abc

08007980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d04d      	beq.n	8007a2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007992:	2308      	movs	r3, #8
 8007994:	425b      	negs	r3, r3
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4413      	add	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <vPortFree+0xb8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <vPortFree+0x44>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <vPortFree+0x62>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	60bb      	str	r3, [r7, #8]
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <vPortFree+0xb8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01e      	beq.n	8007a2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11a      	bne.n	8007a2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <vPortFree+0xb8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	401a      	ands	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a08:	f7fe fc8c 	bl	8006324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <vPortFree+0xbc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4413      	add	r3, r2
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <vPortFree+0xbc>)
 8007a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a1a:	6938      	ldr	r0, [r7, #16]
 8007a1c:	f000 f874 	bl	8007b08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <vPortFree+0xc0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3301      	adds	r3, #1
 8007a26:	4a06      	ldr	r2, [pc, #24]	; (8007a40 <vPortFree+0xc0>)
 8007a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a2a:	f7fe fc89 	bl	8006340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a2e:	bf00      	nop
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001ac4 	.word	0x20001ac4
 8007a3c:	20001ab4 	.word	0x20001ab4
 8007a40:	20001ac0 	.word	0x20001ac0

08007a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a50:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <prvHeapInit+0xac>)
 8007a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00c      	beq.n	8007a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3307      	adds	r3, #7
 8007a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0307 	bic.w	r3, r3, #7
 8007a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	4a1f      	ldr	r2, [pc, #124]	; (8007af0 <prvHeapInit+0xac>)
 8007a74:	4413      	add	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a7c:	4a1d      	ldr	r2, [pc, #116]	; (8007af4 <prvHeapInit+0xb0>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a82:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <prvHeapInit+0xb0>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a90:	2208      	movs	r2, #8
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a15      	ldr	r2, [pc, #84]	; (8007af8 <prvHeapInit+0xb4>)
 8007aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <prvHeapInit+0xb4>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007aae:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <prvHeapInit+0xb4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <prvHeapInit+0xb4>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4a0a      	ldr	r2, [pc, #40]	; (8007afc <prvHeapInit+0xb8>)
 8007ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <prvHeapInit+0xbc>)
 8007ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007adc:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <prvHeapInit+0xc0>)
 8007ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ae2:	601a      	str	r2, [r3, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	20000ef0 	.word	0x20000ef0
 8007af4:	20001aa8 	.word	0x20001aa8
 8007af8:	20001ab0 	.word	0x20001ab0
 8007afc:	20001ab8 	.word	0x20001ab8
 8007b00:	20001ab4 	.word	0x20001ab4
 8007b04:	20001ac4 	.word	0x20001ac4

08007b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b10:	4b28      	ldr	r3, [pc, #160]	; (8007bb4 <prvInsertBlockIntoFreeList+0xac>)
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e002      	b.n	8007b1c <prvInsertBlockIntoFreeList+0x14>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d8f7      	bhi.n	8007b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	4413      	add	r3, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d108      	bne.n	8007b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	441a      	add	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d118      	bne.n	8007b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d00d      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	441a      	add	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e008      	b.n	8007b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b86:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	e003      	b.n	8007b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d002      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20001aa8 	.word	0x20001aa8
 8007bb8:	20001ab0 	.word	0x20001ab0

08007bbc <__errno>:
 8007bbc:	4b01      	ldr	r3, [pc, #4]	; (8007bc4 <__errno+0x8>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20000010 	.word	0x20000010

08007bc8 <__libc_init_array>:
 8007bc8:	b570      	push	{r4, r5, r6, lr}
 8007bca:	4d0d      	ldr	r5, [pc, #52]	; (8007c00 <__libc_init_array+0x38>)
 8007bcc:	4c0d      	ldr	r4, [pc, #52]	; (8007c04 <__libc_init_array+0x3c>)
 8007bce:	1b64      	subs	r4, r4, r5
 8007bd0:	10a4      	asrs	r4, r4, #2
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	42a6      	cmp	r6, r4
 8007bd6:	d109      	bne.n	8007bec <__libc_init_array+0x24>
 8007bd8:	4d0b      	ldr	r5, [pc, #44]	; (8007c08 <__libc_init_array+0x40>)
 8007bda:	4c0c      	ldr	r4, [pc, #48]	; (8007c0c <__libc_init_array+0x44>)
 8007bdc:	f002 fe86 	bl	800a8ec <_init>
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	2600      	movs	r6, #0
 8007be6:	42a6      	cmp	r6, r4
 8007be8:	d105      	bne.n	8007bf6 <__libc_init_array+0x2e>
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bf0:	4798      	blx	r3
 8007bf2:	3601      	adds	r6, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__libc_init_array+0xc>
 8007bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bfa:	4798      	blx	r3
 8007bfc:	3601      	adds	r6, #1
 8007bfe:	e7f2      	b.n	8007be6 <__libc_init_array+0x1e>
 8007c00:	0800adfc 	.word	0x0800adfc
 8007c04:	0800adfc 	.word	0x0800adfc
 8007c08:	0800adfc 	.word	0x0800adfc
 8007c0c:	0800ae00 	.word	0x0800ae00

08007c10 <memcpy>:
 8007c10:	440a      	add	r2, r1
 8007c12:	4291      	cmp	r1, r2
 8007c14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c18:	d100      	bne.n	8007c1c <memcpy+0xc>
 8007c1a:	4770      	bx	lr
 8007c1c:	b510      	push	{r4, lr}
 8007c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c26:	4291      	cmp	r1, r2
 8007c28:	d1f9      	bne.n	8007c1e <memcpy+0xe>
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <memset>:
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d100      	bne.n	8007c36 <memset+0xa>
 8007c34:	4770      	bx	lr
 8007c36:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3a:	e7f9      	b.n	8007c30 <memset+0x4>

08007c3c <__cvt>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	ec55 4b10 	vmov	r4, r5, d0
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	460e      	mov	r6, r1
 8007c48:	4619      	mov	r1, r3
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	bfbb      	ittet	lt
 8007c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c52:	461d      	movlt	r5, r3
 8007c54:	2300      	movge	r3, #0
 8007c56:	232d      	movlt	r3, #45	; 0x2d
 8007c58:	700b      	strb	r3, [r1, #0]
 8007c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c60:	4691      	mov	r9, r2
 8007c62:	f023 0820 	bic.w	r8, r3, #32
 8007c66:	bfbc      	itt	lt
 8007c68:	4622      	movlt	r2, r4
 8007c6a:	4614      	movlt	r4, r2
 8007c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c70:	d005      	beq.n	8007c7e <__cvt+0x42>
 8007c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c76:	d100      	bne.n	8007c7a <__cvt+0x3e>
 8007c78:	3601      	adds	r6, #1
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	e000      	b.n	8007c80 <__cvt+0x44>
 8007c7e:	2103      	movs	r1, #3
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	ab02      	add	r3, sp, #8
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	ec45 4b10 	vmov	d0, r4, r5
 8007c8c:	4653      	mov	r3, sl
 8007c8e:	4632      	mov	r2, r6
 8007c90:	f000 fce2 	bl	8008658 <_dtoa_r>
 8007c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c98:	4607      	mov	r7, r0
 8007c9a:	d102      	bne.n	8007ca2 <__cvt+0x66>
 8007c9c:	f019 0f01 	tst.w	r9, #1
 8007ca0:	d022      	beq.n	8007ce8 <__cvt+0xac>
 8007ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ca6:	eb07 0906 	add.w	r9, r7, r6
 8007caa:	d110      	bne.n	8007cce <__cvt+0x92>
 8007cac:	783b      	ldrb	r3, [r7, #0]
 8007cae:	2b30      	cmp	r3, #48	; 0x30
 8007cb0:	d10a      	bne.n	8007cc8 <__cvt+0x8c>
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cbe:	b918      	cbnz	r0, 8007cc8 <__cvt+0x8c>
 8007cc0:	f1c6 0601 	rsb	r6, r6, #1
 8007cc4:	f8ca 6000 	str.w	r6, [sl]
 8007cc8:	f8da 3000 	ldr.w	r3, [sl]
 8007ccc:	4499      	add	r9, r3
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7f8 fef7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cda:	b108      	cbz	r0, 8007ce0 <__cvt+0xa4>
 8007cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007ce0:	2230      	movs	r2, #48	; 0x30
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	454b      	cmp	r3, r9
 8007ce6:	d307      	bcc.n	8007cf8 <__cvt+0xbc>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cec:	1bdb      	subs	r3, r3, r7
 8007cee:	4638      	mov	r0, r7
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	b004      	add	sp, #16
 8007cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf8:	1c59      	adds	r1, r3, #1
 8007cfa:	9103      	str	r1, [sp, #12]
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e7f0      	b.n	8007ce2 <__cvt+0xa6>

08007d00 <__exponent>:
 8007d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d02:	4603      	mov	r3, r0
 8007d04:	2900      	cmp	r1, #0
 8007d06:	bfb8      	it	lt
 8007d08:	4249      	neglt	r1, r1
 8007d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8007d0e:	bfb4      	ite	lt
 8007d10:	222d      	movlt	r2, #45	; 0x2d
 8007d12:	222b      	movge	r2, #43	; 0x2b
 8007d14:	2909      	cmp	r1, #9
 8007d16:	7042      	strb	r2, [r0, #1]
 8007d18:	dd2a      	ble.n	8007d70 <__exponent+0x70>
 8007d1a:	f10d 0407 	add.w	r4, sp, #7
 8007d1e:	46a4      	mov	ip, r4
 8007d20:	270a      	movs	r7, #10
 8007d22:	46a6      	mov	lr, r4
 8007d24:	460a      	mov	r2, r1
 8007d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8007d2e:	3530      	adds	r5, #48	; 0x30
 8007d30:	2a63      	cmp	r2, #99	; 0x63
 8007d32:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	dcf1      	bgt.n	8007d22 <__exponent+0x22>
 8007d3e:	3130      	adds	r1, #48	; 0x30
 8007d40:	f1ae 0502 	sub.w	r5, lr, #2
 8007d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d48:	1c44      	adds	r4, r0, #1
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	4561      	cmp	r1, ip
 8007d4e:	d30a      	bcc.n	8007d66 <__exponent+0x66>
 8007d50:	f10d 0209 	add.w	r2, sp, #9
 8007d54:	eba2 020e 	sub.w	r2, r2, lr
 8007d58:	4565      	cmp	r5, ip
 8007d5a:	bf88      	it	hi
 8007d5c:	2200      	movhi	r2, #0
 8007d5e:	4413      	add	r3, r2
 8007d60:	1a18      	subs	r0, r3, r0
 8007d62:	b003      	add	sp, #12
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d6e:	e7ed      	b.n	8007d4c <__exponent+0x4c>
 8007d70:	2330      	movs	r3, #48	; 0x30
 8007d72:	3130      	adds	r1, #48	; 0x30
 8007d74:	7083      	strb	r3, [r0, #2]
 8007d76:	70c1      	strb	r1, [r0, #3]
 8007d78:	1d03      	adds	r3, r0, #4
 8007d7a:	e7f1      	b.n	8007d60 <__exponent+0x60>

08007d7c <_printf_float>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	ed2d 8b02 	vpush	{d8}
 8007d84:	b08d      	sub	sp, #52	; 0x34
 8007d86:	460c      	mov	r4, r1
 8007d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	461f      	mov	r7, r3
 8007d90:	4605      	mov	r5, r0
 8007d92:	f001 fb43 	bl	800941c <_localeconv_r>
 8007d96:	f8d0 a000 	ldr.w	sl, [r0]
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	f7f8 fa18 	bl	80001d0 <strlen>
 8007da0:	2300      	movs	r3, #0
 8007da2:	930a      	str	r3, [sp, #40]	; 0x28
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	9305      	str	r3, [sp, #20]
 8007da8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007db0:	3307      	adds	r3, #7
 8007db2:	f023 0307 	bic.w	r3, r3, #7
 8007db6:	f103 0208 	add.w	r2, r3, #8
 8007dba:	f8c8 2000 	str.w	r2, [r8]
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dd4:	ee08 0a10 	vmov	s16, r0
 8007dd8:	4b9f      	ldr	r3, [pc, #636]	; (8008058 <_printf_float+0x2dc>)
 8007dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007de2:	f7f8 fea3 	bl	8000b2c <__aeabi_dcmpun>
 8007de6:	bb88      	cbnz	r0, 8007e4c <_printf_float+0xd0>
 8007de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dec:	4b9a      	ldr	r3, [pc, #616]	; (8008058 <_printf_float+0x2dc>)
 8007dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007df2:	f7f8 fe7d 	bl	8000af0 <__aeabi_dcmple>
 8007df6:	bb48      	cbnz	r0, 8007e4c <_printf_float+0xd0>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 fe6c 	bl	8000adc <__aeabi_dcmplt>
 8007e04:	b110      	cbz	r0, 8007e0c <_printf_float+0x90>
 8007e06:	232d      	movs	r3, #45	; 0x2d
 8007e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e0c:	4b93      	ldr	r3, [pc, #588]	; (800805c <_printf_float+0x2e0>)
 8007e0e:	4894      	ldr	r0, [pc, #592]	; (8008060 <_printf_float+0x2e4>)
 8007e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e14:	bf94      	ite	ls
 8007e16:	4698      	movls	r8, r3
 8007e18:	4680      	movhi	r8, r0
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	6123      	str	r3, [r4, #16]
 8007e1e:	9b05      	ldr	r3, [sp, #20]
 8007e20:	f023 0204 	bic.w	r2, r3, #4
 8007e24:	6022      	str	r2, [r4, #0]
 8007e26:	f04f 0900 	mov.w	r9, #0
 8007e2a:	9700      	str	r7, [sp, #0]
 8007e2c:	4633      	mov	r3, r6
 8007e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e30:	4621      	mov	r1, r4
 8007e32:	4628      	mov	r0, r5
 8007e34:	f000 f9d8 	bl	80081e8 <_printf_common>
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f040 8090 	bne.w	8007f5e <_printf_float+0x1e2>
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e42:	b00d      	add	sp, #52	; 0x34
 8007e44:	ecbd 8b02 	vpop	{d8}
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	4640      	mov	r0, r8
 8007e52:	4649      	mov	r1, r9
 8007e54:	f7f8 fe6a 	bl	8000b2c <__aeabi_dcmpun>
 8007e58:	b140      	cbz	r0, 8007e6c <_printf_float+0xf0>
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfbc      	itt	lt
 8007e60:	232d      	movlt	r3, #45	; 0x2d
 8007e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e66:	487f      	ldr	r0, [pc, #508]	; (8008064 <_printf_float+0x2e8>)
 8007e68:	4b7f      	ldr	r3, [pc, #508]	; (8008068 <_printf_float+0x2ec>)
 8007e6a:	e7d1      	b.n	8007e10 <_printf_float+0x94>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e72:	9206      	str	r2, [sp, #24]
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	d13f      	bne.n	8007ef8 <_printf_float+0x17c>
 8007e78:	2306      	movs	r3, #6
 8007e7a:	6063      	str	r3, [r4, #4]
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	6861      	ldr	r1, [r4, #4]
 8007e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e84:	2300      	movs	r3, #0
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	ab0a      	add	r3, sp, #40	; 0x28
 8007e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e8e:	ab09      	add	r3, sp, #36	; 0x24
 8007e90:	ec49 8b10 	vmov	d0, r8, r9
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	6022      	str	r2, [r4, #0]
 8007e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7ff fecd 	bl	8007c3c <__cvt>
 8007ea2:	9b06      	ldr	r3, [sp, #24]
 8007ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ea6:	2b47      	cmp	r3, #71	; 0x47
 8007ea8:	4680      	mov	r8, r0
 8007eaa:	d108      	bne.n	8007ebe <_printf_float+0x142>
 8007eac:	1cc8      	adds	r0, r1, #3
 8007eae:	db02      	blt.n	8007eb6 <_printf_float+0x13a>
 8007eb0:	6863      	ldr	r3, [r4, #4]
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	dd41      	ble.n	8007f3a <_printf_float+0x1be>
 8007eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007eba:	fa5f fb8b 	uxtb.w	fp, fp
 8007ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ec2:	d820      	bhi.n	8007f06 <_printf_float+0x18a>
 8007ec4:	3901      	subs	r1, #1
 8007ec6:	465a      	mov	r2, fp
 8007ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8007ece:	f7ff ff17 	bl	8007d00 <__exponent>
 8007ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ed4:	1813      	adds	r3, r2, r0
 8007ed6:	2a01      	cmp	r2, #1
 8007ed8:	4681      	mov	r9, r0
 8007eda:	6123      	str	r3, [r4, #16]
 8007edc:	dc02      	bgt.n	8007ee4 <_printf_float+0x168>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	07d2      	lsls	r2, r2, #31
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_float+0x16c>
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	6123      	str	r3, [r4, #16]
 8007ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d09c      	beq.n	8007e2a <_printf_float+0xae>
 8007ef0:	232d      	movs	r3, #45	; 0x2d
 8007ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef6:	e798      	b.n	8007e2a <_printf_float+0xae>
 8007ef8:	9a06      	ldr	r2, [sp, #24]
 8007efa:	2a47      	cmp	r2, #71	; 0x47
 8007efc:	d1be      	bne.n	8007e7c <_printf_float+0x100>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1bc      	bne.n	8007e7c <_printf_float+0x100>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e7b9      	b.n	8007e7a <_printf_float+0xfe>
 8007f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f0a:	d118      	bne.n	8007f3e <_printf_float+0x1c2>
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	6863      	ldr	r3, [r4, #4]
 8007f10:	dd0b      	ble.n	8007f2a <_printf_float+0x1ae>
 8007f12:	6121      	str	r1, [r4, #16]
 8007f14:	b913      	cbnz	r3, 8007f1c <_printf_float+0x1a0>
 8007f16:	6822      	ldr	r2, [r4, #0]
 8007f18:	07d0      	lsls	r0, r2, #31
 8007f1a:	d502      	bpl.n	8007f22 <_printf_float+0x1a6>
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	440b      	add	r3, r1
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f24:	f04f 0900 	mov.w	r9, #0
 8007f28:	e7de      	b.n	8007ee8 <_printf_float+0x16c>
 8007f2a:	b913      	cbnz	r3, 8007f32 <_printf_float+0x1b6>
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	07d2      	lsls	r2, r2, #31
 8007f30:	d501      	bpl.n	8007f36 <_printf_float+0x1ba>
 8007f32:	3302      	adds	r3, #2
 8007f34:	e7f4      	b.n	8007f20 <_printf_float+0x1a4>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e7f2      	b.n	8007f20 <_printf_float+0x1a4>
 8007f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f40:	4299      	cmp	r1, r3
 8007f42:	db05      	blt.n	8007f50 <_printf_float+0x1d4>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	6121      	str	r1, [r4, #16]
 8007f48:	07d8      	lsls	r0, r3, #31
 8007f4a:	d5ea      	bpl.n	8007f22 <_printf_float+0x1a6>
 8007f4c:	1c4b      	adds	r3, r1, #1
 8007f4e:	e7e7      	b.n	8007f20 <_printf_float+0x1a4>
 8007f50:	2900      	cmp	r1, #0
 8007f52:	bfd4      	ite	le
 8007f54:	f1c1 0202 	rsble	r2, r1, #2
 8007f58:	2201      	movgt	r2, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	e7e0      	b.n	8007f20 <_printf_float+0x1a4>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	055a      	lsls	r2, r3, #21
 8007f62:	d407      	bmi.n	8007f74 <_printf_float+0x1f8>
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	4642      	mov	r2, r8
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	47b8      	blx	r7
 8007f6e:	3001      	adds	r0, #1
 8007f70:	d12c      	bne.n	8007fcc <_printf_float+0x250>
 8007f72:	e764      	b.n	8007e3e <_printf_float+0xc2>
 8007f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f78:	f240 80e0 	bls.w	800813c <_printf_float+0x3c0>
 8007f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f80:	2200      	movs	r2, #0
 8007f82:	2300      	movs	r3, #0
 8007f84:	f7f8 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d034      	beq.n	8007ff6 <_printf_float+0x27a>
 8007f8c:	4a37      	ldr	r2, [pc, #220]	; (800806c <_printf_float+0x2f0>)
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4631      	mov	r1, r6
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b8      	blx	r7
 8007f96:	3001      	adds	r0, #1
 8007f98:	f43f af51 	beq.w	8007e3e <_printf_float+0xc2>
 8007f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	db02      	blt.n	8007faa <_printf_float+0x22e>
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	07d8      	lsls	r0, r3, #31
 8007fa8:	d510      	bpl.n	8007fcc <_printf_float+0x250>
 8007faa:	ee18 3a10 	vmov	r3, s16
 8007fae:	4652      	mov	r2, sl
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af41 	beq.w	8007e3e <_printf_float+0xc2>
 8007fbc:	f04f 0800 	mov.w	r8, #0
 8007fc0:	f104 091a 	add.w	r9, r4, #26
 8007fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	4543      	cmp	r3, r8
 8007fca:	dc09      	bgt.n	8007fe0 <_printf_float+0x264>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	079b      	lsls	r3, r3, #30
 8007fd0:	f100 8105 	bmi.w	80081de <_printf_float+0x462>
 8007fd4:	68e0      	ldr	r0, [r4, #12]
 8007fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fd8:	4298      	cmp	r0, r3
 8007fda:	bfb8      	it	lt
 8007fdc:	4618      	movlt	r0, r3
 8007fde:	e730      	b.n	8007e42 <_printf_float+0xc6>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	464a      	mov	r2, r9
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	47b8      	blx	r7
 8007fea:	3001      	adds	r0, #1
 8007fec:	f43f af27 	beq.w	8007e3e <_printf_float+0xc2>
 8007ff0:	f108 0801 	add.w	r8, r8, #1
 8007ff4:	e7e6      	b.n	8007fc4 <_printf_float+0x248>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	dc39      	bgt.n	8008070 <_printf_float+0x2f4>
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	; (800806c <_printf_float+0x2f0>)
 8007ffe:	2301      	movs	r3, #1
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af19 	beq.w	8007e3e <_printf_float+0xc2>
 800800c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008010:	4313      	orrs	r3, r2
 8008012:	d102      	bne.n	800801a <_printf_float+0x29e>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	07d9      	lsls	r1, r3, #31
 8008018:	d5d8      	bpl.n	8007fcc <_printf_float+0x250>
 800801a:	ee18 3a10 	vmov	r3, s16
 800801e:	4652      	mov	r2, sl
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f af09 	beq.w	8007e3e <_printf_float+0xc2>
 800802c:	f04f 0900 	mov.w	r9, #0
 8008030:	f104 0a1a 	add.w	sl, r4, #26
 8008034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008036:	425b      	negs	r3, r3
 8008038:	454b      	cmp	r3, r9
 800803a:	dc01      	bgt.n	8008040 <_printf_float+0x2c4>
 800803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803e:	e792      	b.n	8007f66 <_printf_float+0x1ea>
 8008040:	2301      	movs	r3, #1
 8008042:	4652      	mov	r2, sl
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	f43f aef7 	beq.w	8007e3e <_printf_float+0xc2>
 8008050:	f109 0901 	add.w	r9, r9, #1
 8008054:	e7ee      	b.n	8008034 <_printf_float+0x2b8>
 8008056:	bf00      	nop
 8008058:	7fefffff 	.word	0x7fefffff
 800805c:	0800a9e0 	.word	0x0800a9e0
 8008060:	0800a9e4 	.word	0x0800a9e4
 8008064:	0800a9ec 	.word	0x0800a9ec
 8008068:	0800a9e8 	.word	0x0800a9e8
 800806c:	0800a9f0 	.word	0x0800a9f0
 8008070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008074:	429a      	cmp	r2, r3
 8008076:	bfa8      	it	ge
 8008078:	461a      	movge	r2, r3
 800807a:	2a00      	cmp	r2, #0
 800807c:	4691      	mov	r9, r2
 800807e:	dc37      	bgt.n	80080f0 <_printf_float+0x374>
 8008080:	f04f 0b00 	mov.w	fp, #0
 8008084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008088:	f104 021a 	add.w	r2, r4, #26
 800808c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800808e:	9305      	str	r3, [sp, #20]
 8008090:	eba3 0309 	sub.w	r3, r3, r9
 8008094:	455b      	cmp	r3, fp
 8008096:	dc33      	bgt.n	8008100 <_printf_float+0x384>
 8008098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800809c:	429a      	cmp	r2, r3
 800809e:	db3b      	blt.n	8008118 <_printf_float+0x39c>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	07da      	lsls	r2, r3, #31
 80080a4:	d438      	bmi.n	8008118 <_printf_float+0x39c>
 80080a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	eba2 0901 	sub.w	r9, r2, r1
 80080b2:	4599      	cmp	r9, r3
 80080b4:	bfa8      	it	ge
 80080b6:	4699      	movge	r9, r3
 80080b8:	f1b9 0f00 	cmp.w	r9, #0
 80080bc:	dc35      	bgt.n	800812a <_printf_float+0x3ae>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c6:	f104 0a1a 	add.w	sl, r4, #26
 80080ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ce:	1a9b      	subs	r3, r3, r2
 80080d0:	eba3 0309 	sub.w	r3, r3, r9
 80080d4:	4543      	cmp	r3, r8
 80080d6:	f77f af79 	ble.w	8007fcc <_printf_float+0x250>
 80080da:	2301      	movs	r3, #1
 80080dc:	4652      	mov	r2, sl
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f aeaa 	beq.w	8007e3e <_printf_float+0xc2>
 80080ea:	f108 0801 	add.w	r8, r8, #1
 80080ee:	e7ec      	b.n	80080ca <_printf_float+0x34e>
 80080f0:	4613      	mov	r3, r2
 80080f2:	4631      	mov	r1, r6
 80080f4:	4642      	mov	r2, r8
 80080f6:	4628      	mov	r0, r5
 80080f8:	47b8      	blx	r7
 80080fa:	3001      	adds	r0, #1
 80080fc:	d1c0      	bne.n	8008080 <_printf_float+0x304>
 80080fe:	e69e      	b.n	8007e3e <_printf_float+0xc2>
 8008100:	2301      	movs	r3, #1
 8008102:	4631      	mov	r1, r6
 8008104:	4628      	mov	r0, r5
 8008106:	9205      	str	r2, [sp, #20]
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f ae97 	beq.w	8007e3e <_printf_float+0xc2>
 8008110:	9a05      	ldr	r2, [sp, #20]
 8008112:	f10b 0b01 	add.w	fp, fp, #1
 8008116:	e7b9      	b.n	800808c <_printf_float+0x310>
 8008118:	ee18 3a10 	vmov	r3, s16
 800811c:	4652      	mov	r2, sl
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	d1be      	bne.n	80080a6 <_printf_float+0x32a>
 8008128:	e689      	b.n	8007e3e <_printf_float+0xc2>
 800812a:	9a05      	ldr	r2, [sp, #20]
 800812c:	464b      	mov	r3, r9
 800812e:	4442      	add	r2, r8
 8008130:	4631      	mov	r1, r6
 8008132:	4628      	mov	r0, r5
 8008134:	47b8      	blx	r7
 8008136:	3001      	adds	r0, #1
 8008138:	d1c1      	bne.n	80080be <_printf_float+0x342>
 800813a:	e680      	b.n	8007e3e <_printf_float+0xc2>
 800813c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800813e:	2a01      	cmp	r2, #1
 8008140:	dc01      	bgt.n	8008146 <_printf_float+0x3ca>
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d538      	bpl.n	80081b8 <_printf_float+0x43c>
 8008146:	2301      	movs	r3, #1
 8008148:	4642      	mov	r2, r8
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	f43f ae74 	beq.w	8007e3e <_printf_float+0xc2>
 8008156:	ee18 3a10 	vmov	r3, s16
 800815a:	4652      	mov	r2, sl
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	f43f ae6b 	beq.w	8007e3e <_printf_float+0xc2>
 8008168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800816c:	2200      	movs	r2, #0
 800816e:	2300      	movs	r3, #0
 8008170:	f7f8 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008174:	b9d8      	cbnz	r0, 80081ae <_printf_float+0x432>
 8008176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008178:	f108 0201 	add.w	r2, r8, #1
 800817c:	3b01      	subs	r3, #1
 800817e:	4631      	mov	r1, r6
 8008180:	4628      	mov	r0, r5
 8008182:	47b8      	blx	r7
 8008184:	3001      	adds	r0, #1
 8008186:	d10e      	bne.n	80081a6 <_printf_float+0x42a>
 8008188:	e659      	b.n	8007e3e <_printf_float+0xc2>
 800818a:	2301      	movs	r3, #1
 800818c:	4652      	mov	r2, sl
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f ae52 	beq.w	8007e3e <_printf_float+0xc2>
 800819a:	f108 0801 	add.w	r8, r8, #1
 800819e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a0:	3b01      	subs	r3, #1
 80081a2:	4543      	cmp	r3, r8
 80081a4:	dcf1      	bgt.n	800818a <_printf_float+0x40e>
 80081a6:	464b      	mov	r3, r9
 80081a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081ac:	e6dc      	b.n	8007f68 <_printf_float+0x1ec>
 80081ae:	f04f 0800 	mov.w	r8, #0
 80081b2:	f104 0a1a 	add.w	sl, r4, #26
 80081b6:	e7f2      	b.n	800819e <_printf_float+0x422>
 80081b8:	2301      	movs	r3, #1
 80081ba:	4642      	mov	r2, r8
 80081bc:	e7df      	b.n	800817e <_printf_float+0x402>
 80081be:	2301      	movs	r3, #1
 80081c0:	464a      	mov	r2, r9
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	f43f ae38 	beq.w	8007e3e <_printf_float+0xc2>
 80081ce:	f108 0801 	add.w	r8, r8, #1
 80081d2:	68e3      	ldr	r3, [r4, #12]
 80081d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081d6:	1a5b      	subs	r3, r3, r1
 80081d8:	4543      	cmp	r3, r8
 80081da:	dcf0      	bgt.n	80081be <_printf_float+0x442>
 80081dc:	e6fa      	b.n	8007fd4 <_printf_float+0x258>
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	f104 0919 	add.w	r9, r4, #25
 80081e6:	e7f4      	b.n	80081d2 <_printf_float+0x456>

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4616      	mov	r6, r2
 80081ee:	4699      	mov	r9, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bfb8      	it	lt
 80081fc:	4613      	movlt	r3, r2
 80081fe:	6033      	str	r3, [r6, #0]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008204:	4607      	mov	r7, r0
 8008206:	460c      	mov	r4, r1
 8008208:	b10a      	cbz	r2, 800820e <_printf_common+0x26>
 800820a:	3301      	adds	r3, #1
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	0699      	lsls	r1, r3, #26
 8008212:	bf42      	ittt	mi
 8008214:	6833      	ldrmi	r3, [r6, #0]
 8008216:	3302      	addmi	r3, #2
 8008218:	6033      	strmi	r3, [r6, #0]
 800821a:	6825      	ldr	r5, [r4, #0]
 800821c:	f015 0506 	ands.w	r5, r5, #6
 8008220:	d106      	bne.n	8008230 <_printf_common+0x48>
 8008222:	f104 0a19 	add.w	sl, r4, #25
 8008226:	68e3      	ldr	r3, [r4, #12]
 8008228:	6832      	ldr	r2, [r6, #0]
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	42ab      	cmp	r3, r5
 800822e:	dc26      	bgt.n	800827e <_printf_common+0x96>
 8008230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008234:	1e13      	subs	r3, r2, #0
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	bf18      	it	ne
 800823a:	2301      	movne	r3, #1
 800823c:	0692      	lsls	r2, r2, #26
 800823e:	d42b      	bmi.n	8008298 <_printf_common+0xb0>
 8008240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008244:	4649      	mov	r1, r9
 8008246:	4638      	mov	r0, r7
 8008248:	47c0      	blx	r8
 800824a:	3001      	adds	r0, #1
 800824c:	d01e      	beq.n	800828c <_printf_common+0xa4>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	68e5      	ldr	r5, [r4, #12]
 8008252:	6832      	ldr	r2, [r6, #0]
 8008254:	f003 0306 	and.w	r3, r3, #6
 8008258:	2b04      	cmp	r3, #4
 800825a:	bf08      	it	eq
 800825c:	1aad      	subeq	r5, r5, r2
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	2600      	movs	r6, #0
 8008274:	341a      	adds	r4, #26
 8008276:	42b5      	cmp	r5, r6
 8008278:	d11a      	bne.n	80082b0 <_printf_common+0xc8>
 800827a:	2000      	movs	r0, #0
 800827c:	e008      	b.n	8008290 <_printf_common+0xa8>
 800827e:	2301      	movs	r3, #1
 8008280:	4652      	mov	r2, sl
 8008282:	4649      	mov	r1, r9
 8008284:	4638      	mov	r0, r7
 8008286:	47c0      	blx	r8
 8008288:	3001      	adds	r0, #1
 800828a:	d103      	bne.n	8008294 <_printf_common+0xac>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	3501      	adds	r5, #1
 8008296:	e7c6      	b.n	8008226 <_printf_common+0x3e>
 8008298:	18e1      	adds	r1, r4, r3
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	2030      	movs	r0, #48	; 0x30
 800829e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082a2:	4422      	add	r2, r4
 80082a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ac:	3302      	adds	r3, #2
 80082ae:	e7c7      	b.n	8008240 <_printf_common+0x58>
 80082b0:	2301      	movs	r3, #1
 80082b2:	4622      	mov	r2, r4
 80082b4:	4649      	mov	r1, r9
 80082b6:	4638      	mov	r0, r7
 80082b8:	47c0      	blx	r8
 80082ba:	3001      	adds	r0, #1
 80082bc:	d0e6      	beq.n	800828c <_printf_common+0xa4>
 80082be:	3601      	adds	r6, #1
 80082c0:	e7d9      	b.n	8008276 <_printf_common+0x8e>
	...

080082c4 <_printf_i>:
 80082c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	460c      	mov	r4, r1
 80082ca:	4691      	mov	r9, r2
 80082cc:	7e27      	ldrb	r7, [r4, #24]
 80082ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80082d0:	2f78      	cmp	r7, #120	; 0x78
 80082d2:	4680      	mov	r8, r0
 80082d4:	469a      	mov	sl, r3
 80082d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082da:	d807      	bhi.n	80082ec <_printf_i+0x28>
 80082dc:	2f62      	cmp	r7, #98	; 0x62
 80082de:	d80a      	bhi.n	80082f6 <_printf_i+0x32>
 80082e0:	2f00      	cmp	r7, #0
 80082e2:	f000 80d8 	beq.w	8008496 <_printf_i+0x1d2>
 80082e6:	2f58      	cmp	r7, #88	; 0x58
 80082e8:	f000 80a3 	beq.w	8008432 <_printf_i+0x16e>
 80082ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082f4:	e03a      	b.n	800836c <_printf_i+0xa8>
 80082f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082fa:	2b15      	cmp	r3, #21
 80082fc:	d8f6      	bhi.n	80082ec <_printf_i+0x28>
 80082fe:	a001      	add	r0, pc, #4	; (adr r0, 8008304 <_printf_i+0x40>)
 8008300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008304:	0800835d 	.word	0x0800835d
 8008308:	08008371 	.word	0x08008371
 800830c:	080082ed 	.word	0x080082ed
 8008310:	080082ed 	.word	0x080082ed
 8008314:	080082ed 	.word	0x080082ed
 8008318:	080082ed 	.word	0x080082ed
 800831c:	08008371 	.word	0x08008371
 8008320:	080082ed 	.word	0x080082ed
 8008324:	080082ed 	.word	0x080082ed
 8008328:	080082ed 	.word	0x080082ed
 800832c:	080082ed 	.word	0x080082ed
 8008330:	0800847d 	.word	0x0800847d
 8008334:	080083a1 	.word	0x080083a1
 8008338:	0800845f 	.word	0x0800845f
 800833c:	080082ed 	.word	0x080082ed
 8008340:	080082ed 	.word	0x080082ed
 8008344:	0800849f 	.word	0x0800849f
 8008348:	080082ed 	.word	0x080082ed
 800834c:	080083a1 	.word	0x080083a1
 8008350:	080082ed 	.word	0x080082ed
 8008354:	080082ed 	.word	0x080082ed
 8008358:	08008467 	.word	0x08008467
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	1d1a      	adds	r2, r3, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	600a      	str	r2, [r1, #0]
 8008364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800836c:	2301      	movs	r3, #1
 800836e:	e0a3      	b.n	80084b8 <_printf_i+0x1f4>
 8008370:	6825      	ldr	r5, [r4, #0]
 8008372:	6808      	ldr	r0, [r1, #0]
 8008374:	062e      	lsls	r6, r5, #24
 8008376:	f100 0304 	add.w	r3, r0, #4
 800837a:	d50a      	bpl.n	8008392 <_printf_i+0xce>
 800837c:	6805      	ldr	r5, [r0, #0]
 800837e:	600b      	str	r3, [r1, #0]
 8008380:	2d00      	cmp	r5, #0
 8008382:	da03      	bge.n	800838c <_printf_i+0xc8>
 8008384:	232d      	movs	r3, #45	; 0x2d
 8008386:	426d      	negs	r5, r5
 8008388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800838c:	485e      	ldr	r0, [pc, #376]	; (8008508 <_printf_i+0x244>)
 800838e:	230a      	movs	r3, #10
 8008390:	e019      	b.n	80083c6 <_printf_i+0x102>
 8008392:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008396:	6805      	ldr	r5, [r0, #0]
 8008398:	600b      	str	r3, [r1, #0]
 800839a:	bf18      	it	ne
 800839c:	b22d      	sxthne	r5, r5
 800839e:	e7ef      	b.n	8008380 <_printf_i+0xbc>
 80083a0:	680b      	ldr	r3, [r1, #0]
 80083a2:	6825      	ldr	r5, [r4, #0]
 80083a4:	1d18      	adds	r0, r3, #4
 80083a6:	6008      	str	r0, [r1, #0]
 80083a8:	0628      	lsls	r0, r5, #24
 80083aa:	d501      	bpl.n	80083b0 <_printf_i+0xec>
 80083ac:	681d      	ldr	r5, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <_printf_i+0xf2>
 80083b0:	0669      	lsls	r1, r5, #25
 80083b2:	d5fb      	bpl.n	80083ac <_printf_i+0xe8>
 80083b4:	881d      	ldrh	r5, [r3, #0]
 80083b6:	4854      	ldr	r0, [pc, #336]	; (8008508 <_printf_i+0x244>)
 80083b8:	2f6f      	cmp	r7, #111	; 0x6f
 80083ba:	bf0c      	ite	eq
 80083bc:	2308      	moveq	r3, #8
 80083be:	230a      	movne	r3, #10
 80083c0:	2100      	movs	r1, #0
 80083c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083c6:	6866      	ldr	r6, [r4, #4]
 80083c8:	60a6      	str	r6, [r4, #8]
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	bfa2      	ittt	ge
 80083ce:	6821      	ldrge	r1, [r4, #0]
 80083d0:	f021 0104 	bicge.w	r1, r1, #4
 80083d4:	6021      	strge	r1, [r4, #0]
 80083d6:	b90d      	cbnz	r5, 80083dc <_printf_i+0x118>
 80083d8:	2e00      	cmp	r6, #0
 80083da:	d04d      	beq.n	8008478 <_printf_i+0x1b4>
 80083dc:	4616      	mov	r6, r2
 80083de:	fbb5 f1f3 	udiv	r1, r5, r3
 80083e2:	fb03 5711 	mls	r7, r3, r1, r5
 80083e6:	5dc7      	ldrb	r7, [r0, r7]
 80083e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ec:	462f      	mov	r7, r5
 80083ee:	42bb      	cmp	r3, r7
 80083f0:	460d      	mov	r5, r1
 80083f2:	d9f4      	bls.n	80083de <_printf_i+0x11a>
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d10b      	bne.n	8008410 <_printf_i+0x14c>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07df      	lsls	r7, r3, #31
 80083fc:	d508      	bpl.n	8008410 <_printf_i+0x14c>
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	4299      	cmp	r1, r3
 8008404:	bfde      	ittt	le
 8008406:	2330      	movle	r3, #48	; 0x30
 8008408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800840c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008410:	1b92      	subs	r2, r2, r6
 8008412:	6122      	str	r2, [r4, #16]
 8008414:	f8cd a000 	str.w	sl, [sp]
 8008418:	464b      	mov	r3, r9
 800841a:	aa03      	add	r2, sp, #12
 800841c:	4621      	mov	r1, r4
 800841e:	4640      	mov	r0, r8
 8008420:	f7ff fee2 	bl	80081e8 <_printf_common>
 8008424:	3001      	adds	r0, #1
 8008426:	d14c      	bne.n	80084c2 <_printf_i+0x1fe>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800842c:	b004      	add	sp, #16
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	4835      	ldr	r0, [pc, #212]	; (8008508 <_printf_i+0x244>)
 8008434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	680e      	ldr	r6, [r1, #0]
 800843c:	061f      	lsls	r7, r3, #24
 800843e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008442:	600e      	str	r6, [r1, #0]
 8008444:	d514      	bpl.n	8008470 <_printf_i+0x1ac>
 8008446:	07d9      	lsls	r1, r3, #31
 8008448:	bf44      	itt	mi
 800844a:	f043 0320 	orrmi.w	r3, r3, #32
 800844e:	6023      	strmi	r3, [r4, #0]
 8008450:	b91d      	cbnz	r5, 800845a <_printf_i+0x196>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f023 0320 	bic.w	r3, r3, #32
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	2310      	movs	r3, #16
 800845c:	e7b0      	b.n	80083c0 <_printf_i+0xfc>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	f043 0320 	orr.w	r3, r3, #32
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	2378      	movs	r3, #120	; 0x78
 8008468:	4828      	ldr	r0, [pc, #160]	; (800850c <_printf_i+0x248>)
 800846a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800846e:	e7e3      	b.n	8008438 <_printf_i+0x174>
 8008470:	065e      	lsls	r6, r3, #25
 8008472:	bf48      	it	mi
 8008474:	b2ad      	uxthmi	r5, r5
 8008476:	e7e6      	b.n	8008446 <_printf_i+0x182>
 8008478:	4616      	mov	r6, r2
 800847a:	e7bb      	b.n	80083f4 <_printf_i+0x130>
 800847c:	680b      	ldr	r3, [r1, #0]
 800847e:	6826      	ldr	r6, [r4, #0]
 8008480:	6960      	ldr	r0, [r4, #20]
 8008482:	1d1d      	adds	r5, r3, #4
 8008484:	600d      	str	r5, [r1, #0]
 8008486:	0635      	lsls	r5, r6, #24
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	d501      	bpl.n	8008490 <_printf_i+0x1cc>
 800848c:	6018      	str	r0, [r3, #0]
 800848e:	e002      	b.n	8008496 <_printf_i+0x1d2>
 8008490:	0671      	lsls	r1, r6, #25
 8008492:	d5fb      	bpl.n	800848c <_printf_i+0x1c8>
 8008494:	8018      	strh	r0, [r3, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	4616      	mov	r6, r2
 800849c:	e7ba      	b.n	8008414 <_printf_i+0x150>
 800849e:	680b      	ldr	r3, [r1, #0]
 80084a0:	1d1a      	adds	r2, r3, #4
 80084a2:	600a      	str	r2, [r1, #0]
 80084a4:	681e      	ldr	r6, [r3, #0]
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	2100      	movs	r1, #0
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7f7 fe98 	bl	80001e0 <memchr>
 80084b0:	b108      	cbz	r0, 80084b6 <_printf_i+0x1f2>
 80084b2:	1b80      	subs	r0, r0, r6
 80084b4:	6060      	str	r0, [r4, #4]
 80084b6:	6863      	ldr	r3, [r4, #4]
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	2300      	movs	r3, #0
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c0:	e7a8      	b.n	8008414 <_printf_i+0x150>
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	4632      	mov	r2, r6
 80084c6:	4649      	mov	r1, r9
 80084c8:	4640      	mov	r0, r8
 80084ca:	47d0      	blx	sl
 80084cc:	3001      	adds	r0, #1
 80084ce:	d0ab      	beq.n	8008428 <_printf_i+0x164>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	079b      	lsls	r3, r3, #30
 80084d4:	d413      	bmi.n	80084fe <_printf_i+0x23a>
 80084d6:	68e0      	ldr	r0, [r4, #12]
 80084d8:	9b03      	ldr	r3, [sp, #12]
 80084da:	4298      	cmp	r0, r3
 80084dc:	bfb8      	it	lt
 80084de:	4618      	movlt	r0, r3
 80084e0:	e7a4      	b.n	800842c <_printf_i+0x168>
 80084e2:	2301      	movs	r3, #1
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d09b      	beq.n	8008428 <_printf_i+0x164>
 80084f0:	3501      	adds	r5, #1
 80084f2:	68e3      	ldr	r3, [r4, #12]
 80084f4:	9903      	ldr	r1, [sp, #12]
 80084f6:	1a5b      	subs	r3, r3, r1
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	dcf2      	bgt.n	80084e2 <_printf_i+0x21e>
 80084fc:	e7eb      	b.n	80084d6 <_printf_i+0x212>
 80084fe:	2500      	movs	r5, #0
 8008500:	f104 0619 	add.w	r6, r4, #25
 8008504:	e7f5      	b.n	80084f2 <_printf_i+0x22e>
 8008506:	bf00      	nop
 8008508:	0800a9f2 	.word	0x0800a9f2
 800850c:	0800aa03 	.word	0x0800aa03

08008510 <iprintf>:
 8008510:	b40f      	push	{r0, r1, r2, r3}
 8008512:	4b0a      	ldr	r3, [pc, #40]	; (800853c <iprintf+0x2c>)
 8008514:	b513      	push	{r0, r1, r4, lr}
 8008516:	681c      	ldr	r4, [r3, #0]
 8008518:	b124      	cbz	r4, 8008524 <iprintf+0x14>
 800851a:	69a3      	ldr	r3, [r4, #24]
 800851c:	b913      	cbnz	r3, 8008524 <iprintf+0x14>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 fede 	bl	80092e0 <__sinit>
 8008524:	ab05      	add	r3, sp, #20
 8008526:	9a04      	ldr	r2, [sp, #16]
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	4620      	mov	r0, r4
 800852e:	f001 fbe7 	bl	8009d00 <_vfiprintf_r>
 8008532:	b002      	add	sp, #8
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	b004      	add	sp, #16
 800853a:	4770      	bx	lr
 800853c:	20000010 	.word	0x20000010

08008540 <quorem>:
 8008540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	6903      	ldr	r3, [r0, #16]
 8008546:	690c      	ldr	r4, [r1, #16]
 8008548:	42a3      	cmp	r3, r4
 800854a:	4607      	mov	r7, r0
 800854c:	f2c0 8081 	blt.w	8008652 <quorem+0x112>
 8008550:	3c01      	subs	r4, #1
 8008552:	f101 0814 	add.w	r8, r1, #20
 8008556:	f100 0514 	add.w	r5, r0, #20
 800855a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008568:	3301      	adds	r3, #1
 800856a:	429a      	cmp	r2, r3
 800856c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008574:	fbb2 f6f3 	udiv	r6, r2, r3
 8008578:	d331      	bcc.n	80085de <quorem+0x9e>
 800857a:	f04f 0e00 	mov.w	lr, #0
 800857e:	4640      	mov	r0, r8
 8008580:	46ac      	mov	ip, r5
 8008582:	46f2      	mov	sl, lr
 8008584:	f850 2b04 	ldr.w	r2, [r0], #4
 8008588:	b293      	uxth	r3, r2
 800858a:	fb06 e303 	mla	r3, r6, r3, lr
 800858e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008592:	b29b      	uxth	r3, r3
 8008594:	ebaa 0303 	sub.w	r3, sl, r3
 8008598:	0c12      	lsrs	r2, r2, #16
 800859a:	f8dc a000 	ldr.w	sl, [ip]
 800859e:	fb06 e202 	mla	r2, r6, r2, lr
 80085a2:	fa13 f38a 	uxtah	r3, r3, sl
 80085a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80085aa:	fa1f fa82 	uxth.w	sl, r2
 80085ae:	f8dc 2000 	ldr.w	r2, [ip]
 80085b2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80085b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c0:	4581      	cmp	r9, r0
 80085c2:	f84c 3b04 	str.w	r3, [ip], #4
 80085c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085ca:	d2db      	bcs.n	8008584 <quorem+0x44>
 80085cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80085d0:	b92b      	cbnz	r3, 80085de <quorem+0x9e>
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	3b04      	subs	r3, #4
 80085d6:	429d      	cmp	r5, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	d32e      	bcc.n	800863a <quorem+0xfa>
 80085dc:	613c      	str	r4, [r7, #16]
 80085de:	4638      	mov	r0, r7
 80085e0:	f001 f9aa 	bl	8009938 <__mcmp>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	db24      	blt.n	8008632 <quorem+0xf2>
 80085e8:	3601      	adds	r6, #1
 80085ea:	4628      	mov	r0, r5
 80085ec:	f04f 0c00 	mov.w	ip, #0
 80085f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80085f4:	f8d0 e000 	ldr.w	lr, [r0]
 80085f8:	b293      	uxth	r3, r2
 80085fa:	ebac 0303 	sub.w	r3, ip, r3
 80085fe:	0c12      	lsrs	r2, r2, #16
 8008600:	fa13 f38e 	uxtah	r3, r3, lr
 8008604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800860c:	b29b      	uxth	r3, r3
 800860e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008612:	45c1      	cmp	r9, r8
 8008614:	f840 3b04 	str.w	r3, [r0], #4
 8008618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800861c:	d2e8      	bcs.n	80085f0 <quorem+0xb0>
 800861e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008626:	b922      	cbnz	r2, 8008632 <quorem+0xf2>
 8008628:	3b04      	subs	r3, #4
 800862a:	429d      	cmp	r5, r3
 800862c:	461a      	mov	r2, r3
 800862e:	d30a      	bcc.n	8008646 <quorem+0x106>
 8008630:	613c      	str	r4, [r7, #16]
 8008632:	4630      	mov	r0, r6
 8008634:	b003      	add	sp, #12
 8008636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	3b04      	subs	r3, #4
 800863e:	2a00      	cmp	r2, #0
 8008640:	d1cc      	bne.n	80085dc <quorem+0x9c>
 8008642:	3c01      	subs	r4, #1
 8008644:	e7c7      	b.n	80085d6 <quorem+0x96>
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	3b04      	subs	r3, #4
 800864a:	2a00      	cmp	r2, #0
 800864c:	d1f0      	bne.n	8008630 <quorem+0xf0>
 800864e:	3c01      	subs	r4, #1
 8008650:	e7eb      	b.n	800862a <quorem+0xea>
 8008652:	2000      	movs	r0, #0
 8008654:	e7ee      	b.n	8008634 <quorem+0xf4>
	...

08008658 <_dtoa_r>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	ed2d 8b02 	vpush	{d8}
 8008660:	ec57 6b10 	vmov	r6, r7, d0
 8008664:	b095      	sub	sp, #84	; 0x54
 8008666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800866c:	9105      	str	r1, [sp, #20]
 800866e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008672:	4604      	mov	r4, r0
 8008674:	9209      	str	r2, [sp, #36]	; 0x24
 8008676:	930f      	str	r3, [sp, #60]	; 0x3c
 8008678:	b975      	cbnz	r5, 8008698 <_dtoa_r+0x40>
 800867a:	2010      	movs	r0, #16
 800867c:	f000 fed6 	bl	800942c <malloc>
 8008680:	4602      	mov	r2, r0
 8008682:	6260      	str	r0, [r4, #36]	; 0x24
 8008684:	b920      	cbnz	r0, 8008690 <_dtoa_r+0x38>
 8008686:	4bb2      	ldr	r3, [pc, #712]	; (8008950 <_dtoa_r+0x2f8>)
 8008688:	21ea      	movs	r1, #234	; 0xea
 800868a:	48b2      	ldr	r0, [pc, #712]	; (8008954 <_dtoa_r+0x2fc>)
 800868c:	f001 fd8e 	bl	800a1ac <__assert_func>
 8008690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008694:	6005      	str	r5, [r0, #0]
 8008696:	60c5      	str	r5, [r0, #12]
 8008698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	b151      	cbz	r1, 80086b4 <_dtoa_r+0x5c>
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	604a      	str	r2, [r1, #4]
 80086a2:	2301      	movs	r3, #1
 80086a4:	4093      	lsls	r3, r2
 80086a6:	608b      	str	r3, [r1, #8]
 80086a8:	4620      	mov	r0, r4
 80086aa:	f000 ff07 	bl	80094bc <_Bfree>
 80086ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	1e3b      	subs	r3, r7, #0
 80086b6:	bfb9      	ittee	lt
 80086b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086bc:	9303      	strlt	r3, [sp, #12]
 80086be:	2300      	movge	r3, #0
 80086c0:	f8c8 3000 	strge.w	r3, [r8]
 80086c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80086c8:	4ba3      	ldr	r3, [pc, #652]	; (8008958 <_dtoa_r+0x300>)
 80086ca:	bfbc      	itt	lt
 80086cc:	2201      	movlt	r2, #1
 80086ce:	f8c8 2000 	strlt.w	r2, [r8]
 80086d2:	ea33 0309 	bics.w	r3, r3, r9
 80086d6:	d11b      	bne.n	8008710 <_dtoa_r+0xb8>
 80086d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086da:	f242 730f 	movw	r3, #9999	; 0x270f
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086e4:	4333      	orrs	r3, r6
 80086e6:	f000 857a 	beq.w	80091de <_dtoa_r+0xb86>
 80086ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ec:	b963      	cbnz	r3, 8008708 <_dtoa_r+0xb0>
 80086ee:	4b9b      	ldr	r3, [pc, #620]	; (800895c <_dtoa_r+0x304>)
 80086f0:	e024      	b.n	800873c <_dtoa_r+0xe4>
 80086f2:	4b9b      	ldr	r3, [pc, #620]	; (8008960 <_dtoa_r+0x308>)
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	9800      	ldr	r0, [sp, #0]
 80086fe:	b015      	add	sp, #84	; 0x54
 8008700:	ecbd 8b02 	vpop	{d8}
 8008704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008708:	4b94      	ldr	r3, [pc, #592]	; (800895c <_dtoa_r+0x304>)
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	3303      	adds	r3, #3
 800870e:	e7f3      	b.n	80086f8 <_dtoa_r+0xa0>
 8008710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008714:	2200      	movs	r2, #0
 8008716:	ec51 0b17 	vmov	r0, r1, d7
 800871a:	2300      	movs	r3, #0
 800871c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008720:	f7f8 f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008724:	4680      	mov	r8, r0
 8008726:	b158      	cbz	r0, 8008740 <_dtoa_r+0xe8>
 8008728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800872a:	2301      	movs	r3, #1
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 8551 	beq.w	80091d8 <_dtoa_r+0xb80>
 8008736:	488b      	ldr	r0, [pc, #556]	; (8008964 <_dtoa_r+0x30c>)
 8008738:	6018      	str	r0, [r3, #0]
 800873a:	1e43      	subs	r3, r0, #1
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	e7dd      	b.n	80086fc <_dtoa_r+0xa4>
 8008740:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008744:	aa12      	add	r2, sp, #72	; 0x48
 8008746:	a913      	add	r1, sp, #76	; 0x4c
 8008748:	4620      	mov	r0, r4
 800874a:	f001 f999 	bl	8009a80 <__d2b>
 800874e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008752:	4683      	mov	fp, r0
 8008754:	2d00      	cmp	r5, #0
 8008756:	d07c      	beq.n	8008852 <_dtoa_r+0x1fa>
 8008758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800875e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008762:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008766:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800876a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800876e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008772:	4b7d      	ldr	r3, [pc, #500]	; (8008968 <_dtoa_r+0x310>)
 8008774:	2200      	movs	r2, #0
 8008776:	4630      	mov	r0, r6
 8008778:	4639      	mov	r1, r7
 800877a:	f7f7 fd85 	bl	8000288 <__aeabi_dsub>
 800877e:	a36e      	add	r3, pc, #440	; (adr r3, 8008938 <_dtoa_r+0x2e0>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	a36d      	add	r3, pc, #436	; (adr r3, 8008940 <_dtoa_r+0x2e8>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd7d 	bl	800028c <__adddf3>
 8008792:	4606      	mov	r6, r0
 8008794:	4628      	mov	r0, r5
 8008796:	460f      	mov	r7, r1
 8008798:	f7f7 fec4 	bl	8000524 <__aeabi_i2d>
 800879c:	a36a      	add	r3, pc, #424	; (adr r3, 8008948 <_dtoa_r+0x2f0>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 ff29 	bl	80005f8 <__aeabi_dmul>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f7 fd6d 	bl	800028c <__adddf3>
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	f7f8 f9cf 	bl	8000b58 <__aeabi_d2iz>
 80087ba:	2200      	movs	r2, #0
 80087bc:	4682      	mov	sl, r0
 80087be:	2300      	movs	r3, #0
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f98a 	bl	8000adc <__aeabi_dcmplt>
 80087c8:	b148      	cbz	r0, 80087de <_dtoa_r+0x186>
 80087ca:	4650      	mov	r0, sl
 80087cc:	f7f7 feaa 	bl	8000524 <__aeabi_i2d>
 80087d0:	4632      	mov	r2, r6
 80087d2:	463b      	mov	r3, r7
 80087d4:	f7f8 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80087d8:	b908      	cbnz	r0, 80087de <_dtoa_r+0x186>
 80087da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087de:	f1ba 0f16 	cmp.w	sl, #22
 80087e2:	d854      	bhi.n	800888e <_dtoa_r+0x236>
 80087e4:	4b61      	ldr	r3, [pc, #388]	; (800896c <_dtoa_r+0x314>)
 80087e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80087f2:	f7f8 f973 	bl	8000adc <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d04b      	beq.n	8008892 <_dtoa_r+0x23a>
 80087fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087fe:	2300      	movs	r3, #0
 8008800:	930e      	str	r3, [sp, #56]	; 0x38
 8008802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008804:	1b5d      	subs	r5, r3, r5
 8008806:	1e6b      	subs	r3, r5, #1
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	bf43      	ittte	mi
 800880c:	2300      	movmi	r3, #0
 800880e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008812:	9304      	strmi	r3, [sp, #16]
 8008814:	f04f 0800 	movpl.w	r8, #0
 8008818:	f1ba 0f00 	cmp.w	sl, #0
 800881c:	db3b      	blt.n	8008896 <_dtoa_r+0x23e>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008824:	4453      	add	r3, sl
 8008826:	9304      	str	r3, [sp, #16]
 8008828:	2300      	movs	r3, #0
 800882a:	9306      	str	r3, [sp, #24]
 800882c:	9b05      	ldr	r3, [sp, #20]
 800882e:	2b09      	cmp	r3, #9
 8008830:	d869      	bhi.n	8008906 <_dtoa_r+0x2ae>
 8008832:	2b05      	cmp	r3, #5
 8008834:	bfc4      	itt	gt
 8008836:	3b04      	subgt	r3, #4
 8008838:	9305      	strgt	r3, [sp, #20]
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	f1a3 0302 	sub.w	r3, r3, #2
 8008840:	bfcc      	ite	gt
 8008842:	2500      	movgt	r5, #0
 8008844:	2501      	movle	r5, #1
 8008846:	2b03      	cmp	r3, #3
 8008848:	d869      	bhi.n	800891e <_dtoa_r+0x2c6>
 800884a:	e8df f003 	tbb	[pc, r3]
 800884e:	4e2c      	.short	0x4e2c
 8008850:	5a4c      	.short	0x5a4c
 8008852:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008856:	441d      	add	r5, r3
 8008858:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800885c:	2b20      	cmp	r3, #32
 800885e:	bfc1      	itttt	gt
 8008860:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008864:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008868:	fa09 f303 	lslgt.w	r3, r9, r3
 800886c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008870:	bfda      	itte	le
 8008872:	f1c3 0320 	rsble	r3, r3, #32
 8008876:	fa06 f003 	lslle.w	r0, r6, r3
 800887a:	4318      	orrgt	r0, r3
 800887c:	f7f7 fe42 	bl	8000504 <__aeabi_ui2d>
 8008880:	2301      	movs	r3, #1
 8008882:	4606      	mov	r6, r0
 8008884:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008888:	3d01      	subs	r5, #1
 800888a:	9310      	str	r3, [sp, #64]	; 0x40
 800888c:	e771      	b.n	8008772 <_dtoa_r+0x11a>
 800888e:	2301      	movs	r3, #1
 8008890:	e7b6      	b.n	8008800 <_dtoa_r+0x1a8>
 8008892:	900e      	str	r0, [sp, #56]	; 0x38
 8008894:	e7b5      	b.n	8008802 <_dtoa_r+0x1aa>
 8008896:	f1ca 0300 	rsb	r3, sl, #0
 800889a:	9306      	str	r3, [sp, #24]
 800889c:	2300      	movs	r3, #0
 800889e:	eba8 080a 	sub.w	r8, r8, sl
 80088a2:	930d      	str	r3, [sp, #52]	; 0x34
 80088a4:	e7c2      	b.n	800882c <_dtoa_r+0x1d4>
 80088a6:	2300      	movs	r3, #0
 80088a8:	9308      	str	r3, [sp, #32]
 80088aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc39      	bgt.n	8008924 <_dtoa_r+0x2cc>
 80088b0:	f04f 0901 	mov.w	r9, #1
 80088b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80088b8:	464b      	mov	r3, r9
 80088ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80088be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088c0:	2200      	movs	r2, #0
 80088c2:	6042      	str	r2, [r0, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f102 0614 	add.w	r6, r2, #20
 80088ca:	429e      	cmp	r6, r3
 80088cc:	6841      	ldr	r1, [r0, #4]
 80088ce:	d92f      	bls.n	8008930 <_dtoa_r+0x2d8>
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fdb3 	bl	800943c <_Balloc>
 80088d6:	9000      	str	r0, [sp, #0]
 80088d8:	2800      	cmp	r0, #0
 80088da:	d14b      	bne.n	8008974 <_dtoa_r+0x31c>
 80088dc:	4b24      	ldr	r3, [pc, #144]	; (8008970 <_dtoa_r+0x318>)
 80088de:	4602      	mov	r2, r0
 80088e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80088e4:	e6d1      	b.n	800868a <_dtoa_r+0x32>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e7de      	b.n	80088a8 <_dtoa_r+0x250>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9308      	str	r3, [sp, #32]
 80088ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f0:	eb0a 0903 	add.w	r9, sl, r3
 80088f4:	f109 0301 	add.w	r3, r9, #1
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	bfb8      	it	lt
 80088fe:	2301      	movlt	r3, #1
 8008900:	e7dd      	b.n	80088be <_dtoa_r+0x266>
 8008902:	2301      	movs	r3, #1
 8008904:	e7f2      	b.n	80088ec <_dtoa_r+0x294>
 8008906:	2501      	movs	r5, #1
 8008908:	2300      	movs	r3, #0
 800890a:	9305      	str	r3, [sp, #20]
 800890c:	9508      	str	r5, [sp, #32]
 800890e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008912:	2200      	movs	r2, #0
 8008914:	f8cd 9004 	str.w	r9, [sp, #4]
 8008918:	2312      	movs	r3, #18
 800891a:	9209      	str	r2, [sp, #36]	; 0x24
 800891c:	e7cf      	b.n	80088be <_dtoa_r+0x266>
 800891e:	2301      	movs	r3, #1
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	e7f4      	b.n	800890e <_dtoa_r+0x2b6>
 8008924:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008928:	f8cd 9004 	str.w	r9, [sp, #4]
 800892c:	464b      	mov	r3, r9
 800892e:	e7c6      	b.n	80088be <_dtoa_r+0x266>
 8008930:	3101      	adds	r1, #1
 8008932:	6041      	str	r1, [r0, #4]
 8008934:	0052      	lsls	r2, r2, #1
 8008936:	e7c6      	b.n	80088c6 <_dtoa_r+0x26e>
 8008938:	636f4361 	.word	0x636f4361
 800893c:	3fd287a7 	.word	0x3fd287a7
 8008940:	8b60c8b3 	.word	0x8b60c8b3
 8008944:	3fc68a28 	.word	0x3fc68a28
 8008948:	509f79fb 	.word	0x509f79fb
 800894c:	3fd34413 	.word	0x3fd34413
 8008950:	0800aa21 	.word	0x0800aa21
 8008954:	0800aa38 	.word	0x0800aa38
 8008958:	7ff00000 	.word	0x7ff00000
 800895c:	0800aa1d 	.word	0x0800aa1d
 8008960:	0800aa14 	.word	0x0800aa14
 8008964:	0800a9f1 	.word	0x0800a9f1
 8008968:	3ff80000 	.word	0x3ff80000
 800896c:	0800ab90 	.word	0x0800ab90
 8008970:	0800aa97 	.word	0x0800aa97
 8008974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008976:	9a00      	ldr	r2, [sp, #0]
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	2b0e      	cmp	r3, #14
 800897e:	f200 80ad 	bhi.w	8008adc <_dtoa_r+0x484>
 8008982:	2d00      	cmp	r5, #0
 8008984:	f000 80aa 	beq.w	8008adc <_dtoa_r+0x484>
 8008988:	f1ba 0f00 	cmp.w	sl, #0
 800898c:	dd36      	ble.n	80089fc <_dtoa_r+0x3a4>
 800898e:	4ac3      	ldr	r2, [pc, #780]	; (8008c9c <_dtoa_r+0x644>)
 8008990:	f00a 030f 	and.w	r3, sl, #15
 8008994:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008998:	ed93 7b00 	vldr	d7, [r3]
 800899c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80089a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80089a4:	eeb0 8a47 	vmov.f32	s16, s14
 80089a8:	eef0 8a67 	vmov.f32	s17, s15
 80089ac:	d016      	beq.n	80089dc <_dtoa_r+0x384>
 80089ae:	4bbc      	ldr	r3, [pc, #752]	; (8008ca0 <_dtoa_r+0x648>)
 80089b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b8:	f7f7 ff48 	bl	800084c <__aeabi_ddiv>
 80089bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c0:	f007 070f 	and.w	r7, r7, #15
 80089c4:	2503      	movs	r5, #3
 80089c6:	4eb6      	ldr	r6, [pc, #728]	; (8008ca0 <_dtoa_r+0x648>)
 80089c8:	b957      	cbnz	r7, 80089e0 <_dtoa_r+0x388>
 80089ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ce:	ec53 2b18 	vmov	r2, r3, d8
 80089d2:	f7f7 ff3b 	bl	800084c <__aeabi_ddiv>
 80089d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089da:	e029      	b.n	8008a30 <_dtoa_r+0x3d8>
 80089dc:	2502      	movs	r5, #2
 80089de:	e7f2      	b.n	80089c6 <_dtoa_r+0x36e>
 80089e0:	07f9      	lsls	r1, r7, #31
 80089e2:	d508      	bpl.n	80089f6 <_dtoa_r+0x39e>
 80089e4:	ec51 0b18 	vmov	r0, r1, d8
 80089e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	ec41 0b18 	vmov	d8, r0, r1
 80089f4:	3501      	adds	r5, #1
 80089f6:	107f      	asrs	r7, r7, #1
 80089f8:	3608      	adds	r6, #8
 80089fa:	e7e5      	b.n	80089c8 <_dtoa_r+0x370>
 80089fc:	f000 80a6 	beq.w	8008b4c <_dtoa_r+0x4f4>
 8008a00:	f1ca 0600 	rsb	r6, sl, #0
 8008a04:	4ba5      	ldr	r3, [pc, #660]	; (8008c9c <_dtoa_r+0x644>)
 8008a06:	4fa6      	ldr	r7, [pc, #664]	; (8008ca0 <_dtoa_r+0x648>)
 8008a08:	f006 020f 	and.w	r2, r6, #15
 8008a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a18:	f7f7 fdee 	bl	80005f8 <__aeabi_dmul>
 8008a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a20:	1136      	asrs	r6, r6, #4
 8008a22:	2300      	movs	r3, #0
 8008a24:	2502      	movs	r5, #2
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	f040 8085 	bne.w	8008b36 <_dtoa_r+0x4de>
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1d2      	bne.n	80089d6 <_dtoa_r+0x37e>
 8008a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 808c 	beq.w	8008b50 <_dtoa_r+0x4f8>
 8008a38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a3c:	4b99      	ldr	r3, [pc, #612]	; (8008ca4 <_dtoa_r+0x64c>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4630      	mov	r0, r6
 8008a42:	4639      	mov	r1, r7
 8008a44:	f7f8 f84a 	bl	8000adc <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f000 8081 	beq.w	8008b50 <_dtoa_r+0x4f8>
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d07d      	beq.n	8008b50 <_dtoa_r+0x4f8>
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	dd3c      	ble.n	8008ad4 <_dtoa_r+0x47c>
 8008a5a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008a5e:	9307      	str	r3, [sp, #28]
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b91      	ldr	r3, [pc, #580]	; (8008ca8 <_dtoa_r+0x650>)
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f7 fdc6 	bl	80005f8 <__aeabi_dmul>
 8008a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a70:	3501      	adds	r5, #1
 8008a72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008a76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f7f7 fd52 	bl	8000524 <__aeabi_i2d>
 8008a80:	4632      	mov	r2, r6
 8008a82:	463b      	mov	r3, r7
 8008a84:	f7f7 fdb8 	bl	80005f8 <__aeabi_dmul>
 8008a88:	4b88      	ldr	r3, [pc, #544]	; (8008cac <_dtoa_r+0x654>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fbfe 	bl	800028c <__adddf3>
 8008a90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a98:	9303      	str	r3, [sp, #12]
 8008a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d15c      	bne.n	8008b5a <_dtoa_r+0x502>
 8008aa0:	4b83      	ldr	r3, [pc, #524]	; (8008cb0 <_dtoa_r+0x658>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f7 fbee 	bl	8000288 <__aeabi_dsub>
 8008aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	f7f8 f830 	bl	8000b18 <__aeabi_dcmpgt>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f040 8296 	bne.w	8008fea <_dtoa_r+0x992>
 8008abe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f8 f807 	bl	8000adc <__aeabi_dcmplt>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f040 8288 	bne.w	8008fe4 <_dtoa_r+0x98c>
 8008ad4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f2c0 8158 	blt.w	8008d94 <_dtoa_r+0x73c>
 8008ae4:	f1ba 0f0e 	cmp.w	sl, #14
 8008ae8:	f300 8154 	bgt.w	8008d94 <_dtoa_r+0x73c>
 8008aec:	4b6b      	ldr	r3, [pc, #428]	; (8008c9c <_dtoa_r+0x644>)
 8008aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008af2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f280 80e3 	bge.w	8008cc4 <_dtoa_r+0x66c>
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f300 80df 	bgt.w	8008cc4 <_dtoa_r+0x66c>
 8008b06:	f040 826d 	bne.w	8008fe4 <_dtoa_r+0x98c>
 8008b0a:	4b69      	ldr	r3, [pc, #420]	; (8008cb0 <_dtoa_r+0x658>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b1a:	f7f7 fff3 	bl	8000b04 <__aeabi_dcmpge>
 8008b1e:	9e01      	ldr	r6, [sp, #4]
 8008b20:	4637      	mov	r7, r6
 8008b22:	2800      	cmp	r0, #0
 8008b24:	f040 8243 	bne.w	8008fae <_dtoa_r+0x956>
 8008b28:	9d00      	ldr	r5, [sp, #0]
 8008b2a:	2331      	movs	r3, #49	; 0x31
 8008b2c:	f805 3b01 	strb.w	r3, [r5], #1
 8008b30:	f10a 0a01 	add.w	sl, sl, #1
 8008b34:	e23f      	b.n	8008fb6 <_dtoa_r+0x95e>
 8008b36:	07f2      	lsls	r2, r6, #31
 8008b38:	d505      	bpl.n	8008b46 <_dtoa_r+0x4ee>
 8008b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	3501      	adds	r5, #1
 8008b44:	2301      	movs	r3, #1
 8008b46:	1076      	asrs	r6, r6, #1
 8008b48:	3708      	adds	r7, #8
 8008b4a:	e76c      	b.n	8008a26 <_dtoa_r+0x3ce>
 8008b4c:	2502      	movs	r5, #2
 8008b4e:	e76f      	b.n	8008a30 <_dtoa_r+0x3d8>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	f8cd a01c 	str.w	sl, [sp, #28]
 8008b56:	930c      	str	r3, [sp, #48]	; 0x30
 8008b58:	e78d      	b.n	8008a76 <_dtoa_r+0x41e>
 8008b5a:	9900      	ldr	r1, [sp, #0]
 8008b5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b60:	4b4e      	ldr	r3, [pc, #312]	; (8008c9c <_dtoa_r+0x644>)
 8008b62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b66:	4401      	add	r1, r0
 8008b68:	9102      	str	r1, [sp, #8]
 8008b6a:	9908      	ldr	r1, [sp, #32]
 8008b6c:	eeb0 8a47 	vmov.f32	s16, s14
 8008b70:	eef0 8a67 	vmov.f32	s17, s15
 8008b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	d045      	beq.n	8008c0c <_dtoa_r+0x5b4>
 8008b80:	494c      	ldr	r1, [pc, #304]	; (8008cb4 <_dtoa_r+0x65c>)
 8008b82:	2000      	movs	r0, #0
 8008b84:	f7f7 fe62 	bl	800084c <__aeabi_ddiv>
 8008b88:	ec53 2b18 	vmov	r2, r3, d8
 8008b8c:	f7f7 fb7c 	bl	8000288 <__aeabi_dsub>
 8008b90:	9d00      	ldr	r5, [sp, #0]
 8008b92:	ec41 0b18 	vmov	d8, r0, r1
 8008b96:	4639      	mov	r1, r7
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7f7 ffdd 	bl	8000b58 <__aeabi_d2iz>
 8008b9e:	900c      	str	r0, [sp, #48]	; 0x30
 8008ba0:	f7f7 fcc0 	bl	8000524 <__aeabi_i2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f7 fb6c 	bl	8000288 <__aeabi_dsub>
 8008bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bb2:	3330      	adds	r3, #48	; 0x30
 8008bb4:	f805 3b01 	strb.w	r3, [r5], #1
 8008bb8:	ec53 2b18 	vmov	r2, r3, d8
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	f7f7 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d165      	bne.n	8008c94 <_dtoa_r+0x63c>
 8008bc8:	4632      	mov	r2, r6
 8008bca:	463b      	mov	r3, r7
 8008bcc:	4935      	ldr	r1, [pc, #212]	; (8008ca4 <_dtoa_r+0x64c>)
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f7f7 fb5a 	bl	8000288 <__aeabi_dsub>
 8008bd4:	ec53 2b18 	vmov	r2, r3, d8
 8008bd8:	f7f7 ff80 	bl	8000adc <__aeabi_dcmplt>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f040 80b9 	bne.w	8008d54 <_dtoa_r+0x6fc>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	429d      	cmp	r5, r3
 8008be6:	f43f af75 	beq.w	8008ad4 <_dtoa_r+0x47c>
 8008bea:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <_dtoa_r+0x650>)
 8008bec:	ec51 0b18 	vmov	r0, r1, d8
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f7f7 fd01 	bl	80005f8 <__aeabi_dmul>
 8008bf6:	4b2c      	ldr	r3, [pc, #176]	; (8008ca8 <_dtoa_r+0x650>)
 8008bf8:	ec41 0b18 	vmov	d8, r0, r1
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	e7c4      	b.n	8008b96 <_dtoa_r+0x53e>
 8008c0c:	ec51 0b17 	vmov	r0, r1, d7
 8008c10:	f7f7 fcf2 	bl	80005f8 <__aeabi_dmul>
 8008c14:	9b02      	ldr	r3, [sp, #8]
 8008c16:	9d00      	ldr	r5, [sp, #0]
 8008c18:	930c      	str	r3, [sp, #48]	; 0x30
 8008c1a:	ec41 0b18 	vmov	d8, r0, r1
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7f7 ff99 	bl	8000b58 <__aeabi_d2iz>
 8008c26:	9011      	str	r0, [sp, #68]	; 0x44
 8008c28:	f7f7 fc7c 	bl	8000524 <__aeabi_i2d>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 fb28 	bl	8000288 <__aeabi_dsub>
 8008c38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c3a:	3330      	adds	r3, #48	; 0x30
 8008c3c:	f805 3b01 	strb.w	r3, [r5], #1
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	429d      	cmp	r5, r3
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	f04f 0200 	mov.w	r2, #0
 8008c4c:	d134      	bne.n	8008cb8 <_dtoa_r+0x660>
 8008c4e:	4b19      	ldr	r3, [pc, #100]	; (8008cb4 <_dtoa_r+0x65c>)
 8008c50:	ec51 0b18 	vmov	r0, r1, d8
 8008c54:	f7f7 fb1a 	bl	800028c <__adddf3>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d175      	bne.n	8008d54 <_dtoa_r+0x6fc>
 8008c68:	ec53 2b18 	vmov	r2, r3, d8
 8008c6c:	4911      	ldr	r1, [pc, #68]	; (8008cb4 <_dtoa_r+0x65c>)
 8008c6e:	2000      	movs	r0, #0
 8008c70:	f7f7 fb0a 	bl	8000288 <__aeabi_dsub>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 ff2e 	bl	8000adc <__aeabi_dcmplt>
 8008c80:	2800      	cmp	r0, #0
 8008c82:	f43f af27 	beq.w	8008ad4 <_dtoa_r+0x47c>
 8008c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c88:	1e6b      	subs	r3, r5, #1
 8008c8a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c90:	2b30      	cmp	r3, #48	; 0x30
 8008c92:	d0f8      	beq.n	8008c86 <_dtoa_r+0x62e>
 8008c94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008c98:	e04a      	b.n	8008d30 <_dtoa_r+0x6d8>
 8008c9a:	bf00      	nop
 8008c9c:	0800ab90 	.word	0x0800ab90
 8008ca0:	0800ab68 	.word	0x0800ab68
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	401c0000 	.word	0x401c0000
 8008cb0:	40140000 	.word	0x40140000
 8008cb4:	3fe00000 	.word	0x3fe00000
 8008cb8:	4baf      	ldr	r3, [pc, #700]	; (8008f78 <_dtoa_r+0x920>)
 8008cba:	f7f7 fc9d 	bl	80005f8 <__aeabi_dmul>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	e7ac      	b.n	8008c1e <_dtoa_r+0x5c6>
 8008cc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cc8:	9d00      	ldr	r5, [sp, #0]
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fdbb 	bl	800084c <__aeabi_ddiv>
 8008cd6:	f7f7 ff3f 	bl	8000b58 <__aeabi_d2iz>
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	f7f7 fc22 	bl	8000524 <__aeabi_i2d>
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	f7f7 fc88 	bl	80005f8 <__aeabi_dmul>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 faca 	bl	8000288 <__aeabi_dsub>
 8008cf4:	9e02      	ldr	r6, [sp, #8]
 8008cf6:	9f01      	ldr	r7, [sp, #4]
 8008cf8:	3630      	adds	r6, #48	; 0x30
 8008cfa:	f805 6b01 	strb.w	r6, [r5], #1
 8008cfe:	9e00      	ldr	r6, [sp, #0]
 8008d00:	1bae      	subs	r6, r5, r6
 8008d02:	42b7      	cmp	r7, r6
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	d137      	bne.n	8008d7a <_dtoa_r+0x722>
 8008d0a:	f7f7 fabf 	bl	800028c <__adddf3>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	464b      	mov	r3, r9
 8008d12:	4606      	mov	r6, r0
 8008d14:	460f      	mov	r7, r1
 8008d16:	f7f7 feff 	bl	8000b18 <__aeabi_dcmpgt>
 8008d1a:	b9c8      	cbnz	r0, 8008d50 <_dtoa_r+0x6f8>
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	464b      	mov	r3, r9
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d28:	b110      	cbz	r0, 8008d30 <_dtoa_r+0x6d8>
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	07d9      	lsls	r1, r3, #31
 8008d2e:	d40f      	bmi.n	8008d50 <_dtoa_r+0x6f8>
 8008d30:	4620      	mov	r0, r4
 8008d32:	4659      	mov	r1, fp
 8008d34:	f000 fbc2 	bl	80094bc <_Bfree>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	702b      	strb	r3, [r5, #0]
 8008d3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d3e:	f10a 0001 	add.w	r0, sl, #1
 8008d42:	6018      	str	r0, [r3, #0]
 8008d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f43f acd8 	beq.w	80086fc <_dtoa_r+0xa4>
 8008d4c:	601d      	str	r5, [r3, #0]
 8008d4e:	e4d5      	b.n	80086fc <_dtoa_r+0xa4>
 8008d50:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d54:	462b      	mov	r3, r5
 8008d56:	461d      	mov	r5, r3
 8008d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5c:	2a39      	cmp	r2, #57	; 0x39
 8008d5e:	d108      	bne.n	8008d72 <_dtoa_r+0x71a>
 8008d60:	9a00      	ldr	r2, [sp, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d1f7      	bne.n	8008d56 <_dtoa_r+0x6fe>
 8008d66:	9a07      	ldr	r2, [sp, #28]
 8008d68:	9900      	ldr	r1, [sp, #0]
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	9207      	str	r2, [sp, #28]
 8008d6e:	2230      	movs	r2, #48	; 0x30
 8008d70:	700a      	strb	r2, [r1, #0]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	3201      	adds	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e78c      	b.n	8008c94 <_dtoa_r+0x63c>
 8008d7a:	4b7f      	ldr	r3, [pc, #508]	; (8008f78 <_dtoa_r+0x920>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f7f7 fc3b 	bl	80005f8 <__aeabi_dmul>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4606      	mov	r6, r0
 8008d88:	460f      	mov	r7, r1
 8008d8a:	f7f7 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d09b      	beq.n	8008cca <_dtoa_r+0x672>
 8008d92:	e7cd      	b.n	8008d30 <_dtoa_r+0x6d8>
 8008d94:	9a08      	ldr	r2, [sp, #32]
 8008d96:	2a00      	cmp	r2, #0
 8008d98:	f000 80c4 	beq.w	8008f24 <_dtoa_r+0x8cc>
 8008d9c:	9a05      	ldr	r2, [sp, #20]
 8008d9e:	2a01      	cmp	r2, #1
 8008da0:	f300 80a8 	bgt.w	8008ef4 <_dtoa_r+0x89c>
 8008da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008da6:	2a00      	cmp	r2, #0
 8008da8:	f000 80a0 	beq.w	8008eec <_dtoa_r+0x894>
 8008dac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008db0:	9e06      	ldr	r6, [sp, #24]
 8008db2:	4645      	mov	r5, r8
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	2101      	movs	r1, #1
 8008db8:	441a      	add	r2, r3
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4498      	add	r8, r3
 8008dbe:	9204      	str	r2, [sp, #16]
 8008dc0:	f000 fc38 	bl	8009634 <__i2b>
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	dd0b      	ble.n	8008de2 <_dtoa_r+0x78a>
 8008dca:	9b04      	ldr	r3, [sp, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd08      	ble.n	8008de2 <_dtoa_r+0x78a>
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	bfa8      	it	ge
 8008dd6:	462b      	movge	r3, r5
 8008dd8:	eba8 0803 	sub.w	r8, r8, r3
 8008ddc:	1aed      	subs	r5, r5, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	b1fb      	cbz	r3, 8008e26 <_dtoa_r+0x7ce>
 8008de6:	9b08      	ldr	r3, [sp, #32]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 809f 	beq.w	8008f2c <_dtoa_r+0x8d4>
 8008dee:	2e00      	cmp	r6, #0
 8008df0:	dd11      	ble.n	8008e16 <_dtoa_r+0x7be>
 8008df2:	4639      	mov	r1, r7
 8008df4:	4632      	mov	r2, r6
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fcd8 	bl	80097ac <__pow5mult>
 8008dfc:	465a      	mov	r2, fp
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4607      	mov	r7, r0
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 fc2c 	bl	8009660 <__multiply>
 8008e08:	4659      	mov	r1, fp
 8008e0a:	9007      	str	r0, [sp, #28]
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fb55 	bl	80094bc <_Bfree>
 8008e12:	9b07      	ldr	r3, [sp, #28]
 8008e14:	469b      	mov	fp, r3
 8008e16:	9b06      	ldr	r3, [sp, #24]
 8008e18:	1b9a      	subs	r2, r3, r6
 8008e1a:	d004      	beq.n	8008e26 <_dtoa_r+0x7ce>
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fcc4 	bl	80097ac <__pow5mult>
 8008e24:	4683      	mov	fp, r0
 8008e26:	2101      	movs	r1, #1
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 fc03 	bl	8009634 <__i2b>
 8008e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	4606      	mov	r6, r0
 8008e34:	dd7c      	ble.n	8008f30 <_dtoa_r+0x8d8>
 8008e36:	461a      	mov	r2, r3
 8008e38:	4601      	mov	r1, r0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f000 fcb6 	bl	80097ac <__pow5mult>
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	4606      	mov	r6, r0
 8008e46:	dd76      	ble.n	8008f36 <_dtoa_r+0x8de>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9306      	str	r3, [sp, #24]
 8008e4c:	6933      	ldr	r3, [r6, #16]
 8008e4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e52:	6918      	ldr	r0, [r3, #16]
 8008e54:	f000 fb9e 	bl	8009594 <__hi0bits>
 8008e58:	f1c0 0020 	rsb	r0, r0, #32
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	4418      	add	r0, r3
 8008e60:	f010 001f 	ands.w	r0, r0, #31
 8008e64:	f000 8086 	beq.w	8008f74 <_dtoa_r+0x91c>
 8008e68:	f1c0 0320 	rsb	r3, r0, #32
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	dd7f      	ble.n	8008f70 <_dtoa_r+0x918>
 8008e70:	f1c0 001c 	rsb	r0, r0, #28
 8008e74:	9b04      	ldr	r3, [sp, #16]
 8008e76:	4403      	add	r3, r0
 8008e78:	4480      	add	r8, r0
 8008e7a:	4405      	add	r5, r0
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	f1b8 0f00 	cmp.w	r8, #0
 8008e82:	dd05      	ble.n	8008e90 <_dtoa_r+0x838>
 8008e84:	4659      	mov	r1, fp
 8008e86:	4642      	mov	r2, r8
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fce9 	bl	8009860 <__lshift>
 8008e8e:	4683      	mov	fp, r0
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dd05      	ble.n	8008ea2 <_dtoa_r+0x84a>
 8008e96:	4631      	mov	r1, r6
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 fce0 	bl	8009860 <__lshift>
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d069      	beq.n	8008f7c <_dtoa_r+0x924>
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f000 fd44 	bl	8009938 <__mcmp>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	da63      	bge.n	8008f7c <_dtoa_r+0x924>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	220a      	movs	r2, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 fb20 	bl	8009500 <__multadd>
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ec6:	4683      	mov	fp, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 818f 	beq.w	80091ec <_dtoa_r+0xb94>
 8008ece:	4639      	mov	r1, r7
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	220a      	movs	r2, #10
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 fb13 	bl	8009500 <__multadd>
 8008eda:	f1b9 0f00 	cmp.w	r9, #0
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f300 808e 	bgt.w	8009000 <_dtoa_r+0x9a8>
 8008ee4:	9b05      	ldr	r3, [sp, #20]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	dc50      	bgt.n	8008f8c <_dtoa_r+0x934>
 8008eea:	e089      	b.n	8009000 <_dtoa_r+0x9a8>
 8008eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ef2:	e75d      	b.n	8008db0 <_dtoa_r+0x758>
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	1e5e      	subs	r6, r3, #1
 8008ef8:	9b06      	ldr	r3, [sp, #24]
 8008efa:	42b3      	cmp	r3, r6
 8008efc:	bfbf      	itttt	lt
 8008efe:	9b06      	ldrlt	r3, [sp, #24]
 8008f00:	9606      	strlt	r6, [sp, #24]
 8008f02:	1af2      	sublt	r2, r6, r3
 8008f04:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008f06:	bfb6      	itet	lt
 8008f08:	189b      	addlt	r3, r3, r2
 8008f0a:	1b9e      	subge	r6, r3, r6
 8008f0c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008f0e:	9b01      	ldr	r3, [sp, #4]
 8008f10:	bfb8      	it	lt
 8008f12:	2600      	movlt	r6, #0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bfb5      	itete	lt
 8008f18:	eba8 0503 	sublt.w	r5, r8, r3
 8008f1c:	9b01      	ldrge	r3, [sp, #4]
 8008f1e:	2300      	movlt	r3, #0
 8008f20:	4645      	movge	r5, r8
 8008f22:	e747      	b.n	8008db4 <_dtoa_r+0x75c>
 8008f24:	9e06      	ldr	r6, [sp, #24]
 8008f26:	9f08      	ldr	r7, [sp, #32]
 8008f28:	4645      	mov	r5, r8
 8008f2a:	e74c      	b.n	8008dc6 <_dtoa_r+0x76e>
 8008f2c:	9a06      	ldr	r2, [sp, #24]
 8008f2e:	e775      	b.n	8008e1c <_dtoa_r+0x7c4>
 8008f30:	9b05      	ldr	r3, [sp, #20]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	dc18      	bgt.n	8008f68 <_dtoa_r+0x910>
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	b9b3      	cbnz	r3, 8008f68 <_dtoa_r+0x910>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f40:	b9a3      	cbnz	r3, 8008f6c <_dtoa_r+0x914>
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f48:	0d1b      	lsrs	r3, r3, #20
 8008f4a:	051b      	lsls	r3, r3, #20
 8008f4c:	b12b      	cbz	r3, 8008f5a <_dtoa_r+0x902>
 8008f4e:	9b04      	ldr	r3, [sp, #16]
 8008f50:	3301      	adds	r3, #1
 8008f52:	9304      	str	r3, [sp, #16]
 8008f54:	f108 0801 	add.w	r8, r8, #1
 8008f58:	2301      	movs	r3, #1
 8008f5a:	9306      	str	r3, [sp, #24]
 8008f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	f47f af74 	bne.w	8008e4c <_dtoa_r+0x7f4>
 8008f64:	2001      	movs	r0, #1
 8008f66:	e779      	b.n	8008e5c <_dtoa_r+0x804>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e7f6      	b.n	8008f5a <_dtoa_r+0x902>
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	e7f4      	b.n	8008f5a <_dtoa_r+0x902>
 8008f70:	d085      	beq.n	8008e7e <_dtoa_r+0x826>
 8008f72:	4618      	mov	r0, r3
 8008f74:	301c      	adds	r0, #28
 8008f76:	e77d      	b.n	8008e74 <_dtoa_r+0x81c>
 8008f78:	40240000 	.word	0x40240000
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dc38      	bgt.n	8008ff4 <_dtoa_r+0x99c>
 8008f82:	9b05      	ldr	r3, [sp, #20]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	dd35      	ble.n	8008ff4 <_dtoa_r+0x99c>
 8008f88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008f8c:	f1b9 0f00 	cmp.w	r9, #0
 8008f90:	d10d      	bne.n	8008fae <_dtoa_r+0x956>
 8008f92:	4631      	mov	r1, r6
 8008f94:	464b      	mov	r3, r9
 8008f96:	2205      	movs	r2, #5
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 fab1 	bl	8009500 <__multadd>
 8008f9e:	4601      	mov	r1, r0
 8008fa0:	4606      	mov	r6, r0
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fcc8 	bl	8009938 <__mcmp>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	f73f adbd 	bgt.w	8008b28 <_dtoa_r+0x4d0>
 8008fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb0:	9d00      	ldr	r5, [sp, #0]
 8008fb2:	ea6f 0a03 	mvn.w	sl, r3
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	4631      	mov	r1, r6
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fa7d 	bl	80094bc <_Bfree>
 8008fc2:	2f00      	cmp	r7, #0
 8008fc4:	f43f aeb4 	beq.w	8008d30 <_dtoa_r+0x6d8>
 8008fc8:	f1b8 0f00 	cmp.w	r8, #0
 8008fcc:	d005      	beq.n	8008fda <_dtoa_r+0x982>
 8008fce:	45b8      	cmp	r8, r7
 8008fd0:	d003      	beq.n	8008fda <_dtoa_r+0x982>
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 fa71 	bl	80094bc <_Bfree>
 8008fda:	4639      	mov	r1, r7
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fa6d 	bl	80094bc <_Bfree>
 8008fe2:	e6a5      	b.n	8008d30 <_dtoa_r+0x6d8>
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	4637      	mov	r7, r6
 8008fe8:	e7e1      	b.n	8008fae <_dtoa_r+0x956>
 8008fea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008fec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ff0:	4637      	mov	r7, r6
 8008ff2:	e599      	b.n	8008b28 <_dtoa_r+0x4d0>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80fd 	beq.w	80091fa <_dtoa_r+0xba2>
 8009000:	2d00      	cmp	r5, #0
 8009002:	dd05      	ble.n	8009010 <_dtoa_r+0x9b8>
 8009004:	4639      	mov	r1, r7
 8009006:	462a      	mov	r2, r5
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fc29 	bl	8009860 <__lshift>
 800900e:	4607      	mov	r7, r0
 8009010:	9b06      	ldr	r3, [sp, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d05c      	beq.n	80090d0 <_dtoa_r+0xa78>
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fa0f 	bl	800943c <_Balloc>
 800901e:	4605      	mov	r5, r0
 8009020:	b928      	cbnz	r0, 800902e <_dtoa_r+0x9d6>
 8009022:	4b80      	ldr	r3, [pc, #512]	; (8009224 <_dtoa_r+0xbcc>)
 8009024:	4602      	mov	r2, r0
 8009026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800902a:	f7ff bb2e 	b.w	800868a <_dtoa_r+0x32>
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	3202      	adds	r2, #2
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	f107 010c 	add.w	r1, r7, #12
 8009038:	300c      	adds	r0, #12
 800903a:	f7fe fde9 	bl	8007c10 <memcpy>
 800903e:	2201      	movs	r2, #1
 8009040:	4629      	mov	r1, r5
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fc0c 	bl	8009860 <__lshift>
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	444b      	add	r3, r9
 8009052:	9307      	str	r3, [sp, #28]
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	46b8      	mov	r8, r7
 800905c:	9306      	str	r3, [sp, #24]
 800905e:	4607      	mov	r7, r0
 8009060:	9b01      	ldr	r3, [sp, #4]
 8009062:	4631      	mov	r1, r6
 8009064:	3b01      	subs	r3, #1
 8009066:	4658      	mov	r0, fp
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	f7ff fa69 	bl	8008540 <quorem>
 800906e:	4603      	mov	r3, r0
 8009070:	3330      	adds	r3, #48	; 0x30
 8009072:	9004      	str	r0, [sp, #16]
 8009074:	4641      	mov	r1, r8
 8009076:	4658      	mov	r0, fp
 8009078:	9308      	str	r3, [sp, #32]
 800907a:	f000 fc5d 	bl	8009938 <__mcmp>
 800907e:	463a      	mov	r2, r7
 8009080:	4681      	mov	r9, r0
 8009082:	4631      	mov	r1, r6
 8009084:	4620      	mov	r0, r4
 8009086:	f000 fc73 	bl	8009970 <__mdiff>
 800908a:	68c2      	ldr	r2, [r0, #12]
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	4605      	mov	r5, r0
 8009090:	bb02      	cbnz	r2, 80090d4 <_dtoa_r+0xa7c>
 8009092:	4601      	mov	r1, r0
 8009094:	4658      	mov	r0, fp
 8009096:	f000 fc4f 	bl	8009938 <__mcmp>
 800909a:	9b08      	ldr	r3, [sp, #32]
 800909c:	4602      	mov	r2, r0
 800909e:	4629      	mov	r1, r5
 80090a0:	4620      	mov	r0, r4
 80090a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80090a6:	f000 fa09 	bl	80094bc <_Bfree>
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ae:	9d01      	ldr	r5, [sp, #4]
 80090b0:	ea43 0102 	orr.w	r1, r3, r2
 80090b4:	9b06      	ldr	r3, [sp, #24]
 80090b6:	430b      	orrs	r3, r1
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	d10d      	bne.n	80090d8 <_dtoa_r+0xa80>
 80090bc:	2b39      	cmp	r3, #57	; 0x39
 80090be:	d029      	beq.n	8009114 <_dtoa_r+0xabc>
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	dd01      	ble.n	80090ca <_dtoa_r+0xa72>
 80090c6:	9b04      	ldr	r3, [sp, #16]
 80090c8:	3331      	adds	r3, #49	; 0x31
 80090ca:	9a02      	ldr	r2, [sp, #8]
 80090cc:	7013      	strb	r3, [r2, #0]
 80090ce:	e774      	b.n	8008fba <_dtoa_r+0x962>
 80090d0:	4638      	mov	r0, r7
 80090d2:	e7b9      	b.n	8009048 <_dtoa_r+0x9f0>
 80090d4:	2201      	movs	r2, #1
 80090d6:	e7e2      	b.n	800909e <_dtoa_r+0xa46>
 80090d8:	f1b9 0f00 	cmp.w	r9, #0
 80090dc:	db06      	blt.n	80090ec <_dtoa_r+0xa94>
 80090de:	9905      	ldr	r1, [sp, #20]
 80090e0:	ea41 0909 	orr.w	r9, r1, r9
 80090e4:	9906      	ldr	r1, [sp, #24]
 80090e6:	ea59 0101 	orrs.w	r1, r9, r1
 80090ea:	d120      	bne.n	800912e <_dtoa_r+0xad6>
 80090ec:	2a00      	cmp	r2, #0
 80090ee:	ddec      	ble.n	80090ca <_dtoa_r+0xa72>
 80090f0:	4659      	mov	r1, fp
 80090f2:	2201      	movs	r2, #1
 80090f4:	4620      	mov	r0, r4
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	f000 fbb2 	bl	8009860 <__lshift>
 80090fc:	4631      	mov	r1, r6
 80090fe:	4683      	mov	fp, r0
 8009100:	f000 fc1a 	bl	8009938 <__mcmp>
 8009104:	2800      	cmp	r0, #0
 8009106:	9b01      	ldr	r3, [sp, #4]
 8009108:	dc02      	bgt.n	8009110 <_dtoa_r+0xab8>
 800910a:	d1de      	bne.n	80090ca <_dtoa_r+0xa72>
 800910c:	07da      	lsls	r2, r3, #31
 800910e:	d5dc      	bpl.n	80090ca <_dtoa_r+0xa72>
 8009110:	2b39      	cmp	r3, #57	; 0x39
 8009112:	d1d8      	bne.n	80090c6 <_dtoa_r+0xa6e>
 8009114:	9a02      	ldr	r2, [sp, #8]
 8009116:	2339      	movs	r3, #57	; 0x39
 8009118:	7013      	strb	r3, [r2, #0]
 800911a:	462b      	mov	r3, r5
 800911c:	461d      	mov	r5, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009124:	2a39      	cmp	r2, #57	; 0x39
 8009126:	d050      	beq.n	80091ca <_dtoa_r+0xb72>
 8009128:	3201      	adds	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e745      	b.n	8008fba <_dtoa_r+0x962>
 800912e:	2a00      	cmp	r2, #0
 8009130:	dd03      	ble.n	800913a <_dtoa_r+0xae2>
 8009132:	2b39      	cmp	r3, #57	; 0x39
 8009134:	d0ee      	beq.n	8009114 <_dtoa_r+0xabc>
 8009136:	3301      	adds	r3, #1
 8009138:	e7c7      	b.n	80090ca <_dtoa_r+0xa72>
 800913a:	9a01      	ldr	r2, [sp, #4]
 800913c:	9907      	ldr	r1, [sp, #28]
 800913e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009142:	428a      	cmp	r2, r1
 8009144:	d02a      	beq.n	800919c <_dtoa_r+0xb44>
 8009146:	4659      	mov	r1, fp
 8009148:	2300      	movs	r3, #0
 800914a:	220a      	movs	r2, #10
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f9d7 	bl	8009500 <__multadd>
 8009152:	45b8      	cmp	r8, r7
 8009154:	4683      	mov	fp, r0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	f04f 020a 	mov.w	r2, #10
 800915e:	4641      	mov	r1, r8
 8009160:	4620      	mov	r0, r4
 8009162:	d107      	bne.n	8009174 <_dtoa_r+0xb1c>
 8009164:	f000 f9cc 	bl	8009500 <__multadd>
 8009168:	4680      	mov	r8, r0
 800916a:	4607      	mov	r7, r0
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	3301      	adds	r3, #1
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	e775      	b.n	8009060 <_dtoa_r+0xa08>
 8009174:	f000 f9c4 	bl	8009500 <__multadd>
 8009178:	4639      	mov	r1, r7
 800917a:	4680      	mov	r8, r0
 800917c:	2300      	movs	r3, #0
 800917e:	220a      	movs	r2, #10
 8009180:	4620      	mov	r0, r4
 8009182:	f000 f9bd 	bl	8009500 <__multadd>
 8009186:	4607      	mov	r7, r0
 8009188:	e7f0      	b.n	800916c <_dtoa_r+0xb14>
 800918a:	f1b9 0f00 	cmp.w	r9, #0
 800918e:	9a00      	ldr	r2, [sp, #0]
 8009190:	bfcc      	ite	gt
 8009192:	464d      	movgt	r5, r9
 8009194:	2501      	movle	r5, #1
 8009196:	4415      	add	r5, r2
 8009198:	f04f 0800 	mov.w	r8, #0
 800919c:	4659      	mov	r1, fp
 800919e:	2201      	movs	r2, #1
 80091a0:	4620      	mov	r0, r4
 80091a2:	9301      	str	r3, [sp, #4]
 80091a4:	f000 fb5c 	bl	8009860 <__lshift>
 80091a8:	4631      	mov	r1, r6
 80091aa:	4683      	mov	fp, r0
 80091ac:	f000 fbc4 	bl	8009938 <__mcmp>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dcb2      	bgt.n	800911a <_dtoa_r+0xac2>
 80091b4:	d102      	bne.n	80091bc <_dtoa_r+0xb64>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	07db      	lsls	r3, r3, #31
 80091ba:	d4ae      	bmi.n	800911a <_dtoa_r+0xac2>
 80091bc:	462b      	mov	r3, r5
 80091be:	461d      	mov	r5, r3
 80091c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091c4:	2a30      	cmp	r2, #48	; 0x30
 80091c6:	d0fa      	beq.n	80091be <_dtoa_r+0xb66>
 80091c8:	e6f7      	b.n	8008fba <_dtoa_r+0x962>
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d1a5      	bne.n	800911c <_dtoa_r+0xac4>
 80091d0:	f10a 0a01 	add.w	sl, sl, #1
 80091d4:	2331      	movs	r3, #49	; 0x31
 80091d6:	e779      	b.n	80090cc <_dtoa_r+0xa74>
 80091d8:	4b13      	ldr	r3, [pc, #76]	; (8009228 <_dtoa_r+0xbd0>)
 80091da:	f7ff baaf 	b.w	800873c <_dtoa_r+0xe4>
 80091de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f47f aa86 	bne.w	80086f2 <_dtoa_r+0x9a>
 80091e6:	4b11      	ldr	r3, [pc, #68]	; (800922c <_dtoa_r+0xbd4>)
 80091e8:	f7ff baa8 	b.w	800873c <_dtoa_r+0xe4>
 80091ec:	f1b9 0f00 	cmp.w	r9, #0
 80091f0:	dc03      	bgt.n	80091fa <_dtoa_r+0xba2>
 80091f2:	9b05      	ldr	r3, [sp, #20]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	f73f aec9 	bgt.w	8008f8c <_dtoa_r+0x934>
 80091fa:	9d00      	ldr	r5, [sp, #0]
 80091fc:	4631      	mov	r1, r6
 80091fe:	4658      	mov	r0, fp
 8009200:	f7ff f99e 	bl	8008540 <quorem>
 8009204:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009208:	f805 3b01 	strb.w	r3, [r5], #1
 800920c:	9a00      	ldr	r2, [sp, #0]
 800920e:	1aaa      	subs	r2, r5, r2
 8009210:	4591      	cmp	r9, r2
 8009212:	ddba      	ble.n	800918a <_dtoa_r+0xb32>
 8009214:	4659      	mov	r1, fp
 8009216:	2300      	movs	r3, #0
 8009218:	220a      	movs	r2, #10
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f970 	bl	8009500 <__multadd>
 8009220:	4683      	mov	fp, r0
 8009222:	e7eb      	b.n	80091fc <_dtoa_r+0xba4>
 8009224:	0800aa97 	.word	0x0800aa97
 8009228:	0800a9f0 	.word	0x0800a9f0
 800922c:	0800aa14 	.word	0x0800aa14

08009230 <std>:
 8009230:	2300      	movs	r3, #0
 8009232:	b510      	push	{r4, lr}
 8009234:	4604      	mov	r4, r0
 8009236:	e9c0 3300 	strd	r3, r3, [r0]
 800923a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800923e:	6083      	str	r3, [r0, #8]
 8009240:	8181      	strh	r1, [r0, #12]
 8009242:	6643      	str	r3, [r0, #100]	; 0x64
 8009244:	81c2      	strh	r2, [r0, #14]
 8009246:	6183      	str	r3, [r0, #24]
 8009248:	4619      	mov	r1, r3
 800924a:	2208      	movs	r2, #8
 800924c:	305c      	adds	r0, #92	; 0x5c
 800924e:	f7fe fced 	bl	8007c2c <memset>
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <std+0x38>)
 8009254:	6263      	str	r3, [r4, #36]	; 0x24
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <std+0x3c>)
 8009258:	62a3      	str	r3, [r4, #40]	; 0x28
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <std+0x40>)
 800925c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800925e:	4b05      	ldr	r3, [pc, #20]	; (8009274 <std+0x44>)
 8009260:	6224      	str	r4, [r4, #32]
 8009262:	6323      	str	r3, [r4, #48]	; 0x30
 8009264:	bd10      	pop	{r4, pc}
 8009266:	bf00      	nop
 8009268:	08009f81 	.word	0x08009f81
 800926c:	08009fa3 	.word	0x08009fa3
 8009270:	08009fdb 	.word	0x08009fdb
 8009274:	08009fff 	.word	0x08009fff

08009278 <_cleanup_r>:
 8009278:	4901      	ldr	r1, [pc, #4]	; (8009280 <_cleanup_r+0x8>)
 800927a:	f000 b8af 	b.w	80093dc <_fwalk_reent>
 800927e:	bf00      	nop
 8009280:	0800a315 	.word	0x0800a315

08009284 <__sfmoreglue>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	1e4a      	subs	r2, r1, #1
 8009288:	2568      	movs	r5, #104	; 0x68
 800928a:	4355      	muls	r5, r2
 800928c:	460e      	mov	r6, r1
 800928e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009292:	f000 fcb1 	bl	8009bf8 <_malloc_r>
 8009296:	4604      	mov	r4, r0
 8009298:	b140      	cbz	r0, 80092ac <__sfmoreglue+0x28>
 800929a:	2100      	movs	r1, #0
 800929c:	e9c0 1600 	strd	r1, r6, [r0]
 80092a0:	300c      	adds	r0, #12
 80092a2:	60a0      	str	r0, [r4, #8]
 80092a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092a8:	f7fe fcc0 	bl	8007c2c <memset>
 80092ac:	4620      	mov	r0, r4
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <__sfp_lock_acquire>:
 80092b0:	4801      	ldr	r0, [pc, #4]	; (80092b8 <__sfp_lock_acquire+0x8>)
 80092b2:	f000 b8b8 	b.w	8009426 <__retarget_lock_acquire_recursive>
 80092b6:	bf00      	nop
 80092b8:	20001c48 	.word	0x20001c48

080092bc <__sfp_lock_release>:
 80092bc:	4801      	ldr	r0, [pc, #4]	; (80092c4 <__sfp_lock_release+0x8>)
 80092be:	f000 b8b3 	b.w	8009428 <__retarget_lock_release_recursive>
 80092c2:	bf00      	nop
 80092c4:	20001c48 	.word	0x20001c48

080092c8 <__sinit_lock_acquire>:
 80092c8:	4801      	ldr	r0, [pc, #4]	; (80092d0 <__sinit_lock_acquire+0x8>)
 80092ca:	f000 b8ac 	b.w	8009426 <__retarget_lock_acquire_recursive>
 80092ce:	bf00      	nop
 80092d0:	20001c43 	.word	0x20001c43

080092d4 <__sinit_lock_release>:
 80092d4:	4801      	ldr	r0, [pc, #4]	; (80092dc <__sinit_lock_release+0x8>)
 80092d6:	f000 b8a7 	b.w	8009428 <__retarget_lock_release_recursive>
 80092da:	bf00      	nop
 80092dc:	20001c43 	.word	0x20001c43

080092e0 <__sinit>:
 80092e0:	b510      	push	{r4, lr}
 80092e2:	4604      	mov	r4, r0
 80092e4:	f7ff fff0 	bl	80092c8 <__sinit_lock_acquire>
 80092e8:	69a3      	ldr	r3, [r4, #24]
 80092ea:	b11b      	cbz	r3, 80092f4 <__sinit+0x14>
 80092ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f0:	f7ff bff0 	b.w	80092d4 <__sinit_lock_release>
 80092f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092f8:	6523      	str	r3, [r4, #80]	; 0x50
 80092fa:	4b13      	ldr	r3, [pc, #76]	; (8009348 <__sinit+0x68>)
 80092fc:	4a13      	ldr	r2, [pc, #76]	; (800934c <__sinit+0x6c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	62a2      	str	r2, [r4, #40]	; 0x28
 8009302:	42a3      	cmp	r3, r4
 8009304:	bf04      	itt	eq
 8009306:	2301      	moveq	r3, #1
 8009308:	61a3      	streq	r3, [r4, #24]
 800930a:	4620      	mov	r0, r4
 800930c:	f000 f820 	bl	8009350 <__sfp>
 8009310:	6060      	str	r0, [r4, #4]
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f81c 	bl	8009350 <__sfp>
 8009318:	60a0      	str	r0, [r4, #8]
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f818 	bl	8009350 <__sfp>
 8009320:	2200      	movs	r2, #0
 8009322:	60e0      	str	r0, [r4, #12]
 8009324:	2104      	movs	r1, #4
 8009326:	6860      	ldr	r0, [r4, #4]
 8009328:	f7ff ff82 	bl	8009230 <std>
 800932c:	68a0      	ldr	r0, [r4, #8]
 800932e:	2201      	movs	r2, #1
 8009330:	2109      	movs	r1, #9
 8009332:	f7ff ff7d 	bl	8009230 <std>
 8009336:	68e0      	ldr	r0, [r4, #12]
 8009338:	2202      	movs	r2, #2
 800933a:	2112      	movs	r1, #18
 800933c:	f7ff ff78 	bl	8009230 <std>
 8009340:	2301      	movs	r3, #1
 8009342:	61a3      	str	r3, [r4, #24]
 8009344:	e7d2      	b.n	80092ec <__sinit+0xc>
 8009346:	bf00      	nop
 8009348:	0800a9dc 	.word	0x0800a9dc
 800934c:	08009279 	.word	0x08009279

08009350 <__sfp>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	4607      	mov	r7, r0
 8009354:	f7ff ffac 	bl	80092b0 <__sfp_lock_acquire>
 8009358:	4b1e      	ldr	r3, [pc, #120]	; (80093d4 <__sfp+0x84>)
 800935a:	681e      	ldr	r6, [r3, #0]
 800935c:	69b3      	ldr	r3, [r6, #24]
 800935e:	b913      	cbnz	r3, 8009366 <__sfp+0x16>
 8009360:	4630      	mov	r0, r6
 8009362:	f7ff ffbd 	bl	80092e0 <__sinit>
 8009366:	3648      	adds	r6, #72	; 0x48
 8009368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800936c:	3b01      	subs	r3, #1
 800936e:	d503      	bpl.n	8009378 <__sfp+0x28>
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	b30b      	cbz	r3, 80093b8 <__sfp+0x68>
 8009374:	6836      	ldr	r6, [r6, #0]
 8009376:	e7f7      	b.n	8009368 <__sfp+0x18>
 8009378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800937c:	b9d5      	cbnz	r5, 80093b4 <__sfp+0x64>
 800937e:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <__sfp+0x88>)
 8009380:	60e3      	str	r3, [r4, #12]
 8009382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009386:	6665      	str	r5, [r4, #100]	; 0x64
 8009388:	f000 f84c 	bl	8009424 <__retarget_lock_init_recursive>
 800938c:	f7ff ff96 	bl	80092bc <__sfp_lock_release>
 8009390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009398:	6025      	str	r5, [r4, #0]
 800939a:	61a5      	str	r5, [r4, #24]
 800939c:	2208      	movs	r2, #8
 800939e:	4629      	mov	r1, r5
 80093a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093a4:	f7fe fc42 	bl	8007c2c <memset>
 80093a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093b0:	4620      	mov	r0, r4
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b4:	3468      	adds	r4, #104	; 0x68
 80093b6:	e7d9      	b.n	800936c <__sfp+0x1c>
 80093b8:	2104      	movs	r1, #4
 80093ba:	4638      	mov	r0, r7
 80093bc:	f7ff ff62 	bl	8009284 <__sfmoreglue>
 80093c0:	4604      	mov	r4, r0
 80093c2:	6030      	str	r0, [r6, #0]
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1d5      	bne.n	8009374 <__sfp+0x24>
 80093c8:	f7ff ff78 	bl	80092bc <__sfp_lock_release>
 80093cc:	230c      	movs	r3, #12
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	e7ee      	b.n	80093b0 <__sfp+0x60>
 80093d2:	bf00      	nop
 80093d4:	0800a9dc 	.word	0x0800a9dc
 80093d8:	ffff0001 	.word	0xffff0001

080093dc <_fwalk_reent>:
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e0:	4606      	mov	r6, r0
 80093e2:	4688      	mov	r8, r1
 80093e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093e8:	2700      	movs	r7, #0
 80093ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093ee:	f1b9 0901 	subs.w	r9, r9, #1
 80093f2:	d505      	bpl.n	8009400 <_fwalk_reent+0x24>
 80093f4:	6824      	ldr	r4, [r4, #0]
 80093f6:	2c00      	cmp	r4, #0
 80093f8:	d1f7      	bne.n	80093ea <_fwalk_reent+0xe>
 80093fa:	4638      	mov	r0, r7
 80093fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009400:	89ab      	ldrh	r3, [r5, #12]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d907      	bls.n	8009416 <_fwalk_reent+0x3a>
 8009406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800940a:	3301      	adds	r3, #1
 800940c:	d003      	beq.n	8009416 <_fwalk_reent+0x3a>
 800940e:	4629      	mov	r1, r5
 8009410:	4630      	mov	r0, r6
 8009412:	47c0      	blx	r8
 8009414:	4307      	orrs	r7, r0
 8009416:	3568      	adds	r5, #104	; 0x68
 8009418:	e7e9      	b.n	80093ee <_fwalk_reent+0x12>
	...

0800941c <_localeconv_r>:
 800941c:	4800      	ldr	r0, [pc, #0]	; (8009420 <_localeconv_r+0x4>)
 800941e:	4770      	bx	lr
 8009420:	20000164 	.word	0x20000164

08009424 <__retarget_lock_init_recursive>:
 8009424:	4770      	bx	lr

08009426 <__retarget_lock_acquire_recursive>:
 8009426:	4770      	bx	lr

08009428 <__retarget_lock_release_recursive>:
 8009428:	4770      	bx	lr
	...

0800942c <malloc>:
 800942c:	4b02      	ldr	r3, [pc, #8]	; (8009438 <malloc+0xc>)
 800942e:	4601      	mov	r1, r0
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f000 bbe1 	b.w	8009bf8 <_malloc_r>
 8009436:	bf00      	nop
 8009438:	20000010 	.word	0x20000010

0800943c <_Balloc>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009440:	4604      	mov	r4, r0
 8009442:	460d      	mov	r5, r1
 8009444:	b976      	cbnz	r6, 8009464 <_Balloc+0x28>
 8009446:	2010      	movs	r0, #16
 8009448:	f7ff fff0 	bl	800942c <malloc>
 800944c:	4602      	mov	r2, r0
 800944e:	6260      	str	r0, [r4, #36]	; 0x24
 8009450:	b920      	cbnz	r0, 800945c <_Balloc+0x20>
 8009452:	4b18      	ldr	r3, [pc, #96]	; (80094b4 <_Balloc+0x78>)
 8009454:	4818      	ldr	r0, [pc, #96]	; (80094b8 <_Balloc+0x7c>)
 8009456:	2166      	movs	r1, #102	; 0x66
 8009458:	f000 fea8 	bl	800a1ac <__assert_func>
 800945c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009460:	6006      	str	r6, [r0, #0]
 8009462:	60c6      	str	r6, [r0, #12]
 8009464:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009466:	68f3      	ldr	r3, [r6, #12]
 8009468:	b183      	cbz	r3, 800948c <_Balloc+0x50>
 800946a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009472:	b9b8      	cbnz	r0, 80094a4 <_Balloc+0x68>
 8009474:	2101      	movs	r1, #1
 8009476:	fa01 f605 	lsl.w	r6, r1, r5
 800947a:	1d72      	adds	r2, r6, #5
 800947c:	0092      	lsls	r2, r2, #2
 800947e:	4620      	mov	r0, r4
 8009480:	f000 fb5a 	bl	8009b38 <_calloc_r>
 8009484:	b160      	cbz	r0, 80094a0 <_Balloc+0x64>
 8009486:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800948a:	e00e      	b.n	80094aa <_Balloc+0x6e>
 800948c:	2221      	movs	r2, #33	; 0x21
 800948e:	2104      	movs	r1, #4
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fb51 	bl	8009b38 <_calloc_r>
 8009496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009498:	60f0      	str	r0, [r6, #12]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e4      	bne.n	800946a <_Balloc+0x2e>
 80094a0:	2000      	movs	r0, #0
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	6802      	ldr	r2, [r0, #0]
 80094a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094aa:	2300      	movs	r3, #0
 80094ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094b0:	e7f7      	b.n	80094a2 <_Balloc+0x66>
 80094b2:	bf00      	nop
 80094b4:	0800aa21 	.word	0x0800aa21
 80094b8:	0800ab08 	.word	0x0800ab08

080094bc <_Bfree>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094c0:	4605      	mov	r5, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	b976      	cbnz	r6, 80094e4 <_Bfree+0x28>
 80094c6:	2010      	movs	r0, #16
 80094c8:	f7ff ffb0 	bl	800942c <malloc>
 80094cc:	4602      	mov	r2, r0
 80094ce:	6268      	str	r0, [r5, #36]	; 0x24
 80094d0:	b920      	cbnz	r0, 80094dc <_Bfree+0x20>
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <_Bfree+0x3c>)
 80094d4:	4809      	ldr	r0, [pc, #36]	; (80094fc <_Bfree+0x40>)
 80094d6:	218a      	movs	r1, #138	; 0x8a
 80094d8:	f000 fe68 	bl	800a1ac <__assert_func>
 80094dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094e0:	6006      	str	r6, [r0, #0]
 80094e2:	60c6      	str	r6, [r0, #12]
 80094e4:	b13c      	cbz	r4, 80094f6 <_Bfree+0x3a>
 80094e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094e8:	6862      	ldr	r2, [r4, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094f0:	6021      	str	r1, [r4, #0]
 80094f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	0800aa21 	.word	0x0800aa21
 80094fc:	0800ab08 	.word	0x0800ab08

08009500 <__multadd>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	690e      	ldr	r6, [r1, #16]
 8009506:	4607      	mov	r7, r0
 8009508:	4698      	mov	r8, r3
 800950a:	460c      	mov	r4, r1
 800950c:	f101 0014 	add.w	r0, r1, #20
 8009510:	2300      	movs	r3, #0
 8009512:	6805      	ldr	r5, [r0, #0]
 8009514:	b2a9      	uxth	r1, r5
 8009516:	fb02 8101 	mla	r1, r2, r1, r8
 800951a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800951e:	0c2d      	lsrs	r5, r5, #16
 8009520:	fb02 c505 	mla	r5, r2, r5, ip
 8009524:	b289      	uxth	r1, r1
 8009526:	3301      	adds	r3, #1
 8009528:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800952c:	429e      	cmp	r6, r3
 800952e:	f840 1b04 	str.w	r1, [r0], #4
 8009532:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009536:	dcec      	bgt.n	8009512 <__multadd+0x12>
 8009538:	f1b8 0f00 	cmp.w	r8, #0
 800953c:	d022      	beq.n	8009584 <__multadd+0x84>
 800953e:	68a3      	ldr	r3, [r4, #8]
 8009540:	42b3      	cmp	r3, r6
 8009542:	dc19      	bgt.n	8009578 <__multadd+0x78>
 8009544:	6861      	ldr	r1, [r4, #4]
 8009546:	4638      	mov	r0, r7
 8009548:	3101      	adds	r1, #1
 800954a:	f7ff ff77 	bl	800943c <_Balloc>
 800954e:	4605      	mov	r5, r0
 8009550:	b928      	cbnz	r0, 800955e <__multadd+0x5e>
 8009552:	4602      	mov	r2, r0
 8009554:	4b0d      	ldr	r3, [pc, #52]	; (800958c <__multadd+0x8c>)
 8009556:	480e      	ldr	r0, [pc, #56]	; (8009590 <__multadd+0x90>)
 8009558:	21b5      	movs	r1, #181	; 0xb5
 800955a:	f000 fe27 	bl	800a1ac <__assert_func>
 800955e:	6922      	ldr	r2, [r4, #16]
 8009560:	3202      	adds	r2, #2
 8009562:	f104 010c 	add.w	r1, r4, #12
 8009566:	0092      	lsls	r2, r2, #2
 8009568:	300c      	adds	r0, #12
 800956a:	f7fe fb51 	bl	8007c10 <memcpy>
 800956e:	4621      	mov	r1, r4
 8009570:	4638      	mov	r0, r7
 8009572:	f7ff ffa3 	bl	80094bc <_Bfree>
 8009576:	462c      	mov	r4, r5
 8009578:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800957c:	3601      	adds	r6, #1
 800957e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009582:	6126      	str	r6, [r4, #16]
 8009584:	4620      	mov	r0, r4
 8009586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958a:	bf00      	nop
 800958c:	0800aa97 	.word	0x0800aa97
 8009590:	0800ab08 	.word	0x0800ab08

08009594 <__hi0bits>:
 8009594:	0c03      	lsrs	r3, r0, #16
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	b9d3      	cbnz	r3, 80095d0 <__hi0bits+0x3c>
 800959a:	0400      	lsls	r0, r0, #16
 800959c:	2310      	movs	r3, #16
 800959e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095a2:	bf04      	itt	eq
 80095a4:	0200      	lsleq	r0, r0, #8
 80095a6:	3308      	addeq	r3, #8
 80095a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095ac:	bf04      	itt	eq
 80095ae:	0100      	lsleq	r0, r0, #4
 80095b0:	3304      	addeq	r3, #4
 80095b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095b6:	bf04      	itt	eq
 80095b8:	0080      	lsleq	r0, r0, #2
 80095ba:	3302      	addeq	r3, #2
 80095bc:	2800      	cmp	r0, #0
 80095be:	db05      	blt.n	80095cc <__hi0bits+0x38>
 80095c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80095c4:	f103 0301 	add.w	r3, r3, #1
 80095c8:	bf08      	it	eq
 80095ca:	2320      	moveq	r3, #32
 80095cc:	4618      	mov	r0, r3
 80095ce:	4770      	bx	lr
 80095d0:	2300      	movs	r3, #0
 80095d2:	e7e4      	b.n	800959e <__hi0bits+0xa>

080095d4 <__lo0bits>:
 80095d4:	6803      	ldr	r3, [r0, #0]
 80095d6:	f013 0207 	ands.w	r2, r3, #7
 80095da:	4601      	mov	r1, r0
 80095dc:	d00b      	beq.n	80095f6 <__lo0bits+0x22>
 80095de:	07da      	lsls	r2, r3, #31
 80095e0:	d424      	bmi.n	800962c <__lo0bits+0x58>
 80095e2:	0798      	lsls	r0, r3, #30
 80095e4:	bf49      	itett	mi
 80095e6:	085b      	lsrmi	r3, r3, #1
 80095e8:	089b      	lsrpl	r3, r3, #2
 80095ea:	2001      	movmi	r0, #1
 80095ec:	600b      	strmi	r3, [r1, #0]
 80095ee:	bf5c      	itt	pl
 80095f0:	600b      	strpl	r3, [r1, #0]
 80095f2:	2002      	movpl	r0, #2
 80095f4:	4770      	bx	lr
 80095f6:	b298      	uxth	r0, r3
 80095f8:	b9b0      	cbnz	r0, 8009628 <__lo0bits+0x54>
 80095fa:	0c1b      	lsrs	r3, r3, #16
 80095fc:	2010      	movs	r0, #16
 80095fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009602:	bf04      	itt	eq
 8009604:	0a1b      	lsreq	r3, r3, #8
 8009606:	3008      	addeq	r0, #8
 8009608:	071a      	lsls	r2, r3, #28
 800960a:	bf04      	itt	eq
 800960c:	091b      	lsreq	r3, r3, #4
 800960e:	3004      	addeq	r0, #4
 8009610:	079a      	lsls	r2, r3, #30
 8009612:	bf04      	itt	eq
 8009614:	089b      	lsreq	r3, r3, #2
 8009616:	3002      	addeq	r0, #2
 8009618:	07da      	lsls	r2, r3, #31
 800961a:	d403      	bmi.n	8009624 <__lo0bits+0x50>
 800961c:	085b      	lsrs	r3, r3, #1
 800961e:	f100 0001 	add.w	r0, r0, #1
 8009622:	d005      	beq.n	8009630 <__lo0bits+0x5c>
 8009624:	600b      	str	r3, [r1, #0]
 8009626:	4770      	bx	lr
 8009628:	4610      	mov	r0, r2
 800962a:	e7e8      	b.n	80095fe <__lo0bits+0x2a>
 800962c:	2000      	movs	r0, #0
 800962e:	4770      	bx	lr
 8009630:	2020      	movs	r0, #32
 8009632:	4770      	bx	lr

08009634 <__i2b>:
 8009634:	b510      	push	{r4, lr}
 8009636:	460c      	mov	r4, r1
 8009638:	2101      	movs	r1, #1
 800963a:	f7ff feff 	bl	800943c <_Balloc>
 800963e:	4602      	mov	r2, r0
 8009640:	b928      	cbnz	r0, 800964e <__i2b+0x1a>
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <__i2b+0x24>)
 8009644:	4805      	ldr	r0, [pc, #20]	; (800965c <__i2b+0x28>)
 8009646:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800964a:	f000 fdaf 	bl	800a1ac <__assert_func>
 800964e:	2301      	movs	r3, #1
 8009650:	6144      	str	r4, [r0, #20]
 8009652:	6103      	str	r3, [r0, #16]
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	0800aa97 	.word	0x0800aa97
 800965c:	0800ab08 	.word	0x0800ab08

08009660 <__multiply>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	4614      	mov	r4, r2
 8009666:	690a      	ldr	r2, [r1, #16]
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	429a      	cmp	r2, r3
 800966c:	bfb8      	it	lt
 800966e:	460b      	movlt	r3, r1
 8009670:	460d      	mov	r5, r1
 8009672:	bfbc      	itt	lt
 8009674:	4625      	movlt	r5, r4
 8009676:	461c      	movlt	r4, r3
 8009678:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800967c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009680:	68ab      	ldr	r3, [r5, #8]
 8009682:	6869      	ldr	r1, [r5, #4]
 8009684:	eb0a 0709 	add.w	r7, sl, r9
 8009688:	42bb      	cmp	r3, r7
 800968a:	b085      	sub	sp, #20
 800968c:	bfb8      	it	lt
 800968e:	3101      	addlt	r1, #1
 8009690:	f7ff fed4 	bl	800943c <_Balloc>
 8009694:	b930      	cbnz	r0, 80096a4 <__multiply+0x44>
 8009696:	4602      	mov	r2, r0
 8009698:	4b42      	ldr	r3, [pc, #264]	; (80097a4 <__multiply+0x144>)
 800969a:	4843      	ldr	r0, [pc, #268]	; (80097a8 <__multiply+0x148>)
 800969c:	f240 115d 	movw	r1, #349	; 0x15d
 80096a0:	f000 fd84 	bl	800a1ac <__assert_func>
 80096a4:	f100 0614 	add.w	r6, r0, #20
 80096a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80096ac:	4633      	mov	r3, r6
 80096ae:	2200      	movs	r2, #0
 80096b0:	4543      	cmp	r3, r8
 80096b2:	d31e      	bcc.n	80096f2 <__multiply+0x92>
 80096b4:	f105 0c14 	add.w	ip, r5, #20
 80096b8:	f104 0314 	add.w	r3, r4, #20
 80096bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80096c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80096c4:	9202      	str	r2, [sp, #8]
 80096c6:	ebac 0205 	sub.w	r2, ip, r5
 80096ca:	3a15      	subs	r2, #21
 80096cc:	f022 0203 	bic.w	r2, r2, #3
 80096d0:	3204      	adds	r2, #4
 80096d2:	f105 0115 	add.w	r1, r5, #21
 80096d6:	458c      	cmp	ip, r1
 80096d8:	bf38      	it	cc
 80096da:	2204      	movcc	r2, #4
 80096dc:	9201      	str	r2, [sp, #4]
 80096de:	9a02      	ldr	r2, [sp, #8]
 80096e0:	9303      	str	r3, [sp, #12]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d808      	bhi.n	80096f8 <__multiply+0x98>
 80096e6:	2f00      	cmp	r7, #0
 80096e8:	dc55      	bgt.n	8009796 <__multiply+0x136>
 80096ea:	6107      	str	r7, [r0, #16]
 80096ec:	b005      	add	sp, #20
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	f843 2b04 	str.w	r2, [r3], #4
 80096f6:	e7db      	b.n	80096b0 <__multiply+0x50>
 80096f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80096fc:	f1ba 0f00 	cmp.w	sl, #0
 8009700:	d020      	beq.n	8009744 <__multiply+0xe4>
 8009702:	f105 0e14 	add.w	lr, r5, #20
 8009706:	46b1      	mov	r9, r6
 8009708:	2200      	movs	r2, #0
 800970a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800970e:	f8d9 b000 	ldr.w	fp, [r9]
 8009712:	b2a1      	uxth	r1, r4
 8009714:	fa1f fb8b 	uxth.w	fp, fp
 8009718:	fb0a b101 	mla	r1, sl, r1, fp
 800971c:	4411      	add	r1, r2
 800971e:	f8d9 2000 	ldr.w	r2, [r9]
 8009722:	0c24      	lsrs	r4, r4, #16
 8009724:	0c12      	lsrs	r2, r2, #16
 8009726:	fb0a 2404 	mla	r4, sl, r4, r2
 800972a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800972e:	b289      	uxth	r1, r1
 8009730:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009734:	45f4      	cmp	ip, lr
 8009736:	f849 1b04 	str.w	r1, [r9], #4
 800973a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800973e:	d8e4      	bhi.n	800970a <__multiply+0xaa>
 8009740:	9901      	ldr	r1, [sp, #4]
 8009742:	5072      	str	r2, [r6, r1]
 8009744:	9a03      	ldr	r2, [sp, #12]
 8009746:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800974a:	3304      	adds	r3, #4
 800974c:	f1b9 0f00 	cmp.w	r9, #0
 8009750:	d01f      	beq.n	8009792 <__multiply+0x132>
 8009752:	6834      	ldr	r4, [r6, #0]
 8009754:	f105 0114 	add.w	r1, r5, #20
 8009758:	46b6      	mov	lr, r6
 800975a:	f04f 0a00 	mov.w	sl, #0
 800975e:	880a      	ldrh	r2, [r1, #0]
 8009760:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009764:	fb09 b202 	mla	r2, r9, r2, fp
 8009768:	4492      	add	sl, r2
 800976a:	b2a4      	uxth	r4, r4
 800976c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009770:	f84e 4b04 	str.w	r4, [lr], #4
 8009774:	f851 4b04 	ldr.w	r4, [r1], #4
 8009778:	f8be 2000 	ldrh.w	r2, [lr]
 800977c:	0c24      	lsrs	r4, r4, #16
 800977e:	fb09 2404 	mla	r4, r9, r4, r2
 8009782:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009786:	458c      	cmp	ip, r1
 8009788:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800978c:	d8e7      	bhi.n	800975e <__multiply+0xfe>
 800978e:	9a01      	ldr	r2, [sp, #4]
 8009790:	50b4      	str	r4, [r6, r2]
 8009792:	3604      	adds	r6, #4
 8009794:	e7a3      	b.n	80096de <__multiply+0x7e>
 8009796:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1a5      	bne.n	80096ea <__multiply+0x8a>
 800979e:	3f01      	subs	r7, #1
 80097a0:	e7a1      	b.n	80096e6 <__multiply+0x86>
 80097a2:	bf00      	nop
 80097a4:	0800aa97 	.word	0x0800aa97
 80097a8:	0800ab08 	.word	0x0800ab08

080097ac <__pow5mult>:
 80097ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b0:	4615      	mov	r5, r2
 80097b2:	f012 0203 	ands.w	r2, r2, #3
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	d007      	beq.n	80097cc <__pow5mult+0x20>
 80097bc:	4c25      	ldr	r4, [pc, #148]	; (8009854 <__pow5mult+0xa8>)
 80097be:	3a01      	subs	r2, #1
 80097c0:	2300      	movs	r3, #0
 80097c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097c6:	f7ff fe9b 	bl	8009500 <__multadd>
 80097ca:	4607      	mov	r7, r0
 80097cc:	10ad      	asrs	r5, r5, #2
 80097ce:	d03d      	beq.n	800984c <__pow5mult+0xa0>
 80097d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097d2:	b97c      	cbnz	r4, 80097f4 <__pow5mult+0x48>
 80097d4:	2010      	movs	r0, #16
 80097d6:	f7ff fe29 	bl	800942c <malloc>
 80097da:	4602      	mov	r2, r0
 80097dc:	6270      	str	r0, [r6, #36]	; 0x24
 80097de:	b928      	cbnz	r0, 80097ec <__pow5mult+0x40>
 80097e0:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <__pow5mult+0xac>)
 80097e2:	481e      	ldr	r0, [pc, #120]	; (800985c <__pow5mult+0xb0>)
 80097e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097e8:	f000 fce0 	bl	800a1ac <__assert_func>
 80097ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097f0:	6004      	str	r4, [r0, #0]
 80097f2:	60c4      	str	r4, [r0, #12]
 80097f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097fc:	b94c      	cbnz	r4, 8009812 <__pow5mult+0x66>
 80097fe:	f240 2171 	movw	r1, #625	; 0x271
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ff16 	bl	8009634 <__i2b>
 8009808:	2300      	movs	r3, #0
 800980a:	f8c8 0008 	str.w	r0, [r8, #8]
 800980e:	4604      	mov	r4, r0
 8009810:	6003      	str	r3, [r0, #0]
 8009812:	f04f 0900 	mov.w	r9, #0
 8009816:	07eb      	lsls	r3, r5, #31
 8009818:	d50a      	bpl.n	8009830 <__pow5mult+0x84>
 800981a:	4639      	mov	r1, r7
 800981c:	4622      	mov	r2, r4
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ff1e 	bl	8009660 <__multiply>
 8009824:	4639      	mov	r1, r7
 8009826:	4680      	mov	r8, r0
 8009828:	4630      	mov	r0, r6
 800982a:	f7ff fe47 	bl	80094bc <_Bfree>
 800982e:	4647      	mov	r7, r8
 8009830:	106d      	asrs	r5, r5, #1
 8009832:	d00b      	beq.n	800984c <__pow5mult+0xa0>
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	b938      	cbnz	r0, 8009848 <__pow5mult+0x9c>
 8009838:	4622      	mov	r2, r4
 800983a:	4621      	mov	r1, r4
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff ff0f 	bl	8009660 <__multiply>
 8009842:	6020      	str	r0, [r4, #0]
 8009844:	f8c0 9000 	str.w	r9, [r0]
 8009848:	4604      	mov	r4, r0
 800984a:	e7e4      	b.n	8009816 <__pow5mult+0x6a>
 800984c:	4638      	mov	r0, r7
 800984e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009852:	bf00      	nop
 8009854:	0800ac58 	.word	0x0800ac58
 8009858:	0800aa21 	.word	0x0800aa21
 800985c:	0800ab08 	.word	0x0800ab08

08009860 <__lshift>:
 8009860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009864:	460c      	mov	r4, r1
 8009866:	6849      	ldr	r1, [r1, #4]
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800986e:	68a3      	ldr	r3, [r4, #8]
 8009870:	4607      	mov	r7, r0
 8009872:	4691      	mov	r9, r2
 8009874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009878:	f108 0601 	add.w	r6, r8, #1
 800987c:	42b3      	cmp	r3, r6
 800987e:	db0b      	blt.n	8009898 <__lshift+0x38>
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff fddb 	bl	800943c <_Balloc>
 8009886:	4605      	mov	r5, r0
 8009888:	b948      	cbnz	r0, 800989e <__lshift+0x3e>
 800988a:	4602      	mov	r2, r0
 800988c:	4b28      	ldr	r3, [pc, #160]	; (8009930 <__lshift+0xd0>)
 800988e:	4829      	ldr	r0, [pc, #164]	; (8009934 <__lshift+0xd4>)
 8009890:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009894:	f000 fc8a 	bl	800a1ac <__assert_func>
 8009898:	3101      	adds	r1, #1
 800989a:	005b      	lsls	r3, r3, #1
 800989c:	e7ee      	b.n	800987c <__lshift+0x1c>
 800989e:	2300      	movs	r3, #0
 80098a0:	f100 0114 	add.w	r1, r0, #20
 80098a4:	f100 0210 	add.w	r2, r0, #16
 80098a8:	4618      	mov	r0, r3
 80098aa:	4553      	cmp	r3, sl
 80098ac:	db33      	blt.n	8009916 <__lshift+0xb6>
 80098ae:	6920      	ldr	r0, [r4, #16]
 80098b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098b4:	f104 0314 	add.w	r3, r4, #20
 80098b8:	f019 091f 	ands.w	r9, r9, #31
 80098bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098c4:	d02b      	beq.n	800991e <__lshift+0xbe>
 80098c6:	f1c9 0e20 	rsb	lr, r9, #32
 80098ca:	468a      	mov	sl, r1
 80098cc:	2200      	movs	r2, #0
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	fa00 f009 	lsl.w	r0, r0, r9
 80098d4:	4302      	orrs	r2, r0
 80098d6:	f84a 2b04 	str.w	r2, [sl], #4
 80098da:	f853 2b04 	ldr.w	r2, [r3], #4
 80098de:	459c      	cmp	ip, r3
 80098e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80098e4:	d8f3      	bhi.n	80098ce <__lshift+0x6e>
 80098e6:	ebac 0304 	sub.w	r3, ip, r4
 80098ea:	3b15      	subs	r3, #21
 80098ec:	f023 0303 	bic.w	r3, r3, #3
 80098f0:	3304      	adds	r3, #4
 80098f2:	f104 0015 	add.w	r0, r4, #21
 80098f6:	4584      	cmp	ip, r0
 80098f8:	bf38      	it	cc
 80098fa:	2304      	movcc	r3, #4
 80098fc:	50ca      	str	r2, [r1, r3]
 80098fe:	b10a      	cbz	r2, 8009904 <__lshift+0xa4>
 8009900:	f108 0602 	add.w	r6, r8, #2
 8009904:	3e01      	subs	r6, #1
 8009906:	4638      	mov	r0, r7
 8009908:	612e      	str	r6, [r5, #16]
 800990a:	4621      	mov	r1, r4
 800990c:	f7ff fdd6 	bl	80094bc <_Bfree>
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009916:	f842 0f04 	str.w	r0, [r2, #4]!
 800991a:	3301      	adds	r3, #1
 800991c:	e7c5      	b.n	80098aa <__lshift+0x4a>
 800991e:	3904      	subs	r1, #4
 8009920:	f853 2b04 	ldr.w	r2, [r3], #4
 8009924:	f841 2f04 	str.w	r2, [r1, #4]!
 8009928:	459c      	cmp	ip, r3
 800992a:	d8f9      	bhi.n	8009920 <__lshift+0xc0>
 800992c:	e7ea      	b.n	8009904 <__lshift+0xa4>
 800992e:	bf00      	nop
 8009930:	0800aa97 	.word	0x0800aa97
 8009934:	0800ab08 	.word	0x0800ab08

08009938 <__mcmp>:
 8009938:	b530      	push	{r4, r5, lr}
 800993a:	6902      	ldr	r2, [r0, #16]
 800993c:	690c      	ldr	r4, [r1, #16]
 800993e:	1b12      	subs	r2, r2, r4
 8009940:	d10e      	bne.n	8009960 <__mcmp+0x28>
 8009942:	f100 0314 	add.w	r3, r0, #20
 8009946:	3114      	adds	r1, #20
 8009948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800994c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009958:	42a5      	cmp	r5, r4
 800995a:	d003      	beq.n	8009964 <__mcmp+0x2c>
 800995c:	d305      	bcc.n	800996a <__mcmp+0x32>
 800995e:	2201      	movs	r2, #1
 8009960:	4610      	mov	r0, r2
 8009962:	bd30      	pop	{r4, r5, pc}
 8009964:	4283      	cmp	r3, r0
 8009966:	d3f3      	bcc.n	8009950 <__mcmp+0x18>
 8009968:	e7fa      	b.n	8009960 <__mcmp+0x28>
 800996a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800996e:	e7f7      	b.n	8009960 <__mcmp+0x28>

08009970 <__mdiff>:
 8009970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	460c      	mov	r4, r1
 8009976:	4606      	mov	r6, r0
 8009978:	4611      	mov	r1, r2
 800997a:	4620      	mov	r0, r4
 800997c:	4617      	mov	r7, r2
 800997e:	f7ff ffdb 	bl	8009938 <__mcmp>
 8009982:	1e05      	subs	r5, r0, #0
 8009984:	d110      	bne.n	80099a8 <__mdiff+0x38>
 8009986:	4629      	mov	r1, r5
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff fd57 	bl	800943c <_Balloc>
 800998e:	b930      	cbnz	r0, 800999e <__mdiff+0x2e>
 8009990:	4b39      	ldr	r3, [pc, #228]	; (8009a78 <__mdiff+0x108>)
 8009992:	4602      	mov	r2, r0
 8009994:	f240 2132 	movw	r1, #562	; 0x232
 8009998:	4838      	ldr	r0, [pc, #224]	; (8009a7c <__mdiff+0x10c>)
 800999a:	f000 fc07 	bl	800a1ac <__assert_func>
 800999e:	2301      	movs	r3, #1
 80099a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a8:	bfa4      	itt	ge
 80099aa:	463b      	movge	r3, r7
 80099ac:	4627      	movge	r7, r4
 80099ae:	4630      	mov	r0, r6
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	bfa6      	itte	ge
 80099b4:	461c      	movge	r4, r3
 80099b6:	2500      	movge	r5, #0
 80099b8:	2501      	movlt	r5, #1
 80099ba:	f7ff fd3f 	bl	800943c <_Balloc>
 80099be:	b920      	cbnz	r0, 80099ca <__mdiff+0x5a>
 80099c0:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <__mdiff+0x108>)
 80099c2:	4602      	mov	r2, r0
 80099c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099c8:	e7e6      	b.n	8009998 <__mdiff+0x28>
 80099ca:	693e      	ldr	r6, [r7, #16]
 80099cc:	60c5      	str	r5, [r0, #12]
 80099ce:	6925      	ldr	r5, [r4, #16]
 80099d0:	f107 0114 	add.w	r1, r7, #20
 80099d4:	f104 0914 	add.w	r9, r4, #20
 80099d8:	f100 0e14 	add.w	lr, r0, #20
 80099dc:	f107 0210 	add.w	r2, r7, #16
 80099e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80099e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80099e8:	46f2      	mov	sl, lr
 80099ea:	2700      	movs	r7, #0
 80099ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80099f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099f4:	fa1f f883 	uxth.w	r8, r3
 80099f8:	fa17 f78b 	uxtah	r7, r7, fp
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	eba7 0808 	sub.w	r8, r7, r8
 8009a02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a0a:	fa1f f888 	uxth.w	r8, r8
 8009a0e:	141f      	asrs	r7, r3, #16
 8009a10:	454d      	cmp	r5, r9
 8009a12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a16:	f84a 3b04 	str.w	r3, [sl], #4
 8009a1a:	d8e7      	bhi.n	80099ec <__mdiff+0x7c>
 8009a1c:	1b2b      	subs	r3, r5, r4
 8009a1e:	3b15      	subs	r3, #21
 8009a20:	f023 0303 	bic.w	r3, r3, #3
 8009a24:	3304      	adds	r3, #4
 8009a26:	3415      	adds	r4, #21
 8009a28:	42a5      	cmp	r5, r4
 8009a2a:	bf38      	it	cc
 8009a2c:	2304      	movcc	r3, #4
 8009a2e:	4419      	add	r1, r3
 8009a30:	4473      	add	r3, lr
 8009a32:	469e      	mov	lr, r3
 8009a34:	460d      	mov	r5, r1
 8009a36:	4565      	cmp	r5, ip
 8009a38:	d30e      	bcc.n	8009a58 <__mdiff+0xe8>
 8009a3a:	f10c 0203 	add.w	r2, ip, #3
 8009a3e:	1a52      	subs	r2, r2, r1
 8009a40:	f022 0203 	bic.w	r2, r2, #3
 8009a44:	3903      	subs	r1, #3
 8009a46:	458c      	cmp	ip, r1
 8009a48:	bf38      	it	cc
 8009a4a:	2200      	movcc	r2, #0
 8009a4c:	441a      	add	r2, r3
 8009a4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a52:	b17b      	cbz	r3, 8009a74 <__mdiff+0x104>
 8009a54:	6106      	str	r6, [r0, #16]
 8009a56:	e7a5      	b.n	80099a4 <__mdiff+0x34>
 8009a58:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a5c:	fa17 f488 	uxtah	r4, r7, r8
 8009a60:	1422      	asrs	r2, r4, #16
 8009a62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009a66:	b2a4      	uxth	r4, r4
 8009a68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009a6c:	f84e 4b04 	str.w	r4, [lr], #4
 8009a70:	1417      	asrs	r7, r2, #16
 8009a72:	e7e0      	b.n	8009a36 <__mdiff+0xc6>
 8009a74:	3e01      	subs	r6, #1
 8009a76:	e7ea      	b.n	8009a4e <__mdiff+0xde>
 8009a78:	0800aa97 	.word	0x0800aa97
 8009a7c:	0800ab08 	.word	0x0800ab08

08009a80 <__d2b>:
 8009a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a84:	4689      	mov	r9, r1
 8009a86:	2101      	movs	r1, #1
 8009a88:	ec57 6b10 	vmov	r6, r7, d0
 8009a8c:	4690      	mov	r8, r2
 8009a8e:	f7ff fcd5 	bl	800943c <_Balloc>
 8009a92:	4604      	mov	r4, r0
 8009a94:	b930      	cbnz	r0, 8009aa4 <__d2b+0x24>
 8009a96:	4602      	mov	r2, r0
 8009a98:	4b25      	ldr	r3, [pc, #148]	; (8009b30 <__d2b+0xb0>)
 8009a9a:	4826      	ldr	r0, [pc, #152]	; (8009b34 <__d2b+0xb4>)
 8009a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8009aa0:	f000 fb84 	bl	800a1ac <__assert_func>
 8009aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009aac:	bb35      	cbnz	r5, 8009afc <__d2b+0x7c>
 8009aae:	2e00      	cmp	r6, #0
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	d028      	beq.n	8009b06 <__d2b+0x86>
 8009ab4:	4668      	mov	r0, sp
 8009ab6:	9600      	str	r6, [sp, #0]
 8009ab8:	f7ff fd8c 	bl	80095d4 <__lo0bits>
 8009abc:	9900      	ldr	r1, [sp, #0]
 8009abe:	b300      	cbz	r0, 8009b02 <__d2b+0x82>
 8009ac0:	9a01      	ldr	r2, [sp, #4]
 8009ac2:	f1c0 0320 	rsb	r3, r0, #32
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	430b      	orrs	r3, r1
 8009acc:	40c2      	lsrs	r2, r0
 8009ace:	6163      	str	r3, [r4, #20]
 8009ad0:	9201      	str	r2, [sp, #4]
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	61a3      	str	r3, [r4, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bf14      	ite	ne
 8009ada:	2202      	movne	r2, #2
 8009adc:	2201      	moveq	r2, #1
 8009ade:	6122      	str	r2, [r4, #16]
 8009ae0:	b1d5      	cbz	r5, 8009b18 <__d2b+0x98>
 8009ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ae6:	4405      	add	r5, r0
 8009ae8:	f8c9 5000 	str.w	r5, [r9]
 8009aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009af0:	f8c8 0000 	str.w	r0, [r8]
 8009af4:	4620      	mov	r0, r4
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b00:	e7d5      	b.n	8009aae <__d2b+0x2e>
 8009b02:	6161      	str	r1, [r4, #20]
 8009b04:	e7e5      	b.n	8009ad2 <__d2b+0x52>
 8009b06:	a801      	add	r0, sp, #4
 8009b08:	f7ff fd64 	bl	80095d4 <__lo0bits>
 8009b0c:	9b01      	ldr	r3, [sp, #4]
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	2201      	movs	r2, #1
 8009b12:	6122      	str	r2, [r4, #16]
 8009b14:	3020      	adds	r0, #32
 8009b16:	e7e3      	b.n	8009ae0 <__d2b+0x60>
 8009b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b20:	f8c9 0000 	str.w	r0, [r9]
 8009b24:	6918      	ldr	r0, [r3, #16]
 8009b26:	f7ff fd35 	bl	8009594 <__hi0bits>
 8009b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b2e:	e7df      	b.n	8009af0 <__d2b+0x70>
 8009b30:	0800aa97 	.word	0x0800aa97
 8009b34:	0800ab08 	.word	0x0800ab08

08009b38 <_calloc_r>:
 8009b38:	b513      	push	{r0, r1, r4, lr}
 8009b3a:	434a      	muls	r2, r1
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	9201      	str	r2, [sp, #4]
 8009b40:	f000 f85a 	bl	8009bf8 <_malloc_r>
 8009b44:	4604      	mov	r4, r0
 8009b46:	b118      	cbz	r0, 8009b50 <_calloc_r+0x18>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	f7fe f86e 	bl	8007c2c <memset>
 8009b50:	4620      	mov	r0, r4
 8009b52:	b002      	add	sp, #8
 8009b54:	bd10      	pop	{r4, pc}
	...

08009b58 <_free_r>:
 8009b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	d048      	beq.n	8009bf0 <_free_r+0x98>
 8009b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b62:	9001      	str	r0, [sp, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f1a1 0404 	sub.w	r4, r1, #4
 8009b6a:	bfb8      	it	lt
 8009b6c:	18e4      	addlt	r4, r4, r3
 8009b6e:	f000 fca7 	bl	800a4c0 <__malloc_lock>
 8009b72:	4a20      	ldr	r2, [pc, #128]	; (8009bf4 <_free_r+0x9c>)
 8009b74:	9801      	ldr	r0, [sp, #4]
 8009b76:	6813      	ldr	r3, [r2, #0]
 8009b78:	4615      	mov	r5, r2
 8009b7a:	b933      	cbnz	r3, 8009b8a <_free_r+0x32>
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	6014      	str	r4, [r2, #0]
 8009b80:	b003      	add	sp, #12
 8009b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b86:	f000 bca1 	b.w	800a4cc <__malloc_unlock>
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	d90b      	bls.n	8009ba6 <_free_r+0x4e>
 8009b8e:	6821      	ldr	r1, [r4, #0]
 8009b90:	1862      	adds	r2, r4, r1
 8009b92:	4293      	cmp	r3, r2
 8009b94:	bf04      	itt	eq
 8009b96:	681a      	ldreq	r2, [r3, #0]
 8009b98:	685b      	ldreq	r3, [r3, #4]
 8009b9a:	6063      	str	r3, [r4, #4]
 8009b9c:	bf04      	itt	eq
 8009b9e:	1852      	addeq	r2, r2, r1
 8009ba0:	6022      	streq	r2, [r4, #0]
 8009ba2:	602c      	str	r4, [r5, #0]
 8009ba4:	e7ec      	b.n	8009b80 <_free_r+0x28>
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	b10b      	cbz	r3, 8009bb0 <_free_r+0x58>
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	d9fa      	bls.n	8009ba6 <_free_r+0x4e>
 8009bb0:	6811      	ldr	r1, [r2, #0]
 8009bb2:	1855      	adds	r5, r2, r1
 8009bb4:	42a5      	cmp	r5, r4
 8009bb6:	d10b      	bne.n	8009bd0 <_free_r+0x78>
 8009bb8:	6824      	ldr	r4, [r4, #0]
 8009bba:	4421      	add	r1, r4
 8009bbc:	1854      	adds	r4, r2, r1
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	6011      	str	r1, [r2, #0]
 8009bc2:	d1dd      	bne.n	8009b80 <_free_r+0x28>
 8009bc4:	681c      	ldr	r4, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	6053      	str	r3, [r2, #4]
 8009bca:	4421      	add	r1, r4
 8009bcc:	6011      	str	r1, [r2, #0]
 8009bce:	e7d7      	b.n	8009b80 <_free_r+0x28>
 8009bd0:	d902      	bls.n	8009bd8 <_free_r+0x80>
 8009bd2:	230c      	movs	r3, #12
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	e7d3      	b.n	8009b80 <_free_r+0x28>
 8009bd8:	6825      	ldr	r5, [r4, #0]
 8009bda:	1961      	adds	r1, r4, r5
 8009bdc:	428b      	cmp	r3, r1
 8009bde:	bf04      	itt	eq
 8009be0:	6819      	ldreq	r1, [r3, #0]
 8009be2:	685b      	ldreq	r3, [r3, #4]
 8009be4:	6063      	str	r3, [r4, #4]
 8009be6:	bf04      	itt	eq
 8009be8:	1949      	addeq	r1, r1, r5
 8009bea:	6021      	streq	r1, [r4, #0]
 8009bec:	6054      	str	r4, [r2, #4]
 8009bee:	e7c7      	b.n	8009b80 <_free_r+0x28>
 8009bf0:	b003      	add	sp, #12
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	20001ac8 	.word	0x20001ac8

08009bf8 <_malloc_r>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	1ccd      	adds	r5, r1, #3
 8009bfc:	f025 0503 	bic.w	r5, r5, #3
 8009c00:	3508      	adds	r5, #8
 8009c02:	2d0c      	cmp	r5, #12
 8009c04:	bf38      	it	cc
 8009c06:	250c      	movcc	r5, #12
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	db01      	blt.n	8009c12 <_malloc_r+0x1a>
 8009c0e:	42a9      	cmp	r1, r5
 8009c10:	d903      	bls.n	8009c1a <_malloc_r+0x22>
 8009c12:	230c      	movs	r3, #12
 8009c14:	6033      	str	r3, [r6, #0]
 8009c16:	2000      	movs	r0, #0
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c1a:	f000 fc51 	bl	800a4c0 <__malloc_lock>
 8009c1e:	4921      	ldr	r1, [pc, #132]	; (8009ca4 <_malloc_r+0xac>)
 8009c20:	680a      	ldr	r2, [r1, #0]
 8009c22:	4614      	mov	r4, r2
 8009c24:	b99c      	cbnz	r4, 8009c4e <_malloc_r+0x56>
 8009c26:	4f20      	ldr	r7, [pc, #128]	; (8009ca8 <_malloc_r+0xb0>)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	b923      	cbnz	r3, 8009c36 <_malloc_r+0x3e>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f000 f996 	bl	8009f60 <_sbrk_r>
 8009c34:	6038      	str	r0, [r7, #0]
 8009c36:	4629      	mov	r1, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f000 f991 	bl	8009f60 <_sbrk_r>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d123      	bne.n	8009c8a <_malloc_r+0x92>
 8009c42:	230c      	movs	r3, #12
 8009c44:	6033      	str	r3, [r6, #0]
 8009c46:	4630      	mov	r0, r6
 8009c48:	f000 fc40 	bl	800a4cc <__malloc_unlock>
 8009c4c:	e7e3      	b.n	8009c16 <_malloc_r+0x1e>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	1b5b      	subs	r3, r3, r5
 8009c52:	d417      	bmi.n	8009c84 <_malloc_r+0x8c>
 8009c54:	2b0b      	cmp	r3, #11
 8009c56:	d903      	bls.n	8009c60 <_malloc_r+0x68>
 8009c58:	6023      	str	r3, [r4, #0]
 8009c5a:	441c      	add	r4, r3
 8009c5c:	6025      	str	r5, [r4, #0]
 8009c5e:	e004      	b.n	8009c6a <_malloc_r+0x72>
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	42a2      	cmp	r2, r4
 8009c64:	bf0c      	ite	eq
 8009c66:	600b      	streq	r3, [r1, #0]
 8009c68:	6053      	strne	r3, [r2, #4]
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 fc2e 	bl	800a4cc <__malloc_unlock>
 8009c70:	f104 000b 	add.w	r0, r4, #11
 8009c74:	1d23      	adds	r3, r4, #4
 8009c76:	f020 0007 	bic.w	r0, r0, #7
 8009c7a:	1ac2      	subs	r2, r0, r3
 8009c7c:	d0cc      	beq.n	8009c18 <_malloc_r+0x20>
 8009c7e:	1a1b      	subs	r3, r3, r0
 8009c80:	50a3      	str	r3, [r4, r2]
 8009c82:	e7c9      	b.n	8009c18 <_malloc_r+0x20>
 8009c84:	4622      	mov	r2, r4
 8009c86:	6864      	ldr	r4, [r4, #4]
 8009c88:	e7cc      	b.n	8009c24 <_malloc_r+0x2c>
 8009c8a:	1cc4      	adds	r4, r0, #3
 8009c8c:	f024 0403 	bic.w	r4, r4, #3
 8009c90:	42a0      	cmp	r0, r4
 8009c92:	d0e3      	beq.n	8009c5c <_malloc_r+0x64>
 8009c94:	1a21      	subs	r1, r4, r0
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 f962 	bl	8009f60 <_sbrk_r>
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d1dd      	bne.n	8009c5c <_malloc_r+0x64>
 8009ca0:	e7cf      	b.n	8009c42 <_malloc_r+0x4a>
 8009ca2:	bf00      	nop
 8009ca4:	20001ac8 	.word	0x20001ac8
 8009ca8:	20001acc 	.word	0x20001acc

08009cac <__sfputc_r>:
 8009cac:	6893      	ldr	r3, [r2, #8]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	b410      	push	{r4}
 8009cb4:	6093      	str	r3, [r2, #8]
 8009cb6:	da08      	bge.n	8009cca <__sfputc_r+0x1e>
 8009cb8:	6994      	ldr	r4, [r2, #24]
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	db01      	blt.n	8009cc2 <__sfputc_r+0x16>
 8009cbe:	290a      	cmp	r1, #10
 8009cc0:	d103      	bne.n	8009cca <__sfputc_r+0x1e>
 8009cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cc6:	f000 b99f 	b.w	800a008 <__swbuf_r>
 8009cca:	6813      	ldr	r3, [r2, #0]
 8009ccc:	1c58      	adds	r0, r3, #1
 8009cce:	6010      	str	r0, [r2, #0]
 8009cd0:	7019      	strb	r1, [r3, #0]
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <__sfputs_r>:
 8009cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	18d5      	adds	r5, r2, r3
 8009ce4:	42ac      	cmp	r4, r5
 8009ce6:	d101      	bne.n	8009cec <__sfputs_r+0x12>
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e007      	b.n	8009cfc <__sfputs_r+0x22>
 8009cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7ff ffda 	bl	8009cac <__sfputc_r>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d1f3      	bne.n	8009ce4 <__sfputs_r+0xa>
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d00 <_vfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	460d      	mov	r5, r1
 8009d06:	b09d      	sub	sp, #116	; 0x74
 8009d08:	4614      	mov	r4, r2
 8009d0a:	4698      	mov	r8, r3
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	b118      	cbz	r0, 8009d18 <_vfiprintf_r+0x18>
 8009d10:	6983      	ldr	r3, [r0, #24]
 8009d12:	b90b      	cbnz	r3, 8009d18 <_vfiprintf_r+0x18>
 8009d14:	f7ff fae4 	bl	80092e0 <__sinit>
 8009d18:	4b89      	ldr	r3, [pc, #548]	; (8009f40 <_vfiprintf_r+0x240>)
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	d11b      	bne.n	8009d56 <_vfiprintf_r+0x56>
 8009d1e:	6875      	ldr	r5, [r6, #4]
 8009d20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d22:	07d9      	lsls	r1, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <_vfiprintf_r+0x32>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	059a      	lsls	r2, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <_vfiprintf_r+0x32>
 8009d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d2e:	f7ff fb7a 	bl	8009426 <__retarget_lock_acquire_recursive>
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	071b      	lsls	r3, r3, #28
 8009d36:	d501      	bpl.n	8009d3c <_vfiprintf_r+0x3c>
 8009d38:	692b      	ldr	r3, [r5, #16]
 8009d3a:	b9eb      	cbnz	r3, 8009d78 <_vfiprintf_r+0x78>
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 f9c6 	bl	800a0d0 <__swsetup_r>
 8009d44:	b1c0      	cbz	r0, 8009d78 <_vfiprintf_r+0x78>
 8009d46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d48:	07dc      	lsls	r4, r3, #31
 8009d4a:	d50e      	bpl.n	8009d6a <_vfiprintf_r+0x6a>
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d50:	b01d      	add	sp, #116	; 0x74
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <_vfiprintf_r+0x244>)
 8009d58:	429d      	cmp	r5, r3
 8009d5a:	d101      	bne.n	8009d60 <_vfiprintf_r+0x60>
 8009d5c:	68b5      	ldr	r5, [r6, #8]
 8009d5e:	e7df      	b.n	8009d20 <_vfiprintf_r+0x20>
 8009d60:	4b79      	ldr	r3, [pc, #484]	; (8009f48 <_vfiprintf_r+0x248>)
 8009d62:	429d      	cmp	r5, r3
 8009d64:	bf08      	it	eq
 8009d66:	68f5      	ldreq	r5, [r6, #12]
 8009d68:	e7da      	b.n	8009d20 <_vfiprintf_r+0x20>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	0598      	lsls	r0, r3, #22
 8009d6e:	d4ed      	bmi.n	8009d4c <_vfiprintf_r+0x4c>
 8009d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d72:	f7ff fb59 	bl	8009428 <__retarget_lock_release_recursive>
 8009d76:	e7e9      	b.n	8009d4c <_vfiprintf_r+0x4c>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	2320      	movs	r3, #32
 8009d7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d86:	2330      	movs	r3, #48	; 0x30
 8009d88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f4c <_vfiprintf_r+0x24c>
 8009d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d90:	f04f 0901 	mov.w	r9, #1
 8009d94:	4623      	mov	r3, r4
 8009d96:	469a      	mov	sl, r3
 8009d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9c:	b10a      	cbz	r2, 8009da2 <_vfiprintf_r+0xa2>
 8009d9e:	2a25      	cmp	r2, #37	; 0x25
 8009da0:	d1f9      	bne.n	8009d96 <_vfiprintf_r+0x96>
 8009da2:	ebba 0b04 	subs.w	fp, sl, r4
 8009da6:	d00b      	beq.n	8009dc0 <_vfiprintf_r+0xc0>
 8009da8:	465b      	mov	r3, fp
 8009daa:	4622      	mov	r2, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ff93 	bl	8009cda <__sfputs_r>
 8009db4:	3001      	adds	r0, #1
 8009db6:	f000 80aa 	beq.w	8009f0e <_vfiprintf_r+0x20e>
 8009dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dbc:	445a      	add	r2, fp
 8009dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80a2 	beq.w	8009f0e <_vfiprintf_r+0x20e>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd4:	f10a 0a01 	add.w	sl, sl, #1
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	9307      	str	r3, [sp, #28]
 8009ddc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de0:	931a      	str	r3, [sp, #104]	; 0x68
 8009de2:	4654      	mov	r4, sl
 8009de4:	2205      	movs	r2, #5
 8009de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dea:	4858      	ldr	r0, [pc, #352]	; (8009f4c <_vfiprintf_r+0x24c>)
 8009dec:	f7f6 f9f8 	bl	80001e0 <memchr>
 8009df0:	9a04      	ldr	r2, [sp, #16]
 8009df2:	b9d8      	cbnz	r0, 8009e2c <_vfiprintf_r+0x12c>
 8009df4:	06d1      	lsls	r1, r2, #27
 8009df6:	bf44      	itt	mi
 8009df8:	2320      	movmi	r3, #32
 8009dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dfe:	0713      	lsls	r3, r2, #28
 8009e00:	bf44      	itt	mi
 8009e02:	232b      	movmi	r3, #43	; 0x2b
 8009e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e08:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0e:	d015      	beq.n	8009e3c <_vfiprintf_r+0x13c>
 8009e10:	9a07      	ldr	r2, [sp, #28]
 8009e12:	4654      	mov	r4, sl
 8009e14:	2000      	movs	r0, #0
 8009e16:	f04f 0c0a 	mov.w	ip, #10
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e20:	3b30      	subs	r3, #48	; 0x30
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d94e      	bls.n	8009ec4 <_vfiprintf_r+0x1c4>
 8009e26:	b1b0      	cbz	r0, 8009e56 <_vfiprintf_r+0x156>
 8009e28:	9207      	str	r2, [sp, #28]
 8009e2a:	e014      	b.n	8009e56 <_vfiprintf_r+0x156>
 8009e2c:	eba0 0308 	sub.w	r3, r0, r8
 8009e30:	fa09 f303 	lsl.w	r3, r9, r3
 8009e34:	4313      	orrs	r3, r2
 8009e36:	9304      	str	r3, [sp, #16]
 8009e38:	46a2      	mov	sl, r4
 8009e3a:	e7d2      	b.n	8009de2 <_vfiprintf_r+0xe2>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	1d19      	adds	r1, r3, #4
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	9103      	str	r1, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	bfbb      	ittet	lt
 8009e48:	425b      	neglt	r3, r3
 8009e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009e4e:	9307      	strge	r3, [sp, #28]
 8009e50:	9307      	strlt	r3, [sp, #28]
 8009e52:	bfb8      	it	lt
 8009e54:	9204      	strlt	r2, [sp, #16]
 8009e56:	7823      	ldrb	r3, [r4, #0]
 8009e58:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5a:	d10c      	bne.n	8009e76 <_vfiprintf_r+0x176>
 8009e5c:	7863      	ldrb	r3, [r4, #1]
 8009e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e60:	d135      	bne.n	8009ece <_vfiprintf_r+0x1ce>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	1d1a      	adds	r2, r3, #4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	9203      	str	r2, [sp, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfb8      	it	lt
 8009e6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e72:	3402      	adds	r4, #2
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f5c <_vfiprintf_r+0x25c>
 8009e7a:	7821      	ldrb	r1, [r4, #0]
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	4650      	mov	r0, sl
 8009e80:	f7f6 f9ae 	bl	80001e0 <memchr>
 8009e84:	b140      	cbz	r0, 8009e98 <_vfiprintf_r+0x198>
 8009e86:	2340      	movs	r3, #64	; 0x40
 8009e88:	eba0 000a 	sub.w	r0, r0, sl
 8009e8c:	fa03 f000 	lsl.w	r0, r3, r0
 8009e90:	9b04      	ldr	r3, [sp, #16]
 8009e92:	4303      	orrs	r3, r0
 8009e94:	3401      	adds	r4, #1
 8009e96:	9304      	str	r3, [sp, #16]
 8009e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9c:	482c      	ldr	r0, [pc, #176]	; (8009f50 <_vfiprintf_r+0x250>)
 8009e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea2:	2206      	movs	r2, #6
 8009ea4:	f7f6 f99c 	bl	80001e0 <memchr>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d03f      	beq.n	8009f2c <_vfiprintf_r+0x22c>
 8009eac:	4b29      	ldr	r3, [pc, #164]	; (8009f54 <_vfiprintf_r+0x254>)
 8009eae:	bb1b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x1f8>
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	3307      	adds	r3, #7
 8009eb4:	f023 0307 	bic.w	r3, r3, #7
 8009eb8:	3308      	adds	r3, #8
 8009eba:	9303      	str	r3, [sp, #12]
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	443b      	add	r3, r7
 8009ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec2:	e767      	b.n	8009d94 <_vfiprintf_r+0x94>
 8009ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec8:	460c      	mov	r4, r1
 8009eca:	2001      	movs	r0, #1
 8009ecc:	e7a5      	b.n	8009e1a <_vfiprintf_r+0x11a>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	3401      	adds	r4, #1
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	f04f 0c0a 	mov.w	ip, #10
 8009eda:	4620      	mov	r0, r4
 8009edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee0:	3a30      	subs	r2, #48	; 0x30
 8009ee2:	2a09      	cmp	r2, #9
 8009ee4:	d903      	bls.n	8009eee <_vfiprintf_r+0x1ee>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0c5      	beq.n	8009e76 <_vfiprintf_r+0x176>
 8009eea:	9105      	str	r1, [sp, #20]
 8009eec:	e7c3      	b.n	8009e76 <_vfiprintf_r+0x176>
 8009eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e7f0      	b.n	8009eda <_vfiprintf_r+0x1da>
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <_vfiprintf_r+0x258>)
 8009f00:	a904      	add	r1, sp, #16
 8009f02:	4630      	mov	r0, r6
 8009f04:	f7fd ff3a 	bl	8007d7c <_printf_float>
 8009f08:	4607      	mov	r7, r0
 8009f0a:	1c78      	adds	r0, r7, #1
 8009f0c:	d1d6      	bne.n	8009ebc <_vfiprintf_r+0x1bc>
 8009f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f10:	07d9      	lsls	r1, r3, #31
 8009f12:	d405      	bmi.n	8009f20 <_vfiprintf_r+0x220>
 8009f14:	89ab      	ldrh	r3, [r5, #12]
 8009f16:	059a      	lsls	r2, r3, #22
 8009f18:	d402      	bmi.n	8009f20 <_vfiprintf_r+0x220>
 8009f1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f1c:	f7ff fa84 	bl	8009428 <__retarget_lock_release_recursive>
 8009f20:	89ab      	ldrh	r3, [r5, #12]
 8009f22:	065b      	lsls	r3, r3, #25
 8009f24:	f53f af12 	bmi.w	8009d4c <_vfiprintf_r+0x4c>
 8009f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f2a:	e711      	b.n	8009d50 <_vfiprintf_r+0x50>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <_vfiprintf_r+0x258>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7fe f9c4 	bl	80082c4 <_printf_i>
 8009f3c:	e7e4      	b.n	8009f08 <_vfiprintf_r+0x208>
 8009f3e:	bf00      	nop
 8009f40:	0800aac8 	.word	0x0800aac8
 8009f44:	0800aae8 	.word	0x0800aae8
 8009f48:	0800aaa8 	.word	0x0800aaa8
 8009f4c:	0800ac64 	.word	0x0800ac64
 8009f50:	0800ac6e 	.word	0x0800ac6e
 8009f54:	08007d7d 	.word	0x08007d7d
 8009f58:	08009cdb 	.word	0x08009cdb
 8009f5c:	0800ac6a 	.word	0x0800ac6a

08009f60 <_sbrk_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	; (8009f7c <_sbrk_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f7 fcb6 	bl	80018dc <_sbrk>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_sbrk_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_sbrk_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20001c4c 	.word	0x20001c4c

08009f80 <__sread>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	460c      	mov	r4, r1
 8009f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f88:	f000 faa6 	bl	800a4d8 <_read_r>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	bfab      	itete	ge
 8009f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f92:	89a3      	ldrhlt	r3, [r4, #12]
 8009f94:	181b      	addge	r3, r3, r0
 8009f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f9a:	bfac      	ite	ge
 8009f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f9e:	81a3      	strhlt	r3, [r4, #12]
 8009fa0:	bd10      	pop	{r4, pc}

08009fa2 <__swrite>:
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	898b      	ldrh	r3, [r1, #12]
 8009faa:	05db      	lsls	r3, r3, #23
 8009fac:	4605      	mov	r5, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	d505      	bpl.n	8009fc0 <__swrite+0x1e>
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	2302      	movs	r3, #2
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f000 f9f8 	bl	800a3b0 <_lseek_r>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd6:	f000 b869 	b.w	800a0ac <_write_r>

08009fda <__sseek>:
 8009fda:	b510      	push	{r4, lr}
 8009fdc:	460c      	mov	r4, r1
 8009fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe2:	f000 f9e5 	bl	800a3b0 <_lseek_r>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	bf15      	itete	ne
 8009fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ff6:	81a3      	strheq	r3, [r4, #12]
 8009ff8:	bf18      	it	ne
 8009ffa:	81a3      	strhne	r3, [r4, #12]
 8009ffc:	bd10      	pop	{r4, pc}

08009ffe <__sclose>:
 8009ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a002:	f000 b8f1 	b.w	800a1e8 <_close_r>
	...

0800a008 <__swbuf_r>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	460e      	mov	r6, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	4605      	mov	r5, r0
 800a010:	b118      	cbz	r0, 800a01a <__swbuf_r+0x12>
 800a012:	6983      	ldr	r3, [r0, #24]
 800a014:	b90b      	cbnz	r3, 800a01a <__swbuf_r+0x12>
 800a016:	f7ff f963 	bl	80092e0 <__sinit>
 800a01a:	4b21      	ldr	r3, [pc, #132]	; (800a0a0 <__swbuf_r+0x98>)
 800a01c:	429c      	cmp	r4, r3
 800a01e:	d12b      	bne.n	800a078 <__swbuf_r+0x70>
 800a020:	686c      	ldr	r4, [r5, #4]
 800a022:	69a3      	ldr	r3, [r4, #24]
 800a024:	60a3      	str	r3, [r4, #8]
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	071a      	lsls	r2, r3, #28
 800a02a:	d52f      	bpl.n	800a08c <__swbuf_r+0x84>
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	b36b      	cbz	r3, 800a08c <__swbuf_r+0x84>
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	6820      	ldr	r0, [r4, #0]
 800a034:	1ac0      	subs	r0, r0, r3
 800a036:	6963      	ldr	r3, [r4, #20]
 800a038:	b2f6      	uxtb	r6, r6
 800a03a:	4283      	cmp	r3, r0
 800a03c:	4637      	mov	r7, r6
 800a03e:	dc04      	bgt.n	800a04a <__swbuf_r+0x42>
 800a040:	4621      	mov	r1, r4
 800a042:	4628      	mov	r0, r5
 800a044:	f000 f966 	bl	800a314 <_fflush_r>
 800a048:	bb30      	cbnz	r0, 800a098 <__swbuf_r+0x90>
 800a04a:	68a3      	ldr	r3, [r4, #8]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	60a3      	str	r3, [r4, #8]
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	6022      	str	r2, [r4, #0]
 800a056:	701e      	strb	r6, [r3, #0]
 800a058:	6963      	ldr	r3, [r4, #20]
 800a05a:	3001      	adds	r0, #1
 800a05c:	4283      	cmp	r3, r0
 800a05e:	d004      	beq.n	800a06a <__swbuf_r+0x62>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	07db      	lsls	r3, r3, #31
 800a064:	d506      	bpl.n	800a074 <__swbuf_r+0x6c>
 800a066:	2e0a      	cmp	r6, #10
 800a068:	d104      	bne.n	800a074 <__swbuf_r+0x6c>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f951 	bl	800a314 <_fflush_r>
 800a072:	b988      	cbnz	r0, 800a098 <__swbuf_r+0x90>
 800a074:	4638      	mov	r0, r7
 800a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a078:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <__swbuf_r+0x9c>)
 800a07a:	429c      	cmp	r4, r3
 800a07c:	d101      	bne.n	800a082 <__swbuf_r+0x7a>
 800a07e:	68ac      	ldr	r4, [r5, #8]
 800a080:	e7cf      	b.n	800a022 <__swbuf_r+0x1a>
 800a082:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <__swbuf_r+0xa0>)
 800a084:	429c      	cmp	r4, r3
 800a086:	bf08      	it	eq
 800a088:	68ec      	ldreq	r4, [r5, #12]
 800a08a:	e7ca      	b.n	800a022 <__swbuf_r+0x1a>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f81e 	bl	800a0d0 <__swsetup_r>
 800a094:	2800      	cmp	r0, #0
 800a096:	d0cb      	beq.n	800a030 <__swbuf_r+0x28>
 800a098:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a09c:	e7ea      	b.n	800a074 <__swbuf_r+0x6c>
 800a09e:	bf00      	nop
 800a0a0:	0800aac8 	.word	0x0800aac8
 800a0a4:	0800aae8 	.word	0x0800aae8
 800a0a8:	0800aaa8 	.word	0x0800aaa8

0800a0ac <_write_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d07      	ldr	r5, [pc, #28]	; (800a0cc <_write_r+0x20>)
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	4608      	mov	r0, r1
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	602a      	str	r2, [r5, #0]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f7f7 fbbd 	bl	800183a <_write>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_write_r+0x1e>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_write_r+0x1e>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20001c4c 	.word	0x20001c4c

0800a0d0 <__swsetup_r>:
 800a0d0:	4b32      	ldr	r3, [pc, #200]	; (800a19c <__swsetup_r+0xcc>)
 800a0d2:	b570      	push	{r4, r5, r6, lr}
 800a0d4:	681d      	ldr	r5, [r3, #0]
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460c      	mov	r4, r1
 800a0da:	b125      	cbz	r5, 800a0e6 <__swsetup_r+0x16>
 800a0dc:	69ab      	ldr	r3, [r5, #24]
 800a0de:	b913      	cbnz	r3, 800a0e6 <__swsetup_r+0x16>
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff f8fd 	bl	80092e0 <__sinit>
 800a0e6:	4b2e      	ldr	r3, [pc, #184]	; (800a1a0 <__swsetup_r+0xd0>)
 800a0e8:	429c      	cmp	r4, r3
 800a0ea:	d10f      	bne.n	800a10c <__swsetup_r+0x3c>
 800a0ec:	686c      	ldr	r4, [r5, #4]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0f4:	0719      	lsls	r1, r3, #28
 800a0f6:	d42c      	bmi.n	800a152 <__swsetup_r+0x82>
 800a0f8:	06dd      	lsls	r5, r3, #27
 800a0fa:	d411      	bmi.n	800a120 <__swsetup_r+0x50>
 800a0fc:	2309      	movs	r3, #9
 800a0fe:	6033      	str	r3, [r6, #0]
 800a100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a10a:	e03e      	b.n	800a18a <__swsetup_r+0xba>
 800a10c:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <__swsetup_r+0xd4>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	d101      	bne.n	800a116 <__swsetup_r+0x46>
 800a112:	68ac      	ldr	r4, [r5, #8]
 800a114:	e7eb      	b.n	800a0ee <__swsetup_r+0x1e>
 800a116:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <__swsetup_r+0xd8>)
 800a118:	429c      	cmp	r4, r3
 800a11a:	bf08      	it	eq
 800a11c:	68ec      	ldreq	r4, [r5, #12]
 800a11e:	e7e6      	b.n	800a0ee <__swsetup_r+0x1e>
 800a120:	0758      	lsls	r0, r3, #29
 800a122:	d512      	bpl.n	800a14a <__swsetup_r+0x7a>
 800a124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a126:	b141      	cbz	r1, 800a13a <__swsetup_r+0x6a>
 800a128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a12c:	4299      	cmp	r1, r3
 800a12e:	d002      	beq.n	800a136 <__swsetup_r+0x66>
 800a130:	4630      	mov	r0, r6
 800a132:	f7ff fd11 	bl	8009b58 <_free_r>
 800a136:	2300      	movs	r3, #0
 800a138:	6363      	str	r3, [r4, #52]	; 0x34
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	2300      	movs	r3, #0
 800a144:	6063      	str	r3, [r4, #4]
 800a146:	6923      	ldr	r3, [r4, #16]
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f043 0308 	orr.w	r3, r3, #8
 800a150:	81a3      	strh	r3, [r4, #12]
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	b94b      	cbnz	r3, 800a16a <__swsetup_r+0x9a>
 800a156:	89a3      	ldrh	r3, [r4, #12]
 800a158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a15c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a160:	d003      	beq.n	800a16a <__swsetup_r+0x9a>
 800a162:	4621      	mov	r1, r4
 800a164:	4630      	mov	r0, r6
 800a166:	f000 f959 	bl	800a41c <__smakebuf_r>
 800a16a:	89a0      	ldrh	r0, [r4, #12]
 800a16c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a170:	f010 0301 	ands.w	r3, r0, #1
 800a174:	d00a      	beq.n	800a18c <__swsetup_r+0xbc>
 800a176:	2300      	movs	r3, #0
 800a178:	60a3      	str	r3, [r4, #8]
 800a17a:	6963      	ldr	r3, [r4, #20]
 800a17c:	425b      	negs	r3, r3
 800a17e:	61a3      	str	r3, [r4, #24]
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	b943      	cbnz	r3, 800a196 <__swsetup_r+0xc6>
 800a184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a188:	d1ba      	bne.n	800a100 <__swsetup_r+0x30>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	0781      	lsls	r1, r0, #30
 800a18e:	bf58      	it	pl
 800a190:	6963      	ldrpl	r3, [r4, #20]
 800a192:	60a3      	str	r3, [r4, #8]
 800a194:	e7f4      	b.n	800a180 <__swsetup_r+0xb0>
 800a196:	2000      	movs	r0, #0
 800a198:	e7f7      	b.n	800a18a <__swsetup_r+0xba>
 800a19a:	bf00      	nop
 800a19c:	20000010 	.word	0x20000010
 800a1a0:	0800aac8 	.word	0x0800aac8
 800a1a4:	0800aae8 	.word	0x0800aae8
 800a1a8:	0800aaa8 	.word	0x0800aaa8

0800a1ac <__assert_func>:
 800a1ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <__assert_func+0x2c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	68d8      	ldr	r0, [r3, #12]
 800a1ba:	b14c      	cbz	r4, 800a1d0 <__assert_func+0x24>
 800a1bc:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <__assert_func+0x30>)
 800a1be:	9100      	str	r1, [sp, #0]
 800a1c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1c4:	4906      	ldr	r1, [pc, #24]	; (800a1e0 <__assert_func+0x34>)
 800a1c6:	462b      	mov	r3, r5
 800a1c8:	f000 f8e0 	bl	800a38c <fiprintf>
 800a1cc:	f000 f9a3 	bl	800a516 <abort>
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <__assert_func+0x38>)
 800a1d2:	461c      	mov	r4, r3
 800a1d4:	e7f3      	b.n	800a1be <__assert_func+0x12>
 800a1d6:	bf00      	nop
 800a1d8:	20000010 	.word	0x20000010
 800a1dc:	0800ac75 	.word	0x0800ac75
 800a1e0:	0800ac82 	.word	0x0800ac82
 800a1e4:	0800acb0 	.word	0x0800acb0

0800a1e8 <_close_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d06      	ldr	r5, [pc, #24]	; (800a204 <_close_r+0x1c>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7f7 fb3d 	bl	8001872 <_close>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_close_r+0x1a>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_close_r+0x1a>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	20001c4c 	.word	0x20001c4c

0800a208 <__sflush_r>:
 800a208:	898a      	ldrh	r2, [r1, #12]
 800a20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a20e:	4605      	mov	r5, r0
 800a210:	0710      	lsls	r0, r2, #28
 800a212:	460c      	mov	r4, r1
 800a214:	d458      	bmi.n	800a2c8 <__sflush_r+0xc0>
 800a216:	684b      	ldr	r3, [r1, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dc05      	bgt.n	800a228 <__sflush_r+0x20>
 800a21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	dc02      	bgt.n	800a228 <__sflush_r+0x20>
 800a222:	2000      	movs	r0, #0
 800a224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a22a:	2e00      	cmp	r6, #0
 800a22c:	d0f9      	beq.n	800a222 <__sflush_r+0x1a>
 800a22e:	2300      	movs	r3, #0
 800a230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a234:	682f      	ldr	r7, [r5, #0]
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	d032      	beq.n	800a2a0 <__sflush_r+0x98>
 800a23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	075a      	lsls	r2, r3, #29
 800a240:	d505      	bpl.n	800a24e <__sflush_r+0x46>
 800a242:	6863      	ldr	r3, [r4, #4]
 800a244:	1ac0      	subs	r0, r0, r3
 800a246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a248:	b10b      	cbz	r3, 800a24e <__sflush_r+0x46>
 800a24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a24c:	1ac0      	subs	r0, r0, r3
 800a24e:	2300      	movs	r3, #0
 800a250:	4602      	mov	r2, r0
 800a252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a254:	6a21      	ldr	r1, [r4, #32]
 800a256:	4628      	mov	r0, r5
 800a258:	47b0      	blx	r6
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	d106      	bne.n	800a26e <__sflush_r+0x66>
 800a260:	6829      	ldr	r1, [r5, #0]
 800a262:	291d      	cmp	r1, #29
 800a264:	d82c      	bhi.n	800a2c0 <__sflush_r+0xb8>
 800a266:	4a2a      	ldr	r2, [pc, #168]	; (800a310 <__sflush_r+0x108>)
 800a268:	40ca      	lsrs	r2, r1
 800a26a:	07d6      	lsls	r6, r2, #31
 800a26c:	d528      	bpl.n	800a2c0 <__sflush_r+0xb8>
 800a26e:	2200      	movs	r2, #0
 800a270:	6062      	str	r2, [r4, #4]
 800a272:	04d9      	lsls	r1, r3, #19
 800a274:	6922      	ldr	r2, [r4, #16]
 800a276:	6022      	str	r2, [r4, #0]
 800a278:	d504      	bpl.n	800a284 <__sflush_r+0x7c>
 800a27a:	1c42      	adds	r2, r0, #1
 800a27c:	d101      	bne.n	800a282 <__sflush_r+0x7a>
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	b903      	cbnz	r3, 800a284 <__sflush_r+0x7c>
 800a282:	6560      	str	r0, [r4, #84]	; 0x54
 800a284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a286:	602f      	str	r7, [r5, #0]
 800a288:	2900      	cmp	r1, #0
 800a28a:	d0ca      	beq.n	800a222 <__sflush_r+0x1a>
 800a28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a290:	4299      	cmp	r1, r3
 800a292:	d002      	beq.n	800a29a <__sflush_r+0x92>
 800a294:	4628      	mov	r0, r5
 800a296:	f7ff fc5f 	bl	8009b58 <_free_r>
 800a29a:	2000      	movs	r0, #0
 800a29c:	6360      	str	r0, [r4, #52]	; 0x34
 800a29e:	e7c1      	b.n	800a224 <__sflush_r+0x1c>
 800a2a0:	6a21      	ldr	r1, [r4, #32]
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	47b0      	blx	r6
 800a2a8:	1c41      	adds	r1, r0, #1
 800a2aa:	d1c7      	bne.n	800a23c <__sflush_r+0x34>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0c4      	beq.n	800a23c <__sflush_r+0x34>
 800a2b2:	2b1d      	cmp	r3, #29
 800a2b4:	d001      	beq.n	800a2ba <__sflush_r+0xb2>
 800a2b6:	2b16      	cmp	r3, #22
 800a2b8:	d101      	bne.n	800a2be <__sflush_r+0xb6>
 800a2ba:	602f      	str	r7, [r5, #0]
 800a2bc:	e7b1      	b.n	800a222 <__sflush_r+0x1a>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	e7ad      	b.n	800a224 <__sflush_r+0x1c>
 800a2c8:	690f      	ldr	r7, [r1, #16]
 800a2ca:	2f00      	cmp	r7, #0
 800a2cc:	d0a9      	beq.n	800a222 <__sflush_r+0x1a>
 800a2ce:	0793      	lsls	r3, r2, #30
 800a2d0:	680e      	ldr	r6, [r1, #0]
 800a2d2:	bf08      	it	eq
 800a2d4:	694b      	ldreq	r3, [r1, #20]
 800a2d6:	600f      	str	r7, [r1, #0]
 800a2d8:	bf18      	it	ne
 800a2da:	2300      	movne	r3, #0
 800a2dc:	eba6 0807 	sub.w	r8, r6, r7
 800a2e0:	608b      	str	r3, [r1, #8]
 800a2e2:	f1b8 0f00 	cmp.w	r8, #0
 800a2e6:	dd9c      	ble.n	800a222 <__sflush_r+0x1a>
 800a2e8:	6a21      	ldr	r1, [r4, #32]
 800a2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2ec:	4643      	mov	r3, r8
 800a2ee:	463a      	mov	r2, r7
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47b0      	blx	r6
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	dc06      	bgt.n	800a306 <__sflush_r+0xfe>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fe:	81a3      	strh	r3, [r4, #12]
 800a300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a304:	e78e      	b.n	800a224 <__sflush_r+0x1c>
 800a306:	4407      	add	r7, r0
 800a308:	eba8 0800 	sub.w	r8, r8, r0
 800a30c:	e7e9      	b.n	800a2e2 <__sflush_r+0xda>
 800a30e:	bf00      	nop
 800a310:	20400001 	.word	0x20400001

0800a314 <_fflush_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	690b      	ldr	r3, [r1, #16]
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	b913      	cbnz	r3, 800a324 <_fflush_r+0x10>
 800a31e:	2500      	movs	r5, #0
 800a320:	4628      	mov	r0, r5
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	b118      	cbz	r0, 800a32e <_fflush_r+0x1a>
 800a326:	6983      	ldr	r3, [r0, #24]
 800a328:	b90b      	cbnz	r3, 800a32e <_fflush_r+0x1a>
 800a32a:	f7fe ffd9 	bl	80092e0 <__sinit>
 800a32e:	4b14      	ldr	r3, [pc, #80]	; (800a380 <_fflush_r+0x6c>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d11b      	bne.n	800a36c <_fflush_r+0x58>
 800a334:	686c      	ldr	r4, [r5, #4]
 800a336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0ef      	beq.n	800a31e <_fflush_r+0xa>
 800a33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a340:	07d0      	lsls	r0, r2, #31
 800a342:	d404      	bmi.n	800a34e <_fflush_r+0x3a>
 800a344:	0599      	lsls	r1, r3, #22
 800a346:	d402      	bmi.n	800a34e <_fflush_r+0x3a>
 800a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34a:	f7ff f86c 	bl	8009426 <__retarget_lock_acquire_recursive>
 800a34e:	4628      	mov	r0, r5
 800a350:	4621      	mov	r1, r4
 800a352:	f7ff ff59 	bl	800a208 <__sflush_r>
 800a356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a358:	07da      	lsls	r2, r3, #31
 800a35a:	4605      	mov	r5, r0
 800a35c:	d4e0      	bmi.n	800a320 <_fflush_r+0xc>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	059b      	lsls	r3, r3, #22
 800a362:	d4dd      	bmi.n	800a320 <_fflush_r+0xc>
 800a364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a366:	f7ff f85f 	bl	8009428 <__retarget_lock_release_recursive>
 800a36a:	e7d9      	b.n	800a320 <_fflush_r+0xc>
 800a36c:	4b05      	ldr	r3, [pc, #20]	; (800a384 <_fflush_r+0x70>)
 800a36e:	429c      	cmp	r4, r3
 800a370:	d101      	bne.n	800a376 <_fflush_r+0x62>
 800a372:	68ac      	ldr	r4, [r5, #8]
 800a374:	e7df      	b.n	800a336 <_fflush_r+0x22>
 800a376:	4b04      	ldr	r3, [pc, #16]	; (800a388 <_fflush_r+0x74>)
 800a378:	429c      	cmp	r4, r3
 800a37a:	bf08      	it	eq
 800a37c:	68ec      	ldreq	r4, [r5, #12]
 800a37e:	e7da      	b.n	800a336 <_fflush_r+0x22>
 800a380:	0800aac8 	.word	0x0800aac8
 800a384:	0800aae8 	.word	0x0800aae8
 800a388:	0800aaa8 	.word	0x0800aaa8

0800a38c <fiprintf>:
 800a38c:	b40e      	push	{r1, r2, r3}
 800a38e:	b503      	push	{r0, r1, lr}
 800a390:	4601      	mov	r1, r0
 800a392:	ab03      	add	r3, sp, #12
 800a394:	4805      	ldr	r0, [pc, #20]	; (800a3ac <fiprintf+0x20>)
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	9301      	str	r3, [sp, #4]
 800a39e:	f7ff fcaf 	bl	8009d00 <_vfiprintf_r>
 800a3a2:	b002      	add	sp, #8
 800a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3a8:	b003      	add	sp, #12
 800a3aa:	4770      	bx	lr
 800a3ac:	20000010 	.word	0x20000010

0800a3b0 <_lseek_r>:
 800a3b0:	b538      	push	{r3, r4, r5, lr}
 800a3b2:	4d07      	ldr	r5, [pc, #28]	; (800a3d0 <_lseek_r+0x20>)
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	602a      	str	r2, [r5, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f7f7 fa7e 	bl	80018c0 <_lseek>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d102      	bne.n	800a3ce <_lseek_r+0x1e>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	b103      	cbz	r3, 800a3ce <_lseek_r+0x1e>
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	bd38      	pop	{r3, r4, r5, pc}
 800a3d0:	20001c4c 	.word	0x20001c4c

0800a3d4 <__swhatbuf_r>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	460e      	mov	r6, r1
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	b096      	sub	sp, #88	; 0x58
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	461d      	mov	r5, r3
 800a3e4:	da07      	bge.n	800a3f6 <__swhatbuf_r+0x22>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	89b3      	ldrh	r3, [r6, #12]
 800a3ec:	061a      	lsls	r2, r3, #24
 800a3ee:	d410      	bmi.n	800a412 <__swhatbuf_r+0x3e>
 800a3f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f4:	e00e      	b.n	800a414 <__swhatbuf_r+0x40>
 800a3f6:	466a      	mov	r2, sp
 800a3f8:	f000 f894 	bl	800a524 <_fstat_r>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	dbf2      	blt.n	800a3e6 <__swhatbuf_r+0x12>
 800a400:	9a01      	ldr	r2, [sp, #4]
 800a402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a40a:	425a      	negs	r2, r3
 800a40c:	415a      	adcs	r2, r3
 800a40e:	602a      	str	r2, [r5, #0]
 800a410:	e7ee      	b.n	800a3f0 <__swhatbuf_r+0x1c>
 800a412:	2340      	movs	r3, #64	; 0x40
 800a414:	2000      	movs	r0, #0
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	b016      	add	sp, #88	; 0x58
 800a41a:	bd70      	pop	{r4, r5, r6, pc}

0800a41c <__smakebuf_r>:
 800a41c:	898b      	ldrh	r3, [r1, #12]
 800a41e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a420:	079d      	lsls	r5, r3, #30
 800a422:	4606      	mov	r6, r0
 800a424:	460c      	mov	r4, r1
 800a426:	d507      	bpl.n	800a438 <__smakebuf_r+0x1c>
 800a428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	6123      	str	r3, [r4, #16]
 800a430:	2301      	movs	r3, #1
 800a432:	6163      	str	r3, [r4, #20]
 800a434:	b002      	add	sp, #8
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	ab01      	add	r3, sp, #4
 800a43a:	466a      	mov	r2, sp
 800a43c:	f7ff ffca 	bl	800a3d4 <__swhatbuf_r>
 800a440:	9900      	ldr	r1, [sp, #0]
 800a442:	4605      	mov	r5, r0
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff fbd7 	bl	8009bf8 <_malloc_r>
 800a44a:	b948      	cbnz	r0, 800a460 <__smakebuf_r+0x44>
 800a44c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a450:	059a      	lsls	r2, r3, #22
 800a452:	d4ef      	bmi.n	800a434 <__smakebuf_r+0x18>
 800a454:	f023 0303 	bic.w	r3, r3, #3
 800a458:	f043 0302 	orr.w	r3, r3, #2
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	e7e3      	b.n	800a428 <__smakebuf_r+0xc>
 800a460:	4b0d      	ldr	r3, [pc, #52]	; (800a498 <__smakebuf_r+0x7c>)
 800a462:	62b3      	str	r3, [r6, #40]	; 0x28
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	6020      	str	r0, [r4, #0]
 800a468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	9b00      	ldr	r3, [sp, #0]
 800a470:	6163      	str	r3, [r4, #20]
 800a472:	9b01      	ldr	r3, [sp, #4]
 800a474:	6120      	str	r0, [r4, #16]
 800a476:	b15b      	cbz	r3, 800a490 <__smakebuf_r+0x74>
 800a478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a47c:	4630      	mov	r0, r6
 800a47e:	f000 f863 	bl	800a548 <_isatty_r>
 800a482:	b128      	cbz	r0, 800a490 <__smakebuf_r+0x74>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	f043 0301 	orr.w	r3, r3, #1
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	89a0      	ldrh	r0, [r4, #12]
 800a492:	4305      	orrs	r5, r0
 800a494:	81a5      	strh	r5, [r4, #12]
 800a496:	e7cd      	b.n	800a434 <__smakebuf_r+0x18>
 800a498:	08009279 	.word	0x08009279

0800a49c <__ascii_mbtowc>:
 800a49c:	b082      	sub	sp, #8
 800a49e:	b901      	cbnz	r1, 800a4a2 <__ascii_mbtowc+0x6>
 800a4a0:	a901      	add	r1, sp, #4
 800a4a2:	b142      	cbz	r2, 800a4b6 <__ascii_mbtowc+0x1a>
 800a4a4:	b14b      	cbz	r3, 800a4ba <__ascii_mbtowc+0x1e>
 800a4a6:	7813      	ldrb	r3, [r2, #0]
 800a4a8:	600b      	str	r3, [r1, #0]
 800a4aa:	7812      	ldrb	r2, [r2, #0]
 800a4ac:	1e10      	subs	r0, r2, #0
 800a4ae:	bf18      	it	ne
 800a4b0:	2001      	movne	r0, #1
 800a4b2:	b002      	add	sp, #8
 800a4b4:	4770      	bx	lr
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	e7fb      	b.n	800a4b2 <__ascii_mbtowc+0x16>
 800a4ba:	f06f 0001 	mvn.w	r0, #1
 800a4be:	e7f8      	b.n	800a4b2 <__ascii_mbtowc+0x16>

0800a4c0 <__malloc_lock>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__malloc_lock+0x8>)
 800a4c2:	f7fe bfb0 	b.w	8009426 <__retarget_lock_acquire_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	20001c44 	.word	0x20001c44

0800a4cc <__malloc_unlock>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	; (800a4d4 <__malloc_unlock+0x8>)
 800a4ce:	f7fe bfab 	b.w	8009428 <__retarget_lock_release_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	20001c44 	.word	0x20001c44

0800a4d8 <_read_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d07      	ldr	r5, [pc, #28]	; (800a4f8 <_read_r+0x20>)
 800a4dc:	4604      	mov	r4, r0
 800a4de:	4608      	mov	r0, r1
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	602a      	str	r2, [r5, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f7f7 f98a 	bl	8001800 <_read>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d102      	bne.n	800a4f6 <_read_r+0x1e>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	b103      	cbz	r3, 800a4f6 <_read_r+0x1e>
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	bd38      	pop	{r3, r4, r5, pc}
 800a4f8:	20001c4c 	.word	0x20001c4c

0800a4fc <__ascii_wctomb>:
 800a4fc:	b149      	cbz	r1, 800a512 <__ascii_wctomb+0x16>
 800a4fe:	2aff      	cmp	r2, #255	; 0xff
 800a500:	bf85      	ittet	hi
 800a502:	238a      	movhi	r3, #138	; 0x8a
 800a504:	6003      	strhi	r3, [r0, #0]
 800a506:	700a      	strbls	r2, [r1, #0]
 800a508:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a50c:	bf98      	it	ls
 800a50e:	2001      	movls	r0, #1
 800a510:	4770      	bx	lr
 800a512:	4608      	mov	r0, r1
 800a514:	4770      	bx	lr

0800a516 <abort>:
 800a516:	b508      	push	{r3, lr}
 800a518:	2006      	movs	r0, #6
 800a51a:	f000 f84d 	bl	800a5b8 <raise>
 800a51e:	2001      	movs	r0, #1
 800a520:	f7f7 f964 	bl	80017ec <_exit>

0800a524 <_fstat_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4d07      	ldr	r5, [pc, #28]	; (800a544 <_fstat_r+0x20>)
 800a528:	2300      	movs	r3, #0
 800a52a:	4604      	mov	r4, r0
 800a52c:	4608      	mov	r0, r1
 800a52e:	4611      	mov	r1, r2
 800a530:	602b      	str	r3, [r5, #0]
 800a532:	f7f7 f9aa 	bl	800188a <_fstat>
 800a536:	1c43      	adds	r3, r0, #1
 800a538:	d102      	bne.n	800a540 <_fstat_r+0x1c>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	b103      	cbz	r3, 800a540 <_fstat_r+0x1c>
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	bd38      	pop	{r3, r4, r5, pc}
 800a542:	bf00      	nop
 800a544:	20001c4c 	.word	0x20001c4c

0800a548 <_isatty_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_isatty_r+0x1c>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	f7f7 f9a9 	bl	80018aa <_isatty>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_isatty_r+0x1a>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_isatty_r+0x1a>
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	20001c4c 	.word	0x20001c4c

0800a568 <_raise_r>:
 800a568:	291f      	cmp	r1, #31
 800a56a:	b538      	push	{r3, r4, r5, lr}
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	d904      	bls.n	800a57c <_raise_r+0x14>
 800a572:	2316      	movs	r3, #22
 800a574:	6003      	str	r3, [r0, #0]
 800a576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a57e:	b112      	cbz	r2, 800a586 <_raise_r+0x1e>
 800a580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a584:	b94b      	cbnz	r3, 800a59a <_raise_r+0x32>
 800a586:	4620      	mov	r0, r4
 800a588:	f000 f830 	bl	800a5ec <_getpid_r>
 800a58c:	462a      	mov	r2, r5
 800a58e:	4601      	mov	r1, r0
 800a590:	4620      	mov	r0, r4
 800a592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a596:	f000 b817 	b.w	800a5c8 <_kill_r>
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d00a      	beq.n	800a5b4 <_raise_r+0x4c>
 800a59e:	1c59      	adds	r1, r3, #1
 800a5a0:	d103      	bne.n	800a5aa <_raise_r+0x42>
 800a5a2:	2316      	movs	r3, #22
 800a5a4:	6003      	str	r3, [r0, #0]
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	e7e7      	b.n	800a57a <_raise_r+0x12>
 800a5aa:	2400      	movs	r4, #0
 800a5ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	4798      	blx	r3
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e7e0      	b.n	800a57a <_raise_r+0x12>

0800a5b8 <raise>:
 800a5b8:	4b02      	ldr	r3, [pc, #8]	; (800a5c4 <raise+0xc>)
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f7ff bfd3 	b.w	800a568 <_raise_r>
 800a5c2:	bf00      	nop
 800a5c4:	20000010 	.word	0x20000010

0800a5c8 <_kill_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_kill_r+0x20>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f7f7 f8f9 	bl	80017cc <_kill>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	d102      	bne.n	800a5e4 <_kill_r+0x1c>
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	b103      	cbz	r3, 800a5e4 <_kill_r+0x1c>
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20001c4c 	.word	0x20001c4c

0800a5ec <_getpid_r>:
 800a5ec:	f7f7 b8e6 	b.w	80017bc <_getpid>

0800a5f0 <atan2f>:
 800a5f0:	f000 b800 	b.w	800a5f4 <__ieee754_atan2f>

0800a5f4 <__ieee754_atan2f>:
 800a5f4:	ee10 2a90 	vmov	r2, s1
 800a5f8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a5fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a600:	b510      	push	{r4, lr}
 800a602:	eef0 7a40 	vmov.f32	s15, s0
 800a606:	dc06      	bgt.n	800a616 <__ieee754_atan2f+0x22>
 800a608:	ee10 0a10 	vmov	r0, s0
 800a60c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a614:	dd04      	ble.n	800a620 <__ieee754_atan2f+0x2c>
 800a616:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a61a:	eeb0 0a67 	vmov.f32	s0, s15
 800a61e:	bd10      	pop	{r4, pc}
 800a620:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a624:	d103      	bne.n	800a62e <__ieee754_atan2f+0x3a>
 800a626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62a:	f000 b883 	b.w	800a734 <atanf>
 800a62e:	1794      	asrs	r4, r2, #30
 800a630:	f004 0402 	and.w	r4, r4, #2
 800a634:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a638:	b943      	cbnz	r3, 800a64c <__ieee754_atan2f+0x58>
 800a63a:	2c02      	cmp	r4, #2
 800a63c:	d05e      	beq.n	800a6fc <__ieee754_atan2f+0x108>
 800a63e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a710 <__ieee754_atan2f+0x11c>
 800a642:	2c03      	cmp	r4, #3
 800a644:	bf08      	it	eq
 800a646:	eef0 7a47 	vmoveq.f32	s15, s14
 800a64a:	e7e6      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a64c:	b941      	cbnz	r1, 800a660 <__ieee754_atan2f+0x6c>
 800a64e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a714 <__ieee754_atan2f+0x120>
 800a652:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a718 <__ieee754_atan2f+0x124>
 800a656:	2800      	cmp	r0, #0
 800a658:	bfb8      	it	lt
 800a65a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a65e:	e7dc      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a660:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a664:	d110      	bne.n	800a688 <__ieee754_atan2f+0x94>
 800a666:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a66a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a66e:	d107      	bne.n	800a680 <__ieee754_atan2f+0x8c>
 800a670:	2c02      	cmp	r4, #2
 800a672:	d846      	bhi.n	800a702 <__ieee754_atan2f+0x10e>
 800a674:	4b29      	ldr	r3, [pc, #164]	; (800a71c <__ieee754_atan2f+0x128>)
 800a676:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a67a:	edd4 7a00 	vldr	s15, [r4]
 800a67e:	e7cc      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a680:	2c02      	cmp	r4, #2
 800a682:	d841      	bhi.n	800a708 <__ieee754_atan2f+0x114>
 800a684:	4b26      	ldr	r3, [pc, #152]	; (800a720 <__ieee754_atan2f+0x12c>)
 800a686:	e7f6      	b.n	800a676 <__ieee754_atan2f+0x82>
 800a688:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a68c:	d0df      	beq.n	800a64e <__ieee754_atan2f+0x5a>
 800a68e:	1a5b      	subs	r3, r3, r1
 800a690:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a694:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a698:	da1a      	bge.n	800a6d0 <__ieee754_atan2f+0xdc>
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	da01      	bge.n	800a6a2 <__ieee754_atan2f+0xae>
 800a69e:	313c      	adds	r1, #60	; 0x3c
 800a6a0:	db19      	blt.n	800a6d6 <__ieee754_atan2f+0xe2>
 800a6a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a6a6:	f000 f919 	bl	800a8dc <fabsf>
 800a6aa:	f000 f843 	bl	800a734 <atanf>
 800a6ae:	eef0 7a40 	vmov.f32	s15, s0
 800a6b2:	2c01      	cmp	r4, #1
 800a6b4:	d012      	beq.n	800a6dc <__ieee754_atan2f+0xe8>
 800a6b6:	2c02      	cmp	r4, #2
 800a6b8:	d017      	beq.n	800a6ea <__ieee754_atan2f+0xf6>
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d0ad      	beq.n	800a61a <__ieee754_atan2f+0x26>
 800a6be:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a724 <__ieee754_atan2f+0x130>
 800a6c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a6c6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a728 <__ieee754_atan2f+0x134>
 800a6ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a6ce:	e7a4      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a6d0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a714 <__ieee754_atan2f+0x120>
 800a6d4:	e7ed      	b.n	800a6b2 <__ieee754_atan2f+0xbe>
 800a6d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a72c <__ieee754_atan2f+0x138>
 800a6da:	e7ea      	b.n	800a6b2 <__ieee754_atan2f+0xbe>
 800a6dc:	ee17 3a90 	vmov	r3, s15
 800a6e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6e4:	ee07 3a90 	vmov	s15, r3
 800a6e8:	e797      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a6ea:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a724 <__ieee754_atan2f+0x130>
 800a6ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a6f2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a728 <__ieee754_atan2f+0x134>
 800a6f6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a6fa:	e78e      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a6fc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a728 <__ieee754_atan2f+0x134>
 800a700:	e78b      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a702:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a730 <__ieee754_atan2f+0x13c>
 800a706:	e788      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a708:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a72c <__ieee754_atan2f+0x138>
 800a70c:	e785      	b.n	800a61a <__ieee754_atan2f+0x26>
 800a70e:	bf00      	nop
 800a710:	c0490fdb 	.word	0xc0490fdb
 800a714:	3fc90fdb 	.word	0x3fc90fdb
 800a718:	bfc90fdb 	.word	0xbfc90fdb
 800a71c:	0800adbc 	.word	0x0800adbc
 800a720:	0800adc8 	.word	0x0800adc8
 800a724:	33bbbd2e 	.word	0x33bbbd2e
 800a728:	40490fdb 	.word	0x40490fdb
 800a72c:	00000000 	.word	0x00000000
 800a730:	3f490fdb 	.word	0x3f490fdb

0800a734 <atanf>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	ee10 5a10 	vmov	r5, s0
 800a73a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a73e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a742:	eef0 7a40 	vmov.f32	s15, s0
 800a746:	db10      	blt.n	800a76a <atanf+0x36>
 800a748:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a74c:	dd04      	ble.n	800a758 <atanf+0x24>
 800a74e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a752:	eeb0 0a67 	vmov.f32	s0, s15
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a890 <atanf+0x15c>
 800a75c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a894 <atanf+0x160>
 800a760:	2d00      	cmp	r5, #0
 800a762:	bfd8      	it	le
 800a764:	eef0 7a40 	vmovle.f32	s15, s0
 800a768:	e7f3      	b.n	800a752 <atanf+0x1e>
 800a76a:	4b4b      	ldr	r3, [pc, #300]	; (800a898 <atanf+0x164>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	dc10      	bgt.n	800a792 <atanf+0x5e>
 800a770:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a774:	da0a      	bge.n	800a78c <atanf+0x58>
 800a776:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a89c <atanf+0x168>
 800a77a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a782:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78a:	dce2      	bgt.n	800a752 <atanf+0x1e>
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a790:	e013      	b.n	800a7ba <atanf+0x86>
 800a792:	f000 f8a3 	bl	800a8dc <fabsf>
 800a796:	4b42      	ldr	r3, [pc, #264]	; (800a8a0 <atanf+0x16c>)
 800a798:	429c      	cmp	r4, r3
 800a79a:	dc4f      	bgt.n	800a83c <atanf+0x108>
 800a79c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	dc41      	bgt.n	800a828 <atanf+0xf4>
 800a7a4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a7a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a7ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a7b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800a7c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a8a4 <atanf+0x170>
 800a7c4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800a8a8 <atanf+0x174>
 800a7c8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a8ac <atanf+0x178>
 800a7cc:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800a8b0 <atanf+0x17c>
 800a7d0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a7d4:	eea7 6a25 	vfma.f32	s12, s14, s11
 800a7d8:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a8b4 <atanf+0x180>
 800a7dc:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a7e0:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800a8b8 <atanf+0x184>
 800a7e4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a7e8:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8bc <atanf+0x188>
 800a7ec:	eee6 5a07 	vfma.f32	s11, s12, s14
 800a7f0:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800a8c0 <atanf+0x18c>
 800a7f4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800a7f8:	eddf 5a32 	vldr	s11, [pc, #200]	; 800a8c4 <atanf+0x190>
 800a7fc:	eee7 5a05 	vfma.f32	s11, s14, s10
 800a800:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800a8c8 <atanf+0x194>
 800a804:	eea5 5a87 	vfma.f32	s10, s11, s14
 800a808:	eddf 5a30 	vldr	s11, [pc, #192]	; 800a8cc <atanf+0x198>
 800a80c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800a810:	eea5 0a87 	vfma.f32	s0, s11, s14
 800a814:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a818:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a81c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a820:	d121      	bne.n	800a866 <atanf+0x132>
 800a822:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a826:	e794      	b.n	800a752 <atanf+0x1e>
 800a828:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a82c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a830:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a834:	2301      	movs	r3, #1
 800a836:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a83a:	e7be      	b.n	800a7ba <atanf+0x86>
 800a83c:	4b24      	ldr	r3, [pc, #144]	; (800a8d0 <atanf+0x19c>)
 800a83e:	429c      	cmp	r4, r3
 800a840:	dc0b      	bgt.n	800a85a <atanf+0x126>
 800a842:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a84a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a84e:	2302      	movs	r3, #2
 800a850:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a858:	e7af      	b.n	800a7ba <atanf+0x86>
 800a85a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a85e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a862:	2303      	movs	r3, #3
 800a864:	e7a9      	b.n	800a7ba <atanf+0x86>
 800a866:	4a1b      	ldr	r2, [pc, #108]	; (800a8d4 <atanf+0x1a0>)
 800a868:	491b      	ldr	r1, [pc, #108]	; (800a8d8 <atanf+0x1a4>)
 800a86a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a86e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a872:	ed93 7a00 	vldr	s14, [r3]
 800a876:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a87a:	2d00      	cmp	r5, #0
 800a87c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a880:	ed92 0a00 	vldr	s0, [r2]
 800a884:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a888:	bfb8      	it	lt
 800a88a:	eef1 7a67 	vneglt.f32	s15, s15
 800a88e:	e760      	b.n	800a752 <atanf+0x1e>
 800a890:	3fc90fdb 	.word	0x3fc90fdb
 800a894:	bfc90fdb 	.word	0xbfc90fdb
 800a898:	3edfffff 	.word	0x3edfffff
 800a89c:	7149f2ca 	.word	0x7149f2ca
 800a8a0:	3f97ffff 	.word	0x3f97ffff
 800a8a4:	3c8569d7 	.word	0x3c8569d7
 800a8a8:	3d4bda59 	.word	0x3d4bda59
 800a8ac:	bd15a221 	.word	0xbd15a221
 800a8b0:	be4ccccd 	.word	0xbe4ccccd
 800a8b4:	3d886b35 	.word	0x3d886b35
 800a8b8:	3dba2e6e 	.word	0x3dba2e6e
 800a8bc:	3e124925 	.word	0x3e124925
 800a8c0:	3eaaaaab 	.word	0x3eaaaaab
 800a8c4:	bd6ef16b 	.word	0xbd6ef16b
 800a8c8:	bd9d8795 	.word	0xbd9d8795
 800a8cc:	bde38e38 	.word	0xbde38e38
 800a8d0:	401bffff 	.word	0x401bffff
 800a8d4:	0800add4 	.word	0x0800add4
 800a8d8:	0800ade4 	.word	0x0800ade4

0800a8dc <fabsf>:
 800a8dc:	ee10 3a10 	vmov	r3, s0
 800a8e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8e4:	ee00 3a10 	vmov	s0, r3
 800a8e8:	4770      	bx	lr
	...

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
