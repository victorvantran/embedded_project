
hello_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008218  08008218  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008220  08008220  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008220  08008220  00018220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  200000d8  08008300  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bc8  08008300  00021bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ac3  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc1  00000000  00000000  00042bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00046990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019d8  00000000  00000000  000484d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004911  00000000  00000000  00049ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2c8  00000000  00000000  0004e7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111c2d  00000000  00000000  0006aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c6ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074ac  00000000  00000000  0017c704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008170 	.word	0x08008170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08008170 	.word	0x08008170

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc76 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f824 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f976 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 f94e 	bl	8000778 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f91c 	bl	8000718 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8a4 	bl	800062c <MX_ADC1_Init>
	uartData[sizeof(uartData) - 1] = '\n';
	HAL_UART_Transmit_IT(&huart2, (uint8_t *)uartData, sizeof(uartData));
	*/

  // DMA
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)uartTxData, sizeof(uartTxData));
 80004e4:	2264      	movs	r2, #100	; 0x64
 80004e6:	4908      	ldr	r1, [pc, #32]	; (8000508 <main+0x40>)
 80004e8:	4808      	ldr	r0, [pc, #32]	; (800050c <main+0x44>)
 80004ea:	f003 ffe1 	bl	80044b0 <HAL_UART_Transmit_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ee:	f005 f8b7 	bl	8005660 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <main+0x48>)
 80004f4:	2100      	movs	r1, #0
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x4c>)
 80004f8:	f005 f8fc 	bl	80056f4 <osThreadNew>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a06      	ldr	r2, [pc, #24]	; (8000518 <main+0x50>)
 8000500:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000502:	f005 f8d1 	bl	80056a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000506:	e7fe      	b.n	8000506 <main+0x3e>
 8000508:	20000064 	.word	0x20000064
 800050c:	20001ab4 	.word	0x20001ab4
 8000510:	080081ac 	.word	0x080081ac
 8000514:	08000949 	.word	0x08000949
 8000518:	20001a04 	.word	0x20001a04

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0b8      	sub	sp, #224	; 0xe0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f007 fe18 	bl	8008160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fe0a 	bl	8008160 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000572:	230a      	movs	r3, #10
 8000574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000578:	2307      	movs	r3, #7
 800057a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f994 	bl	80028bc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059a:	f000 fa0b 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2303      	movs	r3, #3
 80005a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fd60 	bl	8003088 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ce:	f000 f9f1 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005d2:	f244 0302 	movw	r3, #16386	; 0x4002
 80005d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005fe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4618      	mov	r0, r3
 8000604:	f002 ff78 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800060e:	f000 f9d1 	bl	80009b4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000616:	f002 f8fb 	bl	8002810 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000620:	f000 f9c8 	bl	80009b4 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	37e0      	adds	r7, #224	; 0xe0
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800064e:	4b2f      	ldr	r3, [pc, #188]	; (800070c <MX_ADC1_Init+0xe0>)
 8000650:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <MX_ADC1_Init+0xe4>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000654:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <MX_ADC1_Init+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_ADC1_Init+0xe0>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_ADC1_Init+0xe0>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <MX_ADC1_Init+0xe0>)
 800066e:	2204      	movs	r2, #4
 8000670:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_ADC1_Init+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <MX_ADC1_Init+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_ADC1_Init+0xe0>)
 8000680:	2201      	movs	r2, #1
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0xe0>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_ADC1_Init+0xe0>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ADC1_Init+0xe0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0xe0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <MX_ADC1_Init+0xe0>)
 80006b0:	f000 fd50 	bl	8001154 <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006ba:	f000 f97b 	bl	80009b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <MX_ADC1_Init+0xe0>)
 80006ca:	f001 faaf 	bl	8001c2c <HAL_ADCEx_MultiModeConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006d4:	f000 f96e 	bl	80009b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006dc:	2306      	movs	r3, #6
 80006de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e4:	237f      	movs	r3, #127	; 0x7f
 80006e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e8:	2304      	movs	r3, #4
 80006ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_ADC1_Init+0xe0>)
 80006f6:	f000 fe83 	bl	8001400 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000700:	f000 f958 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20001a08 	.word	0x20001a08
 8000710:	50040000 	.word	0x50040000
 8000714:	04300002 	.word	0x04300002

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART2_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x58>)
 800075c:	f003 fe5a 	bl	8004414 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f925 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20001ab4 	.word	0x20001ab4
 8000774:	40004400 	.word	0x40004400

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_DMA_Init+0x48>)
 8000780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000782:	4a0f      	ldr	r2, [pc, #60]	; (80007c0 <MX_DMA_Init+0x48>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6493      	str	r3, [r2, #72]	; 0x48
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_DMA_Init+0x48>)
 800078c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2105      	movs	r1, #5
 800079a:	2010      	movs	r0, #16
 800079c:	f001 fbae 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007a0:	2010      	movs	r0, #16
 80007a2:	f001 fbc7 	bl	8001f34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2105      	movs	r1, #5
 80007aa:	2011      	movs	r0, #17
 80007ac:	f001 fba6 	bl	8001efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007b0:	2011      	movs	r0, #17
 80007b2:	f001 fbbf 	bl	8001f34 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xa4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <MX_GPIO_Init+0xa4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0xa4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_GPIO_Init+0xa4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <MX_GPIO_Init+0xa4>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_GPIO_Init+0xa4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_GPIO_Init+0xa4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <MX_GPIO_Init+0xa8>)
 8000840:	f001 ffa6 	bl	8002790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_GPIO_Init+0xa8>)
 800085c:	f001 fdee 	bl	800243c <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400

08000870 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// DMA
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(uartRxData)/2; i++)
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e00b      	b.n	8000896 <HAL_UART_RxHalfCpltCallback+0x26>
	{
		uartTxData[i] = uartRxData[i];
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <HAL_UART_RxHalfCpltCallback+0x3c>)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	7819      	ldrb	r1, [r3, #0]
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_UART_RxHalfCpltCallback+0x40>)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	460a      	mov	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(uartRxData)/2; i++)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	3301      	adds	r3, #1
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b31      	cmp	r3, #49	; 0x31
 800089a:	d9f0      	bls.n	800087e <HAL_UART_RxHalfCpltCallback+0xe>
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000064 	.word	0x20000064

080008b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(uartRxData)/2; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e00b      	b.n	80008da <HAL_UART_RxCpltCallback+0x26>
	{
		uartTxData[i] = uartRxData[i];
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <HAL_UART_RxCpltCallback+0x3c>)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	7819      	ldrb	r1, [r3, #0]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_UART_RxCpltCallback+0x40>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	460a      	mov	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(uartRxData)/2; i++)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	2b31      	cmp	r3, #49	; 0x31
 80008de:	d9f0      	bls.n	80008c2 <HAL_UART_RxCpltCallback+0xe>

	//uartTxData[sizeof(uartTxData) - 3] = 'Z';
	//uartTxData[sizeof(uartTxData) - 2] = '\r';
	//uartTxData[sizeof(uartTxData) - 1] = '\n';

}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000064 	.word	0x20000064

080008f8 <HAL_UART_TxHalfCpltCallback>:


void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < sizeof(uartTxData)/2; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e002      	b.n	800090c <HAL_UART_TxHalfCpltCallback+0x14>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b31      	cmp	r3, #49	; 0x31
 8000910:	d9f9      	bls.n	8000906 <HAL_UART_TxHalfCpltCallback+0xe>
	{
	}
}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	for (int i = sizeof(uartTxData)/2; i < sizeof(uartTxData) - 3; i++)
 8000928:	2332      	movs	r3, #50	; 0x32
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e002      	b.n	8000934 <HAL_UART_TxCpltCallback+0x14>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3301      	adds	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b60      	cmp	r3, #96	; 0x60
 8000938:	d9f9      	bls.n	800092e <HAL_UART_TxCpltCallback+0xe>
	{
	}
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	//char uartData[10] = "\r\n";
	uint16_t rawData = 100;
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	81fb      	strh	r3, [r7, #14]
  for(;;)
  {
    //snprintf(uartData, sizeof(uartData), "%u\r\n", rawData);
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000954:	2101      	movs	r1, #1
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <StartUARTTask+0x38>)
 8000958:	f001 ff32 	bl	80027c0 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t *)uartTxData, sizeof(uartTxData));
 800095c:	2264      	movs	r2, #100	; 0x64
 800095e:	4909      	ldr	r1, [pc, #36]	; (8000984 <StartUARTTask+0x3c>)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <StartUARTTask+0x40>)
 8000962:	f003 fda5 	bl	80044b0 <HAL_UART_Transmit_DMA>
    osDelay(250);
 8000966:	20fa      	movs	r0, #250	; 0xfa
 8000968:	f004 ff56 	bl	8005818 <osDelay>
    HAL_UART_Receive_DMA(&huart2, (uint8_t *)uartRxData, sizeof(uartRxData));
 800096c:	2264      	movs	r2, #100	; 0x64
 800096e:	4907      	ldr	r1, [pc, #28]	; (800098c <StartUARTTask+0x44>)
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <StartUARTTask+0x40>)
 8000972:	f003 fe1b 	bl	80045ac <HAL_UART_Receive_DMA>
    osDelay(250);
 8000976:	20fa      	movs	r0, #250	; 0xfa
 8000978:	f004 ff4e 	bl	8005818 <osDelay>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800097c:	e7ea      	b.n	8000954 <StartUARTTask+0xc>
 800097e:	bf00      	nop
 8000980:	48000400 	.word	0x48000400
 8000984:	20000064 	.word	0x20000064
 8000988:	20001ab4 	.word	0x20001ab4
 800098c:	20000000 	.word	0x20000000

08000990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a2:	f000 fa2b 	bl	8000dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40001000 	.word	0x40001000

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_MspInit+0x4c>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f001 fa7d 	bl	8001efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <HAL_ADC_MspInit+0x74>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d123      	bne.n	8000a7a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_ADC_MspInit+0x78>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a66:	230b      	movs	r3, #11
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_ADC_MspInit+0x7c>)
 8000a76:	f001 fce1 	bl	800243c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	50040000 	.word	0x50040000
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000800 	.word	0x48000800

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <HAL_UART_MspInit+0x134>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	f040 8083 	bne.w	8000bba <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab4:	4b44      	ldr	r3, [pc, #272]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab8:	4a43      	ldr	r2, [pc, #268]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abe:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac0:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_UART_MspInit+0x138>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af4:	2307      	movs	r3, #7
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f001 fc9b 	bl	800243c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b08:	4a31      	ldr	r2, [pc, #196]	; (8000bd0 <HAL_UART_MspInit+0x140>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b14:	2210      	movs	r2, #16
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b3c:	4823      	ldr	r0, [pc, #140]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b3e:	f001 fa07 	bl	8001f50 <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8000b48:	f7ff ff34 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b50:	66da      	str	r2, [r3, #108]	; 0x6c
 8000b52:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <HAL_UART_MspInit+0x13c>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <HAL_UART_MspInit+0x148>)
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b60:	2202      	movs	r2, #2
 8000b62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000b90:	f001 f9de 	bl	8001f50 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000b9a:	f7ff ff0b 	bl	80009b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000ba2:	671a      	str	r2, [r3, #112]	; 0x70
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_UART_MspInit+0x144>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2105      	movs	r1, #5
 8000bae:	2026      	movs	r0, #38	; 0x26
 8000bb0:	f001 f9a4 	bl	8001efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bb4:	2026      	movs	r0, #38	; 0x26
 8000bb6:	f001 f9bd 	bl	8001f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	20001a6c 	.word	0x20001a6c
 8000bd0:	40020080 	.word	0x40020080
 8000bd4:	200019bc 	.word	0x200019bc
 8000bd8:	4002006c 	.word	0x4002006c

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2036      	movs	r0, #54	; 0x36
 8000bf2:	f001 f983 	bl	8001efc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf6:	2036      	movs	r0, #54	; 0x36
 8000bf8:	f001 f99c 	bl	8001f34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_InitTick+0x9c>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <HAL_InitTick+0x9c>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6593      	str	r3, [r2, #88]	; 0x58
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_InitTick+0x9c>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c14:	f107 0210 	add.w	r2, r7, #16
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fbd8 	bl	80033d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c24:	f002 fbaa 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8000c28:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_InitTick+0xa0>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	3b01      	subs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_InitTick+0xa8>)
 8000c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c5a:	f003 f909 	bl	8003e70 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d104      	bne.n	8000c6e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_InitTick+0xa4>)
 8000c66:	f003 f965 	bl	8003f34 <HAL_TIM_Base_Start_IT>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	20001b38 	.word	0x20001b38
 8000c84:	40001000 	.word	0x40001000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Channel6_IRQHandler+0x10>)
 8000cba:	f001 fae0 	bl	800227e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200019bc 	.word	0x200019bc

08000cc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <DMA1_Channel7_IRQHandler+0x10>)
 8000cce:	f001 fad6 	bl	800227e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20001a6c 	.word	0x20001a6c

08000cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USART2_IRQHandler+0x10>)
 8000ce2:	f003 fca7 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20001ab4 	.word	0x20001ab4

08000cf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM6_DAC_IRQHandler+0x10>)
 8000cf6:	f003 f98d 	bl	8004014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001b38 	.word	0x20001b38

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <SystemInit+0x5c>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <SystemInit+0x5c>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <SystemInit+0x60>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a11      	ldr	r2, [pc, #68]	; (8000d64 <SystemInit+0x60>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <SystemInit+0x60>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <SystemInit+0x60>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <SystemInit+0x60>)
 8000d30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <SystemInit+0x60>)
 8000d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <SystemInit+0x60>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <SystemInit+0x60>)
 8000d48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SystemInit+0x60>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	40021000 	.word	0x40021000

08000d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d6c:	f7ff ffca 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d72:	e003      	b.n	8000d7c <LoopCopyDataInit>

08000d74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d7a:	3104      	adds	r1, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d7c:	480a      	ldr	r0, [pc, #40]	; (8000da8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d84:	d3f6      	bcc.n	8000d74 <CopyDataInit>
	ldr	r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d88:	e002      	b.n	8000d90 <LoopFillZerobss>

08000d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d8c:	f842 3b04 	str.w	r3, [r2], #4

08000d90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <LoopForever+0x16>)
	cmp	r2, r3
 8000d92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d94:	d3f9      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f007 f9b1 	bl	80080fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d9a:	f7ff fb95 	bl	80004c8 <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000da4:	08008228 	.word	0x08008228
	ldr	r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dac:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8000db0:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8000db4:	20001bc8 	.word	0x20001bc8

08000db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_2_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_Init+0x3c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_Init+0x3c>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f001 f887 	bl	8001ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff feff 	bl	8000bdc <HAL_InitTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	e001      	b.n	8000dee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dea:	f7ff fde9 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200000d0 	.word	0x200000d0
 8000e20:	20001b84 	.word	0x20001b84

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20001b84 	.word	0x20001b84

08000e3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	609a      	str	r2, [r3, #8]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
 8000e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	431a      	orrs	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3360      	adds	r3, #96	; 0x60
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <LL_ADC_SetOffset+0x44>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	03fff000 	.word	0x03fff000

08000eec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3360      	adds	r3, #96	; 0x60
 8000efa:	461a      	mov	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3360      	adds	r3, #96	; 0x60
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f42:	bf00      	nop
 8000f44:	371c      	adds	r7, #28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	0a1b      	lsrs	r3, r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	211f      	movs	r1, #31
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	401a      	ands	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0e9b      	lsrs	r3, r3, #26
 8000f86:	f003 011f 	and.w	r1, r3, #31
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f003 031f 	and.w	r3, r3, #31
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3314      	adds	r3, #20
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	0e5b      	lsrs	r3, r3, #25
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	0d1b      	lsrs	r3, r3, #20
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	2107      	movs	r1, #7
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	401a      	ands	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	0d1b      	lsrs	r3, r3, #20
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ff0:	bf00      	nop
 8000ff2:	371c      	adds	r7, #28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0318 	and.w	r3, r3, #24
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001020:	40d9      	lsrs	r1, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	400b      	ands	r3, r1
 8001026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800102a:	431a      	orrs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	0007ffff 	.word	0x0007ffff

08001044 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6093      	str	r3, [r2, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800107c:	d101      	bne.n	8001082 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010cc:	d101      	bne.n	80010d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_IsEnabled+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_IsEnabled+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	2b04      	cmp	r3, #4
 8001118:	d101      	bne.n	800111e <LL_ADC_REG_IsConversionOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b08      	cmp	r3, #8
 800113e:	d101      	bne.n	8001144 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e136      	b.n	80013dc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	2b00      	cmp	r3, #0
 800117a:	d109      	bne.n	8001190 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff fc47 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff67 	bl	8001068 <LL_ADC_IsDeepPowerDownEnabled>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff4d 	bl	8001044 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff82 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff66 	bl	8001090 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011c4:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <HAL_ADC_Init+0x290>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	099b      	lsrs	r3, r3, #6
 80011ca:	4a87      	ldr	r2, [pc, #540]	; (80013e8 <HAL_ADC_Init+0x294>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	3301      	adds	r3, #1
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011d8:	e002      	b.n	80011e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff64 	bl	80010b8 <LL_ADC_IsInternalRegulatorEnabled>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff75 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 800121c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 80cf 	bne.w	80013ca <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 80cb 	bne.w	80013ca <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800123c:	f043 0202 	orr.w	r2, r3, #2
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff49 	bl	80010e0 <LL_ADC_IsEnabled>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d115      	bne.n	8001280 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001254:	4865      	ldr	r0, [pc, #404]	; (80013ec <HAL_ADC_Init+0x298>)
 8001256:	f7ff ff43 	bl	80010e0 <LL_ADC_IsEnabled>
 800125a:	4604      	mov	r4, r0
 800125c:	4864      	ldr	r0, [pc, #400]	; (80013f0 <HAL_ADC_Init+0x29c>)
 800125e:	f7ff ff3f 	bl	80010e0 <LL_ADC_IsEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	431c      	orrs	r4, r3
 8001266:	4863      	ldr	r0, [pc, #396]	; (80013f4 <HAL_ADC_Init+0x2a0>)
 8001268:	f7ff ff3a 	bl	80010e0 <LL_ADC_IsEnabled>
 800126c:	4603      	mov	r3, r0
 800126e:	4323      	orrs	r3, r4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4619      	mov	r1, r3
 800127a:	485f      	ldr	r0, [pc, #380]	; (80013f8 <HAL_ADC_Init+0x2a4>)
 800127c:	f7ff fdde 	bl	8000e3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e5b      	ldrb	r3, [r3, #25]
 8001284:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800128a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001290:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001296:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d106      	bne.n	80012bc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	3b01      	subs	r3, #1
 80012b4:	045b      	lsls	r3, r3, #17
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d009      	beq.n	80012d8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_ADC_Init+0x2a8>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	430b      	orrs	r3, r1
 80012ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff08 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 80012f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff15 	bl	800112c <LL_ADC_INJ_IsConversionOngoing>
 8001302:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d13d      	bne.n	8001386 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d13a      	bne.n	8001386 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001314:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800131c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800132c:	f023 0302 	bic.w	r3, r3, #2
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	69b9      	ldr	r1, [r7, #24]
 8001336:	430b      	orrs	r3, r1
 8001338:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001340:	2b01      	cmp	r3, #1
 8001342:	d118      	bne.n	8001376 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001360:	4311      	orrs	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001366:	430a      	orrs	r2, r1
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	611a      	str	r2, [r3, #16]
 8001374:	e007      	b.n	8001386 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10c      	bne.n	80013a8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f023 010f 	bic.w	r1, r3, #15
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
 80013a6:	e007      	b.n	80013b8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020f 	bic.w	r2, r2, #15
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	f023 0303 	bic.w	r3, r3, #3
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
 80013c8:	e007      	b.n	80013da <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013da:	7ffb      	ldrb	r3, [r7, #31]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3724      	adds	r7, #36	; 0x24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	200000c8 	.word	0x200000c8
 80013e8:	053e2d63 	.word	0x053e2d63
 80013ec:	50040000 	.word	0x50040000
 80013f0:	50040100 	.word	0x50040100
 80013f4:	50040200 	.word	0x50040200
 80013f8:	50040300 	.word	0x50040300
 80013fc:	fff0c007 	.word	0xfff0c007

08001400 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0b6      	sub	sp, #216	; 0xd8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x22>
 800141e:	2302      	movs	r3, #2
 8001420:	e3c7      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x7b2>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fe69 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	f040 83a8 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b05      	cmp	r3, #5
 8001442:	d824      	bhi.n	800148e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	3b02      	subs	r3, #2
 800144a:	2b03      	cmp	r3, #3
 800144c:	d81b      	bhi.n	8001486 <HAL_ADC_ConfigChannel+0x86>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <HAL_ADC_ConfigChannel+0x54>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	08001465 	.word	0x08001465
 8001458:	0800146d 	.word	0x0800146d
 800145c:	08001475 	.word	0x08001475
 8001460:	0800147d 	.word	0x0800147d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	220c      	movs	r2, #12
 8001468:	605a      	str	r2, [r3, #4]
          break;
 800146a:	e011      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2212      	movs	r2, #18
 8001470:	605a      	str	r2, [r3, #4]
          break;
 8001472:	e00d      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2218      	movs	r2, #24
 8001478:	605a      	str	r2, [r3, #4]
          break;
 800147a:	e009      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001482:	605a      	str	r2, [r3, #4]
          break;
 8001484:	e004      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2206      	movs	r2, #6
 800148a:	605a      	str	r2, [r3, #4]
          break;
 800148c:	e000      	b.n	8001490 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800148e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	f7ff fd56 	bl	8000f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe2d 	bl	8001106 <LL_ADC_REG_IsConversionOngoing>
 80014ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe39 	bl	800112c <LL_ADC_INJ_IsConversionOngoing>
 80014ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 81a6 	bne.w	8001814 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f040 81a1 	bne.w	8001814 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff fd61 	bl	8000fa6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	08db      	lsrs	r3, r3, #3
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b04      	cmp	r3, #4
 8001504:	d00a      	beq.n	800151c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6919      	ldr	r1, [r3, #16]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001516:	f7ff fcc5 	bl	8000ea4 <LL_ADC_SetOffset>
 800151a:	e17b      	b.n	8001814 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fce2 	bl	8000eec <LL_ADC_GetOffsetChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x148>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fcd7 	bl	8000eec <LL_ADC_GetOffsetChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	0e9b      	lsrs	r3, r3, #26
 8001542:	f003 021f 	and.w	r2, r3, #31
 8001546:	e01e      	b.n	8001586 <HAL_ADC_ConfigChannel+0x186>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fccc 	bl	8000eec <LL_ADC_GetOffsetChannel>
 8001554:	4603      	mov	r3, r0
 8001556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800156a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800156e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001576:	2320      	movs	r3, #32
 8001578:	e004      	b.n	8001584 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800157a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_ConfigChannel+0x19e>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0e9b      	lsrs	r3, r3, #26
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	e018      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e004      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80015c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d106      	bne.n	80015e2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fc9b 	bl	8000f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fc7f 	bl	8000eec <LL_ADC_GetOffsetChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10a      	bne.n	800160e <HAL_ADC_ConfigChannel+0x20e>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fc74 	bl	8000eec <LL_ADC_GetOffsetChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	0e9b      	lsrs	r3, r3, #26
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	e01e      	b.n	800164c <HAL_ADC_ConfigChannel+0x24c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fc69 	bl	8000eec <LL_ADC_GetOffsetChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800162c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001634:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	e004      	b.n	800164a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x264>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	0e9b      	lsrs	r3, r3, #26
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	e018      	b.n	8001696 <HAL_ADC_ConfigChannel+0x296>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001678:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800167c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001688:	2320      	movs	r3, #32
 800168a:	e004      	b.n	8001696 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800168c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001696:	429a      	cmp	r2, r3
 8001698:	d106      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc38 	bl	8000f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2102      	movs	r1, #2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fc1c 	bl	8000eec <LL_ADC_GetOffsetChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10a      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x2d4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2102      	movs	r1, #2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fc11 	bl	8000eec <LL_ADC_GetOffsetChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	0e9b      	lsrs	r3, r3, #26
 80016ce:	f003 021f 	and.w	r2, r3, #31
 80016d2:	e01e      	b.n	8001712 <HAL_ADC_ConfigChannel+0x312>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fc06 	bl	8000eec <LL_ADC_GetOffsetChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80016f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80016f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80016fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e004      	b.n	8001710 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <HAL_ADC_ConfigChannel+0x32a>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0e9b      	lsrs	r3, r3, #26
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	e016      	b.n	8001758 <HAL_ADC_ConfigChannel+0x358>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800173c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001742:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800174a:	2320      	movs	r3, #32
 800174c:	e004      	b.n	8001758 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800174e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001758:	429a      	cmp	r2, r3
 800175a:	d106      	bne.n	800176a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	2102      	movs	r1, #2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fbd7 	bl	8000f18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2103      	movs	r1, #3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fbbb 	bl	8000eec <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10a      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x396>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2103      	movs	r1, #3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fbb0 	bl	8000eec <LL_ADC_GetOffsetChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	0e9b      	lsrs	r3, r3, #26
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	e017      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x3c6>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2103      	movs	r1, #3
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fba5 	bl	8000eec <LL_ADC_GetOffsetChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80017b8:	2320      	movs	r3, #32
 80017ba:	e003      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80017bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017be:	fab3 f383 	clz	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_ADC_ConfigChannel+0x3de>
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0e9b      	lsrs	r3, r3, #26
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	e011      	b.n	8001802 <HAL_ADC_ConfigChannel+0x402>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80017f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e003      	b.n	8001802 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001802:	429a      	cmp	r2, r3
 8001804:	d106      	bne.n	8001814 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	2103      	movs	r1, #3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fb82 	bl	8000f18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc61 	bl	80010e0 <LL_ADC_IsEnabled>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 813f 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6819      	ldr	r1, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	461a      	mov	r2, r3
 8001834:	f7ff fbe2 	bl	8000ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a8e      	ldr	r2, [pc, #568]	; (8001a78 <HAL_ADC_ConfigChannel+0x678>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 8130 	bne.w	8001aa4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <HAL_ADC_ConfigChannel+0x46c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	3301      	adds	r3, #1
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b09      	cmp	r3, #9
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	e019      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x4a0>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800187a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800187e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001884:	2320      	movs	r3, #32
 8001886:	e003      	b.n	8001890 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2b09      	cmp	r3, #9
 8001898:	bf94      	ite	ls
 800189a:	2301      	movls	r3, #1
 800189c:	2300      	movhi	r3, #0
 800189e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d079      	beq.n	8001998 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d107      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x4c0>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	3301      	adds	r3, #1
 80018b8:	069b      	lsls	r3, r3, #26
 80018ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018be:	e015      	b.n	80018ec <HAL_ADC_ConfigChannel+0x4ec>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80018d8:	2320      	movs	r3, #32
 80018da:	e003      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80018dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	069b      	lsls	r3, r3, #26
 80018e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_ADC_ConfigChannel+0x50c>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0e9b      	lsrs	r3, r3, #26
 80018fe:	3301      	adds	r3, #1
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2101      	movs	r1, #1
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	e017      	b.n	800193c <HAL_ADC_ConfigChannel+0x53c>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800191a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	e003      	b.n	8001930 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3301      	adds	r3, #1
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x562>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	3301      	adds	r3, #1
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	051b      	lsls	r3, r3, #20
 8001960:	e018      	b.n	8001994 <HAL_ADC_ConfigChannel+0x594>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800197a:	2320      	movs	r3, #32
 800197c:	e003      	b.n	8001986 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4613      	mov	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001994:	430b      	orrs	r3, r1
 8001996:	e080      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x5b4>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	3301      	adds	r3, #1
 80019ac:	069b      	lsls	r3, r3, #26
 80019ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019b2:	e015      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x5e0>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e003      	b.n	80019d8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	069b      	lsls	r3, r3, #26
 80019dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x600>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e9b      	lsrs	r3, r3, #26
 80019f2:	3301      	adds	r3, #1
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	e017      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x630>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e003      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	ea42 0103 	orr.w	r1, r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10d      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x65c>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0e9b      	lsrs	r3, r3, #26
 8001a46:	3301      	adds	r3, #1
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	051b      	lsls	r3, r3, #20
 8001a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	e01d      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x698>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	613b      	str	r3, [r7, #16]
  return result;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e005      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x684>
 8001a78:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b1e      	subs	r3, #30
 8001a92:	051b      	lsls	r3, r3, #20
 8001a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6892      	ldr	r2, [r2, #8]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff fa81 	bl	8000fa6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_ADC_ConfigChannel+0x7bc>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d07a      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab0:	4843      	ldr	r0, [pc, #268]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ab2:	f7ff f9e9 	bl	8000e88 <LL_ADC_GetCommonPathInternalCh>
 8001ab6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a41      	ldr	r2, [pc, #260]	; (8001bc4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d12c      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d126      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_ConfigChannel+0x6e4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <HAL_ADC_ConfigChannel+0x7cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d15d      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ae8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001aec:	4619      	mov	r1, r3
 8001aee:	4834      	ldr	r0, [pc, #208]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001af0:	f7ff f9b7 	bl	8000e62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	4a36      	ldr	r2, [pc, #216]	; (8001bd4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b0e:	e002      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f9      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b1c:	e040      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d118      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x75a>
 8001b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d112      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_ADC_ConfigChannel+0x748>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a22      	ldr	r2, [pc, #136]	; (8001bcc <HAL_ADC_ConfigChannel+0x7cc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12d      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b50:	4619      	mov	r1, r3
 8001b52:	481b      	ldr	r0, [pc, #108]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b54:	f7ff f985 	bl	8000e62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b58:	e024      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_ADC_ConfigChannel+0x7dc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d120      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d115      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b82:	4619      	mov	r1, r3
 8001b84:	480e      	ldr	r0, [pc, #56]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b86:	f7ff f96c 	bl	8000e62 <LL_ADC_SetCommonPathInternalCh>
 8001b8a:	e00c      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001b9e:	e002      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ba4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	37d8      	adds	r7, #216	; 0xd8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	80080000 	.word	0x80080000
 8001bc0:	50040300 	.word	0x50040300
 8001bc4:	c7520000 	.word	0xc7520000
 8001bc8:	50040000 	.word	0x50040000
 8001bcc:	50040200 	.word	0x50040200
 8001bd0:	200000c8 	.word	0x200000c8
 8001bd4:	053e2d63 	.word	0x053e2d63
 8001bd8:	cb840000 	.word	0xcb840000
 8001bdc:	80000001 	.word	0x80000001

08001be0 <LL_ADC_IsEnabled>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d101      	bne.n	8001bf8 <LL_ADC_IsEnabled+0x18>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_ADC_IsEnabled+0x1a>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_REG_IsConversionOngoing>:
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d101      	bne.n	8001c1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b09f      	sub	sp, #124	; 0x7c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e093      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001c52:	2300      	movs	r3, #0
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001c56:	2300      	movs	r3, #0
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a47      	ldr	r2, [pc, #284]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d102      	bne.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e001      	b.n	8001c6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f043 0220 	orr.w	r2, r3, #32
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e072      	b.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ffb9 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 8001c94:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffb3 	bl	8001c06 <LL_ADC_REG_IsConversionOngoing>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d154      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d151      	bne.n	8001d50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001cae:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d02c      	beq.n	8001d12 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cca:	035b      	lsls	r3, r3, #13
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cd4:	4829      	ldr	r0, [pc, #164]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001cd6:	f7ff ff83 	bl	8001be0 <LL_ADC_IsEnabled>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001cde:	f7ff ff7f 	bl	8001be0 <LL_ADC_IsEnabled>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	431c      	orrs	r4, r3
 8001ce6:	4828      	ldr	r0, [pc, #160]	; (8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001ce8:	f7ff ff7a 	bl	8001be0 <LL_ADC_IsEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d137      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cfc:	f023 030f 	bic.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	6811      	ldr	r1, [r2, #0]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6892      	ldr	r2, [r2, #8]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d10:	e028      	b.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d20:	f7ff ff5e 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d24:	4604      	mov	r4, r0
 8001d26:	4816      	ldr	r0, [pc, #88]	; (8001d80 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d28:	f7ff ff5a 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	431c      	orrs	r4, r3
 8001d30:	4815      	ldr	r0, [pc, #84]	; (8001d88 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d32:	f7ff ff55 	bl	8001be0 <LL_ADC_IsEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d112      	bne.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001d46:	f023 030f 	bic.w	r3, r3, #15
 8001d4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d4c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d4e:	e009      	b.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d62:	e000      	b.n	8001d66 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	377c      	adds	r7, #124	; 0x7c
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	50040000 	.word	0x50040000
 8001d80:	50040100 	.word	0x50040100
 8001d84:	50040300 	.word	0x50040300
 8001d88:	50040200 	.word	0x50040200

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4c 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0e:	f7ff ff61 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	6978      	ldr	r0, [r7, #20]
 8001f1a:	f7ff ffb1 	bl	8001e80 <NVIC_EncodePriority>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff80 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f2c:	bf00      	nop
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff54 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e098      	b.n	8002094 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b4d      	ldr	r3, [pc, #308]	; (80020a0 <HAL_DMA_Init+0x150>)
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d80f      	bhi.n	8001f8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <HAL_DMA_Init+0x154>)
 8001f76:	4413      	add	r3, r2
 8001f78:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_DMA_Init+0x158>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	009a      	lsls	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_DMA_Init+0x15c>)
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f8c:	e00e      	b.n	8001fac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_DMA_Init+0x160>)
 8001f96:	4413      	add	r3, r2
 8001f98:	4a43      	ldr	r2, [pc, #268]	; (80020a8 <HAL_DMA_Init+0x158>)
 8001f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	009a      	lsls	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_DMA_Init+0x164>)
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002006:	d039      	beq.n	800207c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	4a27      	ldr	r2, [pc, #156]	; (80020ac <HAL_DMA_Init+0x15c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11a      	bne.n	8002048 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_DMA_Init+0x168>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 031c 	and.w	r3, r3, #28
 800201e:	210f      	movs	r1, #15
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	4924      	ldr	r1, [pc, #144]	; (80020b8 <HAL_DMA_Init+0x168>)
 8002028:	4013      	ands	r3, r2
 800202a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_DMA_Init+0x168>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f003 031c 	and.w	r3, r3, #28
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	491d      	ldr	r1, [pc, #116]	; (80020b8 <HAL_DMA_Init+0x168>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
 8002046:	e019      	b.n	800207c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_DMA_Init+0x16c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 031c 	and.w	r3, r3, #28
 8002054:	210f      	movs	r1, #15
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	4917      	ldr	r1, [pc, #92]	; (80020bc <HAL_DMA_Init+0x16c>)
 800205e:	4013      	ands	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_DMA_Init+0x16c>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f003 031c 	and.w	r3, r3, #28
 8002072:	fa01 f303 	lsl.w	r3, r1, r3
 8002076:	4911      	ldr	r1, [pc, #68]	; (80020bc <HAL_DMA_Init+0x16c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40020407 	.word	0x40020407
 80020a4:	bffdfff8 	.word	0xbffdfff8
 80020a8:	cccccccd 	.word	0xcccccccd
 80020ac:	40020000 	.word	0x40020000
 80020b0:	bffdfbf8 	.word	0xbffdfbf8
 80020b4:	40020400 	.word	0x40020400
 80020b8:	400200a8 	.word	0x400200a8
 80020bc:	400204a8 	.word	0x400204a8

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_DMA_Start_IT+0x20>
 80020dc:	2302      	movs	r3, #2
 80020de:	e04b      	b.n	8002178 <HAL_DMA_Start_IT+0xb8>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d13a      	bne.n	800216a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0201 	bic.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f95f 	bl	80023dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 020e 	orr.w	r2, r2, #14
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e00f      	b.n	8002158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0204 	bic.w	r2, r2, #4
 8002146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 020a 	orr.w	r2, r2, #10
 8002156:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e005      	b.n	8002176 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002172:	2302      	movs	r3, #2
 8002174:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002176:	7dfb      	ldrb	r3, [r7, #23]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e022      	b.n	80021f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020e 	bic.w	r2, r2, #14
 80021b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f003 021c 	and.w	r2, r3, #28
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d005      	beq.n	8002220 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2204      	movs	r2, #4
 8002218:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
 800221e:	e029      	b.n	8002274 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 020e 	bic.w	r2, r2, #14
 800222e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f003 021c 	and.w	r2, r3, #28
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
    }
  }
  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 031c 	and.w	r3, r3, #28
 800229e:	2204      	movs	r2, #4
 80022a0:	409a      	lsls	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d026      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x7a>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d021      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0204 	bic.w	r2, r2, #4
 80022d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f003 021c 	and.w	r2, r3, #28
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2104      	movs	r1, #4
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d071      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80022f6:	e06c      	b.n	80023d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f003 031c 	and.w	r3, r3, #28
 8002300:	2202      	movs	r2, #2
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02e      	beq.n	800236a <HAL_DMA_IRQHandler+0xec>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d029      	beq.n	800236a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 020a 	bic.w	r2, r2, #10
 8002332:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f003 021c 	and.w	r2, r3, #28
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2102      	movs	r1, #2
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d038      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002368:	e033      	b.n	80023d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f003 031c 	and.w	r3, r3, #28
 8002372:	2208      	movs	r2, #8
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d02a      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x156>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d025      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 020e 	bic.w	r2, r2, #14
 8002396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	f003 021c 	and.w	r2, r3, #28
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
}
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f003 021c 	and.w	r2, r3, #28
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d108      	bne.n	8002420 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800241e:	e007      	b.n	8002430 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244a:	e17f      	b.n	800274c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8171 	beq.w	8002746 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d00b      	beq.n	8002484 <HAL_GPIO_Init+0x48>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d007      	beq.n	8002484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002478:	2b11      	cmp	r3, #17
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b12      	cmp	r3, #18
 8002482:	d130      	bne.n	80024e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ba:	2201      	movs	r2, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 0201 	and.w	r2, r3, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d118      	bne.n	8002524 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024f8:	2201      	movs	r2, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x128>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d123      	bne.n	80025ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	220f      	movs	r2, #15
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3208      	adds	r2, #8
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4013      	ands	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80ac 	beq.w	8002746 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <HAL_GPIO_Init+0x330>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_GPIO_Init+0x330>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6613      	str	r3, [r2, #96]	; 0x60
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <HAL_GPIO_Init+0x330>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002606:	4a5a      	ldr	r2, [pc, #360]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x242>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_GPIO_Init+0x338>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x23e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4e      	ldr	r2, [pc, #312]	; (8002778 <HAL_GPIO_Init+0x33c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x23a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4d      	ldr	r2, [pc, #308]	; (800277c <HAL_GPIO_Init+0x340>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x236>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_GPIO_Init+0x344>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x232>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_GPIO_Init+0x348>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x22e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_GPIO_Init+0x34c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x22a>
 8002662:	2306      	movs	r3, #6
 8002664:	e00c      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002666:	2307      	movs	r3, #7
 8002668:	e00a      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800266a:	2305      	movs	r3, #5
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800266e:	2304      	movs	r3, #4
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x244>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x244>
 800267e:	2300      	movs	r3, #0
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002690:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_GPIO_Init+0x334>)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_GPIO_Init+0x350>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_GPIO_Init+0x350>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_GPIO_Init+0x350>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026ec:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_GPIO_Init+0x350>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_GPIO_Init+0x350>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002716:	4a1d      	ldr	r2, [pc, #116]	; (800278c <HAL_GPIO_Init+0x350>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_GPIO_Init+0x350>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <HAL_GPIO_Init+0x350>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f ae78 	bne.w	800244c <HAL_GPIO_Init+0x10>
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40010000 	.word	0x40010000
 8002774:	48000400 	.word	0x48000400
 8002778:	48000800 	.word	0x48000800
 800277c:	48000c00 	.word	0x48000c00
 8002780:	48001000 	.word	0x48001000
 8002784:	48001400 	.word	0x48001400
 8002788:	48001800 	.word	0x48001800
 800278c:	40010400 	.word	0x40010400

08002790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
 800279c:	4613      	mov	r3, r2
 800279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a0:	787b      	ldrb	r3, [r7, #1]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43d9      	mvns	r1, r3
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	400b      	ands	r3, r1
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_PWREx_GetVoltageRange+0x18>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40007000 	.word	0x40007000

08002810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d130      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d038      	beq.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2232      	movs	r2, #50	; 0x32
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9b      	lsrs	r3, r3, #18
 8002850:	3301      	adds	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002854:	e002      	b.n	800285c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002868:	d102      	bne.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x60>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f2      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d110      	bne.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e00f      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288e:	d007      	beq.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40007000 	.word	0x40007000
 80028b4:	200000c8 	.word	0x200000c8
 80028b8:	431bde83 	.word	0x431bde83

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e3d4      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ce:	4ba1      	ldr	r3, [pc, #644]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028d8:	4b9e      	ldr	r3, [pc, #632]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80e4 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_RCC_OscConfig+0x4a>
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	f040 808b 	bne.w	8002a14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	f040 8087 	bne.w	8002a14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002906:	4b93      	ldr	r3, [pc, #588]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d005      	beq.n	800291e <HAL_RCC_OscConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e3ac      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	4b8c      	ldr	r3, [pc, #560]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_RCC_OscConfig+0x7c>
 800292e:	4b89      	ldr	r3, [pc, #548]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002936:	e005      	b.n	8002944 <HAL_RCC_OscConfig+0x88>
 8002938:	4b86      	ldr	r3, [pc, #536]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	4293      	cmp	r3, r2
 8002946:	d223      	bcs.n	8002990 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fd73 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e38d      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295c:	4b7d      	ldr	r3, [pc, #500]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4977      	ldr	r1, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297a:	4b76      	ldr	r3, [pc, #472]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	4972      	ldr	r1, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
 800298e:	e025      	b.n	80029dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002990:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a6f      	ldr	r2, [pc, #444]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b6d      	ldr	r3, [pc, #436]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	496a      	ldr	r1, [pc, #424]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	4965      	ldr	r1, [pc, #404]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d109      	bne.n	80029dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fd33 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e34d      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029dc:	f000 fc36 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	495a      	ldr	r1, [pc, #360]	; (8002b58 <HAL_RCC_OscConfig+0x29c>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
 80029f8:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_RCC_OscConfig+0x2a0>)
 80029fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029fc:	4b58      	ldr	r3, [pc, #352]	; (8002b60 <HAL_RCC_OscConfig+0x2a4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe f8eb 	bl	8000bdc <HAL_InitTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d052      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	e331      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d032      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a28:	f7fe f9fc 	bl	8000e24 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a30:	f7fe f9f8 	bl	8000e24 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e31a      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a40      	ldr	r2, [pc, #256]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	493b      	ldr	r1, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e01a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a82:	4b34      	ldr	r3, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a33      	ldr	r2, [pc, #204]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002a88:	f023 0301 	bic.w	r3, r3, #1
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe f9c9 	bl	8000e24 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a96:	f7fe f9c5 	bl	8000e24 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e2e7      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa8:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x1da>
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ab6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d074      	beq.n	8002bae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x21a>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d10e      	bne.n	8002aee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d064      	beq.n	8002bac <HAL_RCC_OscConfig+0x2f0>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d160      	bne.n	8002bac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e2c4      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCC_OscConfig+0x24a>
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a15      	ldr	r2, [pc, #84]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e01d      	b.n	8002b42 <HAL_RCC_OscConfig+0x286>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x26e>
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e00b      	b.n	8002b42 <HAL_RCC_OscConfig+0x286>
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <HAL_RCC_OscConfig+0x298>)
 8002b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d01c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f96b 	bl	8000e24 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x2ba>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	080081d0 	.word	0x080081d0
 8002b5c:	200000c8 	.word	0x200000c8
 8002b60:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe f95e 	bl	8000e24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e280      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	4baf      	ldr	r3, [pc, #700]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x2a8>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe f94e 	bl	8000e24 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7fe f94a 	bl	8000e24 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	; 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e26c      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9e:	4ba5      	ldr	r3, [pc, #660]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2d0>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d060      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_OscConfig+0x310>
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d116      	bne.n	8002bfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	4b99      	ldr	r3, [pc, #612]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_OscConfig+0x328>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e249      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b93      	ldr	r3, [pc, #588]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	4990      	ldr	r1, [pc, #576]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf8:	e040      	b.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d023      	beq.n	8002c4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c02:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a8b      	ldr	r2, [pc, #556]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f909 	bl	8000e24 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c16:	f7fe f905 	bl	8000e24 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e227      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c28:	4b82      	ldr	r3, [pc, #520]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b7f      	ldr	r3, [pc, #508]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	497c      	ldr	r1, [pc, #496]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
 8002c48:	e018      	b.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a79      	ldr	r2, [pc, #484]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe f8e5 	bl	8000e24 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5e:	f7fe f8e1 	bl	8000e24 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e203      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c70:	4b70      	ldr	r3, [pc, #448]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d03c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01c      	beq.n	8002cca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	4a67      	ldr	r2, [pc, #412]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe f8c0 	bl	8000e24 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7fe f8bc 	bl	8000e24 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e1de      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cba:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ef      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x3ec>
 8002cc8:	e01b      	b.n	8002d02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cca:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe f8a3 	bl	8000e24 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce2:	f7fe f89f 	bl	8000e24 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1c1      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ef      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80a6 	beq.w	8002e5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d14:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d20:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2c:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3c:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_RCC_OscConfig+0x57c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d118      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_OscConfig+0x57c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x57c>)
 8002d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d54:	f7fe f866 	bl	8000e24 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fe f862 	bl	8000e24 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e184      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6e:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x57c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4d8>
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d92:	e024      	b.n	8002dde <HAL_RCC_OscConfig+0x522>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	d110      	bne.n	8002dbe <HAL_RCC_OscConfig+0x502>
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbc:	e00f      	b.n	8002dde <HAL_RCC_OscConfig+0x522>
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f023 0304 	bic.w	r3, r3, #4
 8002dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe f81d 	bl	8000e24 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe f819 	bl	8000e24 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e139      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_OscConfig+0x578>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0ed      	beq.n	8002dee <HAL_RCC_OscConfig+0x532>
 8002e12:	e01a      	b.n	8002e4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7fe f806 	bl	8000e24 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e1a:	e00f      	b.n	8002e3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe f802 	bl	8000e24 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d906      	bls.n	8002e3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e122      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e3c:	4b90      	ldr	r3, [pc, #576]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e8      	bne.n	8002e1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	4a8a      	ldr	r2, [pc, #552]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8108 	beq.w	8003076 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	f040 80d0 	bne.w	8003010 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e70:	4b83      	ldr	r3, [pc, #524]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0203 	and.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d130      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d127      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d11f      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb0:	2a07      	cmp	r2, #7
 8002eb2:	bf14      	ite	ne
 8002eb4:	2201      	movne	r2, #1
 8002eb6:	2200      	moveq	r2, #0
 8002eb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d113      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d06e      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d069      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002eec:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0b7      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f08:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f14:	f7fd ff86 	bl	8000e24 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fd ff82 	bl	8000e24 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0a4      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_RCC_OscConfig+0x7c8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f54:	0212      	lsls	r2, r2, #8
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0552      	lsls	r2, r2, #21
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	0652      	lsls	r2, r2, #25
 8002f6e:	4311      	orrs	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f74:	0912      	lsrs	r2, r2, #4
 8002f76:	0452      	lsls	r2, r2, #17
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4941      	ldr	r1, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3e      	ldr	r2, [pc, #248]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f98:	f7fd ff44 	bl	8000e24 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd ff40 	bl	8000e24 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e062      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fbe:	e05a      	b.n	8003076 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e059      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d152      	bne.n	8003076 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fdc:	4b28      	ldr	r3, [pc, #160]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe8:	f7fd ff1c 	bl	8000e24 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fd ff18 	bl	8000e24 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e03a      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x734>
 800300e:	e032      	b.n	8003076 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d02d      	beq.n	8003072 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 800301c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003020:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003034:	f023 0303 	bic.w	r3, r3, #3
 8003038:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003040:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003048:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fd feeb 	bl	8000e24 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd fee7 	bl	8000e24 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e009      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x7c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x796>
 8003070:	e001      	b.n	8003076 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	f99d808c 	.word	0xf99d808c

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0c8      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b66      	ldr	r3, [pc, #408]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4961      	ldr	r1, [pc, #388]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b0      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d04c      	beq.n	8003172 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e0:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d121      	bne.n	8003130 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e09e      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d115      	bne.n	8003130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e092      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e086      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003120:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e07e      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003130:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 0203 	bic.w	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	493f      	ldr	r1, [pc, #252]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003142:	f7fd fe6f 	bl	8000e24 <HAL_GetTick>
 8003146:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003148:	e00a      	b.n	8003160 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314a:	f7fd fe6b 	bl	8000e24 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e066      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003160:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 020c 	and.w	r2, r3, #12
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	429a      	cmp	r2, r3
 8003170:	d1eb      	bne.n	800314a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317e:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	492c      	ldr	r1, [pc, #176]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d210      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 0207 	bic.w	r2, r3, #7
 80031a6:	4924      	ldr	r1, [pc, #144]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <HAL_RCC_ClockConfig+0x1b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e036      	b.n	800322e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4918      	ldr	r1, [pc, #96]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4910      	ldr	r1, [pc, #64]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031fe:	f000 f825 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_RCC_ClockConfig+0x1b4>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490c      	ldr	r1, [pc, #48]	; (8003240 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd fcda 	bl	8000bdc <HAL_InitTick>
 8003228:	4603      	mov	r3, r0
 800322a:	72fb      	strb	r3, [r7, #11]

  return status;
 800322c:	7afb      	ldrb	r3, [r7, #11]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	080081d0 	.word	0x080081d0
 8003244:	200000c8 	.word	0x200000c8
 8003248:	200000cc 	.word	0x200000cc

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d121      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d11e      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003280:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e005      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032a8:	4a2b      	ldr	r2, [pc, #172]	; (8003358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e004      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d0:	4b23      	ldr	r3, [pc, #140]	; (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d134      	bne.n	8003344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xac>
 80032f0:	e005      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032f2:	4b1a      	ldr	r3, [pc, #104]	; (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f4:	617b      	str	r3, [r7, #20]
      break;
 80032f6:	e005      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e002      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	617b      	str	r3, [r7, #20]
      break;
 8003302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	fb02 f203 	mul.w	r2, r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0e5b      	lsrs	r3, r3, #25
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	3301      	adds	r3, #1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003344:	69bb      	ldr	r3, [r7, #24]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	080081e8 	.word	0x080081e8
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_RCC_GetHCLKFreq+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200000c8 	.word	0x200000c8

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003380:	f7ff fff0 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4904      	ldr	r1, [pc, #16]	; (80033a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	080081e0 	.word	0x080081e0

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033ac:	f7ff ffda 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4904      	ldr	r1, [pc, #16]	; (80033d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	080081e0 	.word	0x080081e0

080033d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	220f      	movs	r2, #15
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 0203 	and.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_GetClockConfig+0x5c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCC_GetClockConfig+0x60>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0207 	and.w	r2, r3, #7
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000
 8003434:	40022000 	.word	0x40022000

08003438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f9d0 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
 8003456:	e014      	b.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003470:	f7ff f9c0 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
 8003474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d10b      	bne.n	80034a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d919      	bls.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2ba0      	cmp	r3, #160	; 0xa0
 8003494:	d902      	bls.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003496:	2302      	movs	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e013      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800349c:	2301      	movs	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e010      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d902      	bls.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a8:	2303      	movs	r3, #3
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	e00a      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d102      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b4:	2302      	movs	r3, #2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e004      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d101      	bne.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c0:	2301      	movs	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 0207 	bic.w	r2, r3, #7
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40022000 	.word	0x40022000

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	2b00      	cmp	r3, #0
 8003512:	d041      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003538:	d010      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a85      	ldr	r2, [pc, #532]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fabb 	bl	8003acc <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fba6 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358a:	4973      	ldr	r1, [pc, #460]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d041      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ac:	d02a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b2:	d824      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035be:	d81e      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ca:	e018      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035cc:	4b62      	ldr	r3, [pc, #392]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a61      	ldr	r2, [pc, #388]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d8:	e015      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa73 	bl	8003acc <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ea:	e00c      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3320      	adds	r3, #32
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fb5e 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	74fb      	strb	r3, [r7, #19]
      break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360c:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	494f      	ldr	r1, [pc, #316]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a0 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a40      	ldr	r2, [pc, #256]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003668:	2301      	movs	r3, #1
 800366a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003678:	f7fd fbd4 	bl	8000e24 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003680:	f7fd fbd0 	bl	8000e24 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	74fb      	strb	r3, [r7, #19]
        break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003694:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d15c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d019      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fb8f 	bl	8000e24 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	e00b      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fd fb8b 	bl	8000e24 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d902      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	74fb      	strb	r3, [r7, #19]
            break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ec      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800374e:	e009      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003764:	7c7b      	ldrb	r3, [r7, #17]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b9e      	ldr	r3, [pc, #632]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a9d      	ldr	r2, [pc, #628]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003782:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	4994      	ldr	r1, [pc, #592]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a4:	4b8f      	ldr	r3, [pc, #572]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 020c 	bic.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	498c      	ldr	r1, [pc, #560]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c6:	4b87      	ldr	r3, [pc, #540]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4983      	ldr	r1, [pc, #524]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e8:	4b7e      	ldr	r3, [pc, #504]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	497b      	ldr	r1, [pc, #492]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380a:	4b76      	ldr	r3, [pc, #472]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	4972      	ldr	r1, [pc, #456]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382c:	4b6d      	ldr	r3, [pc, #436]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	496a      	ldr	r1, [pc, #424]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	4961      	ldr	r1, [pc, #388]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003870:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387e:	4959      	ldr	r1, [pc, #356]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	4950      	ldr	r1, [pc, #320]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b4:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	4948      	ldr	r1, [pc, #288]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	493f      	ldr	r1, [pc, #252]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	4937      	ldr	r1, [pc, #220]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f8c8 	bl	8003acc <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	491f      	ldr	r1, [pc, #124]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f899 	bl	8003acc <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02b      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a02      	ldr	r2, [pc, #8]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e014      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f867 	bl	8003acc <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a26:	4928      	ldr	r1, [pc, #160]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f844 	bl	8003acc <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3320      	adds	r3, #32
 8003a62:	2102      	movs	r1, #2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f925 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a92:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab6:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ada:	4b75      	ldr	r3, [pc, #468]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ae6:	4b72      	ldr	r3, [pc, #456]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0203 	and.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d10d      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
       ||
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003afe:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d047      	beq.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e044      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d018      	beq.n	8003b52 <RCCEx_PLLSAI1_Config+0x86>
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d825      	bhi.n	8003b70 <RCCEx_PLLSAI1_Config+0xa4>
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <RCCEx_PLLSAI1_Config+0x62>
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d009      	beq.n	8003b40 <RCCEx_PLLSAI1_Config+0x74>
 8003b2c:	e020      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b2e:	4b60      	ldr	r3, [pc, #384]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3e:	e01a      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e013      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b5e:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b6e:	e006      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e004      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10d      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	4944      	ldr	r1, [pc, #272]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d17d      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a40      	ldr	r2, [pc, #256]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd f936 	bl	8000e24 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bba:	e009      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bbc:	f7fd f932 	bl	8000e24 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d902      	bls.n	8003bd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e005      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d160      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	0912      	lsrs	r2, r2, #4
 8003c00:	0452      	lsls	r2, r2, #17
 8003c02:	430a      	orrs	r2, r1
 8003c04:	492a      	ldr	r1, [pc, #168]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e027      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d112      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	0211      	lsls	r1, r2, #8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6912      	ldr	r2, [r2, #16]
 8003c28:	0852      	lsrs	r2, r2, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	0552      	lsls	r2, r2, #21
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	491f      	ldr	r1, [pc, #124]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
 8003c36:	e011      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	0211      	lsls	r1, r2, #8
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6952      	ldr	r2, [r2, #20]
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd f8dc 	bl	8000e24 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6e:	e009      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c70:	f7fd f8d8 	bl	8000e24 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d902      	bls.n	8003c84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	73fb      	strb	r3, [r7, #15]
          break;
 8003c82:	e005      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d047      	beq.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e044      	b.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d018      	beq.n	8003d3a <RCCEx_PLLSAI2_Config+0x86>
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d825      	bhi.n	8003d58 <RCCEx_PLLSAI2_Config+0xa4>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d002      	beq.n	8003d16 <RCCEx_PLLSAI2_Config+0x62>
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d009      	beq.n	8003d28 <RCCEx_PLLSAI2_Config+0x74>
 8003d14:	e020      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d16:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11d      	bne.n	8003d5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d26:	e01a      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d38:	e013      	b.n	8003d62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d56:	e006      	b.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e004      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	430b      	orrs	r3, r1
 8003d84:	4939      	ldr	r1, [pc, #228]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d167      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd f842 	bl	8000e24 <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003da2:	e009      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da4:	f7fd f83e 	bl	8000e24 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d902      	bls.n	8003db8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	73fb      	strb	r3, [r7, #15]
        break;
 8003db6:	e005      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ef      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d14a      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	0211      	lsls	r1, r2, #8
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	0912      	lsrs	r2, r2, #4
 8003de8:	0452      	lsls	r2, r2, #17
 8003dea:	430a      	orrs	r2, r1
 8003dec:	491f      	ldr	r1, [pc, #124]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	614b      	str	r3, [r1, #20]
 8003df2:	e011      	b.n	8003e18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6892      	ldr	r2, [r2, #8]
 8003e04:	0211      	lsls	r1, r2, #8
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6912      	ldr	r2, [r2, #16]
 8003e0a:	0852      	lsrs	r2, r2, #1
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0652      	lsls	r2, r2, #25
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4916      	ldr	r1, [pc, #88]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fc fffe 	bl	8000e24 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e2a:	e009      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e2c:	f7fc fffa 	bl	8000e24 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d902      	bls.n	8003e40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e3e:	e005      	b.n	8003e4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ef      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4904      	ldr	r1, [pc, #16]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e049      	b.n	8003f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f841 	bl	8003f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f000 f9f8 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04f      	b.n	8003fec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a23      	ldr	r2, [pc, #140]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f76:	d018      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_Base_Start_IT+0x76>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	; (800400c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d115      	bne.n	8003fd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b06      	cmp	r3, #6
 8003fba:	d015      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0xb4>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d011      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	e008      	b.n	8003fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e000      	b.n	8003fea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40014000 	.word	0x40014000
 8004010:	00010007 	.word	0x00010007

08004014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b02      	cmp	r3, #2
 8004028:	d122      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d11b      	bne.n	8004070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0202 	mvn.w	r2, #2
 8004040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f905 	bl	8004266 <HAL_TIM_IC_CaptureCallback>
 800405c:	e005      	b.n	800406a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8f7 	bl	8004252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f908 	bl	800427a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b04      	cmp	r3, #4
 800407c:	d122      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b04      	cmp	r3, #4
 800408a:	d11b      	bne.n	80040c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0204 	mvn.w	r2, #4
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8db 	bl	8004266 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f8cd 	bl	8004252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f8de 	bl	800427a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d122      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d11b      	bne.n	8004118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0208 	mvn.w	r2, #8
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8b1 	bl	8004266 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8a3 	bl	8004252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f8b4 	bl	800427a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b10      	cmp	r3, #16
 8004124:	d122      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d11b      	bne.n	800416c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2208      	movs	r2, #8
 8004142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f887 	bl	8004266 <HAL_TIM_IC_CaptureCallback>
 8004158:	e005      	b.n	8004166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f879 	bl	8004252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f88a 	bl	800427a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d10e      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fbfc 	bl	8000990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f914 	bl	80043ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d10e      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b80      	cmp	r3, #128	; 0x80
 80041e0:	d107      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f907 	bl	8004400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fc:	2b40      	cmp	r3, #64	; 0x40
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f838 	bl	800428e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b20      	cmp	r3, #32
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b20      	cmp	r3, #32
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0220 	mvn.w	r2, #32
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8c7 	bl	80043d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a40      	ldr	r2, [pc, #256]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c2:	d00f      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <TIM_Base_SetConfig+0x118>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a3c      	ldr	r2, [pc, #240]	; (80043c0 <TIM_Base_SetConfig+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <TIM_Base_SetConfig+0x120>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0x40>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a3a      	ldr	r2, [pc, #232]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d108      	bne.n	80042f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a2f      	ldr	r2, [pc, #188]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d01f      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004304:	d01b      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <TIM_Base_SetConfig+0x118>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d017      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <TIM_Base_SetConfig+0x11c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2a      	ldr	r2, [pc, #168]	; (80043c4 <TIM_Base_SetConfig+0x120>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00f      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a29      	ldr	r2, [pc, #164]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a28      	ldr	r2, [pc, #160]	; (80043cc <TIM_Base_SetConfig+0x128>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <TIM_Base_SetConfig+0x12c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_Base_SetConfig+0x9a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	; (80043d4 <TIM_Base_SetConfig+0x130>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d108      	bne.n	8004350 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a10      	ldr	r2, [pc, #64]	; (80043b8 <TIM_Base_SetConfig+0x114>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00f      	beq.n	800439c <TIM_Base_SetConfig+0xf8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_Base_SetConfig+0xf8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a11      	ldr	r2, [pc, #68]	; (80043cc <TIM_Base_SetConfig+0x128>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0xf8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <TIM_Base_SetConfig+0x12c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0xf8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <TIM_Base_SetConfig+0x130>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d103      	bne.n	80043a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	615a      	str	r2, [r3, #20]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40000c00 	.word	0x40000c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e040      	b.n	80044a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc fb2a 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fb06 	bl	8004a64 <UART_SetConfig>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fd84 	bl	8004f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fe0b 	bl	80050bc <UART_CheckIdleState>
 80044a6:	4603      	mov	r3, r0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d166      	bne.n	8004594 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <HAL_UART_Transmit_DMA+0x22>
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e05f      	b.n	8004596 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_UART_Transmit_DMA+0x34>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e058      	b.n	8004596 <HAL_UART_Transmit_DMA+0xe6>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	88fa      	ldrh	r2, [r7, #6]
 80044f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	88fa      	ldrh	r2, [r7, #6]
 80044fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2221      	movs	r2, #33	; 0x21
 800450e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02b      	beq.n	8004570 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800451c:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_UART_Transmit_DMA+0xf0>)
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_UART_Transmit_DMA+0xf4>)
 8004526:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452c:	4a1e      	ldr	r2, [pc, #120]	; (80045a8 <HAL_UART_Transmit_DMA+0xf8>)
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	2200      	movs	r2, #0
 8004536:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004540:	4619      	mov	r1, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3328      	adds	r3, #40	; 0x28
 8004548:	461a      	mov	r2, r3
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	f7fd fdb8 	bl	80020c0 <HAL_DMA_Start_IT>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2210      	movs	r2, #16
 800455a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e012      	b.n	8004596 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2240      	movs	r2, #64	; 0x40
 8004576:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800458e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	080053a9 	.word	0x080053a9
 80045a4:	080053fd 	.word	0x080053fd
 80045a8:	080054e9 	.word	0x080054e9

080045ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4613      	mov	r3, r2
 80045b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d131      	bne.n	8004626 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_Receive_DMA+0x22>
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e02a      	b.n	8004628 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Receive_DMA+0x34>
 80045dc:	2302      	movs	r3, #2
 80045de:	e023      	b.n	8004628 <HAL_UART_Receive_DMA+0x7c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <HAL_UART_Receive_DMA+0x84>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004614:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	461a      	mov	r2, r3
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fe13 	bl	8005248 <UART_Start_Receive_DMA>
 8004622:	4603      	mov	r3, r0
 8004624:	e000      	b.n	8004628 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40008000 	.word	0x40008000

08004634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f640 030f 	movw	r3, #2063	; 0x80f
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d113      	bne.n	800468c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 81ce 	beq.w	8004a1e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
      }
      return;
 800468a:	e1c8      	b.n	8004a1e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80e3 	beq.w	800485a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4ba6      	ldr	r3, [pc, #664]	; (800493c <HAL_UART_IRQHandler+0x308>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80d8 	beq.w	800485a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_UART_IRQHandler+0xa2>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046cc:	f043 0201 	orr.w	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_UART_IRQHandler+0xce>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2202      	movs	r2, #2
 80046f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f8:	f043 0204 	orr.w	r2, r3, #4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d010      	beq.n	800472e <HAL_UART_IRQHandler+0xfa>
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00b      	beq.n	800472e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2204      	movs	r2, #4
 800471c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2208      	movs	r2, #8
 8004752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	f043 0208 	orr.w	r2, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	2b00      	cmp	r3, #0
 800476c:	d011      	beq.n	8004792 <HAL_UART_IRQHandler+0x15e>
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00c      	beq.n	8004792 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8142 	beq.w	8004a22 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d004      	beq.n	80047e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d031      	beq.n	8004846 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fdb1 	bl	800534a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d123      	bne.n	800483e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004804:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a4b      	ldr	r2, [pc, #300]	; (8004940 <HAL_UART_IRQHandler+0x30c>)
 8004814:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fcee 	bl	80021fc <HAL_DMA_Abort_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004830:	4610      	mov	r0, r2
 8004832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00f      	b.n	8004856 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f8fe 	bl	8004a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e00b      	b.n	8004856 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8fa 	bl	8004a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004844:	e007      	b.n	8004856 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8f6 	bl	8004a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004854:	e0e5      	b.n	8004a22 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004856:	bf00      	nop
    return;
 8004858:	e0e3      	b.n	8004a22 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485e:	2b01      	cmp	r3, #1
 8004860:	f040 80a9 	bne.w	80049b6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80a3 	beq.w	80049b6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 809d 	beq.w	80049b6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2210      	movs	r2, #16
 8004882:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d158      	bne.n	8004944 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800489c:	893b      	ldrh	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80c1 	beq.w	8004a26 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048aa:	893a      	ldrh	r2, [r7, #8]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f080 80ba 	bcs.w	8004a26 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	893a      	ldrh	r2, [r7, #8]
 80048b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d12a      	bne.n	8004920 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048f8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0210 	bic.w	r2, r2, #16
 8004914:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fc30 	bl	8002180 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800492c:	b29b      	uxth	r3, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	4619      	mov	r1, r3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f889 	bl	8004a4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800493a:	e074      	b.n	8004a26 <HAL_UART_IRQHandler+0x3f2>
 800493c:	04000120 	.word	0x04000120
 8004940:	08005565 	.word	0x08005565
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004950:	b29b      	uxth	r3, r3
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d063      	beq.n	8004a2a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8004962:	897b      	ldrh	r3, [r7, #10]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d060      	beq.n	8004a2a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004976:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0210 	bic.w	r2, r2, #16
 80049a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f84c 	bl	8004a4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049b4:	e039      	b.n	8004a2a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_UART_IRQHandler+0x3a8>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fdf4 	bl	80055c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049da:	e029      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01a      	beq.n	8004a2e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	4798      	blx	r3
    }
    return;
 8004a00:	e015      	b.n	8004a2e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fdba 	bl	8005590 <UART_EndTransmit_IT>
    return;
 8004a1c:	e008      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a1e:	bf00      	nop
 8004a20:	e006      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a22:	bf00      	nop
 8004a24:	e004      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_UART_IRQHandler+0x3fc>
    return;
 8004a2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop

08004a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	b5b0      	push	{r4, r5, r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4bad      	ldr	r3, [pc, #692]	; (8004d44 <UART_SetConfig+0x2e0>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	69f9      	ldr	r1, [r7, #28]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4aa2      	ldr	r2, [pc, #648]	; (8004d48 <UART_SetConfig+0x2e4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a99      	ldr	r2, [pc, #612]	; (8004d4c <UART_SetConfig+0x2e8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d121      	bne.n	8004b2e <UART_SetConfig+0xca>
 8004aea:	4b99      	ldr	r3, [pc, #612]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d817      	bhi.n	8004b28 <UART_SetConfig+0xc4>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x9c>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b1d 	.word	0x08004b1d
 8004b08:	08004b17 	.word	0x08004b17
 8004b0c:	08004b23 	.word	0x08004b23
 8004b10:	2301      	movs	r3, #1
 8004b12:	76fb      	strb	r3, [r7, #27]
 8004b14:	e0e7      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b16:	2302      	movs	r3, #2
 8004b18:	76fb      	strb	r3, [r7, #27]
 8004b1a:	e0e4      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	76fb      	strb	r3, [r7, #27]
 8004b20:	e0e1      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b22:	2308      	movs	r3, #8
 8004b24:	76fb      	strb	r3, [r7, #27]
 8004b26:	e0de      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	76fb      	strb	r3, [r7, #27]
 8004b2c:	e0db      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a88      	ldr	r2, [pc, #544]	; (8004d54 <UART_SetConfig+0x2f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d132      	bne.n	8004b9e <UART_SetConfig+0x13a>
 8004b38:	4b85      	ldr	r3, [pc, #532]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d828      	bhi.n	8004b98 <UART_SetConfig+0x134>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0xe8>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b99 	.word	0x08004b99
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004b87 	.word	0x08004b87
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004b93 	.word	0x08004b93
 8004b80:	2300      	movs	r3, #0
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e0af      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b86:	2302      	movs	r3, #2
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e0ac      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e0a9      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b92:	2308      	movs	r3, #8
 8004b94:	76fb      	strb	r3, [r7, #27]
 8004b96:	e0a6      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	76fb      	strb	r3, [r7, #27]
 8004b9c:	e0a3      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6d      	ldr	r2, [pc, #436]	; (8004d58 <UART_SetConfig+0x2f4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d120      	bne.n	8004bea <UART_SetConfig+0x186>
 8004ba8:	4b69      	ldr	r3, [pc, #420]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bb2:	2b30      	cmp	r3, #48	; 0x30
 8004bb4:	d013      	beq.n	8004bde <UART_SetConfig+0x17a>
 8004bb6:	2b30      	cmp	r3, #48	; 0x30
 8004bb8:	d814      	bhi.n	8004be4 <UART_SetConfig+0x180>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d009      	beq.n	8004bd2 <UART_SetConfig+0x16e>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d810      	bhi.n	8004be4 <UART_SetConfig+0x180>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <UART_SetConfig+0x168>
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x174>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x180>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e089      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	76fb      	strb	r3, [r7, #27]
 8004bd6:	e086      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e083      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004bde:	2308      	movs	r3, #8
 8004be0:	76fb      	strb	r3, [r7, #27]
 8004be2:	e080      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004be4:	2310      	movs	r3, #16
 8004be6:	76fb      	strb	r3, [r7, #27]
 8004be8:	e07d      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5b      	ldr	r2, [pc, #364]	; (8004d5c <UART_SetConfig+0x2f8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d120      	bne.n	8004c36 <UART_SetConfig+0x1d2>
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8004c00:	d013      	beq.n	8004c2a <UART_SetConfig+0x1c6>
 8004c02:	2bc0      	cmp	r3, #192	; 0xc0
 8004c04:	d814      	bhi.n	8004c30 <UART_SetConfig+0x1cc>
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d009      	beq.n	8004c1e <UART_SetConfig+0x1ba>
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d810      	bhi.n	8004c30 <UART_SetConfig+0x1cc>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <UART_SetConfig+0x1b4>
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d006      	beq.n	8004c24 <UART_SetConfig+0x1c0>
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x1cc>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	76fb      	strb	r3, [r7, #27]
 8004c1c:	e063      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	76fb      	strb	r3, [r7, #27]
 8004c22:	e060      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c24:	2304      	movs	r3, #4
 8004c26:	76fb      	strb	r3, [r7, #27]
 8004c28:	e05d      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	76fb      	strb	r3, [r7, #27]
 8004c2e:	e05a      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c30:	2310      	movs	r3, #16
 8004c32:	76fb      	strb	r3, [r7, #27]
 8004c34:	e057      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a49      	ldr	r2, [pc, #292]	; (8004d60 <UART_SetConfig+0x2fc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d125      	bne.n	8004c8c <UART_SetConfig+0x228>
 8004c40:	4b43      	ldr	r3, [pc, #268]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4e:	d017      	beq.n	8004c80 <UART_SetConfig+0x21c>
 8004c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c54:	d817      	bhi.n	8004c86 <UART_SetConfig+0x222>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x210>
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c60:	d811      	bhi.n	8004c86 <UART_SetConfig+0x222>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <UART_SetConfig+0x20a>
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x216>
 8004c6c:	e00b      	b.n	8004c86 <UART_SetConfig+0x222>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	76fb      	strb	r3, [r7, #27]
 8004c72:	e038      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c74:	2302      	movs	r3, #2
 8004c76:	76fb      	strb	r3, [r7, #27]
 8004c78:	e035      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	76fb      	strb	r3, [r7, #27]
 8004c7e:	e032      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c80:	2308      	movs	r3, #8
 8004c82:	76fb      	strb	r3, [r7, #27]
 8004c84:	e02f      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c86:	2310      	movs	r3, #16
 8004c88:	76fb      	strb	r3, [r7, #27]
 8004c8a:	e02c      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2d      	ldr	r2, [pc, #180]	; (8004d48 <UART_SetConfig+0x2e4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d125      	bne.n	8004ce2 <UART_SetConfig+0x27e>
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <UART_SetConfig+0x2ec>)
 8004c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ca0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ca4:	d017      	beq.n	8004cd6 <UART_SetConfig+0x272>
 8004ca6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004caa:	d817      	bhi.n	8004cdc <UART_SetConfig+0x278>
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb0:	d00b      	beq.n	8004cca <UART_SetConfig+0x266>
 8004cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb6:	d811      	bhi.n	8004cdc <UART_SetConfig+0x278>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <UART_SetConfig+0x260>
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d006      	beq.n	8004cd0 <UART_SetConfig+0x26c>
 8004cc2:	e00b      	b.n	8004cdc <UART_SetConfig+0x278>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	76fb      	strb	r3, [r7, #27]
 8004cc8:	e00d      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	76fb      	strb	r3, [r7, #27]
 8004cce:	e00a      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	76fb      	strb	r3, [r7, #27]
 8004cd4:	e007      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	76fb      	strb	r3, [r7, #27]
 8004cda:	e004      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	76fb      	strb	r3, [r7, #27]
 8004ce0:	e001      	b.n	8004ce6 <UART_SetConfig+0x282>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <UART_SetConfig+0x2e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	f040 8087 	bne.w	8004e00 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf2:	7efb      	ldrb	r3, [r7, #27]
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d837      	bhi.n	8004d68 <UART_SetConfig+0x304>
 8004cf8:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x29c>)
 8004cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfe:	bf00      	nop
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d69 	.word	0x08004d69
 8004d10:	08004d33 	.word	0x08004d33
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d69 	.word	0x08004d69
 8004d20:	08004d3b 	.word	0x08004d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d24:	f7fe fb2a 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004d28:	6178      	str	r0, [r7, #20]
        break;
 8004d2a:	e022      	b.n	8004d72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <UART_SetConfig+0x300>)
 8004d2e:	617b      	str	r3, [r7, #20]
        break;
 8004d30:	e01f      	b.n	8004d72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d32:	f7fe fa8b 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004d36:	6178      	str	r0, [r7, #20]
        break;
 8004d38:	e01b      	b.n	8004d72 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3e:	617b      	str	r3, [r7, #20]
        break;
 8004d40:	e017      	b.n	8004d72 <UART_SetConfig+0x30e>
 8004d42:	bf00      	nop
 8004d44:	efff69f3 	.word	0xefff69f3
 8004d48:	40008000 	.word	0x40008000
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40004400 	.word	0x40004400
 8004d58:	40004800 	.word	0x40004800
 8004d5c:	40004c00 	.word	0x40004c00
 8004d60:	40005000 	.word	0x40005000
 8004d64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	76bb      	strb	r3, [r7, #26]
        break;
 8004d70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80f1 	beq.w	8004f5c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d305      	bcc.n	8004d96 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d902      	bls.n	8004d9c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	76bb      	strb	r3, [r7, #26]
 8004d9a:	e0df      	b.n	8004f5c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f04f 0100 	mov.w	r1, #0
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	020b      	lsls	r3, r1, #8
 8004dae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004db2:	0202      	lsls	r2, r0, #8
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	6849      	ldr	r1, [r1, #4]
 8004db8:	0849      	lsrs	r1, r1, #1
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	1814      	adds	r4, r2, r0
 8004dc2:	eb43 0501 	adc.w	r5, r3, r1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb f9fc 	bl	80001d0 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d308      	bcc.n	8004dfa <UART_SetConfig+0x396>
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d204      	bcs.n	8004dfa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e0b0      	b.n	8004f5c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	76bb      	strb	r3, [r7, #26]
 8004dfe:	e0ad      	b.n	8004f5c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e08:	d15c      	bne.n	8004ec4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d828      	bhi.n	8004e62 <UART_SetConfig+0x3fe>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x3b4>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e3d 	.word	0x08004e3d
 8004e1c:	08004e45 	.word	0x08004e45
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e63 	.word	0x08004e63
 8004e28:	08004e53 	.word	0x08004e53
 8004e2c:	08004e63 	.word	0x08004e63
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e63 	.word	0x08004e63
 8004e38:	08004e5b 	.word	0x08004e5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e3c:	f7fe fa9e 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004e40:	6178      	str	r0, [r7, #20]
        break;
 8004e42:	e013      	b.n	8004e6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fab0 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8004e48:	6178      	str	r0, [r7, #20]
        break;
 8004e4a:	e00f      	b.n	8004e6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e4c:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <UART_SetConfig+0x510>)
 8004e4e:	617b      	str	r3, [r7, #20]
        break;
 8004e50:	e00c      	b.n	8004e6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e52:	f7fe f9fb 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004e56:	6178      	str	r0, [r7, #20]
        break;
 8004e58:	e008      	b.n	8004e6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e5e:	617b      	str	r3, [r7, #20]
        break;
 8004e60:	e004      	b.n	8004e6c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	76bb      	strb	r3, [r7, #26]
        break;
 8004e6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d074      	beq.n	8004f5c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	005a      	lsls	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d916      	bls.n	8004ebe <UART_SetConfig+0x45a>
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e96:	d212      	bcs.n	8004ebe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f023 030f 	bic.w	r3, r3, #15
 8004ea0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	89fb      	ldrh	r3, [r7, #14]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	89fa      	ldrh	r2, [r7, #14]
 8004eba:	60da      	str	r2, [r3, #12]
 8004ebc:	e04e      	b.n	8004f5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	76bb      	strb	r3, [r7, #26]
 8004ec2:	e04b      	b.n	8004f5c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ec4:	7efb      	ldrb	r3, [r7, #27]
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d827      	bhi.n	8004f1a <UART_SetConfig+0x4b6>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <UART_SetConfig+0x46c>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	08004f1b 	.word	0x08004f1b
 8004ee0:	08004f0b 	.word	0x08004f0b
 8004ee4:	08004f1b 	.word	0x08004f1b
 8004ee8:	08004f1b 	.word	0x08004f1b
 8004eec:	08004f1b 	.word	0x08004f1b
 8004ef0:	08004f13 	.word	0x08004f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef4:	f7fe fa42 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8004ef8:	6178      	str	r0, [r7, #20]
        break;
 8004efa:	e013      	b.n	8004f24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004efc:	f7fe fa54 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8004f00:	6178      	str	r0, [r7, #20]
        break;
 8004f02:	e00f      	b.n	8004f24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <UART_SetConfig+0x510>)
 8004f06:	617b      	str	r3, [r7, #20]
        break;
 8004f08:	e00c      	b.n	8004f24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0a:	f7fe f99f 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8004f0e:	6178      	str	r0, [r7, #20]
        break;
 8004f10:	e008      	b.n	8004f24 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f16:	617b      	str	r3, [r7, #20]
        break;
 8004f18:	e004      	b.n	8004f24 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	76bb      	strb	r3, [r7, #26]
        break;
 8004f22:	bf00      	nop
    }

    if (pclk != 0U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d018      	beq.n	8004f5c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	085a      	lsrs	r2, r3, #1
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	441a      	add	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b0f      	cmp	r3, #15
 8004f44:	d908      	bls.n	8004f58 <UART_SetConfig+0x4f4>
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f4c:	d204      	bcs.n	8004f58 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	e001      	b.n	8004f5c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f68:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bdb0      	pop	{r4, r5, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	00f42400 	.word	0x00f42400

08004f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00a      	beq.n	8004fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005076:	d10a      	bne.n	800508e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050cc:	f7fb feaa 	bl	8000e24 <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10e      	bne.n	80050fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f82d 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e023      	b.n	8005146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d10e      	bne.n	800512a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800510c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f817 	bl	800514e <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e00d      	b.n	8005146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2220      	movs	r2, #32
 8005134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515e:	e05e      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005166:	d05a      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005168:	f7fb fe5c 	bl	8000e24 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d302      	bcc.n	800517e <UART_WaitOnFlagUntilTimeout+0x30>
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11b      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800518c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e043      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d02c      	beq.n	800521e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051d2:	d124      	bne.n	800521e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051dc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051ec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e00f      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	bf0c      	ite	eq
 800522e:	2301      	moveq	r3, #1
 8005230:	2300      	movne	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	429a      	cmp	r2, r3
 800523a:	d091      	beq.n	8005160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2222      	movs	r2, #34	; 0x22
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	2b00      	cmp	r3, #0
 8005278:	d02b      	beq.n	80052d2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a25      	ldr	r2, [pc, #148]	; (8005314 <UART_Start_Receive_DMA+0xcc>)
 8005280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <UART_Start_Receive_DMA+0xd0>)
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	4a23      	ldr	r2, [pc, #140]	; (800531c <UART_Start_Receive_DMA+0xd4>)
 8005290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	2200      	movs	r2, #0
 8005298:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	4619      	mov	r1, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	461a      	mov	r2, r3
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	f7fc ff07 	bl	80020c0 <HAL_DMA_Start_IT>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00c      	beq.n	80052d2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2210      	movs	r2, #16
 80052bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e01c      	b.n	800530c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 0201 	orr.w	r2, r2, #1
 80052f8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005308:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	08005419 	.word	0x08005419
 8005318:	080054b1 	.word	0x080054b1
 800531c:	080054e9 	.word	0x080054e9

08005320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005336:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005360:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0210 	bic.w	r2, r2, #16
 8005388:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d114      	bne.n	80053ee <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053da:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80053ec:	e002      	b.n	80053f4 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7fb fa96 	bl	8000920 <HAL_UART_TxCpltCallback>
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7fb fa74 	bl	80008f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d12a      	bne.n	800548a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800544a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	2b01      	cmp	r3, #1
 8005478:	d107      	bne.n	800548a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0210 	bic.w	r2, r2, #16
 8005488:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	2b01      	cmp	r3, #1
 8005490:	d107      	bne.n	80054a2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005498:	4619      	mov	r1, r3
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff fad6 	bl	8004a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054a0:	e002      	b.n	80054a8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7fb fa06 	bl	80008b4 <HAL_UART_RxCpltCallback>
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d109      	bne.n	80054da <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4619      	mov	r1, r3
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff faba 	bl	8004a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054d8:	e002      	b.n	80054e0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f7fb f9c8 	bl	8000870 <HAL_UART_RxHalfCpltCallback>
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005500:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b80      	cmp	r3, #128	; 0x80
 800550e:	d109      	bne.n	8005524 <UART_DMAError+0x3c>
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b21      	cmp	r3, #33	; 0x21
 8005514:	d106      	bne.n	8005524 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7ff fefe 	bl	8005320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d109      	bne.n	8005546 <UART_DMAError+0x5e>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b22      	cmp	r3, #34	; 0x22
 8005536:	d106      	bne.n	8005546 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005540:	6978      	ldr	r0, [r7, #20]
 8005542:	f7ff ff02 	bl	800534a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	f043 0210 	orr.w	r2, r3, #16
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005556:	6978      	ldr	r0, [r7, #20]
 8005558:	f7ff fa6e 	bl	8004a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800555c:	bf00      	nop
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff fa58 	bl	8004a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fb f9b3 	bl	8000920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <__NVIC_SetPriority>:
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	db0a      	blt.n	8005602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	490c      	ldr	r1, [pc, #48]	; (8005624 <__NVIC_SetPriority+0x4c>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	440b      	add	r3, r1
 80055fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005600:	e00a      	b.n	8005618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4908      	ldr	r1, [pc, #32]	; (8005628 <__NVIC_SetPriority+0x50>)
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	3b04      	subs	r3, #4
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	440b      	add	r3, r1
 8005616:	761a      	strb	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	e000e100 	.word	0xe000e100
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <SysTick_Handler+0x1c>)
 8005632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005634:	f001 fcfe 	bl	8007034 <xTaskGetSchedulerState>
 8005638:	4603      	mov	r3, r0
 800563a:	2b01      	cmp	r3, #1
 800563c:	d001      	beq.n	8005642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800563e:	f002 fae3 	bl	8007c08 <xPortSysTickHandler>
  }
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	e000e010 	.word	0xe000e010

0800564c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005650:	2100      	movs	r1, #0
 8005652:	f06f 0004 	mvn.w	r0, #4
 8005656:	f7ff ffbf 	bl	80055d8 <__NVIC_SetPriority>
#endif
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005666:	f3ef 8305 	mrs	r3, IPSR
 800566a:	603b      	str	r3, [r7, #0]
  return(result);
 800566c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005672:	f06f 0305 	mvn.w	r3, #5
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e00c      	b.n	8005694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <osKernelInitialize+0x44>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d105      	bne.n	800568e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <osKernelInitialize+0x44>)
 8005684:	2201      	movs	r2, #1
 8005686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005688:	2300      	movs	r3, #0
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	e002      	b.n	8005694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005694:	687b      	ldr	r3, [r7, #4]
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	200000f4 	.word	0x200000f4

080056a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ae:	f3ef 8305 	mrs	r3, IPSR
 80056b2:	603b      	str	r3, [r7, #0]
  return(result);
 80056b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056ba:	f06f 0305 	mvn.w	r3, #5
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e010      	b.n	80056e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <osKernelStart+0x48>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d109      	bne.n	80056de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056ca:	f7ff ffbf 	bl	800564c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <osKernelStart+0x48>)
 80056d0:	2202      	movs	r2, #2
 80056d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056d4:	f001 f866 	bl	80067a4 <vTaskStartScheduler>
      stat = osOK;
 80056d8:	2300      	movs	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e002      	b.n	80056e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056e4:	687b      	ldr	r3, [r7, #4]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200000f4 	.word	0x200000f4

080056f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08e      	sub	sp, #56	; 0x38
 80056f8:	af04      	add	r7, sp, #16
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005704:	f3ef 8305 	mrs	r3, IPSR
 8005708:	617b      	str	r3, [r7, #20]
  return(result);
 800570a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800570c:	2b00      	cmp	r3, #0
 800570e:	d17e      	bne.n	800580e <osThreadNew+0x11a>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d07b      	beq.n	800580e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005716:	2380      	movs	r3, #128	; 0x80
 8005718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800571a:	2318      	movs	r3, #24
 800571c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d045      	beq.n	80057ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <osThreadNew+0x48>
        name = attr->name;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <osThreadNew+0x6e>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b38      	cmp	r3, #56	; 0x38
 8005754:	d805      	bhi.n	8005762 <osThreadNew+0x6e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <osThreadNew+0x72>
        return (NULL);
 8005762:	2300      	movs	r3, #0
 8005764:	e054      	b.n	8005810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	089b      	lsrs	r3, r3, #2
 8005774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00e      	beq.n	800579c <osThreadNew+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	2b5b      	cmp	r3, #91	; 0x5b
 8005784:	d90a      	bls.n	800579c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800578a:	2b00      	cmp	r3, #0
 800578c:	d006      	beq.n	800579c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <osThreadNew+0xa8>
        mem = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e010      	b.n	80057be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10c      	bne.n	80057be <osThreadNew+0xca>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d108      	bne.n	80057be <osThreadNew+0xca>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <osThreadNew+0xca>
          mem = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e001      	b.n	80057be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d110      	bne.n	80057e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057cc:	9202      	str	r2, [sp, #8]
 80057ce:	9301      	str	r3, [sp, #4]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fe0c 	bl	80063f8 <xTaskCreateStatic>
 80057e0:	4603      	mov	r3, r0
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e013      	b.n	800580e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d110      	bne.n	800580e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	f107 0310 	add.w	r3, r7, #16
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fe57 	bl	80064b2 <xTaskCreate>
 8005804:	4603      	mov	r3, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <osThreadNew+0x11a>
            hTask = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800580e:	693b      	ldr	r3, [r7, #16]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3728      	adds	r7, #40	; 0x28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005820:	f3ef 8305 	mrs	r3, IPSR
 8005824:	60bb      	str	r3, [r7, #8]
  return(result);
 8005826:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <osDelay+0x1c>
    stat = osErrorISR;
 800582c:	f06f 0305 	mvn.w	r3, #5
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e007      	b.n	8005844 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <osDelay+0x2c>
      vTaskDelay(ticks);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 ff7c 	bl	800673c <vTaskDelay>
    }
  }

  return (stat);
 8005844:	68fb      	ldr	r3, [r7, #12]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4a07      	ldr	r2, [pc, #28]	; (800587c <vApplicationGetIdleTaskMemory+0x2c>)
 8005860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4a06      	ldr	r2, [pc, #24]	; (8005880 <vApplicationGetIdleTaskMemory+0x30>)
 8005866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	601a      	str	r2, [r3, #0]
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	200000f8 	.word	0x200000f8
 8005880:	20000154 	.word	0x20000154

08005884 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005894:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4a06      	ldr	r2, [pc, #24]	; (80058b4 <vApplicationGetTimerTaskMemory+0x30>)
 800589a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058a2:	601a      	str	r2, [r3, #0]
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000354 	.word	0x20000354
 80058b4:	200003b0 	.word	0x200003b0

080058b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f103 0208 	add.w	r2, r3, #8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f103 0208 	add.w	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0208 	add.w	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d103      	bne.n	800597a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e00c      	b.n	8005994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3308      	adds	r3, #8
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e002      	b.n	8005988 <vListInsert+0x2e>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	d2f6      	bcs.n	8005982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6892      	ldr	r2, [r2, #8]
 80059e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d103      	bne.n	8005a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a4a:	f002 f84b 	bl	8007ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3310      	adds	r3, #16
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f903 	bl	8006cb8 <xTaskRemoveFromEventList>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d012      	beq.n	8005ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <xQueueGenericReset+0xcc>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e009      	b.n	8005ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3310      	adds	r3, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fef2 	bl	80058b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3324      	adds	r3, #36	; 0x24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff feed 	bl	80058b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ade:	f002 f831 	bl	8007b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ae2:	2301      	movs	r3, #1
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <xQueueGenericCreateStatic+0x52>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <xQueueGenericCreateStatic+0x56>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueGenericCreateStatic+0x58>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	623b      	str	r3, [r7, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <xQueueGenericCreateStatic+0x7e>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <xQueueGenericCreateStatic+0x82>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueGenericCreateStatic+0x84>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	61fb      	str	r3, [r7, #28]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b8e:	2350      	movs	r3, #80	; 0x50
 8005b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b50      	cmp	r3, #80	; 0x50
 8005b96:	d00a      	beq.n	8005bae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61bb      	str	r3, [r7, #24]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f805 	bl	8005be0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3730      	adds	r7, #48	; 0x30
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c0e:	2101      	movs	r1, #1
 8005c10:	69b8      	ldr	r0, [r7, #24]
 8005c12:	f7ff ff05 	bl	8005a20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08e      	sub	sp, #56	; 0x38
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d10a      	bne.n	8005c5a <xQueueGenericSend+0x32>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d103      	bne.n	8005c68 <xQueueGenericSend+0x40>
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <xQueueGenericSend+0x44>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <xQueueGenericSend+0x46>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xQueueGenericSend+0x60>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d103      	bne.n	8005c96 <xQueueGenericSend+0x6e>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <xQueueGenericSend+0x72>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <xQueueGenericSend+0x74>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	623b      	str	r3, [r7, #32]
}
 8005cb2:	bf00      	nop
 8005cb4:	e7fe      	b.n	8005cb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cb6:	f001 f9bd 	bl	8007034 <xTaskGetSchedulerState>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <xQueueGenericSend+0x9e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <xQueueGenericSend+0xa2>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueGenericSend+0xa4>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	61fb      	str	r3, [r7, #28]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce6:	f001 fefd 	bl	8007ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d302      	bcc.n	8005cfc <xQueueGenericSend+0xd4>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d129      	bne.n	8005d50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d02:	f000 fa0b 	bl	800611c <prvCopyDataToQueue>
 8005d06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d010      	beq.n	8005d32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	3324      	adds	r3, #36	; 0x24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ffcf 	bl	8006cb8 <xTaskRemoveFromEventList>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d20:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <xQueueGenericSend+0x1f8>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	e00a      	b.n	8005d48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d38:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <xQueueGenericSend+0x1f8>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d48:	f001 fefc 	bl	8007b44 <vPortExitCritical>
				return pdPASS;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e063      	b.n	8005e18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d56:	f001 fef5 	bl	8007b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e05c      	b.n	8005e18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d64:	f107 0314 	add.w	r3, r7, #20
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f809 	bl	8006d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d72:	f001 fee7 	bl	8007b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d76:	f000 fd7b 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d7a:	f001 feb3 	bl	8007ae4 <vPortEnterCritical>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8a:	d103      	bne.n	8005d94 <xQueueGenericSend+0x16c>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da0:	d103      	bne.n	8005daa <xQueueGenericSend+0x182>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005daa:	f001 fecb 	bl	8007b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dae:	1d3a      	adds	r2, r7, #4
 8005db0:	f107 0314 	add.w	r3, r7, #20
 8005db4:	4611      	mov	r1, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fff8 	bl	8006dac <xTaskCheckForTimeOut>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d124      	bne.n	8005e0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc4:	f000 faa2 	bl	800630c <prvIsQueueFull>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d018      	beq.n	8005e00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 ff1e 	bl	8006c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dde:	f000 fa2d 	bl	800623c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005de2:	f000 fd53 	bl	800688c <xTaskResumeAll>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f47f af7c 	bne.w	8005ce6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <xQueueGenericSend+0x1f8>)
 8005df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df4:	601a      	str	r2, [r3, #0]
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	e772      	b.n	8005ce6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e02:	f000 fa1b 	bl	800623c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e06:	f000 fd41 	bl	800688c <xTaskResumeAll>
 8005e0a:	e76c      	b.n	8005ce6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0e:	f000 fa15 	bl	800623c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e12:	f000 fd3b 	bl	800688c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3738      	adds	r7, #56	; 0x38
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b090      	sub	sp, #64	; 0x40
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <xQueueGenericSendFromISR+0x3c>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <xQueueGenericSendFromISR+0x40>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <xQueueGenericSendFromISR+0x42>
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10a      	bne.n	8005e80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6e:	f383 8811 	msr	BASEPRI, r3
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e7c:	bf00      	nop
 8005e7e:	e7fe      	b.n	8005e7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d103      	bne.n	8005e8e <xQueueGenericSendFromISR+0x6a>
 8005e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <xQueueGenericSendFromISR+0x6e>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueGenericSendFromISR+0x70>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eae:	f001 fefb 	bl	8007ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eb2:	f3ef 8211 	mrs	r2, BASEPRI
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	61fa      	str	r2, [r7, #28]
 8005ec8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <xQueueGenericSendFromISR+0xbc>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d12f      	bne.n	8005f40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ef6:	f000 f911 	bl	800611c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005efa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f02:	d112      	bne.n	8005f2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 fed1 	bl	8006cb8 <xTaskRemoveFromEventList>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e007      	b.n	8005f3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	b25a      	sxtb	r2, r3
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f3e:	e001      	b.n	8005f44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3740      	adds	r7, #64	; 0x40
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	; 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <xQueueReceive+0x30>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	623b      	str	r3, [r7, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d103      	bne.n	8005f9a <xQueueReceive+0x3e>
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueReceive+0x42>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueReceive+0x44>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueReceive+0x5e>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fba:	f001 f83b 	bl	8007034 <xTaskGetSchedulerState>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xQueueReceive+0x6e>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <xQueueReceive+0x72>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <xQueueReceive+0x74>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <xQueueReceive+0x8e>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61bb      	str	r3, [r7, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fea:	f001 fd7b 	bl	8007ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01f      	beq.n	800603a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f000 f8f7 	bl	80061f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00f      	beq.n	8006032 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	3310      	adds	r3, #16
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fe4e 	bl	8006cb8 <xTaskRemoveFromEventList>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006022:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <xQueueReceive+0x1bc>)
 8006024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006032:	f001 fd87 	bl	8007b44 <vPortExitCritical>
				return pdPASS;
 8006036:	2301      	movs	r3, #1
 8006038:	e069      	b.n	800610e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d103      	bne.n	8006048 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006040:	f001 fd80 	bl	8007b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006044:	2300      	movs	r3, #0
 8006046:	e062      	b.n	800610e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800604e:	f107 0310 	add.w	r3, r7, #16
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fe94 	bl	8006d80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006058:	2301      	movs	r3, #1
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800605c:	f001 fd72 	bl	8007b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006060:	f000 fc06 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006064:	f001 fd3e 	bl	8007ae4 <vPortEnterCritical>
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800606e:	b25b      	sxtb	r3, r3
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006074:	d103      	bne.n	800607e <xQueueReceive+0x122>
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006084:	b25b      	sxtb	r3, r3
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608a:	d103      	bne.n	8006094 <xQueueReceive+0x138>
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006094:	f001 fd56 	bl	8007b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006098:	1d3a      	adds	r2, r7, #4
 800609a:	f107 0310 	add.w	r3, r7, #16
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fe83 	bl	8006dac <xTaskCheckForTimeOut>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d123      	bne.n	80060f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ae:	f000 f917 	bl	80062e0 <prvIsQueueEmpty>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d017      	beq.n	80060e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	3324      	adds	r3, #36	; 0x24
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4611      	mov	r1, r2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 fda9 	bl	8006c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c8:	f000 f8b8 	bl	800623c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060cc:	f000 fbde 	bl	800688c <xTaskResumeAll>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d189      	bne.n	8005fea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <xQueueReceive+0x1bc>)
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	e780      	b.n	8005fea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060ea:	f000 f8a7 	bl	800623c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ee:	f000 fbcd 	bl	800688c <xTaskResumeAll>
 80060f2:	e77a      	b.n	8005fea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f6:	f000 f8a1 	bl	800623c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060fa:	f000 fbc7 	bl	800688c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006100:	f000 f8ee 	bl	80062e0 <prvIsQueueEmpty>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f43f af6f 	beq.w	8005fea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800610e:	4618      	mov	r0, r3
 8006110:	3730      	adds	r7, #48	; 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10d      	bne.n	8006156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d14d      	bne.n	80061de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 ff92 	bl	8007070 <xTaskPriorityDisinherit>
 800614c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	e043      	b.n	80061de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d119      	bne.n	8006190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6858      	ldr	r0, [r3, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	461a      	mov	r2, r3
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	f001 ffec 	bl	8008144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	441a      	add	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	d32b      	bcc.n	80061de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	605a      	str	r2, [r3, #4]
 800618e:	e026      	b.n	80061de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	68d8      	ldr	r0, [r3, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	461a      	mov	r2, r3
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	f001 ffd2 	bl	8008144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	425b      	negs	r3, r3
 80061aa:	441a      	add	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d207      	bcs.n	80061cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	425b      	negs	r3, r3
 80061c6:	441a      	add	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d105      	bne.n	80061de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	3b01      	subs	r3, #1
 80061dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d018      	beq.n	8006234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	441a      	add	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	d303      	bcc.n	8006224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68d9      	ldr	r1, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	461a      	mov	r2, r3
 800622e:	6838      	ldr	r0, [r7, #0]
 8006230:	f001 ff88 	bl	8008144 <memcpy>
	}
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006244:	f001 fc4e 	bl	8007ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800624e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006250:	e011      	b.n	8006276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d012      	beq.n	8006280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3324      	adds	r3, #36	; 0x24
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fd2a 	bl	8006cb8 <xTaskRemoveFromEventList>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800626a:	f000 fe01 	bl	8006e70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	3b01      	subs	r3, #1
 8006272:	b2db      	uxtb	r3, r3
 8006274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dce9      	bgt.n	8006252 <prvUnlockQueue+0x16>
 800627e:	e000      	b.n	8006282 <prvUnlockQueue+0x46>
					break;
 8006280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800628a:	f001 fc5b 	bl	8007b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800628e:	f001 fc29 	bl	8007ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800629a:	e011      	b.n	80062c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d012      	beq.n	80062ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3310      	adds	r3, #16
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fd05 	bl	8006cb8 <xTaskRemoveFromEventList>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062b4:	f000 fddc 	bl	8006e70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062b8:	7bbb      	ldrb	r3, [r7, #14]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dce9      	bgt.n	800629c <prvUnlockQueue+0x60>
 80062c8:	e000      	b.n	80062cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	22ff      	movs	r2, #255	; 0xff
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062d4:	f001 fc36 	bl	8007b44 <vPortExitCritical>
}
 80062d8:	bf00      	nop
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062e8:	f001 fbfc 	bl	8007ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e001      	b.n	80062fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062fe:	f001 fc21 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006314:	f001 fbe6 	bl	8007ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006320:	429a      	cmp	r2, r3
 8006322:	d102      	bne.n	800632a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006324:	2301      	movs	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e001      	b.n	800632e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800632e:	f001 fc09 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 8006332:	68fb      	ldr	r3, [r7, #12]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006346:	2300      	movs	r3, #0
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e014      	b.n	8006376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800634c:	4a0f      	ldr	r2, [pc, #60]	; (800638c <vQueueAddToRegistry+0x50>)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006358:	490c      	ldr	r1, [pc, #48]	; (800638c <vQueueAddToRegistry+0x50>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006362:	4a0a      	ldr	r2, [pc, #40]	; (800638c <vQueueAddToRegistry+0x50>)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800636e:	e006      	b.n	800637e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3301      	adds	r3, #1
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b07      	cmp	r3, #7
 800637a:	d9e7      	bls.n	800634c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20001b88 	.word	0x20001b88

08006390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063a0:	f001 fba0 	bl	8007ae4 <vPortEnterCritical>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063aa:	b25b      	sxtb	r3, r3
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b0:	d103      	bne.n	80063ba <vQueueWaitForMessageRestricted+0x2a>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c0:	b25b      	sxtb	r3, r3
 80063c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c6:	d103      	bne.n	80063d0 <vQueueWaitForMessageRestricted+0x40>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d0:	f001 fbb8 	bl	8007b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3324      	adds	r3, #36	; 0x24
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fc3b 	bl	8006c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063ea:	6978      	ldr	r0, [r7, #20]
 80063ec:	f7ff ff26 	bl	800623c <prvUnlockQueue>
	}
 80063f0:	bf00      	nop
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08e      	sub	sp, #56	; 0x38
 80063fc:	af04      	add	r7, sp, #16
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	623b      	str	r3, [r7, #32]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xTaskCreateStatic+0x46>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61fb      	str	r3, [r7, #28]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800643e:	235c      	movs	r3, #92	; 0x5c
 8006440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b5c      	cmp	r3, #92	; 0x5c
 8006446:	d00a      	beq.n	800645e <xTaskCreateStatic+0x66>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61bb      	str	r3, [r7, #24]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800645e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01e      	beq.n	80064a4 <xTaskCreateStatic+0xac>
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01b      	beq.n	80064a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006474:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	2202      	movs	r2, #2
 800647a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800647e:	2300      	movs	r3, #0
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	f107 0314 	add.w	r3, r7, #20
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f850 	bl	800653c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800649c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800649e:	f000 f8dd 	bl	800665c <prvAddNewTaskToReadyList>
 80064a2:	e001      	b.n	80064a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064a8:	697b      	ldr	r3, [r7, #20]
	}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b08c      	sub	sp, #48	; 0x30
 80064b6:	af04      	add	r7, sp, #16
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	603b      	str	r3, [r7, #0]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fc2e 	bl	8007d28 <pvPortMalloc>
 80064cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064d4:	205c      	movs	r0, #92	; 0x5c
 80064d6:	f001 fc27 	bl	8007d28 <pvPortMalloc>
 80064da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30
 80064e8:	e005      	b.n	80064f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f001 fce8 	bl	8007ec0 <vPortFree>
 80064f0:	e001      	b.n	80064f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	2300      	movs	r3, #0
 8006508:	9303      	str	r3, [sp, #12]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	9302      	str	r3, [sp, #8]
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f80e 	bl	800653c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006520:	69f8      	ldr	r0, [r7, #28]
 8006522:	f000 f89b 	bl	800665c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006526:	2301      	movs	r3, #1
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e002      	b.n	8006532 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800652c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006530:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006532:	69bb      	ldr	r3, [r7, #24]
	}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	461a      	mov	r2, r3
 8006554:	21a5      	movs	r1, #165	; 0xa5
 8006556:	f001 fe03 	bl	8008160 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006564:	3b01      	subs	r3, #1
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	f023 0307 	bic.w	r3, r3, #7
 8006572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <prvInitialiseNewTask+0x58>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	617b      	str	r3, [r7, #20]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d01f      	beq.n	80065da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800659a:	2300      	movs	r3, #0
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	e012      	b.n	80065c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	7819      	ldrb	r1, [r3, #0]
 80065a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	3334      	adds	r3, #52	; 0x34
 80065b0:	460a      	mov	r2, r1
 80065b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	3301      	adds	r3, #1
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2b0f      	cmp	r3, #15
 80065ca:	d9e9      	bls.n	80065a0 <prvInitialiseNewTask+0x64>
 80065cc:	e000      	b.n	80065d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80065ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d8:	e003      	b.n	80065e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b37      	cmp	r3, #55	; 0x37
 80065e6:	d901      	bls.n	80065ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065e8:	2337      	movs	r3, #55	; 0x37
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2200      	movs	r2, #0
 80065fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	3304      	adds	r3, #4
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff f978 	bl	80058f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	3318      	adds	r3, #24
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff f973 	bl	80058f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006616:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2200      	movs	r2, #0
 800662c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68f9      	ldr	r1, [r7, #12]
 800663a:	69b8      	ldr	r0, [r7, #24]
 800663c:	f001 f928 	bl	8007890 <pxPortInitialiseStack>
 8006640:	4602      	mov	r2, r0
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006652:	bf00      	nop
 8006654:	3720      	adds	r7, #32
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006664:	f001 fa3e 	bl	8007ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006668:	4b2d      	ldr	r3, [pc, #180]	; (8006720 <prvAddNewTaskToReadyList+0xc4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	4a2c      	ldr	r2, [pc, #176]	; (8006720 <prvAddNewTaskToReadyList+0xc4>)
 8006670:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006672:	4b2c      	ldr	r3, [pc, #176]	; (8006724 <prvAddNewTaskToReadyList+0xc8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <prvAddNewTaskToReadyList+0xc8>)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006680:	4b27      	ldr	r3, [pc, #156]	; (8006720 <prvAddNewTaskToReadyList+0xc4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d110      	bne.n	80066aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006688:	f000 fc16 	bl	8006eb8 <prvInitialiseTaskLists>
 800668c:	e00d      	b.n	80066aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800668e:	4b26      	ldr	r3, [pc, #152]	; (8006728 <prvAddNewTaskToReadyList+0xcc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006696:	4b23      	ldr	r3, [pc, #140]	; (8006724 <prvAddNewTaskToReadyList+0xc8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d802      	bhi.n	80066aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <prvAddNewTaskToReadyList+0xc8>)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066aa:	4b20      	ldr	r3, [pc, #128]	; (800672c <prvAddNewTaskToReadyList+0xd0>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	4a1e      	ldr	r2, [pc, #120]	; (800672c <prvAddNewTaskToReadyList+0xd0>)
 80066b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <prvAddNewTaskToReadyList+0xd0>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <prvAddNewTaskToReadyList+0xd4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d903      	bls.n	80066d0 <prvAddNewTaskToReadyList+0x74>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4a18      	ldr	r2, [pc, #96]	; (8006730 <prvAddNewTaskToReadyList+0xd4>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <prvAddNewTaskToReadyList+0xd8>)
 80066de:	441a      	add	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f7ff f913 	bl	8005912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066ec:	f001 fa2a 	bl	8007b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066f0:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <prvAddNewTaskToReadyList+0xcc>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066f8:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <prvAddNewTaskToReadyList+0xc8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	429a      	cmp	r2, r3
 8006704:	d207      	bcs.n	8006716 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006706:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvAddNewTaskToReadyList+0xdc>)
 8006708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000c84 	.word	0x20000c84
 8006724:	200007b0 	.word	0x200007b0
 8006728:	20000c90 	.word	0x20000c90
 800672c:	20000ca0 	.word	0x20000ca0
 8006730:	20000c8c 	.word	0x20000c8c
 8006734:	200007b4 	.word	0x200007b4
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <vTaskDelay+0x60>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <vTaskDelay+0x30>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60bb      	str	r3, [r7, #8]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800676c:	f000 f880 	bl	8006870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fcea 	bl	800714c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006778:	f000 f888 	bl	800688c <xTaskResumeAll>
 800677c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d107      	bne.n	8006794 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006784:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <vTaskDelay+0x64>)
 8006786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000cac 	.word	0x20000cac
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067b2:	463a      	mov	r2, r7
 80067b4:	1d39      	adds	r1, r7, #4
 80067b6:	f107 0308 	add.w	r3, r7, #8
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff f848 	bl	8005850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	9202      	str	r2, [sp, #8]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	2300      	movs	r3, #0
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	2300      	movs	r3, #0
 80067d0:	460a      	mov	r2, r1
 80067d2:	4921      	ldr	r1, [pc, #132]	; (8006858 <vTaskStartScheduler+0xb4>)
 80067d4:	4821      	ldr	r0, [pc, #132]	; (800685c <vTaskStartScheduler+0xb8>)
 80067d6:	f7ff fe0f 	bl	80063f8 <xTaskCreateStatic>
 80067da:	4603      	mov	r3, r0
 80067dc:	4a20      	ldr	r2, [pc, #128]	; (8006860 <vTaskStartScheduler+0xbc>)
 80067de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067e0:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <vTaskStartScheduler+0xbc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e001      	b.n	80067f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d102      	bne.n	80067fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067f8:	f000 fcfc 	bl	80071f4 <xTimerCreateTimerTask>
 80067fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d116      	bne.n	8006832 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	613b      	str	r3, [r7, #16]
}
 8006816:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006818:	4b12      	ldr	r3, [pc, #72]	; (8006864 <vTaskStartScheduler+0xc0>)
 800681a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800681e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006820:	4b11      	ldr	r3, [pc, #68]	; (8006868 <vTaskStartScheduler+0xc4>)
 8006822:	2201      	movs	r2, #1
 8006824:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006826:	4b11      	ldr	r3, [pc, #68]	; (800686c <vTaskStartScheduler+0xc8>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800682c:	f001 f8b8 	bl	80079a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006830:	e00e      	b.n	8006850 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006838:	d10a      	bne.n	8006850 <vTaskStartScheduler+0xac>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <vTaskStartScheduler+0xaa>
}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08008194 	.word	0x08008194
 800685c:	08006e89 	.word	0x08006e89
 8006860:	20000ca8 	.word	0x20000ca8
 8006864:	20000ca4 	.word	0x20000ca4
 8006868:	20000c90 	.word	0x20000c90
 800686c:	20000c88 	.word	0x20000c88

08006870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006874:	4b04      	ldr	r3, [pc, #16]	; (8006888 <vTaskSuspendAll+0x18>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a03      	ldr	r2, [pc, #12]	; (8006888 <vTaskSuspendAll+0x18>)
 800687c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800687e:	bf00      	nop
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20000cac 	.word	0x20000cac

0800688c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800689a:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <xTaskResumeAll+0x118>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	603b      	str	r3, [r7, #0]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068b8:	f001 f914 	bl	8007ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068bc:	4b39      	ldr	r3, [pc, #228]	; (80069a4 <xTaskResumeAll+0x118>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4a38      	ldr	r2, [pc, #224]	; (80069a4 <xTaskResumeAll+0x118>)
 80068c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c6:	4b37      	ldr	r3, [pc, #220]	; (80069a4 <xTaskResumeAll+0x118>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d162      	bne.n	8006994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068ce:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <xTaskResumeAll+0x11c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d05e      	beq.n	8006994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d6:	e02f      	b.n	8006938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d8:	4b34      	ldr	r3, [pc, #208]	; (80069ac <xTaskResumeAll+0x120>)
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3318      	adds	r3, #24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff f871 	bl	80059cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff f86c 	bl	80059cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4b2d      	ldr	r3, [pc, #180]	; (80069b0 <xTaskResumeAll+0x124>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d903      	bls.n	8006908 <xTaskResumeAll+0x7c>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	4a2a      	ldr	r2, [pc, #168]	; (80069b0 <xTaskResumeAll+0x124>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	4613      	mov	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <xTaskResumeAll+0x128>)
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3304      	adds	r3, #4
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7fe fff7 	bl	8005912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006928:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <xTaskResumeAll+0x12c>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006932:	4b22      	ldr	r3, [pc, #136]	; (80069bc <xTaskResumeAll+0x130>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006938:	4b1c      	ldr	r3, [pc, #112]	; (80069ac <xTaskResumeAll+0x120>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1cb      	bne.n	80068d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006946:	f000 fb55 	bl	8006ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <xTaskResumeAll+0x134>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006956:	f000 f847 	bl	80069e8 <xTaskIncrementTick>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006960:	4b16      	ldr	r3, [pc, #88]	; (80069bc <xTaskResumeAll+0x130>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f1      	bne.n	8006956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <xTaskResumeAll+0x134>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <xTaskResumeAll+0x130>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006980:	2301      	movs	r3, #1
 8006982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006984:	4b0f      	ldr	r3, [pc, #60]	; (80069c4 <xTaskResumeAll+0x138>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006994:	f001 f8d6 	bl	8007b44 <vPortExitCritical>

	return xAlreadyYielded;
 8006998:	68bb      	ldr	r3, [r7, #8]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000cac 	.word	0x20000cac
 80069a8:	20000c84 	.word	0x20000c84
 80069ac:	20000c44 	.word	0x20000c44
 80069b0:	20000c8c 	.word	0x20000c8c
 80069b4:	200007b4 	.word	0x200007b4
 80069b8:	200007b0 	.word	0x200007b0
 80069bc:	20000c98 	.word	0x20000c98
 80069c0:	20000c94 	.word	0x20000c94
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <xTaskGetTickCount+0x1c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20000c88 	.word	0x20000c88

080069e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b4f      	ldr	r3, [pc, #316]	; (8006b30 <xTaskIncrementTick+0x148>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 808f 	bne.w	8006b1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069fc:	4b4d      	ldr	r3, [pc, #308]	; (8006b34 <xTaskIncrementTick+0x14c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3301      	adds	r3, #1
 8006a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a04:	4a4b      	ldr	r2, [pc, #300]	; (8006b34 <xTaskIncrementTick+0x14c>)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d120      	bne.n	8006a52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a10:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	603b      	str	r3, [r7, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskIncrementTick+0x46>
 8006a30:	4b41      	ldr	r3, [pc, #260]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	4b41      	ldr	r3, [pc, #260]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a3f      	ldr	r2, [pc, #252]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	4a3f      	ldr	r2, [pc, #252]	; (8006b3c <xTaskIncrementTick+0x154>)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	4b3e      	ldr	r3, [pc, #248]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	4a3d      	ldr	r2, [pc, #244]	; (8006b40 <xTaskIncrementTick+0x158>)
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	f000 fad1 	bl	8006ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a52:	4b3c      	ldr	r3, [pc, #240]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d349      	bcc.n	8006af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5c:	4b36      	ldr	r3, [pc, #216]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a6c:	601a      	str	r2, [r3, #0]
					break;
 8006a6e:	e03f      	b.n	8006af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a70:	4b31      	ldr	r3, [pc, #196]	; (8006b38 <xTaskIncrementTick+0x150>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d203      	bcs.n	8006a90 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a88:	4a2e      	ldr	r2, [pc, #184]	; (8006b44 <xTaskIncrementTick+0x15c>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a8e:	e02f      	b.n	8006af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe ff99 	bl	80059cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ff90 	bl	80059cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d903      	bls.n	8006ac0 <xTaskIncrementTick+0xd8>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <xTaskIncrementTick+0x160>)
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4a1f      	ldr	r2, [pc, #124]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006ace:	441a      	add	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f7fe ff1b 	bl	8005912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <xTaskIncrementTick+0x168>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3b8      	bcc.n	8006a5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006aea:	2301      	movs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aee:	e7b5      	b.n	8006a5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006af0:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <xTaskIncrementTick+0x168>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	4915      	ldr	r1, [pc, #84]	; (8006b4c <xTaskIncrementTick+0x164>)
 8006af8:	4613      	mov	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	440b      	add	r3, r1
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d901      	bls.n	8006b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b0c:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <xTaskIncrementTick+0x16c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e004      	b.n	8006b24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b1a:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <xTaskIncrementTick+0x170>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <xTaskIncrementTick+0x170>)
 8006b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000cac 	.word	0x20000cac
 8006b34:	20000c88 	.word	0x20000c88
 8006b38:	20000c3c 	.word	0x20000c3c
 8006b3c:	20000c40 	.word	0x20000c40
 8006b40:	20000c9c 	.word	0x20000c9c
 8006b44:	20000ca4 	.word	0x20000ca4
 8006b48:	20000c8c 	.word	0x20000c8c
 8006b4c:	200007b4 	.word	0x200007b4
 8006b50:	200007b0 	.word	0x200007b0
 8006b54:	20000c98 	.word	0x20000c98
 8006b58:	20000c94 	.word	0x20000c94

08006b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b62:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <vTaskSwitchContext+0xa8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b6a:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <vTaskSwitchContext+0xac>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b70:	e041      	b.n	8006bf6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b72:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <vTaskSwitchContext+0xac>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <vTaskSwitchContext+0xb0>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	e010      	b.n	8006ba2 <vTaskSwitchContext+0x46>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <vTaskSwitchContext+0x40>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	607b      	str	r3, [r7, #4]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <vTaskSwitchContext+0x3e>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	491b      	ldr	r1, [pc, #108]	; (8006c10 <vTaskSwitchContext+0xb4>)
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0e4      	beq.n	8006b80 <vTaskSwitchContext+0x24>
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4a13      	ldr	r2, [pc, #76]	; (8006c10 <vTaskSwitchContext+0xb4>)
 8006bc2:	4413      	add	r3, r2
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	605a      	str	r2, [r3, #4]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d104      	bne.n	8006be6 <vTaskSwitchContext+0x8a>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <vTaskSwitchContext+0xb8>)
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4a06      	ldr	r2, [pc, #24]	; (8006c0c <vTaskSwitchContext+0xb0>)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6013      	str	r3, [r2, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20000cac 	.word	0x20000cac
 8006c08:	20000c98 	.word	0x20000c98
 8006c0c:	20000c8c 	.word	0x20000c8c
 8006c10:	200007b4 	.word	0x200007b4
 8006c14:	200007b0 	.word	0x200007b0

08006c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	60fb      	str	r3, [r7, #12]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c3e:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <vTaskPlaceOnEventList+0x44>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3318      	adds	r3, #24
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe fe87 	bl	800595a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	6838      	ldr	r0, [r7, #0]
 8006c50:	f000 fa7c 	bl	800714c <prvAddCurrentTaskToDelayedList>
}
 8006c54:	bf00      	nop
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	200007b0 	.word	0x200007b0

08006c60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	4619      	mov	r1, r3
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7fe fe3e 	bl	8005912 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	68b8      	ldr	r0, [r7, #8]
 8006ca6:	f000 fa51 	bl	800714c <prvAddCurrentTaskToDelayedList>
	}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200007b0 	.word	0x200007b0

08006cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60fb      	str	r3, [r7, #12]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	3318      	adds	r3, #24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fe6f 	bl	80059cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cee:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <xTaskRemoveFromEventList+0xb0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d11d      	bne.n	8006d32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fe fe66 	bl	80059cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4b19      	ldr	r3, [pc, #100]	; (8006d6c <xTaskRemoveFromEventList+0xb4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d903      	bls.n	8006d14 <xTaskRemoveFromEventList+0x5c>
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <xTaskRemoveFromEventList+0xb4>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <xTaskRemoveFromEventList+0xb8>)
 8006d22:	441a      	add	r2, r3
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fdf1 	bl	8005912 <vListInsertEnd>
 8006d30:	e005      	b.n	8006d3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	3318      	adds	r3, #24
 8006d36:	4619      	mov	r1, r3
 8006d38:	480e      	ldr	r0, [pc, #56]	; (8006d74 <xTaskRemoveFromEventList+0xbc>)
 8006d3a:	f7fe fdea 	bl	8005912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <xTaskRemoveFromEventList+0xc0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d905      	bls.n	8006d58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <xTaskRemoveFromEventList+0xc4>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e001      	b.n	8006d5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d5c:	697b      	ldr	r3, [r7, #20]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000cac 	.word	0x20000cac
 8006d6c:	20000c8c 	.word	0x20000c8c
 8006d70:	200007b4 	.word	0x200007b4
 8006d74:	20000c44 	.word	0x20000c44
 8006d78:	200007b0 	.word	0x200007b0
 8006d7c:	20000c98 	.word	0x20000c98

08006d80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <vTaskInternalSetTimeOutState+0x24>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <vTaskInternalSetTimeOutState+0x28>)
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	605a      	str	r2, [r3, #4]
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20000c9c 	.word	0x20000c9c
 8006da8:	20000c88 	.word	0x20000c88

08006dac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	613b      	str	r3, [r7, #16]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	60fb      	str	r3, [r7, #12]
}
 8006dea:	bf00      	nop
 8006dec:	e7fe      	b.n	8006dec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006dee:	f000 fe79 	bl	8007ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006df2:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <xTaskCheckForTimeOut+0xbc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0a:	d102      	bne.n	8006e12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e023      	b.n	8006e5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <xTaskCheckForTimeOut+0xc0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d007      	beq.n	8006e2e <xTaskCheckForTimeOut+0x82>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d302      	bcc.n	8006e2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	e015      	b.n	8006e5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d20b      	bcs.n	8006e50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	1ad2      	subs	r2, r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff9b 	bl	8006d80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	e004      	b.n	8006e5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e5a:	f000 fe73 	bl	8007b44 <vPortExitCritical>

	return xReturn;
 8006e5e:	69fb      	ldr	r3, [r7, #28]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000c88 	.word	0x20000c88
 8006e6c:	20000c9c 	.word	0x20000c9c

08006e70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e74:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <vTaskMissedYield+0x14>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	20000c98 	.word	0x20000c98

08006e88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e90:	f000 f852 	bl	8006f38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <prvIdleTask+0x28>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d9f9      	bls.n	8006e90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <prvIdleTask+0x2c>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006eac:	e7f0      	b.n	8006e90 <prvIdleTask+0x8>
 8006eae:	bf00      	nop
 8006eb0:	200007b4 	.word	0x200007b4
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	607b      	str	r3, [r7, #4]
 8006ec2:	e00c      	b.n	8006ede <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4a12      	ldr	r2, [pc, #72]	; (8006f18 <prvInitialiseTaskLists+0x60>)
 8006ed0:	4413      	add	r3, r2
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fcf0 	bl	80058b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3301      	adds	r3, #1
 8006edc:	607b      	str	r3, [r7, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b37      	cmp	r3, #55	; 0x37
 8006ee2:	d9ef      	bls.n	8006ec4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ee4:	480d      	ldr	r0, [pc, #52]	; (8006f1c <prvInitialiseTaskLists+0x64>)
 8006ee6:	f7fe fce7 	bl	80058b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006eea:	480d      	ldr	r0, [pc, #52]	; (8006f20 <prvInitialiseTaskLists+0x68>)
 8006eec:	f7fe fce4 	bl	80058b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ef0:	480c      	ldr	r0, [pc, #48]	; (8006f24 <prvInitialiseTaskLists+0x6c>)
 8006ef2:	f7fe fce1 	bl	80058b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ef6:	480c      	ldr	r0, [pc, #48]	; (8006f28 <prvInitialiseTaskLists+0x70>)
 8006ef8:	f7fe fcde 	bl	80058b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006efc:	480b      	ldr	r0, [pc, #44]	; (8006f2c <prvInitialiseTaskLists+0x74>)
 8006efe:	f7fe fcdb 	bl	80058b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <prvInitialiseTaskLists+0x78>)
 8006f04:	4a05      	ldr	r2, [pc, #20]	; (8006f1c <prvInitialiseTaskLists+0x64>)
 8006f06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <prvInitialiseTaskLists+0x7c>)
 8006f0a:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <prvInitialiseTaskLists+0x68>)
 8006f0c:	601a      	str	r2, [r3, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	200007b4 	.word	0x200007b4
 8006f1c:	20000c14 	.word	0x20000c14
 8006f20:	20000c28 	.word	0x20000c28
 8006f24:	20000c44 	.word	0x20000c44
 8006f28:	20000c58 	.word	0x20000c58
 8006f2c:	20000c70 	.word	0x20000c70
 8006f30:	20000c3c 	.word	0x20000c3c
 8006f34:	20000c40 	.word	0x20000c40

08006f38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f3e:	e019      	b.n	8006f74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f40:	f000 fdd0 	bl	8007ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <prvCheckTasksWaitingTermination+0x50>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fd3b 	bl	80059cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f56:	4b0d      	ldr	r3, [pc, #52]	; (8006f8c <prvCheckTasksWaitingTermination+0x54>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4a0b      	ldr	r2, [pc, #44]	; (8006f8c <prvCheckTasksWaitingTermination+0x54>)
 8006f5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f60:	4b0b      	ldr	r3, [pc, #44]	; (8006f90 <prvCheckTasksWaitingTermination+0x58>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	4a0a      	ldr	r2, [pc, #40]	; (8006f90 <prvCheckTasksWaitingTermination+0x58>)
 8006f68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f6a:	f000 fdeb 	bl	8007b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f810 	bl	8006f94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f74:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <prvCheckTasksWaitingTermination+0x58>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e1      	bne.n	8006f40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000c58 	.word	0x20000c58
 8006f8c:	20000c84 	.word	0x20000c84
 8006f90:	20000c6c 	.word	0x20000c6c

08006f94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d108      	bne.n	8006fb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 ff88 	bl	8007ec0 <vPortFree>
				vPortFree( pxTCB );
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 ff85 	bl	8007ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fb6:	e018      	b.n	8006fea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d103      	bne.n	8006fca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 ff7c 	bl	8007ec0 <vPortFree>
	}
 8006fc8:	e00f      	b.n	8006fea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d00a      	beq.n	8006fea <prvDeleteTCB+0x56>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	60fb      	str	r3, [r7, #12]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <prvDeleteTCB+0x54>
	}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	; (800702c <prvResetNextTaskUnblockTime+0x38>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007004:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <prvResetNextTaskUnblockTime+0x3c>)
 8007006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800700a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800700c:	e008      	b.n	8007020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b07      	ldr	r3, [pc, #28]	; (800702c <prvResetNextTaskUnblockTime+0x38>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a04      	ldr	r2, [pc, #16]	; (8007030 <prvResetNextTaskUnblockTime+0x3c>)
 800701e:	6013      	str	r3, [r2, #0]
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20000c3c 	.word	0x20000c3c
 8007030:	20000ca4 	.word	0x20000ca4

08007034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800703a:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <xTaskGetSchedulerState+0x34>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007042:	2301      	movs	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	e008      	b.n	800705a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <xTaskGetSchedulerState+0x38>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007050:	2302      	movs	r3, #2
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	e001      	b.n	800705a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007056:	2300      	movs	r3, #0
 8007058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800705a:	687b      	ldr	r3, [r7, #4]
	}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	20000c90 	.word	0x20000c90
 800706c:	20000cac 	.word	0x20000cac

08007070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d056      	beq.n	8007134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007086:	4b2e      	ldr	r3, [pc, #184]	; (8007140 <xTaskPriorityDisinherit+0xd0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d00a      	beq.n	80070a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60bb      	str	r3, [r7, #8]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	1e5a      	subs	r2, r3, #1
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d02c      	beq.n	8007134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d128      	bne.n	8007134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fc70 	bl	80059cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <xTaskPriorityDisinherit+0xd4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d903      	bls.n	8007114 <xTaskPriorityDisinherit+0xa4>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <xTaskPriorityDisinherit+0xd4>)
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4a09      	ldr	r2, [pc, #36]	; (8007148 <xTaskPriorityDisinherit+0xd8>)
 8007122:	441a      	add	r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fe fbf1 	bl	8005912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007134:	697b      	ldr	r3, [r7, #20]
	}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200007b0 	.word	0x200007b0
 8007144:	20000c8c 	.word	0x20000c8c
 8007148:	200007b4 	.word	0x200007b4

0800714c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007156:	4b21      	ldr	r3, [pc, #132]	; (80071dc <prvAddCurrentTaskToDelayedList+0x90>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3304      	adds	r3, #4
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fc32 	bl	80059cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716e:	d10a      	bne.n	8007186 <prvAddCurrentTaskToDelayedList+0x3a>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007176:	4b1a      	ldr	r3, [pc, #104]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4819      	ldr	r0, [pc, #100]	; (80071e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007180:	f7fe fbc7 	bl	8005912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007184:	e026      	b.n	80071d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800718e:	4b14      	ldr	r3, [pc, #80]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	429a      	cmp	r2, r3
 800719c:	d209      	bcs.n	80071b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fbd5 	bl	800595a <vListInsert>
}
 80071b0:	e010      	b.n	80071d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071b2:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7fe fbcb 	bl	800595a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d202      	bcs.n	80071d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071ce:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6013      	str	r3, [r2, #0]
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000c88 	.word	0x20000c88
 80071e0:	200007b0 	.word	0x200007b0
 80071e4:	20000c70 	.word	0x20000c70
 80071e8:	20000c40 	.word	0x20000c40
 80071ec:	20000c3c 	.word	0x20000c3c
 80071f0:	20000ca4 	.word	0x20000ca4

080071f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071fe:	f000 fb07 	bl	8007810 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007202:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xTimerCreateTimerTask+0x80>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d021      	beq.n	800724e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800720e:	2300      	movs	r3, #0
 8007210:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007212:	1d3a      	adds	r2, r7, #4
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fb31 	bl	8005884 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	9202      	str	r2, [sp, #8]
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	2302      	movs	r3, #2
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	2300      	movs	r3, #0
 8007232:	460a      	mov	r2, r1
 8007234:	4910      	ldr	r1, [pc, #64]	; (8007278 <xTimerCreateTimerTask+0x84>)
 8007236:	4811      	ldr	r0, [pc, #68]	; (800727c <xTimerCreateTimerTask+0x88>)
 8007238:	f7ff f8de 	bl	80063f8 <xTaskCreateStatic>
 800723c:	4603      	mov	r3, r0
 800723e:	4a10      	ldr	r2, [pc, #64]	; (8007280 <xTimerCreateTimerTask+0x8c>)
 8007240:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007242:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <xTimerCreateTimerTask+0x8c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	613b      	str	r3, [r7, #16]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800726a:	697b      	ldr	r3, [r7, #20]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20000ce0 	.word	0x20000ce0
 8007278:	0800819c 	.word	0x0800819c
 800727c:	080073b9 	.word	0x080073b9
 8007280:	20000ce4 	.word	0x20000ce4

08007284 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
 8007290:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007292:	2300      	movs	r3, #0
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	623b      	str	r3, [r7, #32]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072b2:	4b1a      	ldr	r3, [pc, #104]	; (800731c <xTimerGenericCommand+0x98>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d02a      	beq.n	8007310 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	dc18      	bgt.n	80072fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80072cc:	f7ff feb2 	bl	8007034 <xTaskGetSchedulerState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d109      	bne.n	80072ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80072d6:	4b11      	ldr	r3, [pc, #68]	; (800731c <xTimerGenericCommand+0x98>)
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	f107 0110 	add.w	r1, r7, #16
 80072de:	2300      	movs	r3, #0
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	f7fe fca1 	bl	8005c28 <xQueueGenericSend>
 80072e6:	6278      	str	r0, [r7, #36]	; 0x24
 80072e8:	e012      	b.n	8007310 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <xTimerGenericCommand+0x98>)
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	f107 0110 	add.w	r1, r7, #16
 80072f2:	2300      	movs	r3, #0
 80072f4:	2200      	movs	r2, #0
 80072f6:	f7fe fc97 	bl	8005c28 <xQueueGenericSend>
 80072fa:	6278      	str	r0, [r7, #36]	; 0x24
 80072fc:	e008      	b.n	8007310 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80072fe:	4b07      	ldr	r3, [pc, #28]	; (800731c <xTimerGenericCommand+0x98>)
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	f107 0110 	add.w	r1, r7, #16
 8007306:	2300      	movs	r3, #0
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	f7fe fd8b 	bl	8005e24 <xQueueGenericSendFromISR>
 800730e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007312:	4618      	mov	r0, r3
 8007314:	3728      	adds	r7, #40	; 0x28
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000ce0 	.word	0x20000ce0

08007320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af02      	add	r7, sp, #8
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800732a:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <prvProcessExpiredTimer+0x94>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3304      	adds	r3, #4
 8007338:	4618      	mov	r0, r3
 800733a:	f7fe fb47 	bl	80059cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d022      	beq.n	8007392 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	18d1      	adds	r1, r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	6978      	ldr	r0, [r7, #20]
 800735a:	f000 f8d1 	bl	8007500 <prvInsertTimerInActiveList>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01f      	beq.n	80073a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007364:	2300      	movs	r3, #0
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2300      	movs	r3, #0
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	2100      	movs	r1, #0
 800736e:	6978      	ldr	r0, [r7, #20]
 8007370:	f7ff ff88 	bl	8007284 <xTimerGenericCommand>
 8007374:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d113      	bne.n	80073a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	60fb      	str	r3, [r7, #12]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	6978      	ldr	r0, [r7, #20]
 80073aa:	4798      	blx	r3
}
 80073ac:	bf00      	nop
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000cd8 	.word	0x20000cd8

080073b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073c0:	f107 0308 	add.w	r3, r7, #8
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f857 	bl	8007478 <prvGetNextExpireTime>
 80073ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4619      	mov	r1, r3
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f803 	bl	80073dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80073d6:	f000 f8d5 	bl	8007584 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80073da:	e7f1      	b.n	80073c0 <prvTimerTask+0x8>

080073dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80073e6:	f7ff fa43 	bl	8006870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f866 	bl	80074c0 <prvSampleTimeNow>
 80073f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d130      	bne.n	800745e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <prvProcessTimerOrBlockTask+0x3c>
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	429a      	cmp	r2, r3
 8007408:	d806      	bhi.n	8007418 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800740a:	f7ff fa3f 	bl	800688c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7ff ff85 	bl	8007320 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007416:	e024      	b.n	8007462 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d008      	beq.n	8007430 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <prvProcessTimerOrBlockTask+0x90>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <prvProcessTimerOrBlockTask+0x50>
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <prvProcessTimerOrBlockTask+0x52>
 800742c:	2300      	movs	r3, #0
 800742e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <prvProcessTimerOrBlockTask+0x94>)
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4619      	mov	r1, r3
 800743e:	f7fe ffa7 	bl	8006390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007442:	f7ff fa23 	bl	800688c <xTaskResumeAll>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <prvProcessTimerOrBlockTask+0x98>)
 800744e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	f3bf 8f6f 	isb	sy
}
 800745c:	e001      	b.n	8007462 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800745e:	f7ff fa15 	bl	800688c <xTaskResumeAll>
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000cdc 	.word	0x20000cdc
 8007470:	20000ce0 	.word	0x20000ce0
 8007474:	e000ed04 	.word	0xe000ed04

08007478 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007480:	4b0e      	ldr	r3, [pc, #56]	; (80074bc <prvGetNextExpireTime+0x44>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <prvGetNextExpireTime+0x16>
 800748a:	2201      	movs	r2, #1
 800748c:	e000      	b.n	8007490 <prvGetNextExpireTime+0x18>
 800748e:	2200      	movs	r2, #0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800749c:	4b07      	ldr	r3, [pc, #28]	; (80074bc <prvGetNextExpireTime+0x44>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e001      	b.n	80074ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074ac:	68fb      	ldr	r3, [r7, #12]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	20000cd8 	.word	0x20000cd8

080074c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80074c8:	f7ff fa7e 	bl	80069c8 <xTaskGetTickCount>
 80074cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <prvSampleTimeNow+0x3c>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d205      	bcs.n	80074e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80074d8:	f000 f936 	bl	8007748 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e002      	b.n	80074ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80074ea:	4a04      	ldr	r2, [pc, #16]	; (80074fc <prvSampleTimeNow+0x3c>)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80074f0:	68fb      	ldr	r3, [r7, #12]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20000ce8 	.word	0x20000ce8

08007500 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d812      	bhi.n	800754c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e01b      	b.n	8007572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800753a:	4b10      	ldr	r3, [pc, #64]	; (800757c <prvInsertTimerInActiveList+0x7c>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3304      	adds	r3, #4
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f7fe fa08 	bl	800595a <vListInsert>
 800754a:	e012      	b.n	8007572 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d206      	bcs.n	8007562 <prvInsertTimerInActiveList+0x62>
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d302      	bcc.n	8007562 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e007      	b.n	8007572 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <prvInsertTimerInActiveList+0x80>)
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7fe f9f4 	bl	800595a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007572:	697b      	ldr	r3, [r7, #20]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000cdc 	.word	0x20000cdc
 8007580:	20000cd8 	.word	0x20000cd8

08007584 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08e      	sub	sp, #56	; 0x38
 8007588:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800758a:	e0ca      	b.n	8007722 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	da18      	bge.n	80075c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007592:	1d3b      	adds	r3, r7, #4
 8007594:	3304      	adds	r3, #4
 8007596:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	61fb      	str	r3, [r7, #28]
}
 80075b0:	bf00      	nop
 80075b2:	e7fe      	b.n	80075b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ba:	6850      	ldr	r0, [r2, #4]
 80075bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075be:	6892      	ldr	r2, [r2, #8]
 80075c0:	4611      	mov	r1, r2
 80075c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f2c0 80aa 	blt.w	8007720 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe f9f5 	bl	80059cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075e2:	463b      	mov	r3, r7
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff ff6b 	bl	80074c0 <prvSampleTimeNow>
 80075ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	f200 8097 	bhi.w	8007722 <prvProcessReceivedCommands+0x19e>
 80075f4:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <prvProcessReceivedCommands+0x78>)
 80075f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fa:	bf00      	nop
 80075fc:	08007625 	.word	0x08007625
 8007600:	08007625 	.word	0x08007625
 8007604:	08007625 	.word	0x08007625
 8007608:	08007699 	.word	0x08007699
 800760c:	080076ad 	.word	0x080076ad
 8007610:	080076f7 	.word	0x080076f7
 8007614:	08007625 	.word	0x08007625
 8007618:	08007625 	.word	0x08007625
 800761c:	08007699 	.word	0x08007699
 8007620:	080076ad 	.word	0x080076ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	18d1      	adds	r1, r2, r3
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007644:	f7ff ff5c 	bl	8007500 <prvInsertTimerInActiveList>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d069      	beq.n	8007722 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d05e      	beq.n	8007722 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	441a      	add	r2, r3
 800766c:	2300      	movs	r3, #0
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2300      	movs	r3, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007676:	f7ff fe05 	bl	8007284 <xTimerGenericCommand>
 800767a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d14f      	bne.n	8007722 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	61bb      	str	r3, [r7, #24]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076aa:	e03a      	b.n	8007722 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b2:	f043 0301 	orr.w	r3, r3, #1
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80076c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	617b      	str	r3, [r7, #20]
}
 80076de:	bf00      	nop
 80076e0:	e7fe      	b.n	80076e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	18d1      	adds	r1, r2, r3
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f0:	f7ff ff06 	bl	8007500 <prvInsertTimerInActiveList>
					break;
 80076f4:	e015      	b.n	8007722 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d103      	bne.n	800770c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007706:	f000 fbdb 	bl	8007ec0 <vPortFree>
 800770a:	e00a      	b.n	8007722 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	b2da      	uxtb	r2, r3
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800771e:	e000      	b.n	8007722 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007720:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <prvProcessReceivedCommands+0x1c0>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	1d39      	adds	r1, r7, #4
 8007728:	2200      	movs	r2, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fc16 	bl	8005f5c <xQueueReceive>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	f47f af2a 	bne.w	800758c <prvProcessReceivedCommands+0x8>
	}
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	3730      	adds	r7, #48	; 0x30
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000ce0 	.word	0x20000ce0

08007748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800774e:	e048      	b.n	80077e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007750:	4b2d      	ldr	r3, [pc, #180]	; (8007808 <prvSwitchTimerLists+0xc0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775a:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <prvSwitchTimerLists+0xc0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3304      	adds	r3, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe f92f 	bl	80059cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d02e      	beq.n	80077e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d90e      	bls.n	80077b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077a2:	4b19      	ldr	r3, [pc, #100]	; (8007808 <prvSwitchTimerLists+0xc0>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4619      	mov	r1, r3
 80077ac:	4610      	mov	r0, r2
 80077ae:	f7fe f8d4 	bl	800595a <vListInsert>
 80077b2:	e016      	b.n	80077e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077b4:	2300      	movs	r3, #0
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2300      	movs	r3, #0
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	2100      	movs	r1, #0
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff fd60 	bl	8007284 <xTimerGenericCommand>
 80077c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	603b      	str	r3, [r7, #0]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <prvSwitchTimerLists+0xc0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1b1      	bne.n	8007750 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <prvSwitchTimerLists+0xc0>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <prvSwitchTimerLists+0xc4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a04      	ldr	r2, [pc, #16]	; (8007808 <prvSwitchTimerLists+0xc0>)
 80077f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80077fa:	4a04      	ldr	r2, [pc, #16]	; (800780c <prvSwitchTimerLists+0xc4>)
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000cd8 	.word	0x20000cd8
 800780c:	20000cdc 	.word	0x20000cdc

08007810 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007816:	f000 f965 	bl	8007ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800781a:	4b15      	ldr	r3, [pc, #84]	; (8007870 <prvCheckForValidListAndQueue+0x60>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d120      	bne.n	8007864 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007822:	4814      	ldr	r0, [pc, #80]	; (8007874 <prvCheckForValidListAndQueue+0x64>)
 8007824:	f7fe f848 	bl	80058b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007828:	4813      	ldr	r0, [pc, #76]	; (8007878 <prvCheckForValidListAndQueue+0x68>)
 800782a:	f7fe f845 	bl	80058b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <prvCheckForValidListAndQueue+0x6c>)
 8007830:	4a10      	ldr	r2, [pc, #64]	; (8007874 <prvCheckForValidListAndQueue+0x64>)
 8007832:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007834:	4b12      	ldr	r3, [pc, #72]	; (8007880 <prvCheckForValidListAndQueue+0x70>)
 8007836:	4a10      	ldr	r2, [pc, #64]	; (8007878 <prvCheckForValidListAndQueue+0x68>)
 8007838:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <prvCheckForValidListAndQueue+0x74>)
 8007840:	4a11      	ldr	r2, [pc, #68]	; (8007888 <prvCheckForValidListAndQueue+0x78>)
 8007842:	2110      	movs	r1, #16
 8007844:	200a      	movs	r0, #10
 8007846:	f7fe f953 	bl	8005af0 <xQueueGenericCreateStatic>
 800784a:	4603      	mov	r3, r0
 800784c:	4a08      	ldr	r2, [pc, #32]	; (8007870 <prvCheckForValidListAndQueue+0x60>)
 800784e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <prvCheckForValidListAndQueue+0x60>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <prvCheckForValidListAndQueue+0x60>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	490b      	ldr	r1, [pc, #44]	; (800788c <prvCheckForValidListAndQueue+0x7c>)
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fd6c 	bl	800633c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007864:	f000 f96e 	bl	8007b44 <vPortExitCritical>
}
 8007868:	bf00      	nop
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000ce0 	.word	0x20000ce0
 8007874:	20000cb0 	.word	0x20000cb0
 8007878:	20000cc4 	.word	0x20000cc4
 800787c:	20000cd8 	.word	0x20000cd8
 8007880:	20000cdc 	.word	0x20000cdc
 8007884:	20000d8c 	.word	0x20000d8c
 8007888:	20000cec 	.word	0x20000cec
 800788c:	080081a4 	.word	0x080081a4

08007890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b04      	subs	r3, #4
 80078a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f023 0201 	bic.w	r2, r3, #1
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3b04      	subs	r3, #4
 80078be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078c0:	4a0c      	ldr	r2, [pc, #48]	; (80078f4 <pxPortInitialiseStack+0x64>)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3b14      	subs	r3, #20
 80078ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f06f 0202 	mvn.w	r2, #2
 80078de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3b20      	subs	r3, #32
 80078e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078e6:	68fb      	ldr	r3, [r7, #12]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	080078f9 	.word	0x080078f9

080078f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007902:	4b12      	ldr	r3, [pc, #72]	; (800794c <prvTaskExitError+0x54>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800790a:	d00a      	beq.n	8007922 <prvTaskExitError+0x2a>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	60fb      	str	r3, [r7, #12]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <prvTaskExitError+0x28>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
}
 8007934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007936:	bf00      	nop
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0fc      	beq.n	8007938 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800793e:	bf00      	nop
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	200000d4 	.word	0x200000d4

08007950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007950:	4b07      	ldr	r3, [pc, #28]	; (8007970 <pxCurrentTCBConst2>)
 8007952:	6819      	ldr	r1, [r3, #0]
 8007954:	6808      	ldr	r0, [r1, #0]
 8007956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795a:	f380 8809 	msr	PSP, r0
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f04f 0000 	mov.w	r0, #0
 8007966:	f380 8811 	msr	BASEPRI, r0
 800796a:	4770      	bx	lr
 800796c:	f3af 8000 	nop.w

08007970 <pxCurrentTCBConst2>:
 8007970:	200007b0 	.word	0x200007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007974:	bf00      	nop
 8007976:	bf00      	nop

08007978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007978:	4808      	ldr	r0, [pc, #32]	; (800799c <prvPortStartFirstTask+0x24>)
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	6800      	ldr	r0, [r0, #0]
 800797e:	f380 8808 	msr	MSP, r0
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f380 8814 	msr	CONTROL, r0
 800798a:	b662      	cpsie	i
 800798c:	b661      	cpsie	f
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	df00      	svc	0
 8007998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800799a:	bf00      	nop
 800799c:	e000ed08 	.word	0xe000ed08

080079a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079a6:	4b46      	ldr	r3, [pc, #280]	; (8007ac0 <xPortStartScheduler+0x120>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a46      	ldr	r2, [pc, #280]	; (8007ac4 <xPortStartScheduler+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10a      	bne.n	80079c6 <xPortStartScheduler+0x26>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	613b      	str	r3, [r7, #16]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079c6:	4b3e      	ldr	r3, [pc, #248]	; (8007ac0 <xPortStartScheduler+0x120>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a3f      	ldr	r2, [pc, #252]	; (8007ac8 <xPortStartScheduler+0x128>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d10a      	bne.n	80079e6 <xPortStartScheduler+0x46>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <xPortStartScheduler+0x12c>)
 80079e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	22ff      	movs	r2, #255	; 0xff
 80079f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <xPortStartScheduler+0x130>)
 8007a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a0e:	4b31      	ldr	r3, [pc, #196]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a10:	2207      	movs	r2, #7
 8007a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a14:	e009      	b.n	8007a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a16:	4b2f      	ldr	r3, [pc, #188]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d0ef      	beq.n	8007a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a36:	4b27      	ldr	r3, [pc, #156]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f1c3 0307 	rsb	r3, r3, #7
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d00a      	beq.n	8007a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	60bb      	str	r3, [r7, #8]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a58:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a6a:	4a1a      	ldr	r2, [pc, #104]	; (8007ad4 <xPortStartScheduler+0x134>)
 8007a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a14      	ldr	r2, [pc, #80]	; (8007ad8 <xPortStartScheduler+0x138>)
 8007a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a8e:	f000 f8dd 	bl	8007c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a92:	4b12      	ldr	r3, [pc, #72]	; (8007adc <xPortStartScheduler+0x13c>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a98:	f000 f8fc 	bl	8007c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a9c:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <xPortStartScheduler+0x140>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0f      	ldr	r2, [pc, #60]	; (8007ae0 <xPortStartScheduler+0x140>)
 8007aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007aa8:	f7ff ff66 	bl	8007978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007aac:	f7ff f856 	bl	8006b5c <vTaskSwitchContext>
	prvTaskExitError();
 8007ab0:	f7ff ff22 	bl	80078f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	e000ed00 	.word	0xe000ed00
 8007ac4:	410fc271 	.word	0x410fc271
 8007ac8:	410fc270 	.word	0x410fc270
 8007acc:	e000e400 	.word	0xe000e400
 8007ad0:	20000ddc 	.word	0x20000ddc
 8007ad4:	20000de0 	.word	0x20000de0
 8007ad8:	e000ed20 	.word	0xe000ed20
 8007adc:	200000d4 	.word	0x200000d4
 8007ae0:	e000ef34 	.word	0xe000ef34

08007ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	607b      	str	r3, [r7, #4]
}
 8007afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	4a0d      	ldr	r2, [pc, #52]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <vPortEnterCritical+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d10f      	bne.n	8007b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <vPortEnterCritical+0x5c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <vPortEnterCritical+0x4a>
	}
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	200000d4 	.word	0x200000d4
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <vPortExitCritical+0x50>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <vPortExitCritical+0x24>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	607b      	str	r3, [r7, #4]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b68:	4b0a      	ldr	r3, [pc, #40]	; (8007b94 <vPortExitCritical+0x50>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <vPortExitCritical+0x50>)
 8007b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b72:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <vPortExitCritical+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d105      	bne.n	8007b86 <vPortExitCritical+0x42>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f383 8811 	msr	BASEPRI, r3
}
 8007b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	200000d4 	.word	0x200000d4
	...

08007ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ba0:	f3ef 8009 	mrs	r0, PSP
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <pxCurrentTCBConst>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f01e 0f10 	tst.w	lr, #16
 8007bb0:	bf08      	it	eq
 8007bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bba:	6010      	str	r0, [r2, #0]
 8007bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bc4:	f380 8811 	msr	BASEPRI, r0
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f7fe ffc4 	bl	8006b5c <vTaskSwitchContext>
 8007bd4:	f04f 0000 	mov.w	r0, #0
 8007bd8:	f380 8811 	msr	BASEPRI, r0
 8007bdc:	bc09      	pop	{r0, r3}
 8007bde:	6819      	ldr	r1, [r3, #0]
 8007be0:	6808      	ldr	r0, [r1, #0]
 8007be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be6:	f01e 0f10 	tst.w	lr, #16
 8007bea:	bf08      	it	eq
 8007bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bf0:	f380 8809 	msr	PSP, r0
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	f3af 8000 	nop.w

08007c00 <pxCurrentTCBConst>:
 8007c00:	200007b0 	.word	0x200007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop

08007c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c22:	f7fe fee1 	bl	80069e8 <xTaskIncrementTick>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <xPortSysTickHandler+0x40>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c56:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <vPortSetupTimerInterrupt+0x38>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <vPortSetupTimerInterrupt+0x3c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <vPortSetupTimerInterrupt+0x40>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <vPortSetupTimerInterrupt+0x44>)
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c6e:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <vPortSetupTimerInterrupt+0x34>)
 8007c70:	2207      	movs	r2, #7
 8007c72:	601a      	str	r2, [r3, #0]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	e000e010 	.word	0xe000e010
 8007c84:	e000e018 	.word	0xe000e018
 8007c88:	200000c8 	.word	0x200000c8
 8007c8c:	10624dd3 	.word	0x10624dd3
 8007c90:	e000e014 	.word	0xe000e014

08007c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ca4 <vPortEnableVFP+0x10>
 8007c98:	6801      	ldr	r1, [r0, #0]
 8007c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c9e:	6001      	str	r1, [r0, #0]
 8007ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ca2:	bf00      	nop
 8007ca4:	e000ed88 	.word	0xe000ed88

08007ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cae:	f3ef 8305 	mrs	r3, IPSR
 8007cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	d914      	bls.n	8007ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <vPortValidateInterruptPriority+0x70>)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cc4:	4b15      	ldr	r3, [pc, #84]	; (8007d1c <vPortValidateInterruptPriority+0x74>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	7afa      	ldrb	r2, [r7, #11]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d20a      	bcs.n	8007ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ce4:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <vPortValidateInterruptPriority+0x78>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <vPortValidateInterruptPriority+0x7c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d90a      	bls.n	8007d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	603b      	str	r3, [r7, #0]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <vPortValidateInterruptPriority+0x60>
	}
 8007d0a:	bf00      	nop
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	e000e3f0 	.word	0xe000e3f0
 8007d1c:	20000ddc 	.word	0x20000ddc
 8007d20:	e000ed0c 	.word	0xe000ed0c
 8007d24:	20000de0 	.word	0x20000de0

08007d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b08a      	sub	sp, #40	; 0x28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d34:	f7fe fd9c 	bl	8006870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d38:	4b5b      	ldr	r3, [pc, #364]	; (8007ea8 <pvPortMalloc+0x180>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d40:	f000 f920 	bl	8007f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d44:	4b59      	ldr	r3, [pc, #356]	; (8007eac <pvPortMalloc+0x184>)
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 8093 	bne.w	8007e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01d      	beq.n	8007d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d58:	2208      	movs	r2, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f003 0307 	and.w	r3, r3, #7
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d014      	beq.n	8007d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f023 0307 	bic.w	r3, r3, #7
 8007d70:	3308      	adds	r3, #8
 8007d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <pvPortMalloc+0x6c>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	617b      	str	r3, [r7, #20]
}
 8007d90:	bf00      	nop
 8007d92:	e7fe      	b.n	8007d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d06e      	beq.n	8007e78 <pvPortMalloc+0x150>
 8007d9a:	4b45      	ldr	r3, [pc, #276]	; (8007eb0 <pvPortMalloc+0x188>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d869      	bhi.n	8007e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007da4:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <pvPortMalloc+0x18c>)
 8007da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007da8:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <pvPortMalloc+0x18c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dae:	e004      	b.n	8007dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d903      	bls.n	8007dcc <pvPortMalloc+0xa4>
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f1      	bne.n	8007db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007dcc:	4b36      	ldr	r3, [pc, #216]	; (8007ea8 <pvPortMalloc+0x180>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d050      	beq.n	8007e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2208      	movs	r2, #8
 8007ddc:	4413      	add	r3, r2
 8007dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	2308      	movs	r3, #8
 8007df2:	005b      	lsls	r3, r3, #1
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d91f      	bls.n	8007e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00a      	beq.n	8007e20 <pvPortMalloc+0xf8>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	613b      	str	r3, [r7, #16]
}
 8007e1c:	bf00      	nop
 8007e1e:	e7fe      	b.n	8007e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e32:	69b8      	ldr	r0, [r7, #24]
 8007e34:	f000 f908 	bl	8008048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e38:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <pvPortMalloc+0x188>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <pvPortMalloc+0x188>)
 8007e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e46:	4b1a      	ldr	r3, [pc, #104]	; (8007eb0 <pvPortMalloc+0x188>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	4b1b      	ldr	r3, [pc, #108]	; (8007eb8 <pvPortMalloc+0x190>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d203      	bcs.n	8007e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e52:	4b17      	ldr	r3, [pc, #92]	; (8007eb0 <pvPortMalloc+0x188>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <pvPortMalloc+0x190>)
 8007e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <pvPortMalloc+0x184>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <pvPortMalloc+0x194>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3301      	adds	r3, #1
 8007e74:	4a11      	ldr	r2, [pc, #68]	; (8007ebc <pvPortMalloc+0x194>)
 8007e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e78:	f7fe fd08 	bl	800688c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <pvPortMalloc+0x174>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60fb      	str	r3, [r7, #12]
}
 8007e98:	bf00      	nop
 8007e9a:	e7fe      	b.n	8007e9a <pvPortMalloc+0x172>
	return pvReturn;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3728      	adds	r7, #40	; 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200019a4 	.word	0x200019a4
 8007eac:	200019b8 	.word	0x200019b8
 8007eb0:	200019a8 	.word	0x200019a8
 8007eb4:	2000199c 	.word	0x2000199c
 8007eb8:	200019ac 	.word	0x200019ac
 8007ebc:	200019b0 	.word	0x200019b0

08007ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d04d      	beq.n	8007f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <vPortFree+0xb8>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <vPortFree+0x44>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60fb      	str	r3, [r7, #12]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <vPortFree+0x62>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60bb      	str	r3, [r7, #8]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <vPortFree+0xb8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d01e      	beq.n	8007f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d11a      	bne.n	8007f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <vPortFree+0xb8>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f48:	f7fe fc92 	bl	8006870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <vPortFree+0xbc>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	4a09      	ldr	r2, [pc, #36]	; (8007f7c <vPortFree+0xbc>)
 8007f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f000 f874 	bl	8008048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <vPortFree+0xc0>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	4a06      	ldr	r2, [pc, #24]	; (8007f80 <vPortFree+0xc0>)
 8007f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f6a:	f7fe fc8f 	bl	800688c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f6e:	bf00      	nop
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	200019b8 	.word	0x200019b8
 8007f7c:	200019a8 	.word	0x200019a8
 8007f80:	200019b4 	.word	0x200019b4

08007f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f90:	4b27      	ldr	r3, [pc, #156]	; (8008030 <prvHeapInit+0xac>)
 8007f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3307      	adds	r3, #7
 8007fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0307 	bic.w	r3, r3, #7
 8007faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	4a1f      	ldr	r2, [pc, #124]	; (8008030 <prvHeapInit+0xac>)
 8007fb4:	4413      	add	r3, r2
 8007fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <prvHeapInit+0xb0>)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fc2:	4b1c      	ldr	r3, [pc, #112]	; (8008034 <prvHeapInit+0xb0>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	4413      	add	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1a9b      	subs	r3, r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0307 	bic.w	r3, r3, #7
 8007fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4a15      	ldr	r2, [pc, #84]	; (8008038 <prvHeapInit+0xb4>)
 8007fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <prvHeapInit+0xb4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2200      	movs	r2, #0
 8007fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fee:	4b12      	ldr	r3, [pc, #72]	; (8008038 <prvHeapInit+0xb4>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <prvHeapInit+0xb4>)
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	4a0a      	ldr	r2, [pc, #40]	; (800803c <prvHeapInit+0xb8>)
 8008012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <prvHeapInit+0xbc>)
 800801a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <prvHeapInit+0xc0>)
 800801e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008022:	601a      	str	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	20000de4 	.word	0x20000de4
 8008034:	2000199c 	.word	0x2000199c
 8008038:	200019a4 	.word	0x200019a4
 800803c:	200019ac 	.word	0x200019ac
 8008040:	200019a8 	.word	0x200019a8
 8008044:	200019b8 	.word	0x200019b8

08008048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008050:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <prvInsertBlockIntoFreeList+0xac>)
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e002      	b.n	800805c <prvInsertBlockIntoFreeList+0x14>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	429a      	cmp	r2, r3
 8008064:	d8f7      	bhi.n	8008056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	4413      	add	r3, r2
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d108      	bne.n	800808a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	441a      	add	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	441a      	add	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d118      	bne.n	80080d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <prvInsertBlockIntoFreeList+0xb0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d00d      	beq.n	80080c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	441a      	add	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e008      	b.n	80080d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <prvInsertBlockIntoFreeList+0xb0>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e003      	b.n	80080d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d002      	beq.n	80080e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	2000199c 	.word	0x2000199c
 80080f8:	200019a4 	.word	0x200019a4

080080fc <__libc_init_array>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	4d0d      	ldr	r5, [pc, #52]	; (8008134 <__libc_init_array+0x38>)
 8008100:	4c0d      	ldr	r4, [pc, #52]	; (8008138 <__libc_init_array+0x3c>)
 8008102:	1b64      	subs	r4, r4, r5
 8008104:	10a4      	asrs	r4, r4, #2
 8008106:	2600      	movs	r6, #0
 8008108:	42a6      	cmp	r6, r4
 800810a:	d109      	bne.n	8008120 <__libc_init_array+0x24>
 800810c:	4d0b      	ldr	r5, [pc, #44]	; (800813c <__libc_init_array+0x40>)
 800810e:	4c0c      	ldr	r4, [pc, #48]	; (8008140 <__libc_init_array+0x44>)
 8008110:	f000 f82e 	bl	8008170 <_init>
 8008114:	1b64      	subs	r4, r4, r5
 8008116:	10a4      	asrs	r4, r4, #2
 8008118:	2600      	movs	r6, #0
 800811a:	42a6      	cmp	r6, r4
 800811c:	d105      	bne.n	800812a <__libc_init_array+0x2e>
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	f855 3b04 	ldr.w	r3, [r5], #4
 8008124:	4798      	blx	r3
 8008126:	3601      	adds	r6, #1
 8008128:	e7ee      	b.n	8008108 <__libc_init_array+0xc>
 800812a:	f855 3b04 	ldr.w	r3, [r5], #4
 800812e:	4798      	blx	r3
 8008130:	3601      	adds	r6, #1
 8008132:	e7f2      	b.n	800811a <__libc_init_array+0x1e>
 8008134:	08008220 	.word	0x08008220
 8008138:	08008220 	.word	0x08008220
 800813c:	08008220 	.word	0x08008220
 8008140:	08008224 	.word	0x08008224

08008144 <memcpy>:
 8008144:	440a      	add	r2, r1
 8008146:	4291      	cmp	r1, r2
 8008148:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800814c:	d100      	bne.n	8008150 <memcpy+0xc>
 800814e:	4770      	bx	lr
 8008150:	b510      	push	{r4, lr}
 8008152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800815a:	4291      	cmp	r1, r2
 800815c:	d1f9      	bne.n	8008152 <memcpy+0xe>
 800815e:	bd10      	pop	{r4, pc}

08008160 <memset>:
 8008160:	4402      	add	r2, r0
 8008162:	4603      	mov	r3, r0
 8008164:	4293      	cmp	r3, r2
 8008166:	d100      	bne.n	800816a <memset+0xa>
 8008168:	4770      	bx	lr
 800816a:	f803 1b01 	strb.w	r1, [r3], #1
 800816e:	e7f9      	b.n	8008164 <memset+0x4>

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
