
hello_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007498  08007498  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a0  080074a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080074a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a78  20000010  080074b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a88  080074b8  00021a88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224e3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca9  00000000  00000000  00042523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  000461d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001920  00000000  00000000  00047c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6fe  00000000  00000000  00049568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b42a  00000000  00000000  00073c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111908  00000000  00000000  0008f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a0998  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  001a09ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073f0 	.word	0x080073f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080073f0 	.word	0x080073f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vInitUARTRingBuffer>:
/* IMPLEMENTATION */
RingBufferHandle_t rxRingBuffer = {{0}, 0, 0};
RingBufferHandle_t txRingBuffer = {{0}, 0, 0};

void vInitUARTRingBuffer(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	pxRXRingBuffer = &rxRingBuffer;
 80004cc:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <vInitUARTRingBuffer+0x3c>)
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <vInitUARTRingBuffer+0x40>)
 80004d0:	601a      	str	r2, [r3, #0]
	pxTXRingBuffer = &txRingBuffer;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <vInitUARTRingBuffer+0x44>)
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <vInitUARTRingBuffer+0x48>)
 80004d6:	601a      	str	r2, [r3, #0]

	/* Enable interrupts */
	__HAL_UART_ENABLE_IT(UART_HANDLE, UART_IT_ERR);
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <vInitUARTRingBuffer+0x4c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	689a      	ldr	r2, [r3, #8]
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <vInitUARTRingBuffer+0x4c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f042 0201 	orr.w	r2, r2, #1
 80004e6:	609a      	str	r2, [r3, #8]
	__HAL_UART_ENABLE_IT(UART_HANDLE, UART_IT_RXNE);
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <vInitUARTRingBuffer+0x4c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <vInitUARTRingBuffer+0x4c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f042 0220 	orr.w	r2, r2, #32
 80004f6:	601a      	str	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20001904 	.word	0x20001904
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20001908 	.word	0x20001908
 8000510:	20000034 	.word	0x20000034
 8000514:	2000190c 	.word	0x2000190c

08000518 <vPutCharRXBuffer>:


void vPutCharRXBuffer(unsigned char c)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	/* Get the index of the would-be next head. */
	uint32_t uNextHeadIndex = (uint32_t)((pxRXRingBuffer->uHeadIndex + 1) % UART_BUFFER_SIZE);
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <vPutCharRXBuffer+0x64>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	799b      	ldrb	r3, [r3, #6]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	3301      	adds	r3, #1
 800052c:	461a      	mov	r2, r3
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <vPutCharRXBuffer+0x68>)
 8000530:	fba3 1302 	umull	r1, r3, r3, r2
 8000534:	0899      	lsrs	r1, r3, #2
 8000536:	460b      	mov	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	440b      	add	r3, r1
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	60fb      	str	r3, [r7, #12]

	/* Only put the character if the head does not overtake the tail within the ring.
	 * Not equal assumes would be effectively less than (even if the uNextHeadIndex > uTailIndex due to wrap around).
	 * So use condition: != instead of <=.
	 */
	if (uNextHeadIndex != pxRXRingBuffer->uTailIndex)
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <vPutCharRXBuffer+0x64>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	79db      	ldrb	r3, [r3, #7]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4293      	cmp	r3, r2
 8000550:	d00d      	beq.n	800056e <vPutCharRXBuffer+0x56>
	{
		pxRXRingBuffer->uHeadIndex = uNextHeadIndex;
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <vPutCharRXBuffer+0x64>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	719a      	strb	r2, [r3, #6]
		pxRXRingBuffer->puBuffer[pxRXRingBuffer->uHeadIndex] = c;
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <vPutCharRXBuffer+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <vPutCharRXBuffer+0x64>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	7992      	ldrb	r2, [r2, #6]
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	545a      	strb	r2, [r3, r1]
	}
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20001904 	.word	0x20001904
 8000580:	aaaaaaab 	.word	0xaaaaaaab

08000584 <xReadUART>:
	}
}


uint8_t xReadUART(unsigned char *c)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	/* Check if there is unprocessed/new data available (read/tail has not caught up to write/head)
	 * Return 0 to signify no new data available */
	if (pxRXRingBuffer->uHeadIndex == pxRXRingBuffer->uTailIndex) return 0;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <xReadUART+0x6c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	799b      	ldrb	r3, [r3, #6]
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <xReadUART+0x6c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	429a      	cmp	r2, r3
 800059e:	d101      	bne.n	80005a4 <xReadUART+0x20>
 80005a0:	2300      	movs	r3, #0
 80005a2:	e01e      	b.n	80005e2 <xReadUART+0x5e>

	/* Unprocessed/New data is available.
	 * Return it and increment the tailIndex to signify more room to put data into the rxRingBuffer */
	unsigned char readC = pxRXRingBuffer->puBuffer[pxRXRingBuffer->uTailIndex];
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <xReadUART+0x6c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <xReadUART+0x6c>)
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	79d2      	ldrb	r2, [r2, #7]
 80005ae:	b2d2      	uxtb	r2, r2
 80005b0:	5c9b      	ldrb	r3, [r3, r2]
 80005b2:	73fb      	strb	r3, [r7, #15]
	pxRXRingBuffer->uTailIndex = (pxRXRingBuffer->uTailIndex + 1) % UART_BUFFER_SIZE;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <xReadUART+0x6c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <xReadUART+0x70>)
 80005c2:	fba3 2301 	umull	r2, r3, r3, r1
 80005c6:	089a      	lsrs	r2, r3, #2
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	1aca      	subs	r2, r1, r3
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <xReadUART+0x6c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	71da      	strb	r2, [r3, #7]
	*c = readC;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7bfa      	ldrb	r2, [r7, #15]
 80005de:	701a      	strb	r2, [r3, #0]

	/* Return 0 to signify data available and read from */
	return 1;
 80005e0:	2301      	movs	r3, #1
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20001904 	.word	0x20001904
 80005f4:	aaaaaaab 	.word	0xaaaaaaab

080005f8 <xWriteUART>:


uint8_t xWriteUART(unsigned char c)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	/* Don't write if c is a null character */
	if (c == '\0') return 0;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <xWriteUART+0x14>
 8000608:	2300      	movs	r3, #0
 800060a:	e030      	b.n	800066e <xWriteUART+0x76>

	uint32_t uNextHeadIndex = (pxTXRingBuffer->uHeadIndex + 1) % UART_BUFFER_SIZE;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <xWriteUART+0x84>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	799b      	ldrb	r3, [r3, #6]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	3301      	adds	r3, #1
 8000616:	461a      	mov	r2, r3
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <xWriteUART+0x88>)
 800061a:	fba3 1302 	umull	r1, r3, r3, r2
 800061e:	0899      	lsrs	r1, r3, #2
 8000620:	460b      	mov	r3, r1
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	440b      	add	r3, r1
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	60fb      	str	r3, [r7, #12]
	 * Data is lost! If string is sent, may not get \r\n!
	 * So ensure that the buffer is:
	 * 	(1) Large enough
	 * 	(2) Is transmitted through UART often enough as for essentially head > tail to imply data can be put in
	 */
	if (uNextHeadIndex == pxTXRingBuffer->uTailIndex) return 0;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <xWriteUART+0x84>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	79db      	ldrb	r3, [r3, #7]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	4293      	cmp	r3, r2
 800063a:	d101      	bne.n	8000640 <xWriteUART+0x48>
 800063c:	2300      	movs	r3, #0
 800063e:	e016      	b.n	800066e <xWriteUART+0x76>

	/* The txRingBuffer had enough data, so write */
	pxTXRingBuffer->puBuffer[pxTXRingBuffer->uHeadIndex] = c;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <xWriteUART+0x84>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <xWriteUART+0x84>)
 8000646:	6812      	ldr	r2, [r2, #0]
 8000648:	7992      	ldrb	r2, [r2, #6]
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	4611      	mov	r1, r2
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	545a      	strb	r2, [r3, r1]
	pxTXRingBuffer->uHeadIndex = uNextHeadIndex;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <xWriteUART+0x84>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	719a      	strb	r2, [r3, #6]

	/* Enable UART transmission interrupt */
	__HAL_UART_ENABLE_IT(UART_HANDLE, UART_IT_TXE);
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <xWriteUART+0x8c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <xWriteUART+0x8c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800066a:	601a      	str	r2, [r3, #0]

	/* Return 1 to signify successfully put new data into txRingBuffer */
	return 1;
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20001908 	.word	0x20001908
 8000680:	aaaaaaab 	.word	0xaaaaaaab
 8000684:	2000190c 	.word	0x2000190c

08000688 <uGetNumReadableCharRXBuffer>:
	while(*s != '\0') xWriteUART(*(s++));
}


uint32_t uGetNumReadableCharRXBuffer(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	/* Adds UART_BUFFER_SIZE to account for uHeadIndex < uTailIndex. Will be modded in the end anyway if uHeadIndex >= uTailIndex */
	return (uint32_t)(((pxRXRingBuffer->uHeadIndex - pxRXRingBuffer->uTailIndex) + UART_BUFFER_SIZE ) % UART_BUFFER_SIZE);
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <uGetNumReadableCharRXBuffer+0x38>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <uGetNumReadableCharRXBuffer+0x38>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	1d99      	adds	r1, r3, #6
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <uGetNumReadableCharRXBuffer+0x3c>)
 80006a4:	fba3 2301 	umull	r2, r3, r3, r1
 80006a8:	089a      	lsrs	r2, r3, #2
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	1aca      	subs	r2, r1, r3
 80006b4:	4613      	mov	r3, r2
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	20001904 	.word	0x20001904
 80006c4:	aaaaaaab 	.word	0xaaaaaaab

080006c8 <vISRUART>:
	pxRXRingBuffer->uTailIndex = 0;
}


void vISRUART(UART_HandleTypeDef *huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	uint32_t rISRFlags = READ_REG(huart->Instance->ISR); // SR
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	617b      	str	r3, [r7, #20]
	uint32_t rCR1ITS = READ_REG(huart->Instance->CR1);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	613b      	str	r3, [r7, #16]

	if (((rISRFlags & USART_ISR_RXNE) != RESET) && ((rCR1ITS & USART_CR1_RXNEIE) != RESET))
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	f003 0320 	and.w	r3, r3, #32
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d010      	beq.n	800070c <vISRUART+0x44>
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	f003 0320 	and.w	r3, r3, #32
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00b      	beq.n	800070c <vISRUART+0x44>
	{
		huart->Instance->ISR;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	69db      	ldr	r3, [r3, #28]
		unsigned char c = huart->Instance->RDR;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000700:	b29b      	uxth	r3, r3
 8000702:	73fb      	strb	r3, [r7, #15]
		vPutCharRXBuffer(c);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff06 	bl	8000518 <vPutCharRXBuffer>
	}

	if (((rISRFlags & USART_ISR_TXE) != RESET) && ((rCR1ITS & USART_CR1_TXEIE) != RESET))
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	2b00      	cmp	r3, #0
 8000714:	d035      	beq.n	8000782 <vISRUART+0xba>
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071c:	2b00      	cmp	r3, #0
 800071e:	d030      	beq.n	8000782 <vISRUART+0xba>
	{
		if (txRingBuffer.uHeadIndex == txRingBuffer.uTailIndex)
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <vISRUART+0xc4>)
 8000722:	799b      	ldrb	r3, [r3, #6]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <vISRUART+0xc4>)
 8000728:	79db      	ldrb	r3, [r3, #7]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	429a      	cmp	r2, r3
 800072e:	d108      	bne.n	8000742 <vISRUART+0x7a>
		{
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800073e:	601a      	str	r2, [r3, #0]

			huart->Instance->ISR;
			huart->Instance->TDR = c;
		}
	}
}
 8000740:	e01f      	b.n	8000782 <vISRUART+0xba>
			unsigned char c = txRingBuffer.puBuffer[txRingBuffer.uTailIndex];
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <vISRUART+0xc4>)
 8000744:	79db      	ldrb	r3, [r3, #7]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <vISRUART+0xc4>)
 800074c:	5c9b      	ldrb	r3, [r3, r2]
 800074e:	73bb      	strb	r3, [r7, #14]
			txRingBuffer.uTailIndex = (txRingBuffer.uTailIndex + 1) % UART_BUFFER_SIZE;
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <vISRUART+0xc4>)
 8000752:	79db      	ldrb	r3, [r3, #7]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3301      	adds	r3, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <vISRUART+0xc8>)
 800075c:	fba3 2301 	umull	r2, r3, r3, r1
 8000760:	089a      	lsrs	r2, r3, #2
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	1aca      	subs	r2, r1, r3
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <vISRUART+0xc4>)
 8000770:	71da      	strb	r2, [r3, #7]
			huart->Instance->ISR;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	69db      	ldr	r3, [r3, #28]
			huart->Instance->TDR = c;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	7bba      	ldrb	r2, [r7, #14]
 800077e:	b292      	uxth	r2, r2
 8000780:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000034 	.word	0x20000034
 8000790:	aaaaaaab 	.word	0xaaaaaaab

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 fb66 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f81c 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f000 f948 	bl	8000a34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 f916 	bl	80009d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007a8:	f000 f89e 	bl	80008e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Ring Buffer
  vInitUARTRingBuffer();
 80007ac:	f7ff fe8c 	bl	80004c8 <vInitUARTRingBuffer>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007b0:	f004 f894 	bl	80048dc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uartTask */
  uartTaskHandle = osThreadNew(StartUARTTask, NULL, &uartTask_attributes);
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <main+0x38>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <main+0x3c>)
 80007ba:	f004 f8d9 	bl	8004970 <osThreadNew>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <main+0x40>)
 80007c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007c4:	f004 f8ae 	bl	8004924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x34>
 80007ca:	bf00      	nop
 80007cc:	0800742c 	.word	0x0800742c
 80007d0:	08000ae1 	.word	0x08000ae1
 80007d4:	20001990 	.word	0x20001990

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0b8      	sub	sp, #224	; 0xe0
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fdfa 	bl	80073e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2288      	movs	r2, #136	; 0x88
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fdec 	bl	80073e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000812:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800082e:	230a      	movs	r3, #10
 8000830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000834:	2307      	movs	r3, #7
 8000836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fe16 	bl	800247c <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000856:	f000 f973 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000878:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f002 f9e2 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800088a:	f000 f959 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800088e:	f244 0302 	movw	r3, #16386	; 0x4002
 8000892:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800089c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800089e:	2302      	movs	r3, #2
 80008a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008a6:	2308      	movs	r3, #8
 80008a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008aa:	2307      	movs	r3, #7
 80008ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ba:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	463b      	mov	r3, r7
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 fbfa 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80008ca:	f000 f939 	bl	8000b40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d2:	f001 fd7d 	bl	80023d0 <HAL_PWREx_ControlVoltageScaling>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80008dc:	f000 f930 	bl	8000b40 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	37e0      	adds	r7, #224	; 0xe0
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800090a:	4b2f      	ldr	r3, [pc, #188]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800090c:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <MX_ADC1_Init+0xe4>)
 800090e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000910:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800091c:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000922:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800092a:	2204      	movs	r2, #4
 800092c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800092e:	4b26      	ldr	r3, [pc, #152]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000930:	2200      	movs	r2, #0
 8000932:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000936:	2200      	movs	r2, #0
 8000938:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800093a:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800093c:	2201      	movs	r2, #1
 800093e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800094a:	2200      	movs	r2, #0
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000950:	2200      	movs	r2, #0
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800095e:	2200      	movs	r2, #0
 8000960:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800096a:	4817      	ldr	r0, [pc, #92]	; (80009c8 <MX_ADC1_Init+0xe0>)
 800096c:	f000 fc48 	bl	8001200 <HAL_ADC_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000976:	f000 f8e3 	bl	8000b40 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_ADC1_Init+0xe0>)
 8000986:	f001 f9a7 	bl	8001cd8 <HAL_ADCEx_MultiModeConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000990:	f000 f8d6 	bl	8000b40 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_ADC1_Init+0xe8>)
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000998:	2306      	movs	r3, #6
 800099a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a0:	237f      	movs	r3, #127	; 0x7f
 80009a2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a4:	2304      	movs	r3, #4
 80009a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_ADC1_Init+0xe0>)
 80009b2:	f000 fd7b 	bl	80014ac <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009bc:	f000 f8c0 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20001994 	.word	0x20001994
 80009cc:	50040000 	.word	0x50040000
 80009d0:	04300002 	.word	0x04300002

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_USART2_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x58>)
 8000a18:	f003 fadc 	bl	8003fd4 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f88d 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000190c 	.word	0x2000190c
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_GPIO_Init+0xa4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <MX_GPIO_Init+0xa8>)
 8000ab0:	f001 fc4e 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xa8>)
 8000acc:	f001 fa96 	bl	8001ffc <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000400 	.word	0x48000400

08000ae0 <StartUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  	// Ring Buffer
  	uint8_t status;
  	unsigned char c;

  	//if(uGetNumReadableCharRXBuffer() > 0)
  	while (uGetNumReadableCharRXBuffer() > 0)
 8000ae8:	e008      	b.n	8000afc <StartUARTTask+0x1c>
  	{
  		xReadUART(&c);
 8000aea:	f107 030f 	add.w	r3, r7, #15
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd48 	bl	8000584 <xReadUART>
  		xWriteUART(c);
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd7e 	bl	80005f8 <xWriteUART>
  	while (uGetNumReadableCharRXBuffer() > 0)
 8000afc:	f7ff fdc4 	bl	8000688 <uGetNumReadableCharRXBuffer>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f1      	bne.n	8000aea <StartUARTTask+0xa>
  	}

  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b06:	2101      	movs	r1, #1
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <StartUARTTask+0x38>)
 8000b0a:	f001 fc39 	bl	8002380 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000b0e:	2064      	movs	r0, #100	; 0x64
 8000b10:	f003 ffc0 	bl	8004a94 <osDelay>
  {
 8000b14:	e7e8      	b.n	8000ae8 <StartUARTTask+0x8>
 8000b16:	bf00      	nop
 8000b18:	48000400 	.word	0x48000400

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 f9bb 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40001000 	.word	0x40001000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f001 fa0d 	bl	8001fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d123      	bne.n	8000c06 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_ADC_MspInit+0x78>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bf2:	230b      	movs	r3, #11
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <HAL_ADC_MspInit+0x7c>)
 8000c02:	f001 f9fb 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	50040000 	.word	0x50040000
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000800 	.word	0x48000800

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x8c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d130      	bne.n	8000ca0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a14      	ldr	r2, [pc, #80]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_UART_MspInit+0x90>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7e:	2307      	movs	r3, #7
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8c:	f001 f9b6 	bl	8001ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2105      	movs	r1, #5
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f001 f987 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9a:	2026      	movs	r0, #38	; 0x26
 8000c9c:	f001 f9a0 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f001 f96f 	bl	8001fa8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cca:	2036      	movs	r0, #54	; 0x36
 8000ccc:	f001 f988 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6593      	str	r3, [r2, #88]	; 0x58
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_InitTick+0x9c>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f94e 	bl	8002f94 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf8:	f002 f920 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8000cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_InitTick+0xa0>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_InitTick+0xa8>)
 8000d10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d2e:	f002 fe7f 	bl	8003a30 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d104      	bne.n	8000d42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_InitTick+0xa4>)
 8000d3a:	f002 fedb 	bl	8003af4 <HAL_TIM_Base_Start_IT>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	200019f8 	.word	0x200019f8
 8000d58:	40001000 	.word	0x40001000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	vISRUART (&huart2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x10>)
 8000d8e:	f7ff fc9b 	bl	80006c8 <vISRUART>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000190c 	.word	0x2000190c

08000d9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <TIM6_DAC_IRQHandler+0x10>)
 8000da2:	f002 ff17 	bl	8003bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200019f8 	.word	0x200019f8

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <SystemInit+0x5c>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <SystemInit+0x5c>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <SystemInit+0x60>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <SystemInit+0x60>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <SystemInit+0x60>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SystemInit+0x60>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <SystemInit+0x60>)
 8000ddc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000de0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000de4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <SystemInit+0x60>)
 8000de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <SystemInit+0x60>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <SystemInit+0x60>)
 8000df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SystemInit+0x60>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	40021000 	.word	0x40021000

08000e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e18:	f7ff ffca 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
	ldr	r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LoopForever+0x16>)
	cmp	r2, r3
 8000e3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e42:	f006 fa9b 	bl	800737c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e46:	f7ff fca5 	bl	8000794 <main>

08000e4a <LoopForever>:

LoopForever:
    b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e50:	080074a8 	.word	0x080074a8
	ldr	r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e58:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000e5c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000e60:	20001a88 	.word	0x20001a88

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_Init+0x3c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <HAL_Init+0x3c>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f001 f887 	bl	8001f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff13 	bl	8000cb0 <HAL_InitTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	e001      	b.n	8000e9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e96:	f7ff fe59 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20001a44 	.word	0x20001a44

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20001a44 	.word	0x20001a44

08000ee8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3360      	adds	r3, #96	; 0x60
 8000f62:	461a      	mov	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <LL_ADC_SetOffset+0x44>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f88:	bf00      	nop
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	03fff000 	.word	0x03fff000

08000f98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3360      	adds	r3, #96	; 0x60
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3360      	adds	r3, #96	; 0x60
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fee:	bf00      	nop
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b087      	sub	sp, #28
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3330      	adds	r3, #48	; 0x30
 800100a:	461a      	mov	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	4413      	add	r3, r2
 8001018:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	211f      	movs	r1, #31
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0e9b      	lsrs	r3, r3, #26
 8001032:	f003 011f 	and.w	r1, r3, #31
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f003 031f 	and.w	r3, r3, #31
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001052:	b480      	push	{r7}
 8001054:	b087      	sub	sp, #28
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3314      	adds	r3, #20
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	0e5b      	lsrs	r3, r3, #25
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0d1b      	lsrs	r3, r3, #20
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	2107      	movs	r1, #7
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	401a      	ands	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	0d1b      	lsrs	r3, r3, #20
 800108c:	f003 031f 	and.w	r3, r3, #31
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	431a      	orrs	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0318 	and.w	r3, r3, #24
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80010cc:	40d9      	lsrs	r1, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	400b      	ands	r3, r1
 80010d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	0007ffff 	.word	0x0007ffff

080010f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6093      	str	r3, [r2, #8]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001128:	d101      	bne.n	800112e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800114c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001150:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001178:	d101      	bne.n	800117e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <LL_ADC_IsEnabled+0x18>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <LL_ADC_IsEnabled+0x1a>
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d101      	bne.n	80011ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b08      	cmp	r3, #8
 80011ea:	d101      	bne.n	80011f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e136      	b.n	8001488 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	2b00      	cmp	r3, #0
 8001226:	d109      	bne.n	800123c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fcb7 	bl	8000b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff67 	bl	8001114 <LL_ADC_IsDeepPowerDownEnabled>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff4d 	bl	80010f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff82 	bl	8001164 <LL_ADC_IsInternalRegulatorEnabled>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d115      	bne.n	8001292 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff66 	bl	800113c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001270:	4b87      	ldr	r3, [pc, #540]	; (8001490 <HAL_ADC_Init+0x290>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	4a87      	ldr	r2, [pc, #540]	; (8001494 <HAL_ADC_Init+0x294>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	099b      	lsrs	r3, r3, #6
 800127e:	3301      	adds	r3, #1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001284:	e002      	b.n	800128c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3b01      	subs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff64 	bl	8001164 <LL_ADC_IsInternalRegulatorEnabled>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10d      	bne.n	80012be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a6:	f043 0210 	orr.w	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff75 	bl	80011b2 <LL_ADC_REG_IsConversionOngoing>
 80012c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 80cf 	bne.w	8001476 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f040 80cb 	bne.w	8001476 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012e8:	f043 0202 	orr.w	r2, r3, #2
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff49 	bl	800118c <LL_ADC_IsEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d115      	bne.n	800132c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001300:	4865      	ldr	r0, [pc, #404]	; (8001498 <HAL_ADC_Init+0x298>)
 8001302:	f7ff ff43 	bl	800118c <LL_ADC_IsEnabled>
 8001306:	4604      	mov	r4, r0
 8001308:	4864      	ldr	r0, [pc, #400]	; (800149c <HAL_ADC_Init+0x29c>)
 800130a:	f7ff ff3f 	bl	800118c <LL_ADC_IsEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	431c      	orrs	r4, r3
 8001312:	4863      	ldr	r0, [pc, #396]	; (80014a0 <HAL_ADC_Init+0x2a0>)
 8001314:	f7ff ff3a 	bl	800118c <LL_ADC_IsEnabled>
 8001318:	4603      	mov	r3, r0
 800131a:	4323      	orrs	r3, r4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4619      	mov	r1, r3
 8001326:	485f      	ldr	r0, [pc, #380]	; (80014a4 <HAL_ADC_Init+0x2a4>)
 8001328:	f7ff fdde 	bl	8000ee8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e5b      	ldrb	r3, [r3, #25]
 8001330:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001336:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800133c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001342:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	3b01      	subs	r3, #1
 8001360:	045b      	lsls	r3, r3, #17
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <HAL_ADC_Init+0x2a8>)
 800138c:	4013      	ands	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	430b      	orrs	r3, r1
 8001396:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff08 	bl	80011b2 <LL_ADC_REG_IsConversionOngoing>
 80013a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff15 	bl	80011d8 <LL_ADC_INJ_IsConversionOngoing>
 80013ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d13d      	bne.n	8001432 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d13a      	bne.n	8001432 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013d8:	f023 0302 	bic.w	r3, r3, #2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	69b9      	ldr	r1, [r7, #24]
 80013e2:	430b      	orrs	r3, r1
 80013e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d118      	bne.n	8001422 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013fa:	f023 0304 	bic.w	r3, r3, #4
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800140c:	4311      	orrs	r1, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001412:	430a      	orrs	r2, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	e007      	b.n	8001432 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0201 	bic.w	r2, r2, #1
 8001430:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10c      	bne.n	8001454 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f023 010f 	bic.w	r1, r3, #15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
 8001452:	e007      	b.n	8001464 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 020f 	bic.w	r2, r2, #15
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	f023 0303 	bic.w	r3, r3, #3
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
 8001474:	e007      	b.n	8001486 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f043 0210 	orr.w	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001486:	7ffb      	ldrb	r3, [r7, #31]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	053e2d63 	.word	0x053e2d63
 8001498:	50040000 	.word	0x50040000
 800149c:	50040100 	.word	0x50040100
 80014a0:	50040200 	.word	0x50040200
 80014a4:	50040300 	.word	0x50040300
 80014a8:	fff0c007 	.word	0xfff0c007

080014ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0b6      	sub	sp, #216	; 0xd8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x22>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e3c7      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x7b2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe69 	bl	80011b2 <LL_ADC_REG_IsConversionOngoing>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f040 83a8 	bne.w	8001c38 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d824      	bhi.n	800153a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	3b02      	subs	r3, #2
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d81b      	bhi.n	8001532 <HAL_ADC_ConfigChannel+0x86>
 80014fa:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <HAL_ADC_ConfigChannel+0x54>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001511 	.word	0x08001511
 8001504:	08001519 	.word	0x08001519
 8001508:	08001521 	.word	0x08001521
 800150c:	08001529 	.word	0x08001529
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	220c      	movs	r2, #12
 8001514:	605a      	str	r2, [r3, #4]
          break;
 8001516:	e011      	b.n	800153c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2212      	movs	r2, #18
 800151c:	605a      	str	r2, [r3, #4]
          break;
 800151e:	e00d      	b.n	800153c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2218      	movs	r2, #24
 8001524:	605a      	str	r2, [r3, #4]
          break;
 8001526:	e009      	b.n	800153c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152e:	605a      	str	r2, [r3, #4]
          break;
 8001530:	e004      	b.n	800153c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2206      	movs	r2, #6
 8001536:	605a      	str	r2, [r3, #4]
          break;
 8001538:	e000      	b.n	800153c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800153a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	f7ff fd56 	bl	8000ffa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe2d 	bl	80011b2 <LL_ADC_REG_IsConversionOngoing>
 8001558:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe39 	bl	80011d8 <LL_ADC_INJ_IsConversionOngoing>
 8001566:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800156a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 81a6 	bne.w	80018c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001574:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 81a1 	bne.w	80018c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	461a      	mov	r2, r3
 800158c:	f7ff fd61 	bl	8001052 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	08db      	lsrs	r3, r3, #3
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d00a      	beq.n	80015c8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6919      	ldr	r1, [r3, #16]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015c2:	f7ff fcc5 	bl	8000f50 <LL_ADC_SetOffset>
 80015c6:	e17b      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fce2 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10a      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x148>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fcd7 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	0e9b      	lsrs	r3, r3, #26
 80015ee:	f003 021f 	and.w	r2, r3, #31
 80015f2:	e01e      	b.n	8001632 <HAL_ADC_ConfigChannel+0x186>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fccc 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001612:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800161a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001622:	2320      	movs	r3, #32
 8001624:	e004      	b.n	8001630 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001626:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <HAL_ADC_ConfigChannel+0x19e>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0e9b      	lsrs	r3, r3, #26
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	e018      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d0>
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800165e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e004      	b.n	800167c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800167c:	429a      	cmp	r2, r3
 800167e:	d106      	bne.n	800168e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fc9b 	bl	8000fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2101      	movs	r1, #1
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fc7f 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10a      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x20e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fc74 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	0e9b      	lsrs	r3, r3, #26
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	e01e      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x24c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2101      	movs	r1, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc69 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80016e8:	2320      	movs	r3, #32
 80016ea:	e004      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80016ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_ADC_ConfigChannel+0x264>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0e9b      	lsrs	r3, r3, #26
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	e018      	b.n	8001742 <HAL_ADC_ConfigChannel+0x296>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800172c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001734:	2320      	movs	r3, #32
 8001736:	e004      	b.n	8001742 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800173c:	fab3 f383 	clz	r3, r3
 8001740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001742:	429a      	cmp	r2, r3
 8001744:	d106      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2200      	movs	r2, #0
 800174c:	2101      	movs	r1, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fc38 	bl	8000fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2102      	movs	r1, #2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc1c 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x2d4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2102      	movs	r1, #2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fc11 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	0e9b      	lsrs	r3, r3, #26
 800177a:	f003 021f 	and.w	r2, r3, #31
 800177e:	e01e      	b.n	80017be <HAL_ADC_ConfigChannel+0x312>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2102      	movs	r1, #2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fc06 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800179e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80017a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80017ae:	2320      	movs	r3, #32
 80017b0:	e004      	b.n	80017bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80017b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d105      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x32a>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0e9b      	lsrs	r3, r3, #26
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	e016      	b.n	8001804 <HAL_ADC_ConfigChannel+0x358>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80017f6:	2320      	movs	r3, #32
 80017f8:	e004      	b.n	8001804 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80017fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2200      	movs	r2, #0
 800180e:	2102      	movs	r1, #2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fbd7 	bl	8000fc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2103      	movs	r1, #3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fbbb 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x396>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2103      	movs	r1, #3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fbb0 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	0e9b      	lsrs	r3, r3, #26
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	e017      	b.n	8001872 <HAL_ADC_ConfigChannel+0x3c6>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2103      	movs	r1, #3
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fba5 	bl	8000f98 <LL_ADC_GetOffsetChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800185a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800185c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800185e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001864:	2320      	movs	r3, #32
 8001866:	e003      	b.n	8001870 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	b2db      	uxtb	r3, r3
 8001870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187a:	2b00      	cmp	r3, #0
 800187c:	d105      	bne.n	800188a <HAL_ADC_ConfigChannel+0x3de>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	0e9b      	lsrs	r3, r3, #26
 8001884:	f003 031f 	and.w	r3, r3, #31
 8001888:	e011      	b.n	80018ae <HAL_ADC_ConfigChannel+0x402>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800189a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800189c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018a2:	2320      	movs	r3, #32
 80018a4:	e003      	b.n	80018ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80018a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d106      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	2103      	movs	r1, #3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb82 	bl	8000fc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fc61 	bl	800118c <LL_ADC_IsEnabled>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 813f 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	461a      	mov	r2, r3
 80018e0:	f7ff fbe2 	bl	80010a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4a8e      	ldr	r2, [pc, #568]	; (8001b24 <HAL_ADC_ConfigChannel+0x678>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	f040 8130 	bne.w	8001b50 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10b      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x46c>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	3301      	adds	r3, #1
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b09      	cmp	r3, #9
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e019      	b.n	800194c <HAL_ADC_ConfigChannel+0x4a0>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001928:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800192a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001930:	2320      	movs	r3, #32
 8001932:	e003      	b.n	800193c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	2b09      	cmp	r3, #9
 8001944:	bf94      	ite	ls
 8001946:	2301      	movls	r3, #1
 8001948:	2300      	movhi	r3, #0
 800194a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194c:	2b00      	cmp	r3, #0
 800194e:	d079      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_ADC_ConfigChannel+0x4c0>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0e9b      	lsrs	r3, r3, #26
 8001962:	3301      	adds	r3, #1
 8001964:	069b      	lsls	r3, r3, #26
 8001966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800196a:	e015      	b.n	8001998 <HAL_ADC_ConfigChannel+0x4ec>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001984:	2320      	movs	r3, #32
 8001986:	e003      	b.n	8001990 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	3301      	adds	r3, #1
 8001992:	069b      	lsls	r3, r3, #26
 8001994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x50c>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	3301      	adds	r3, #1
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	e017      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x53c>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80019c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80019ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80019d0:	2320      	movs	r3, #32
 80019d2:	e003      	b.n	80019dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80019d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3301      	adds	r3, #1
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	ea42 0103 	orr.w	r1, r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x562>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	3301      	adds	r3, #1
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	051b      	lsls	r3, r3, #20
 8001a0c:	e018      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x594>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a40:	430b      	orrs	r3, r1
 8001a42:	e080      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x5b4>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	0e9b      	lsrs	r3, r3, #26
 8001a56:	3301      	adds	r3, #1
 8001a58:	069b      	lsls	r3, r3, #26
 8001a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5e:	e015      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x5e0>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e003      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3301      	adds	r3, #1
 8001a86:	069b      	lsls	r3, r3, #26
 8001a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x600>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0e9b      	lsrs	r3, r3, #26
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	e017      	b.n	8001adc <HAL_ADC_ConfigChannel+0x630>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	61fb      	str	r3, [r7, #28]
  return result;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e003      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	ea42 0103 	orr.w	r1, r2, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10d      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x65c>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	3301      	adds	r3, #1
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	3b1e      	subs	r3, #30
 8001b00:	051b      	lsls	r3, r3, #20
 8001b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b06:	e01d      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x698>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	613b      	str	r3, [r7, #16]
  return result;
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e005      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x684>
 8001b24:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b1e      	subs	r3, #30
 8001b3e:	051b      	lsls	r3, r3, #20
 8001b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b44:	430b      	orrs	r3, r1
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6892      	ldr	r2, [r2, #8]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff fa81 	bl	8001052 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_ADC_ConfigChannel+0x7bc>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d07a      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b5c:	4843      	ldr	r0, [pc, #268]	; (8001c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001b5e:	f7ff f9e9 	bl	8000f34 <LL_ADC_GetCommonPathInternalCh>
 8001b62:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a41      	ldr	r2, [pc, #260]	; (8001c70 <HAL_ADC_ConfigChannel+0x7c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d12c      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d126      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d004      	beq.n	8001b90 <HAL_ADC_ConfigChannel+0x6e4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_ADC_ConfigChannel+0x7cc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d15d      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4834      	ldr	r0, [pc, #208]	; (8001c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001b9c:	f7ff f9b7 	bl	8000f0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_ADC_ConfigChannel+0x7d0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	4a36      	ldr	r2, [pc, #216]	; (8001c80 <HAL_ADC_ConfigChannel+0x7d4>)
 8001ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bac:	099b      	lsrs	r3, r3, #6
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bba:	e002      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f9      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bc8:	e040      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <HAL_ADC_ConfigChannel+0x7d8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d118      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x75a>
 8001bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d112      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0x748>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <HAL_ADC_ConfigChannel+0x7cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d12d      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481b      	ldr	r0, [pc, #108]	; (8001c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001c00:	f7ff f985 	bl	8000f0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c04:	e024      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d120      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d11a      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d115      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480e      	ldr	r0, [pc, #56]	; (8001c6c <HAL_ADC_ConfigChannel+0x7c0>)
 8001c32:	f7ff f96c 	bl	8000f0e <LL_ADC_SetCommonPathInternalCh>
 8001c36:	e00c      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001c4a:	e002      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	37d8      	adds	r7, #216	; 0xd8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	80080000 	.word	0x80080000
 8001c6c:	50040300 	.word	0x50040300
 8001c70:	c7520000 	.word	0xc7520000
 8001c74:	50040000 	.word	0x50040000
 8001c78:	50040200 	.word	0x50040200
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	cb840000 	.word	0xcb840000
 8001c88:	80000001 	.word	0x80000001

08001c8c <LL_ADC_IsEnabled>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <LL_ADC_IsEnabled+0x18>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <LL_ADC_IsEnabled+0x1a>
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b09f      	sub	sp, #124	; 0x7c
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e093      	b.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d02:	2300      	movs	r3, #0
 8001d04:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a47      	ldr	r2, [pc, #284]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	e001      	b.n	8001d1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e072      	b.n	8001e1e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ffb9 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff ffb3 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d154      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d151      	bne.n	8001dfc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001d5a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02c      	beq.n	8001dbe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d76:	035b      	lsls	r3, r3, #13
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d80:	4829      	ldr	r0, [pc, #164]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d82:	f7ff ff83 	bl	8001c8c <LL_ADC_IsEnabled>
 8001d86:	4604      	mov	r4, r0
 8001d88:	4828      	ldr	r0, [pc, #160]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d8a:	f7ff ff7f 	bl	8001c8c <LL_ADC_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	431c      	orrs	r4, r3
 8001d92:	4828      	ldr	r0, [pc, #160]	; (8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001d94:	f7ff ff7a 	bl	8001c8c <LL_ADC_IsEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d137      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001da8:	f023 030f 	bic.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	6811      	ldr	r1, [r2, #0]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	431a      	orrs	r2, r3
 8001db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dbc:	e028      	b.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dca:	4817      	ldr	r0, [pc, #92]	; (8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dcc:	f7ff ff5e 	bl	8001c8c <LL_ADC_IsEnabled>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001dd4:	f7ff ff5a 	bl	8001c8c <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	431c      	orrs	r4, r3
 8001ddc:	4815      	ldr	r0, [pc, #84]	; (8001e34 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001dde:	f7ff ff55 	bl	8001c8c <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4323      	orrs	r3, r4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d112      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001df2:	f023 030f 	bic.w	r3, r3, #15
 8001df6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001df8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001dfa:	e009      	b.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e00:	f043 0220 	orr.w	r2, r3, #32
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e0e:	e000      	b.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	377c      	adds	r7, #124	; 0x7c
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	50040000 	.word	0x50040000
 8001e2c:	50040100 	.word	0x50040100
 8001e30:	50040300 	.word	0x50040300
 8001e34:	50040200 	.word	0x50040200

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff4c 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fba:	f7ff ff61 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8001fbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff ffb1 	bl	8001f2c <NVIC_EncodePriority>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff80 	bl	8001ed8 <__NVIC_SetPriority>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff54 	bl	8001e9c <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e17f      	b.n	800230c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8171 	beq.w	8002306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d00b      	beq.n	8002044 <HAL_GPIO_Init+0x48>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002038:	2b11      	cmp	r3, #17
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d130      	bne.n	80020a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207a:	2201      	movs	r2, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f003 0201 	and.w	r2, r3, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d118      	bne.n	80020e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x128>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b12      	cmp	r3, #18
 8002122:	d123      	bne.n	800216c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	08da      	lsrs	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3208      	adds	r2, #8
 8002166:	6939      	ldr	r1, [r7, #16]
 8002168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0203 	and.w	r2, r3, #3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80ac 	beq.w	8002306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_GPIO_Init+0x330>)
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	4a5e      	ldr	r2, [pc, #376]	; (800232c <HAL_GPIO_Init+0x330>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_GPIO_Init+0x330>)
 80021bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021c6:	4a5a      	ldr	r2, [pc, #360]	; (8002330 <HAL_GPIO_Init+0x334>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x242>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4f      	ldr	r2, [pc, #316]	; (8002334 <HAL_GPIO_Init+0x338>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x23e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_GPIO_Init+0x33c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x23a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4d      	ldr	r2, [pc, #308]	; (800233c <HAL_GPIO_Init+0x340>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x236>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_GPIO_Init+0x344>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x232>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_GPIO_Init+0x348>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x22e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_GPIO_Init+0x34c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x22a>
 8002222:	2306      	movs	r3, #6
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x244>
 8002226:	2307      	movs	r3, #7
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x244>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x244>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x244>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x244>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x244>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x244>
 800223e:	2300      	movs	r3, #0
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002250:	4937      	ldr	r1, [pc, #220]	; (8002330 <HAL_GPIO_Init+0x334>)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_GPIO_Init+0x350>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002282:	4a32      	ldr	r2, [pc, #200]	; (800234c <HAL_GPIO_Init+0x350>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_GPIO_Init+0x350>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ac:	4a27      	ldr	r2, [pc, #156]	; (800234c <HAL_GPIO_Init+0x350>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_GPIO_Init+0x350>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022d6:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_GPIO_Init+0x350>)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_GPIO_Init+0x350>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_GPIO_Init+0x350>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	3301      	adds	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	f47f ae78 	bne.w	800200c <HAL_GPIO_Init+0x10>
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	48000400 	.word	0x48000400
 8002338:	48000800 	.word	0x48000800
 800233c:	48000c00 	.word	0x48000c00
 8002340:	48001000 	.word	0x48001000
 8002344:	48001400 	.word	0x48001400
 8002348:	48001800 	.word	0x48001800
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43d9      	mvns	r1, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	400b      	ands	r3, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023de:	d130      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ec:	d038      	beq.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f6:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2232      	movs	r2, #50	; 0x32
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9b      	lsrs	r3, r3, #18
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002414:	e002      	b.n	800241c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3b01      	subs	r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d102      	bne.n	8002430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f2      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243c:	d110      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e00f      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d007      	beq.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002458:	4a05      	ldr	r2, [pc, #20]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40007000 	.word	0x40007000
 8002474:	20000000 	.word	0x20000000
 8002478:	431bde83 	.word	0x431bde83

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e3d4      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248e:	4ba1      	ldr	r3, [pc, #644]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002498:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0310 	and.w	r3, r3, #16
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80e4 	beq.w	8002678 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b0c      	cmp	r3, #12
 80024ba:	f040 808b 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8087 	bne.w	80025d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	4b93      	ldr	r3, [pc, #588]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x62>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3ac      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_RCC_OscConfig+0x7c>
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f6:	e005      	b.n	8002504 <HAL_RCC_OscConfig+0x88>
 80024f8:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	091b      	lsrs	r3, r3, #4
 8002500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002504:	4293      	cmp	r3, r2
 8002506:	d223      	bcs.n	8002550 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fd73 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e38d      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251c:	4b7d      	ldr	r3, [pc, #500]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a7c      	ldr	r2, [pc, #496]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4977      	ldr	r1, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4972      	ldr	r1, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
 800254e:	e025      	b.n	800259c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002550:	4b70      	ldr	r3, [pc, #448]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6f      	ldr	r2, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	496a      	ldr	r1, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256e:	4b69      	ldr	r3, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	4965      	ldr	r1, [pc, #404]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fd33 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e34d      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259c:	f000 fc36 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	495a      	ldr	r1, [pc, #360]	; (8002718 <HAL_RCC_OscConfig+0x29c>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_OscConfig+0x2a0>)
 80025ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025bc:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_RCC_OscConfig+0x2a4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fb75 	bl	8000cb0 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d052      	beq.n	8002676 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	e331      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d032      	beq.n	8002642 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025dc:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fc72 	bl	8000ed0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f0:	f7fe fc6e 	bl	8000ed0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e31a      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002602:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a40      	ldr	r2, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	493b      	ldr	r1, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
 8002640:	e01a      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002642:	4b34      	ldr	r3, [pc, #208]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a33      	ldr	r2, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264e:	f7fe fc3f 	bl	8000ed0 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002656:	f7fe fc3b 	bl	8000ed0 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e2e7      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x1da>
 8002674:	e000      	b.n	8002678 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002676:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d074      	beq.n	800276e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b08      	cmp	r3, #8
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x21a>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d10e      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d10b      	bne.n	80026ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d064      	beq.n	800276c <HAL_RCC_OscConfig+0x2f0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d160      	bne.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e2c4      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x24a>
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e01d      	b.n	8002702 <HAL_RCC_OscConfig+0x286>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x26e>
 80026d0:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x286>
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_RCC_OscConfig+0x298>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01c      	beq.n	8002744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fbe1 	bl	8000ed0 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002710:	e011      	b.n	8002736 <HAL_RCC_OscConfig+0x2ba>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	08007450 	.word	0x08007450
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fbd4 	bl	8000ed0 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e280      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	4baf      	ldr	r3, [pc, #700]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x2a8>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fbc4 	bl	8000ed0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fbc0 	bl	8000ed0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e26c      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275e:	4ba5      	ldr	r3, [pc, #660]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x2d0>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d060      	beq.n	800283c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x310>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d119      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d116      	bne.n	80027ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	4b99      	ldr	r3, [pc, #612]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_OscConfig+0x328>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e249      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b93      	ldr	r3, [pc, #588]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	4990      	ldr	r1, [pc, #576]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b8:	e040      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d023      	beq.n	800280a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a8b      	ldr	r2, [pc, #556]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fb7f 	bl	8000ed0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fb7b 	bl	8000ed0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e227      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b7f      	ldr	r3, [pc, #508]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	497c      	ldr	r1, [pc, #496]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
 8002808:	e018      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280a:	4b7a      	ldr	r3, [pc, #488]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a79      	ldr	r2, [pc, #484]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7fe fb5b 	bl	8000ed0 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7fe fb57 	bl	8000ed0 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e203      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002830:	4b70      	ldr	r3, [pc, #448]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d03c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01c      	beq.n	800288a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002850:	4b68      	ldr	r3, [pc, #416]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002856:	4a67      	ldr	r2, [pc, #412]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe fb36 	bl	8000ed0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe fb32 	bl	8000ed0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1de      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287a:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800287c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCC_OscConfig+0x3ec>
 8002888:	e01b      	b.n	80028c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800288c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe fb19 	bl	8000ed0 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe fb15 	bl	8000ed0 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e1c1      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b4:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1ef      	bne.n	80028a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80a6 	beq.w	8002a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028d4:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a43      	ldr	r2, [pc, #268]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b41      	ldr	r3, [pc, #260]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d118      	bne.n	800293a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002914:	f7fe fadc 	bl	8000ed0 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291c:	f7fe fad8 	bl	8000ed0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e184      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_RCC_OscConfig+0x4d8>
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002952:	e024      	b.n	800299e <HAL_RCC_OscConfig+0x522>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d110      	bne.n	800297e <HAL_RCC_OscConfig+0x502>
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297c:	e00f      	b.n	800299e <HAL_RCC_OscConfig+0x522>
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002996:	f023 0304 	bic.w	r3, r3, #4
 800299a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a6:	f7fe fa93 	bl	8000ed0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fa8f 	bl	8000ed0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e139      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ed      	beq.n	80029ae <HAL_RCC_OscConfig+0x532>
 80029d2:	e01a      	b.n	8002a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fa7c 	bl	8000ed0 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fa78 	bl	8000ed0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d906      	bls.n	80029fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e122      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029fc:	4b90      	ldr	r3, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1e8      	bne.n	80029dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0a:	7ffb      	ldrb	r3, [r7, #31]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a10:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a8a      	ldr	r2, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8108 	beq.w	8002c36 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 80d0 	bne.w	8002bd0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a30:	4b83      	ldr	r3, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d130      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d127      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d11f      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a70:	2a07      	cmp	r2, #7
 8002a72:	bf14      	ite	ne
 8002a74:	2201      	movne	r2, #1
 8002a76:	2200      	moveq	r2, #0
 8002a78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d113      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d06e      	beq.n	8002b84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d069      	beq.n	8002b80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ab8:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b7      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ac8:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad4:	f7fe f9fc 	bl	8000ed0 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe f9f8 	bl	8000ed0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0a4      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aee:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002afa:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x7c8>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b0a:	3a01      	subs	r2, #1
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b14:	0212      	lsls	r2, r2, #8
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0552      	lsls	r2, r2, #21
 8002b22:	4311      	orrs	r1, r2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b28:	0852      	lsrs	r2, r2, #1
 8002b2a:	3a01      	subs	r2, #1
 8002b2c:	0652      	lsls	r2, r2, #25
 8002b2e:	4311      	orrs	r1, r2
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b34:	0912      	lsrs	r2, r2, #4
 8002b36:	0452      	lsls	r2, r2, #17
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	4941      	ldr	r1, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b40:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a3e      	ldr	r2, [pc, #248]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b4c:	4b3c      	ldr	r3, [pc, #240]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a3b      	ldr	r2, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b58:	f7fe f9ba 	bl	8000ed0 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f9b6 	bl	8000ed0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e062      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b72:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b7e:	e05a      	b.n	8002c36 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e059      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d152      	bne.n	8002c36 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a27      	ldr	r2, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ba8:	f7fe f992 	bl	8000ed0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe f98e 	bl	8000ed0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e03a      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x734>
 8002bce:	e032      	b.n	8002c36 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d02d      	beq.n	8002c32 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a13      	ldr	r2, [pc, #76]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bf4:	f023 0303 	bic.w	r3, r3, #3
 8002bf8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002c00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe f961 	bl	8000ed0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c12:	f7fe f95d 	bl	8000ed0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e009      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_OscConfig+0x7c4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCC_OscConfig+0x796>
 8002c30:	e001      	b.n	8002c36 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	f99d808c 	.word	0xf99d808c

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0c8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4961      	ldr	r1, [pc, #388]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b0      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d04c      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e09e      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d115      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e092      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd0:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e086      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ce0:	4b46      	ldr	r3, [pc, #280]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e07e      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 0203 	bic.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	493f      	ldr	r1, [pc, #252]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d02:	f7fe f8e5 	bl	8000ed0 <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe f8e1 	bl	8000ed0 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e066      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 020c 	and.w	r2, r3, #12
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1eb      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	492c      	ldr	r1, [pc, #176]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d50:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d210      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	4924      	ldr	r1, [pc, #144]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1b0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e036      	b.n	8002dee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4918      	ldr	r1, [pc, #96]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4910      	ldr	r1, [pc, #64]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbe:	f000 f825 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCC_ClockConfig+0x1b4>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	490c      	ldr	r1, [pc, #48]	; (8002e00 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	5ccb      	ldrb	r3, [r1, r3]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd ff64 	bl	8000cb0 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40022000 	.word	0x40022000
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08007450 	.word	0x08007450
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e24:	4b3b      	ldr	r3, [pc, #236]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x34>
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d11e      	bne.n	8002e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e40:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e4c:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e52:	0a1b      	lsrs	r3, r3, #8
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	e005      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e68:	4a2b      	ldr	r2, [pc, #172]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d102      	bne.n	8002e8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	e004      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d134      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d003      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xac>
 8002eb0:	e005      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eb2:	4b1a      	ldr	r3, [pc, #104]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb4:	617b      	str	r3, [r7, #20]
      break;
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eba:	617b      	str	r3, [r7, #20]
      break;
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	617b      	str	r3, [r7, #20]
      break;
 8002ec2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	3301      	adds	r3, #1
 8002ed0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	fb02 f203 	mul.w	r2, r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	0e5b      	lsrs	r3, r3, #25
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f04:	69bb      	ldr	r3, [r7, #24]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08007468 	.word	0x08007468
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40021000 	.word	0x40021000
 8002f64:	08007460 	.word	0x08007460

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f6c:	f7ff ffda 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0adb      	lsrs	r3, r3, #11
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08007460 	.word	0x08007460

08002f94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCC_GetClockConfig+0x60>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0207 	and.w	r2, r3, #7
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40022000 	.word	0x40022000

08002ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003010:	f7ff f9d0 	bl	80023b4 <HAL_PWREx_GetVoltageRange>
 8003014:	6178      	str	r0, [r7, #20]
 8003016:	e014      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003030:	f7ff f9c0 	bl	80023b4 <HAL_PWREx_GetVoltageRange>
 8003034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d10b      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d919      	bls.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2ba0      	cmp	r3, #160	; 0xa0
 8003054:	d902      	bls.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003056:	2302      	movs	r3, #2
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e013      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800305c:	2301      	movs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e010      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d902      	bls.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003068:	2303      	movs	r3, #3
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e00a      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d102      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003074:	2302      	movs	r3, #2
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e004      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d101      	bne.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4909      	ldr	r1, [pc, #36]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40022000 	.word	0x40022000

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d041      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030dc:	d02a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e2:	d824      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e8:	d008      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ee:	d81e      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f8:	d010      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030fa:	e018      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030fc:	4b86      	ldr	r3, [pc, #536]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a85      	ldr	r2, [pc, #532]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003108:	e015      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fabb 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3320      	adds	r3, #32
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fba6 	bl	8003874 <RCCEx_PLLSAI2_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	74fb      	strb	r3, [r7, #19]
      break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800313c:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314a:	4973      	ldr	r1, [pc, #460]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003152:	e001      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d041      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800316c:	d02a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800316e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003172:	d824      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003178:	d008      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800317a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800317e:	d81e      	bhi.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d010      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318a:	e018      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800318c:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003198:	e015      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fa73 	bl	800368c <RCCEx_PLLSAI1_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031aa:	e00c      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3320      	adds	r3, #32
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fb5e 	bl	8003874 <RCCEx_PLLSAI2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031bc:	e003      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	74fb      	strb	r3, [r7, #19]
      break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031cc:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031da:	494f      	ldr	r1, [pc, #316]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031e2:	e001      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a0 	beq.w	8003336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800320a:	2300      	movs	r3, #0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321a:	6593      	str	r3, [r2, #88]	; 0x58
 800321c:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003228:	2301      	movs	r3, #1
 800322a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003238:	f7fd fe4a 	bl	8000ed0 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fd fe46 	bl	8000ed0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	74fb      	strb	r3, [r7, #19]
        break;
 8003252:	e005      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003254:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ef      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d15c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	d019      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd fe05 	bl	8000ed0 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c8:	e00b      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fe01 	bl	8000ed0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d902      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	74fb      	strb	r3, [r7, #19]
            break;
 80032e0:	e006      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0ec      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	4904      	ldr	r1, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800330e:	e009      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
 8003314:	e006      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003324:	7c7b      	ldrb	r3, [r7, #17]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b9e      	ldr	r3, [pc, #632]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	4a9d      	ldr	r2, [pc, #628]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	4b98      	ldr	r3, [pc, #608]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0203 	bic.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	4994      	ldr	r1, [pc, #592]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003364:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 020c 	bic.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	498c      	ldr	r1, [pc, #560]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003386:	4b87      	ldr	r3, [pc, #540]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4983      	ldr	r1, [pc, #524]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a8:	4b7e      	ldr	r3, [pc, #504]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	497b      	ldr	r1, [pc, #492]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d8:	4972      	ldr	r1, [pc, #456]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ec:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	496a      	ldr	r1, [pc, #424]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800340e:	4b65      	ldr	r3, [pc, #404]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	4961      	ldr	r1, [pc, #388]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003430:	4b5c      	ldr	r3, [pc, #368]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343e:	4959      	ldr	r1, [pc, #356]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003460:	4950      	ldr	r1, [pc, #320]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	4948      	ldr	r1, [pc, #288]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	493f      	ldr	r1, [pc, #252]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d028      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034b8:	4b3a      	ldr	r3, [pc, #232]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034d6:	d106      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	e011      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ee:	d10c      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	2101      	movs	r1, #1
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f8c8 	bl	800368c <RCCEx_PLLSAI1_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003516:	4b23      	ldr	r3, [pc, #140]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	491f      	ldr	r1, [pc, #124]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003534:	d106      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003540:	60d3      	str	r3, [r2, #12]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f899 	bl	800368c <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02b      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003592:	d109      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a02      	ldr	r2, [pc, #8]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e014      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2101      	movs	r1, #1
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f867 	bl	800368c <RCCEx_PLLSAI1_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02f      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	4928      	ldr	r1, [pc, #160]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d10d      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2102      	movs	r1, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f844 	bl	800368c <RCCEx_PLLSAI1_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d014      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800360e:	7cfb      	ldrb	r3, [r7, #19]
 8003610:	74bb      	strb	r3, [r7, #18]
 8003612:	e011      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361c:	d10c      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3320      	adds	r3, #32
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f925 	bl	8003874 <RCCEx_PLLSAI2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003634:	7cfb      	ldrb	r3, [r7, #19]
 8003636:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003652:	490d      	ldr	r1, [pc, #52]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800367e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000

0800368c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369a:	4b75      	ldr	r3, [pc, #468]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d018      	beq.n	80036d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d10d      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036be:	4b6c      	ldr	r3, [pc, #432]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
       ||
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d047      	beq.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e044      	b.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d018      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x86>
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d825      	bhi.n	8003730 <RCCEx_PLLSAI1_Config+0xa4>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d002      	beq.n	80036ee <RCCEx_PLLSAI1_Config+0x62>
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d009      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x74>
 80036ec:	e020      	b.n	8003730 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ee:	4b60      	ldr	r3, [pc, #384]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11d      	bne.n	8003736 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fe:	e01a      	b.n	8003736 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003700:	4b5b      	ldr	r3, [pc, #364]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d116      	bne.n	800373a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e013      	b.n	800373a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003712:	4b57      	ldr	r3, [pc, #348]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10f      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800371e:	4b54      	ldr	r3, [pc, #336]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800372e:	e006      	b.n	800373e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      break;
 8003734:	e004      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003746:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	3b01      	subs	r3, #1
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	430b      	orrs	r3, r1
 800375c:	4944      	ldr	r1, [pc, #272]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d17d      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003768:	4b41      	ldr	r3, [pc, #260]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a40      	ldr	r2, [pc, #256]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003774:	f7fd fbac 	bl	8000ed0 <HAL_GetTick>
 8003778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800377a:	e009      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377c:	f7fd fba8 	bl	8000ed0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d902      	bls.n	8003790 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	73fb      	strb	r3, [r7, #15]
        break;
 800378e:	e005      	b.n	800379c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003790:	4b37      	ldr	r3, [pc, #220]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ef      	bne.n	800377c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d160      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	0211      	lsls	r1, r2, #8
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68d2      	ldr	r2, [r2, #12]
 80037be:	0912      	lsrs	r2, r2, #4
 80037c0:	0452      	lsls	r2, r2, #17
 80037c2:	430a      	orrs	r2, r1
 80037c4:	492a      	ldr	r1, [pc, #168]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	610b      	str	r3, [r1, #16]
 80037ca:	e027      	b.n	800381c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d112      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d2:	4b27      	ldr	r3, [pc, #156]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6892      	ldr	r2, [r2, #8]
 80037e2:	0211      	lsls	r1, r2, #8
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6912      	ldr	r2, [r2, #16]
 80037e8:	0852      	lsrs	r2, r2, #1
 80037ea:	3a01      	subs	r2, #1
 80037ec:	0552      	lsls	r2, r2, #21
 80037ee:	430a      	orrs	r2, r1
 80037f0:	491f      	ldr	r1, [pc, #124]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	610b      	str	r3, [r1, #16]
 80037f6:	e011      	b.n	800381c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	0211      	lsls	r1, r2, #8
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6952      	ldr	r2, [r2, #20]
 800380e:	0852      	lsrs	r2, r2, #1
 8003810:	3a01      	subs	r2, #1
 8003812:	0652      	lsls	r2, r2, #25
 8003814:	430a      	orrs	r2, r1
 8003816:	4916      	ldr	r1, [pc, #88]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fb52 	bl	8000ed0 <HAL_GetTick>
 800382c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800382e:	e009      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003830:	f7fd fb4e 	bl	8000ed0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	73fb      	strb	r3, [r7, #15]
          break;
 8003842:	e005      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ef      	beq.n	8003830 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	4904      	ldr	r1, [pc, #16]	; (8003870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000

08003874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003882:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800388e:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0203 	and.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d10d      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
       ||
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038a6:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
       ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d047      	beq.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	e044      	b.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d018      	beq.n	80038fa <RCCEx_PLLSAI2_Config+0x86>
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d825      	bhi.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <RCCEx_PLLSAI2_Config+0x62>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d009      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x74>
 80038d4:	e020      	b.n	8003918 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038d6:	4b55      	ldr	r3, [pc, #340]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038e6:	e01a      	b.n	800391e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d116      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f8:	e013      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fa:	4b4c      	ldr	r3, [pc, #304]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003906:	4b49      	ldr	r3, [pc, #292]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003916:	e006      	b.n	8003926 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
      break;
 800391c:	e004      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003926:	bf00      	nop
    }

    if(status == HAL_OK)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10d      	bne.n	800394a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6819      	ldr	r1, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	430b      	orrs	r3, r1
 8003944:	4939      	ldr	r1, [pc, #228]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d167      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a35      	ldr	r2, [pc, #212]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fd fab8 	bl	8000ed0 <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003962:	e009      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003964:	f7fd fab4 	bl	8000ed0 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d902      	bls.n	8003978 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	73fb      	strb	r3, [r7, #15]
        break;
 8003976:	e005      	b.n	8003984 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003978:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ef      	bne.n	8003964 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d14a      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003990:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	0211      	lsls	r1, r2, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	0912      	lsrs	r2, r2, #4
 80039a8:	0452      	lsls	r2, r2, #17
 80039aa:	430a      	orrs	r2, r1
 80039ac:	491f      	ldr	r1, [pc, #124]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	614b      	str	r3, [r1, #20]
 80039b2:	e011      	b.n	80039d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039b4:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	0211      	lsls	r1, r2, #8
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6912      	ldr	r2, [r2, #16]
 80039ca:	0852      	lsrs	r2, r2, #1
 80039cc:	3a01      	subs	r2, #1
 80039ce:	0652      	lsls	r2, r2, #25
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4916      	ldr	r1, [pc, #88]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd fa74 	bl	8000ed0 <HAL_GetTick>
 80039e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ea:	e009      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039ec:	f7fd fa70 	bl	8000ed0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	73fb      	strb	r3, [r7, #15]
          break;
 80039fe:	e005      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4904      	ldr	r1, [pc, #16]	; (8003a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e049      	b.n	8003ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f841 	bl	8003ade <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 f9f8 	bl	8003e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d001      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04f      	b.n	8003bac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a23      	ldr	r2, [pc, #140]	; (8003bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b36:	d018      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1e      	ldr	r2, [pc, #120]	; (8003bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1b      	ldr	r2, [pc, #108]	; (8003bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_TIM_Base_Start_IT+0x76>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d115      	bne.n	8003b96 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d015      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0xb4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d011      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b94:	e008      	b.n	8003ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e000      	b.n	8003baa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40012c00 	.word	0x40012c00
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	00010007 	.word	0x00010007

08003bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0202 	mvn.w	r2, #2
 8003c00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f905 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8f7 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f908 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d122      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0204 	mvn.w	r2, #4
 8003c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8db 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003c70:	e005      	b.n	8003c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8cd 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8de 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d122      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d11b      	bne.n	8003cd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0208 	mvn.w	r2, #8
 8003ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2204      	movs	r2, #4
 8003cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f8b1 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003cc4:	e005      	b.n	8003cd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8a3 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8b4 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b10      	cmp	r3, #16
 8003ce4:	d122      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d11b      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0210 	mvn.w	r2, #16
 8003cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2208      	movs	r2, #8
 8003d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f887 	bl	8003e26 <HAL_TIM_IC_CaptureCallback>
 8003d18:	e005      	b.n	8003d26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f879 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f88a 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10e      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0201 	mvn.w	r2, #1
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fc fee2 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b80      	cmp	r3, #128	; 0x80
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f914 	bl	8003fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d92:	d10e      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b80      	cmp	r3, #128	; 0x80
 8003da0:	d107      	bne.n	8003db2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f907 	bl	8003fc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d10e      	bne.n	8003dde <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d107      	bne.n	8003dde <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f838 	bl	8003e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d10e      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d107      	bne.n	8003e0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0220 	mvn.w	r2, #32
 8003e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8c7 	bl	8003f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01f      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d01b      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <TIM_Base_SetConfig+0x118>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d017      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	; (8003f80 <TIM_Base_SetConfig+0x11c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <TIM_Base_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00f      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a28      	ldr	r2, [pc, #160]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <TIM_Base_SetConfig+0x114>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00f      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <TIM_Base_SetConfig+0x124>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00b      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <TIM_Base_SetConfig+0x128>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <TIM_Base_SetConfig+0x12c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_Base_SetConfig+0xf8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <TIM_Base_SetConfig+0x130>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e040      	b.n	8004068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fe10 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0201 	bic.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f82c 	bl	8004070 <UART_SetConfig>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e022      	b.n	8004068 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 faaa 	bl	8004584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fb31 	bl	80046c8 <UART_CheckIdleState>
 8004066:	4603      	mov	r3, r0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4313      	orrs	r3, r2
 8004092:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4bad      	ldr	r3, [pc, #692]	; (8004350 <UART_SetConfig+0x2e0>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	69f9      	ldr	r1, [r7, #28]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4aa2      	ldr	r2, [pc, #648]	; (8004354 <UART_SetConfig+0x2e4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a99      	ldr	r2, [pc, #612]	; (8004358 <UART_SetConfig+0x2e8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d121      	bne.n	800413a <UART_SetConfig+0xca>
 80040f6:	4b99      	ldr	r3, [pc, #612]	; (800435c <UART_SetConfig+0x2ec>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b03      	cmp	r3, #3
 8004102:	d817      	bhi.n	8004134 <UART_SetConfig+0xc4>
 8004104:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x9c>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004129 	.word	0x08004129
 8004114:	08004123 	.word	0x08004123
 8004118:	0800412f 	.word	0x0800412f
 800411c:	2301      	movs	r3, #1
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e0e7      	b.n	80042f2 <UART_SetConfig+0x282>
 8004122:	2302      	movs	r3, #2
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e0e4      	b.n	80042f2 <UART_SetConfig+0x282>
 8004128:	2304      	movs	r3, #4
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	e0e1      	b.n	80042f2 <UART_SetConfig+0x282>
 800412e:	2308      	movs	r3, #8
 8004130:	76fb      	strb	r3, [r7, #27]
 8004132:	e0de      	b.n	80042f2 <UART_SetConfig+0x282>
 8004134:	2310      	movs	r3, #16
 8004136:	76fb      	strb	r3, [r7, #27]
 8004138:	e0db      	b.n	80042f2 <UART_SetConfig+0x282>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a88      	ldr	r2, [pc, #544]	; (8004360 <UART_SetConfig+0x2f0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d132      	bne.n	80041aa <UART_SetConfig+0x13a>
 8004144:	4b85      	ldr	r3, [pc, #532]	; (800435c <UART_SetConfig+0x2ec>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d828      	bhi.n	80041a4 <UART_SetConfig+0x134>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0xe8>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800418d 	.word	0x0800418d
 800415c:	080041a5 	.word	0x080041a5
 8004160:	080041a5 	.word	0x080041a5
 8004164:	080041a5 	.word	0x080041a5
 8004168:	08004199 	.word	0x08004199
 800416c:	080041a5 	.word	0x080041a5
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041a5 	.word	0x080041a5
 8004178:	08004193 	.word	0x08004193
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041a5 	.word	0x080041a5
 8004188:	0800419f 	.word	0x0800419f
 800418c:	2300      	movs	r3, #0
 800418e:	76fb      	strb	r3, [r7, #27]
 8004190:	e0af      	b.n	80042f2 <UART_SetConfig+0x282>
 8004192:	2302      	movs	r3, #2
 8004194:	76fb      	strb	r3, [r7, #27]
 8004196:	e0ac      	b.n	80042f2 <UART_SetConfig+0x282>
 8004198:	2304      	movs	r3, #4
 800419a:	76fb      	strb	r3, [r7, #27]
 800419c:	e0a9      	b.n	80042f2 <UART_SetConfig+0x282>
 800419e:	2308      	movs	r3, #8
 80041a0:	76fb      	strb	r3, [r7, #27]
 80041a2:	e0a6      	b.n	80042f2 <UART_SetConfig+0x282>
 80041a4:	2310      	movs	r3, #16
 80041a6:	76fb      	strb	r3, [r7, #27]
 80041a8:	e0a3      	b.n	80042f2 <UART_SetConfig+0x282>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a6d      	ldr	r2, [pc, #436]	; (8004364 <UART_SetConfig+0x2f4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d120      	bne.n	80041f6 <UART_SetConfig+0x186>
 80041b4:	4b69      	ldr	r3, [pc, #420]	; (800435c <UART_SetConfig+0x2ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041be:	2b30      	cmp	r3, #48	; 0x30
 80041c0:	d013      	beq.n	80041ea <UART_SetConfig+0x17a>
 80041c2:	2b30      	cmp	r3, #48	; 0x30
 80041c4:	d814      	bhi.n	80041f0 <UART_SetConfig+0x180>
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d009      	beq.n	80041de <UART_SetConfig+0x16e>
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d810      	bhi.n	80041f0 <UART_SetConfig+0x180>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <UART_SetConfig+0x168>
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d006      	beq.n	80041e4 <UART_SetConfig+0x174>
 80041d6:	e00b      	b.n	80041f0 <UART_SetConfig+0x180>
 80041d8:	2300      	movs	r3, #0
 80041da:	76fb      	strb	r3, [r7, #27]
 80041dc:	e089      	b.n	80042f2 <UART_SetConfig+0x282>
 80041de:	2302      	movs	r3, #2
 80041e0:	76fb      	strb	r3, [r7, #27]
 80041e2:	e086      	b.n	80042f2 <UART_SetConfig+0x282>
 80041e4:	2304      	movs	r3, #4
 80041e6:	76fb      	strb	r3, [r7, #27]
 80041e8:	e083      	b.n	80042f2 <UART_SetConfig+0x282>
 80041ea:	2308      	movs	r3, #8
 80041ec:	76fb      	strb	r3, [r7, #27]
 80041ee:	e080      	b.n	80042f2 <UART_SetConfig+0x282>
 80041f0:	2310      	movs	r3, #16
 80041f2:	76fb      	strb	r3, [r7, #27]
 80041f4:	e07d      	b.n	80042f2 <UART_SetConfig+0x282>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5b      	ldr	r2, [pc, #364]	; (8004368 <UART_SetConfig+0x2f8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d120      	bne.n	8004242 <UART_SetConfig+0x1d2>
 8004200:	4b56      	ldr	r3, [pc, #344]	; (800435c <UART_SetConfig+0x2ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800420a:	2bc0      	cmp	r3, #192	; 0xc0
 800420c:	d013      	beq.n	8004236 <UART_SetConfig+0x1c6>
 800420e:	2bc0      	cmp	r3, #192	; 0xc0
 8004210:	d814      	bhi.n	800423c <UART_SetConfig+0x1cc>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d009      	beq.n	800422a <UART_SetConfig+0x1ba>
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d810      	bhi.n	800423c <UART_SetConfig+0x1cc>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <UART_SetConfig+0x1b4>
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x1c0>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x1cc>
 8004224:	2300      	movs	r3, #0
 8004226:	76fb      	strb	r3, [r7, #27]
 8004228:	e063      	b.n	80042f2 <UART_SetConfig+0x282>
 800422a:	2302      	movs	r3, #2
 800422c:	76fb      	strb	r3, [r7, #27]
 800422e:	e060      	b.n	80042f2 <UART_SetConfig+0x282>
 8004230:	2304      	movs	r3, #4
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e05d      	b.n	80042f2 <UART_SetConfig+0x282>
 8004236:	2308      	movs	r3, #8
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e05a      	b.n	80042f2 <UART_SetConfig+0x282>
 800423c:	2310      	movs	r3, #16
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e057      	b.n	80042f2 <UART_SetConfig+0x282>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a49      	ldr	r2, [pc, #292]	; (800436c <UART_SetConfig+0x2fc>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x228>
 800424c:	4b43      	ldr	r3, [pc, #268]	; (800435c <UART_SetConfig+0x2ec>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x21c>
 800425c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004260:	d817      	bhi.n	8004292 <UART_SetConfig+0x222>
 8004262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004266:	d00b      	beq.n	8004280 <UART_SetConfig+0x210>
 8004268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426c:	d811      	bhi.n	8004292 <UART_SetConfig+0x222>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <UART_SetConfig+0x20a>
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x216>
 8004278:	e00b      	b.n	8004292 <UART_SetConfig+0x222>
 800427a:	2300      	movs	r3, #0
 800427c:	76fb      	strb	r3, [r7, #27]
 800427e:	e038      	b.n	80042f2 <UART_SetConfig+0x282>
 8004280:	2302      	movs	r3, #2
 8004282:	76fb      	strb	r3, [r7, #27]
 8004284:	e035      	b.n	80042f2 <UART_SetConfig+0x282>
 8004286:	2304      	movs	r3, #4
 8004288:	76fb      	strb	r3, [r7, #27]
 800428a:	e032      	b.n	80042f2 <UART_SetConfig+0x282>
 800428c:	2308      	movs	r3, #8
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e02f      	b.n	80042f2 <UART_SetConfig+0x282>
 8004292:	2310      	movs	r3, #16
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e02c      	b.n	80042f2 <UART_SetConfig+0x282>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <UART_SetConfig+0x2e4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d125      	bne.n	80042ee <UART_SetConfig+0x27e>
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <UART_SetConfig+0x2ec>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b0:	d017      	beq.n	80042e2 <UART_SetConfig+0x272>
 80042b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b6:	d817      	bhi.n	80042e8 <UART_SetConfig+0x278>
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d00b      	beq.n	80042d6 <UART_SetConfig+0x266>
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c2:	d811      	bhi.n	80042e8 <UART_SetConfig+0x278>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <UART_SetConfig+0x260>
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d006      	beq.n	80042dc <UART_SetConfig+0x26c>
 80042ce:	e00b      	b.n	80042e8 <UART_SetConfig+0x278>
 80042d0:	2300      	movs	r3, #0
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e00d      	b.n	80042f2 <UART_SetConfig+0x282>
 80042d6:	2302      	movs	r3, #2
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e00a      	b.n	80042f2 <UART_SetConfig+0x282>
 80042dc:	2304      	movs	r3, #4
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	e007      	b.n	80042f2 <UART_SetConfig+0x282>
 80042e2:	2308      	movs	r3, #8
 80042e4:	76fb      	strb	r3, [r7, #27]
 80042e6:	e004      	b.n	80042f2 <UART_SetConfig+0x282>
 80042e8:	2310      	movs	r3, #16
 80042ea:	76fb      	strb	r3, [r7, #27]
 80042ec:	e001      	b.n	80042f2 <UART_SetConfig+0x282>
 80042ee:	2310      	movs	r3, #16
 80042f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <UART_SetConfig+0x2e4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f040 8087 	bne.w	800440c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042fe:	7efb      	ldrb	r3, [r7, #27]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d837      	bhi.n	8004374 <UART_SetConfig+0x304>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x29c>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004331 	.word	0x08004331
 8004310:	08004375 	.word	0x08004375
 8004314:	08004339 	.word	0x08004339
 8004318:	08004375 	.word	0x08004375
 800431c:	0800433f 	.word	0x0800433f
 8004320:	08004375 	.word	0x08004375
 8004324:	08004375 	.word	0x08004375
 8004328:	08004375 	.word	0x08004375
 800432c:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe fe04 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8004334:	6178      	str	r0, [r7, #20]
        break;
 8004336:	e022      	b.n	800437e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <UART_SetConfig+0x300>)
 800433a:	617b      	str	r3, [r7, #20]
        break;
 800433c:	e01f      	b.n	800437e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe fd65 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8004342:	6178      	str	r0, [r7, #20]
        break;
 8004344:	e01b      	b.n	800437e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	617b      	str	r3, [r7, #20]
        break;
 800434c:	e017      	b.n	800437e <UART_SetConfig+0x30e>
 800434e:	bf00      	nop
 8004350:	efff69f3 	.word	0xefff69f3
 8004354:	40008000 	.word	0x40008000
 8004358:	40013800 	.word	0x40013800
 800435c:	40021000 	.word	0x40021000
 8004360:	40004400 	.word	0x40004400
 8004364:	40004800 	.word	0x40004800
 8004368:	40004c00 	.word	0x40004c00
 800436c:	40005000 	.word	0x40005000
 8004370:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	76bb      	strb	r3, [r7, #26]
        break;
 800437c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80f1 	beq.w	8004568 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	429a      	cmp	r2, r3
 8004394:	d305      	bcc.n	80043a2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d902      	bls.n	80043a8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	76bb      	strb	r3, [r7, #26]
 80043a6:	e0df      	b.n	8004568 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f04f 0100 	mov.w	r1, #0
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	020b      	lsls	r3, r1, #8
 80043ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043be:	0202      	lsls	r2, r0, #8
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	6849      	ldr	r1, [r1, #4]
 80043c4:	0849      	lsrs	r1, r1, #1
 80043c6:	4608      	mov	r0, r1
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	1814      	adds	r4, r2, r0
 80043ce:	eb43 0501 	adc.w	r5, r3, r1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fb fef6 	bl	80001d0 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f2:	d308      	bcc.n	8004406 <UART_SetConfig+0x396>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fa:	d204      	bcs.n	8004406 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e0b0      	b.n	8004568 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	76bb      	strb	r3, [r7, #26]
 800440a:	e0ad      	b.n	8004568 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004414:	d15c      	bne.n	80044d0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004416:	7efb      	ldrb	r3, [r7, #27]
 8004418:	2b08      	cmp	r3, #8
 800441a:	d828      	bhi.n	800446e <UART_SetConfig+0x3fe>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <UART_SetConfig+0x3b4>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	08004449 	.word	0x08004449
 8004428:	08004451 	.word	0x08004451
 800442c:	08004459 	.word	0x08004459
 8004430:	0800446f 	.word	0x0800446f
 8004434:	0800445f 	.word	0x0800445f
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800446f 	.word	0x0800446f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004448:	f7fe fd78 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 800444c:	6178      	str	r0, [r7, #20]
        break;
 800444e:	e013      	b.n	8004478 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004450:	f7fe fd8a 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004454:	6178      	str	r0, [r7, #20]
        break;
 8004456:	e00f      	b.n	8004478 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b49      	ldr	r3, [pc, #292]	; (8004580 <UART_SetConfig+0x510>)
 800445a:	617b      	str	r3, [r7, #20]
        break;
 800445c:	e00c      	b.n	8004478 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fcd5 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8004462:	6178      	str	r0, [r7, #20]
        break;
 8004464:	e008      	b.n	8004478 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	617b      	str	r3, [r7, #20]
        break;
 800446c:	e004      	b.n	8004478 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	76bb      	strb	r3, [r7, #26]
        break;
 8004476:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d074      	beq.n	8004568 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	005a      	lsls	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	2b0f      	cmp	r3, #15
 800449a:	d916      	bls.n	80044ca <UART_SetConfig+0x45a>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d212      	bcs.n	80044ca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f023 030f 	bic.w	r3, r3, #15
 80044ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	89fb      	ldrh	r3, [r7, #14]
 80044bc:	4313      	orrs	r3, r2
 80044be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	89fa      	ldrh	r2, [r7, #14]
 80044c6:	60da      	str	r2, [r3, #12]
 80044c8:	e04e      	b.n	8004568 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	76bb      	strb	r3, [r7, #26]
 80044ce:	e04b      	b.n	8004568 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d0:	7efb      	ldrb	r3, [r7, #27]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d827      	bhi.n	8004526 <UART_SetConfig+0x4b6>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <UART_SetConfig+0x46c>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004509 	.word	0x08004509
 80044e4:	08004511 	.word	0x08004511
 80044e8:	08004527 	.word	0x08004527
 80044ec:	08004517 	.word	0x08004517
 80044f0:	08004527 	.word	0x08004527
 80044f4:	08004527 	.word	0x08004527
 80044f8:	08004527 	.word	0x08004527
 80044fc:	0800451f 	.word	0x0800451f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fe fd1c 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8004504:	6178      	str	r0, [r7, #20]
        break;
 8004506:	e013      	b.n	8004530 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fe fd2e 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 800450c:	6178      	str	r0, [r7, #20]
        break;
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <UART_SetConfig+0x510>)
 8004512:	617b      	str	r3, [r7, #20]
        break;
 8004514:	e00c      	b.n	8004530 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004516:	f7fe fc79 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 800451a:	6178      	str	r0, [r7, #20]
        break;
 800451c:	e008      	b.n	8004530 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004522:	617b      	str	r3, [r7, #20]
        break;
 8004524:	e004      	b.n	8004530 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	76bb      	strb	r3, [r7, #26]
        break;
 800452e:	bf00      	nop
    }

    if (pclk != 0U)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d018      	beq.n	8004568 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	085a      	lsrs	r2, r3, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	441a      	add	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	b29b      	uxth	r3, r3
 800454a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b0f      	cmp	r3, #15
 8004550:	d908      	bls.n	8004564 <UART_SetConfig+0x4f4>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d204      	bcs.n	8004564 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	60da      	str	r2, [r3, #12]
 8004562:	e001      	b.n	8004568 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004574:	7ebb      	ldrb	r3, [r7, #26]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bdb0      	pop	{r4, r5, r7, pc}
 800457e:	bf00      	nop
 8004580:	00f42400 	.word	0x00f42400

08004584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004682:	d10a      	bne.n	800469a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d8:	f7fc fbfa 	bl	8000ed0 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d10e      	bne.n	800470a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f82d 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e023      	b.n	8004752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d10e      	bne.n	8004736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f817 	bl	800475a <UART_WaitOnFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e00d      	b.n	8004752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476a:	e05e      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004772:	d05a      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004774:	f7fc fbac 	bl	8000ed0 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <UART_WaitOnFlagUntilTimeout+0x30>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11b      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004798:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e043      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02c      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047de:	d124      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047f8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e00f      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d091      	beq.n	800476c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <__NVIC_SetPriority>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	; (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <SysTick_Handler+0x1c>)
 80048ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048b0:	f001 fcfe 	bl	80062b0 <xTaskGetSchedulerState>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d001      	beq.n	80048be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048ba:	f002 fae5 	bl	8006e88 <xPortSysTickHandler>
  }
}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	e000e010 	.word	0xe000e010

080048c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048cc:	2100      	movs	r1, #0
 80048ce:	f06f 0004 	mvn.w	r0, #4
 80048d2:	f7ff ffbf 	bl	8004854 <__NVIC_SetPriority>
#endif
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e2:	f3ef 8305 	mrs	r3, IPSR
 80048e6:	603b      	str	r3, [r7, #0]
  return(result);
 80048e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048ee:	f06f 0305 	mvn.w	r3, #5
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	e00c      	b.n	8004910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048f6:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <osKernelInitialize+0x44>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d105      	bne.n	800490a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <osKernelInitialize+0x44>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	e002      	b.n	8004910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	2000003c 	.word	0x2000003c

08004924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492a:	f3ef 8305 	mrs	r3, IPSR
 800492e:	603b      	str	r3, [r7, #0]
  return(result);
 8004930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004936:	f06f 0305 	mvn.w	r3, #5
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	e010      	b.n	8004960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <osKernelStart+0x48>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d109      	bne.n	800495a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004946:	f7ff ffbf 	bl	80048c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <osKernelStart+0x48>)
 800494c:	2202      	movs	r2, #2
 800494e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004950:	f001 f866 	bl	8005a20 <vTaskStartScheduler>
      stat = osOK;
 8004954:	2300      	movs	r3, #0
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e002      	b.n	8004960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800495e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000003c 	.word	0x2000003c

08004970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b08e      	sub	sp, #56	; 0x38
 8004974:	af04      	add	r7, sp, #16
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004980:	f3ef 8305 	mrs	r3, IPSR
 8004984:	617b      	str	r3, [r7, #20]
  return(result);
 8004986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004988:	2b00      	cmp	r3, #0
 800498a:	d17e      	bne.n	8004a8a <osThreadNew+0x11a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07b      	beq.n	8004a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004996:	2318      	movs	r3, #24
 8004998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d045      	beq.n	8004a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <osThreadNew+0x48>
        name = attr->name;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <osThreadNew+0x6e>
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b38      	cmp	r3, #56	; 0x38
 80049d0:	d805      	bhi.n	80049de <osThreadNew+0x6e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <osThreadNew+0x72>
        return (NULL);
 80049de:	2300      	movs	r3, #0
 80049e0:	e054      	b.n	8004a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	089b      	lsrs	r3, r3, #2
 80049f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00e      	beq.n	8004a18 <osThreadNew+0xa8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b5b      	cmp	r3, #91	; 0x5b
 8004a00:	d90a      	bls.n	8004a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <osThreadNew+0xa8>
        mem = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e010      	b.n	8004a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10c      	bne.n	8004a3a <osThreadNew+0xca>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d108      	bne.n	8004a3a <osThreadNew+0xca>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <osThreadNew+0xca>
          mem = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e001      	b.n	8004a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d110      	bne.n	8004a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a48:	9202      	str	r2, [sp, #8]
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fe0c 	bl	8005674 <xTaskCreateStatic>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e013      	b.n	8004a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	f107 0310 	add.w	r3, r7, #16
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fe57 	bl	800572e <xTaskCreate>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d001      	beq.n	8004a8a <osThreadNew+0x11a>
            hTask = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a8a:	693b      	ldr	r3, [r7, #16]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3728      	adds	r7, #40	; 0x28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9c:	f3ef 8305 	mrs	r3, IPSR
 8004aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <osDelay+0x1c>
    stat = osErrorISR;
 8004aa8:	f06f 0305 	mvn.w	r3, #5
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e007      	b.n	8004ac0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 ff7c 	bl	80059b8 <vTaskDelay>
    }
  }

  return (stat);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004adc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a06      	ldr	r2, [pc, #24]	; (8004afc <vApplicationGetIdleTaskMemory+0x30>)
 8004ae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000040 	.word	0x20000040
 8004afc:	2000009c 	.word	0x2000009c

08004b00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a06      	ldr	r2, [pc, #24]	; (8004b30 <vApplicationGetTimerTaskMemory+0x30>)
 8004b16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b1e:	601a      	str	r2, [r3, #0]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	2000029c 	.word	0x2000029c
 8004b30:	200002f8 	.word	0x200002f8

08004b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f103 0208 	add.w	r2, r3, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f103 0208 	add.w	r2, r3, #8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f103 0208 	add.w	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
}
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bec:	d103      	bne.n	8004bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e00c      	b.n	8004c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	e002      	b.n	8004c04 <vListInsert+0x2e>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d2f6      	bcs.n	8004bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6892      	ldr	r2, [r2, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6852      	ldr	r2, [r2, #4]
 8004c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d103      	bne.n	8004c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	1e5a      	subs	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cc6:	f002 f84d 	bl	8006d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	441a      	add	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	22ff      	movs	r2, #255	; 0xff
 8004d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d114      	bne.n	8004d46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3310      	adds	r3, #16
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 f903 	bl	8005f34 <xTaskRemoveFromEventList>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d012      	beq.n	8004d5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <xQueueGenericReset+0xcc>)
 8004d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	e009      	b.n	8004d5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3310      	adds	r3, #16
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fef2 	bl	8004b34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff feed 	bl	8004b34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d5a:	f002 f833 	bl	8006dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d5e:	2301      	movs	r3, #1
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08e      	sub	sp, #56	; 0x38
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10a      	bne.n	8004db2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <xQueueGenericCreateStatic+0x52>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <xQueueGenericCreateStatic+0x56>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <xQueueGenericCreateStatic+0x58>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	623b      	str	r3, [r7, #32]
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <xQueueGenericCreateStatic+0x7e>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <xQueueGenericCreateStatic+0x82>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <xQueueGenericCreateStatic+0x84>
 8004dee:	2300      	movs	r3, #0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61fb      	str	r3, [r7, #28]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e0a:	2350      	movs	r3, #80	; 0x50
 8004e0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b50      	cmp	r3, #80	; 0x50
 8004e12:	d00a      	beq.n	8004e2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	61bb      	str	r3, [r7, #24]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f805 	bl	8004e5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3730      	adds	r7, #48	; 0x30
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	69b8      	ldr	r0, [r7, #24]
 8004e8e:	f7ff ff05 	bl	8004c9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08e      	sub	sp, #56	; 0x38
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xQueueGenericSend+0x32>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <xQueueGenericSend+0x40>
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <xQueueGenericSend+0x44>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <xQueueGenericSend+0x46>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <xQueueGenericSend+0x60>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d103      	bne.n	8004f12 <xQueueGenericSend+0x6e>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <xQueueGenericSend+0x72>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <xQueueGenericSend+0x74>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <xQueueGenericSend+0x8e>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	623b      	str	r3, [r7, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f32:	f001 f9bd 	bl	80062b0 <xTaskGetSchedulerState>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <xQueueGenericSend+0x9e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <xQueueGenericSend+0xa2>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueGenericSend+0xa4>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61fb      	str	r3, [r7, #28]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f62:	f001 feff 	bl	8006d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <xQueueGenericSend+0xd4>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d129      	bne.n	8004fcc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f7e:	f000 fa0b 	bl	8005398 <prvCopyDataToQueue>
 8004f82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d010      	beq.n	8004fae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	3324      	adds	r3, #36	; 0x24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 ffcf 	bl	8005f34 <xTaskRemoveFromEventList>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d013      	beq.n	8004fc4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b3f      	ldr	r3, [pc, #252]	; (800509c <xQueueGenericSend+0x1f8>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	e00a      	b.n	8004fc4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fb4:	4b39      	ldr	r3, [pc, #228]	; (800509c <xQueueGenericSend+0x1f8>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fc4:	f001 fefe 	bl	8006dc4 <vPortExitCritical>
				return pdPASS;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e063      	b.n	8005094 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d103      	bne.n	8004fda <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fd2:	f001 fef7 	bl	8006dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e05c      	b.n	8005094 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f001 f809 	bl	8005ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fee:	f001 fee9 	bl	8006dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ff2:	f000 fd7b 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ff6:	f001 feb5 	bl	8006d64 <vPortEnterCritical>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005000:	b25b      	sxtb	r3, r3
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005006:	d103      	bne.n	8005010 <xQueueGenericSend+0x16c>
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501c:	d103      	bne.n	8005026 <xQueueGenericSend+0x182>
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005026:	f001 fecd 	bl	8006dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800502a:	1d3a      	adds	r2, r7, #4
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fff8 	bl	8006028 <xTaskCheckForTimeOut>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d124      	bne.n	8005088 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800503e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005040:	f000 faa2 	bl	8005588 <prvIsQueueFull>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	3310      	adds	r3, #16
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ff1e 	bl	8005e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505a:	f000 fa2d 	bl	80054b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800505e:	f000 fd53 	bl	8005b08 <xTaskResumeAll>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f47f af7c 	bne.w	8004f62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <xQueueGenericSend+0x1f8>)
 800506c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	e772      	b.n	8004f62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800507c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800507e:	f000 fa1b 	bl	80054b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005082:	f000 fd41 	bl	8005b08 <xTaskResumeAll>
 8005086:	e76c      	b.n	8004f62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508a:	f000 fa15 	bl	80054b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800508e:	f000 fd3b 	bl	8005b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005094:	4618      	mov	r0, r3
 8005096:	3738      	adds	r7, #56	; 0x38
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b090      	sub	sp, #64	; 0x40
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <xQueueGenericSendFromISR+0x3c>
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueGenericSendFromISR+0x40>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueGenericSendFromISR+0x42>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <xQueueGenericSendFromISR+0x6a>
 8005102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <xQueueGenericSendFromISR+0x6e>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGenericSendFromISR+0x70>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	623b      	str	r3, [r7, #32]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800512a:	f001 fefd 	bl	8006f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800512e:	f3ef 8211 	mrs	r2, BASEPRI
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	61fa      	str	r2, [r7, #28]
 8005144:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005146:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <xQueueGenericSendFromISR+0xbc>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d12f      	bne.n	80051bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005172:	f000 f911 	bl	8005398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005176:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800517e:	d112      	bne.n	80051a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d016      	beq.n	80051b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	3324      	adds	r3, #36	; 0x24
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fed1 	bl	8005f34 <xTaskRemoveFromEventList>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00e      	beq.n	80051b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e007      	b.n	80051b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051aa:	3301      	adds	r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	b25a      	sxtb	r2, r3
 80051b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051b6:	2301      	movs	r3, #1
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051ba:	e001      	b.n	80051c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3740      	adds	r7, #64	; 0x40
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08c      	sub	sp, #48	; 0x30
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051e4:	2300      	movs	r3, #0
 80051e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <xQueueReceive+0x30>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	623b      	str	r3, [r7, #32]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <xQueueReceive+0x3e>
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <xQueueReceive+0x42>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueReceive+0x44>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueReceive+0x5e>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61fb      	str	r3, [r7, #28]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005236:	f001 f83b 	bl	80062b0 <xTaskGetSchedulerState>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <xQueueReceive+0x6e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <xQueueReceive+0x72>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <xQueueReceive+0x74>
 800524a:	2300      	movs	r3, #0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueReceive+0x8e>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	61bb      	str	r3, [r7, #24]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005266:	f001 fd7d 	bl	8006d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01f      	beq.n	80052b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800527a:	f000 f8f7 	bl	800546c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1e5a      	subs	r2, r3, #1
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	3310      	adds	r3, #16
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fe4e 	bl	8005f34 <xTaskRemoveFromEventList>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800529e:	4b3d      	ldr	r3, [pc, #244]	; (8005394 <xQueueReceive+0x1bc>)
 80052a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052ae:	f001 fd89 	bl	8006dc4 <vPortExitCritical>
				return pdPASS;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e069      	b.n	800538a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052bc:	f001 fd82 	bl	8006dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e062      	b.n	800538a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fe94 	bl	8005ffc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052d8:	f001 fd74 	bl	8006dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052dc:	f000 fc06 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052e0:	f001 fd40 	bl	8006d64 <vPortEnterCritical>
 80052e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f0:	d103      	bne.n	80052fa <xQueueReceive+0x122>
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005300:	b25b      	sxtb	r3, r3
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005306:	d103      	bne.n	8005310 <xQueueReceive+0x138>
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005310:	f001 fd58 	bl	8006dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005314:	1d3a      	adds	r2, r7, #4
 8005316:	f107 0310 	add.w	r3, r7, #16
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fe83 	bl	8006028 <xTaskCheckForTimeOut>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d123      	bne.n	8005370 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532a:	f000 f917 	bl	800555c <prvIsQueueEmpty>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d017      	beq.n	8005364 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fda9 	bl	8005e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005344:	f000 f8b8 	bl	80054b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005348:	f000 fbde 	bl	8005b08 <xTaskResumeAll>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d189      	bne.n	8005266 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <xQueueReceive+0x1bc>)
 8005354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	e780      	b.n	8005266 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005366:	f000 f8a7 	bl	80054b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800536a:	f000 fbcd 	bl	8005b08 <xTaskResumeAll>
 800536e:	e77a      	b.n	8005266 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005372:	f000 f8a1 	bl	80054b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005376:	f000 fbc7 	bl	8005b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800537a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537c:	f000 f8ee 	bl	800555c <prvIsQueueEmpty>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	f43f af6f 	beq.w	8005266 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005388:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800538a:	4618      	mov	r0, r3
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d14d      	bne.n	800545a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff92 	bl	80062ec <xTaskPriorityDisinherit>
 80053c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
 80053d0:	e043      	b.n	800545a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d119      	bne.n	800540c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6858      	ldr	r0, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	461a      	mov	r2, r3
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	f001 ffee 	bl	80073c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	441a      	add	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d32b      	bcc.n	800545a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e026      	b.n	800545a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68d8      	ldr	r0, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	461a      	mov	r2, r3
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	f001 ffd4 	bl	80073c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	425b      	negs	r3, r3
 8005426:	441a      	add	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d207      	bcs.n	8005448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	425b      	negs	r3, r3
 8005442:	441a      	add	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d105      	bne.n	800545a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3b01      	subs	r3, #1
 8005458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005462:	697b      	ldr	r3, [r7, #20]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	441a      	add	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d303      	bcc.n	80054a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68d9      	ldr	r1, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	461a      	mov	r2, r3
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f001 ff8a 	bl	80073c4 <memcpy>
	}
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c0:	f001 fc50 	bl	8006d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054cc:	e011      	b.n	80054f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d012      	beq.n	80054fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	3324      	adds	r3, #36	; 0x24
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fd2a 	bl	8005f34 <xTaskRemoveFromEventList>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054e6:	f000 fe01 	bl	80060ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	dce9      	bgt.n	80054ce <prvUnlockQueue+0x16>
 80054fa:	e000      	b.n	80054fe <prvUnlockQueue+0x46>
					break;
 80054fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	22ff      	movs	r2, #255	; 0xff
 8005502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005506:	f001 fc5d 	bl	8006dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550a:	f001 fc2b 	bl	8006d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005516:	e011      	b.n	800553c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d012      	beq.n	8005546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3310      	adds	r3, #16
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fd05 	bl	8005f34 <xTaskRemoveFromEventList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005530:	f000 fddc 	bl	80060ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005534:	7bbb      	ldrb	r3, [r7, #14]
 8005536:	3b01      	subs	r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800553c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005540:	2b00      	cmp	r3, #0
 8005542:	dce9      	bgt.n	8005518 <prvUnlockQueue+0x60>
 8005544:	e000      	b.n	8005548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	22ff      	movs	r2, #255	; 0xff
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005550:	f001 fc38 	bl	8006dc4 <vPortExitCritical>
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005564:	f001 fbfe 	bl	8006d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005570:	2301      	movs	r3, #1
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e001      	b.n	800557a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557a:	f001 fc23 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005590:	f001 fbe8 	bl	8006d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	429a      	cmp	r2, r3
 800559e:	d102      	bne.n	80055a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e001      	b.n	80055aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055aa:	f001 fc0b 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 80055ae:	68fb      	ldr	r3, [r7, #12]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c2:	2300      	movs	r3, #0
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e014      	b.n	80055f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055c8:	4a0f      	ldr	r2, [pc, #60]	; (8005608 <vQueueAddToRegistry+0x50>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d4:	490c      	ldr	r1, [pc, #48]	; (8005608 <vQueueAddToRegistry+0x50>)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <vQueueAddToRegistry+0x50>)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ea:	e006      	b.n	80055fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b07      	cmp	r3, #7
 80055f6:	d9e7      	bls.n	80055c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	20001a48 	.word	0x20001a48

0800560c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800561c:	f001 fba2 	bl	8006d64 <vPortEnterCritical>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800562c:	d103      	bne.n	8005636 <vQueueWaitForMessageRestricted+0x2a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005642:	d103      	bne.n	800564c <vQueueWaitForMessageRestricted+0x40>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	f001 fbba 	bl	8006dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3324      	adds	r3, #36	; 0x24
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fc3b 	bl	8005edc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f7ff ff26 	bl	80054b8 <prvUnlockQueue>
	}
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08e      	sub	sp, #56	; 0x38
 8005678:	af04      	add	r7, sp, #16
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	623b      	str	r3, [r7, #32]
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <xTaskCreateStatic+0x46>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	61fb      	str	r3, [r7, #28]
}
 80056b6:	bf00      	nop
 80056b8:	e7fe      	b.n	80056b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ba:	235c      	movs	r3, #92	; 0x5c
 80056bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b5c      	cmp	r3, #92	; 0x5c
 80056c2:	d00a      	beq.n	80056da <xTaskCreateStatic+0x66>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	61bb      	str	r3, [r7, #24]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01e      	beq.n	8005720 <xTaskCreateStatic+0xac>
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	2202      	movs	r2, #2
 80056f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fa:	2300      	movs	r3, #0
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	9302      	str	r3, [sp, #8]
 8005702:	f107 0314 	add.w	r3, r7, #20
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f850 	bl	80057b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571a:	f000 f8dd 	bl	80058d8 <prvAddNewTaskToReadyList>
 800571e:	e001      	b.n	8005724 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005724:	697b      	ldr	r3, [r7, #20]
	}
 8005726:	4618      	mov	r0, r3
 8005728:	3728      	adds	r7, #40	; 0x28
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08c      	sub	sp, #48	; 0x30
 8005732:	af04      	add	r7, sp, #16
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4618      	mov	r0, r3
 8005744:	f001 fc30 	bl	8006fa8 <pvPortMalloc>
 8005748:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005750:	205c      	movs	r0, #92	; 0x5c
 8005752:	f001 fc29 	bl	8006fa8 <pvPortMalloc>
 8005756:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
 8005764:	e005      	b.n	8005772 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005766:	6978      	ldr	r0, [r7, #20]
 8005768:	f001 fcea 	bl	8007140 <vPortFree>
 800576c:	e001      	b.n	8005772 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	2300      	movs	r3, #0
 8005784:	9303      	str	r3, [sp, #12]
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	9302      	str	r3, [sp, #8]
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f80e 	bl	80057b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579c:	69f8      	ldr	r0, [r7, #28]
 800579e:	f000 f89b 	bl	80058d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a2:	2301      	movs	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e002      	b.n	80057ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057ae:	69bb      	ldr	r3, [r7, #24]
	}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	21a5      	movs	r1, #165	; 0xa5
 80057d2:	f001 fe05 	bl	80073e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e0:	3b01      	subs	r3, #1
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f023 0307 	bic.w	r3, r3, #7
 80057ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	617b      	str	r3, [r7, #20]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01f      	beq.n	8005856 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	e012      	b.n	8005842 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	7819      	ldrb	r1, [r3, #0]
 8005824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	3334      	adds	r3, #52	; 0x34
 800582c:	460a      	mov	r2, r1
 800582e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	3301      	adds	r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b0f      	cmp	r3, #15
 8005846:	d9e9      	bls.n	800581c <prvInitialiseNewTask+0x64>
 8005848:	e000      	b.n	800584c <prvInitialiseNewTask+0x94>
			{
				break;
 800584a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005854:	e003      	b.n	800585e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	2b37      	cmp	r3, #55	; 0x37
 8005862:	d901      	bls.n	8005868 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005864:	2337      	movs	r3, #55	; 0x37
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005872:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2200      	movs	r2, #0
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f978 	bl	8004b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	3318      	adds	r3, #24
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff f973 	bl	8004b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	2200      	movs	r2, #0
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	69b8      	ldr	r0, [r7, #24]
 80058b8:	f001 f928 	bl	8006b0c <pxPortInitialiseStack>
 80058bc:	4602      	mov	r2, r0
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ce:	bf00      	nop
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058e0:	f001 fa40 	bl	8006d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058e4:	4b2d      	ldr	r3, [pc, #180]	; (800599c <prvAddNewTaskToReadyList+0xc4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4a2c      	ldr	r2, [pc, #176]	; (800599c <prvAddNewTaskToReadyList+0xc4>)
 80058ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d109      	bne.n	800590a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058f6:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058fc:	4b27      	ldr	r3, [pc, #156]	; (800599c <prvAddNewTaskToReadyList+0xc4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d110      	bne.n	8005926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005904:	f000 fc16 	bl	8006134 <prvInitialiseTaskLists>
 8005908:	e00d      	b.n	8005926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800590a:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <prvAddNewTaskToReadyList+0xcc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d109      	bne.n	8005926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005912:	4b23      	ldr	r3, [pc, #140]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d802      	bhi.n	8005926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005920:	4a1f      	ldr	r2, [pc, #124]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005926:	4b20      	ldr	r3, [pc, #128]	; (80059a8 <prvAddNewTaskToReadyList+0xd0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3301      	adds	r3, #1
 800592c:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <prvAddNewTaskToReadyList+0xd0>)
 800592e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005930:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <prvAddNewTaskToReadyList+0xd0>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <prvAddNewTaskToReadyList+0xd4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d903      	bls.n	800594c <prvAddNewTaskToReadyList+0x74>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a18      	ldr	r2, [pc, #96]	; (80059ac <prvAddNewTaskToReadyList+0xd4>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4a15      	ldr	r2, [pc, #84]	; (80059b0 <prvAddNewTaskToReadyList+0xd8>)
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3304      	adds	r3, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f7ff f913 	bl	8004b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005968:	f001 fa2c 	bl	8006dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800596c:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <prvAddNewTaskToReadyList+0xcc>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005974:	4b0a      	ldr	r3, [pc, #40]	; (80059a0 <prvAddNewTaskToReadyList+0xc8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	429a      	cmp	r2, r3
 8005980:	d207      	bcs.n	8005992 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <prvAddNewTaskToReadyList+0xdc>)
 8005984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000bcc 	.word	0x20000bcc
 80059a0:	200006f8 	.word	0x200006f8
 80059a4:	20000bd8 	.word	0x20000bd8
 80059a8:	20000be8 	.word	0x20000be8
 80059ac:	20000bd4 	.word	0x20000bd4
 80059b0:	200006fc 	.word	0x200006fc
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <vTaskDelay+0x60>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <vTaskDelay+0x30>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059e8:	f000 f880 	bl	8005aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fcea 	bl	80063c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059f4:	f000 f888 	bl	8005b08 <xTaskResumeAll>
 80059f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d107      	bne.n	8005a10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <vTaskDelay+0x64>)
 8005a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000bf4 	.word	0x20000bf4
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a2e:	463a      	mov	r2, r7
 8005a30:	1d39      	adds	r1, r7, #4
 8005a32:	f107 0308 	add.w	r3, r7, #8
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f848 	bl	8004acc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a3c:	6839      	ldr	r1, [r7, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	9202      	str	r2, [sp, #8]
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	4921      	ldr	r1, [pc, #132]	; (8005ad4 <vTaskStartScheduler+0xb4>)
 8005a50:	4821      	ldr	r0, [pc, #132]	; (8005ad8 <vTaskStartScheduler+0xb8>)
 8005a52:	f7ff fe0f 	bl	8005674 <xTaskCreateStatic>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a20      	ldr	r2, [pc, #128]	; (8005adc <vTaskStartScheduler+0xbc>)
 8005a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a5c:	4b1f      	ldr	r3, [pc, #124]	; (8005adc <vTaskStartScheduler+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a64:	2301      	movs	r3, #1
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e001      	b.n	8005a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a74:	f000 fcfc 	bl	8006470 <xTimerCreateTimerTask>
 8005a78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d116      	bne.n	8005aae <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	613b      	str	r3, [r7, #16]
}
 8005a92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <vTaskStartScheduler+0xc0>)
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <vTaskStartScheduler+0xc4>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <vTaskStartScheduler+0xc8>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aa8:	f001 f8ba 	bl	8006c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aac:	e00e      	b.n	8005acc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab4:	d10a      	bne.n	8005acc <vTaskStartScheduler+0xac>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60fb      	str	r3, [r7, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <vTaskStartScheduler+0xaa>
}
 8005acc:	bf00      	nop
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	08007414 	.word	0x08007414
 8005ad8:	08006105 	.word	0x08006105
 8005adc:	20000bf0 	.word	0x20000bf0
 8005ae0:	20000bec 	.word	0x20000bec
 8005ae4:	20000bd8 	.word	0x20000bd8
 8005ae8:	20000bd0 	.word	0x20000bd0

08005aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <vTaskSuspendAll+0x18>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a03      	ldr	r2, [pc, #12]	; (8005b04 <vTaskSuspendAll+0x18>)
 8005af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000bf4 	.word	0x20000bf4

08005b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b16:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b34:	f001 f916 	bl	8006d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	4a38      	ldr	r2, [pc, #224]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b42:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <xTaskResumeAll+0x118>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d162      	bne.n	8005c10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <xTaskResumeAll+0x11c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d05e      	beq.n	8005c10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b52:	e02f      	b.n	8005bb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b54:	4b34      	ldr	r3, [pc, #208]	; (8005c28 <xTaskResumeAll+0x120>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff f871 	bl	8004c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f86c 	bl	8004c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b74:	4b2d      	ldr	r3, [pc, #180]	; (8005c2c <xTaskResumeAll+0x124>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d903      	bls.n	8005b84 <xTaskResumeAll+0x7c>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <xTaskResumeAll+0x124>)
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <xTaskResumeAll+0x128>)
 8005b92:	441a      	add	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f7fe fff7 	bl	8004b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <xTaskResumeAll+0x12c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <xTaskResumeAll+0x120>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1cb      	bne.n	8005b54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bc2:	f000 fb55 	bl	8006270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <xTaskResumeAll+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d010      	beq.n	8005bf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bd2:	f000 f847 	bl	8005c64 <xTaskIncrementTick>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005bdc:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f1      	bne.n	8005bd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <xTaskResumeAll+0x134>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bf4:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xTaskResumeAll+0x130>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <xTaskResumeAll+0x138>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c10:	f001 f8d8 	bl	8006dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c14:	68bb      	ldr	r3, [r7, #8]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000bf4 	.word	0x20000bf4
 8005c24:	20000bcc 	.word	0x20000bcc
 8005c28:	20000b8c 	.word	0x20000b8c
 8005c2c:	20000bd4 	.word	0x20000bd4
 8005c30:	200006fc 	.word	0x200006fc
 8005c34:	200006f8 	.word	0x200006f8
 8005c38:	20000be0 	.word	0x20000be0
 8005c3c:	20000bdc 	.word	0x20000bdc
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <xTaskGetTickCount+0x1c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000bd0 	.word	0x20000bd0

08005c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b4f      	ldr	r3, [pc, #316]	; (8005dac <xTaskIncrementTick+0x148>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 808f 	bne.w	8005d96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <xTaskIncrementTick+0x14c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c80:	4a4b      	ldr	r2, [pc, #300]	; (8005db0 <xTaskIncrementTick+0x14c>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d120      	bne.n	8005cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c8c:	4b49      	ldr	r3, [pc, #292]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <xTaskIncrementTick+0x48>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	603b      	str	r3, [r7, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <xTaskIncrementTick+0x46>
 8005cac:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <xTaskIncrementTick+0x154>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a3f      	ldr	r2, [pc, #252]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	; (8005db8 <xTaskIncrementTick+0x154>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
 8005cc0:	4b3e      	ldr	r3, [pc, #248]	; (8005dbc <xTaskIncrementTick+0x158>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a3d      	ldr	r2, [pc, #244]	; (8005dbc <xTaskIncrementTick+0x158>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	f000 fad1 	bl	8006270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cce:	4b3c      	ldr	r3, [pc, #240]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d349      	bcc.n	8005d6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cd8:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ce8:	601a      	str	r2, [r3, #0]
					break;
 8005cea:	e03f      	b.n	8005d6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cec:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <xTaskIncrementTick+0x150>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d203      	bcs.n	8005d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d04:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <xTaskIncrementTick+0x15c>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0a:	e02f      	b.n	8005d6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe ff99 	bl	8004c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3318      	adds	r3, #24
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe ff90 	bl	8004c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <xTaskIncrementTick+0x160>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d903      	bls.n	8005d3c <xTaskIncrementTick+0xd8>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <xTaskIncrementTick+0x160>)
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4613      	mov	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <xTaskIncrementTick+0x164>)
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	4619      	mov	r1, r3
 8005d52:	4610      	mov	r0, r2
 8005d54:	f7fe ff1b 	bl	8004b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <xTaskIncrementTick+0x168>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d3b8      	bcc.n	8005cd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6a:	e7b5      	b.n	8005cd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d6c:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <xTaskIncrementTick+0x168>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d72:	4915      	ldr	r1, [pc, #84]	; (8005dc8 <xTaskIncrementTick+0x164>)
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	440b      	add	r3, r1
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d901      	bls.n	8005d88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <xTaskIncrementTick+0x16c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e004      	b.n	8005da0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d96:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <xTaskIncrementTick+0x170>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <xTaskIncrementTick+0x170>)
 8005d9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da0:	697b      	ldr	r3, [r7, #20]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000bf4 	.word	0x20000bf4
 8005db0:	20000bd0 	.word	0x20000bd0
 8005db4:	20000b84 	.word	0x20000b84
 8005db8:	20000b88 	.word	0x20000b88
 8005dbc:	20000be4 	.word	0x20000be4
 8005dc0:	20000bec 	.word	0x20000bec
 8005dc4:	20000bd4 	.word	0x20000bd4
 8005dc8:	200006fc 	.word	0x200006fc
 8005dcc:	200006f8 	.word	0x200006f8
 8005dd0:	20000be0 	.word	0x20000be0
 8005dd4:	20000bdc 	.word	0x20000bdc

08005dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dde:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <vTaskSwitchContext+0xa8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <vTaskSwitchContext+0xac>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dec:	e041      	b.n	8005e72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005dee:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <vTaskSwitchContext+0xac>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <vTaskSwitchContext+0xb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e010      	b.n	8005e1e <vTaskSwitchContext+0x46>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	607b      	str	r3, [r7, #4]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskSwitchContext+0x3e>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	491b      	ldr	r1, [pc, #108]	; (8005e8c <vTaskSwitchContext+0xb4>)
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0e4      	beq.n	8005dfc <vTaskSwitchContext+0x24>
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <vTaskSwitchContext+0xb4>)
 8005e3e:	4413      	add	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3308      	adds	r3, #8
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d104      	bne.n	8005e62 <vTaskSwitchContext+0x8a>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4a09      	ldr	r2, [pc, #36]	; (8005e90 <vTaskSwitchContext+0xb8>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	4a06      	ldr	r2, [pc, #24]	; (8005e88 <vTaskSwitchContext+0xb0>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6013      	str	r3, [r2, #0]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000bf4 	.word	0x20000bf4
 8005e84:	20000be0 	.word	0x20000be0
 8005e88:	20000bd4 	.word	0x20000bd4
 8005e8c:	200006fc 	.word	0x200006fc
 8005e90:	200006f8 	.word	0x200006f8

08005e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eba:	4b07      	ldr	r3, [pc, #28]	; (8005ed8 <vTaskPlaceOnEventList+0x44>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3318      	adds	r3, #24
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fe fe87 	bl	8004bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ec8:	2101      	movs	r1, #1
 8005eca:	6838      	ldr	r0, [r7, #0]
 8005ecc:	f000 fa7c 	bl	80063c8 <prvAddCurrentTaskToDelayedList>
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200006f8 	.word	0x200006f8

08005edc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	617b      	str	r3, [r7, #20]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3318      	adds	r3, #24
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7fe fe3e 	bl	8004b8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	68b8      	ldr	r0, [r7, #8]
 8005f22:	f000 fa51 	bl	80063c8 <prvAddCurrentTaskToDelayedList>
	}
 8005f26:	bf00      	nop
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200006f8 	.word	0x200006f8

08005f34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	60fb      	str	r3, [r7, #12]
}
 8005f5c:	bf00      	nop
 8005f5e:	e7fe      	b.n	8005f5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3318      	adds	r3, #24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fe6f 	bl	8004c48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <xTaskRemoveFromEventList+0xb0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11d      	bne.n	8005fae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fe66 	bl	8004c48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4b19      	ldr	r3, [pc, #100]	; (8005fe8 <xTaskRemoveFromEventList+0xb4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d903      	bls.n	8005f90 <xTaskRemoveFromEventList+0x5c>
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	4a16      	ldr	r2, [pc, #88]	; (8005fe8 <xTaskRemoveFromEventList+0xb4>)
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <xTaskRemoveFromEventList+0xb8>)
 8005f9e:	441a      	add	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f7fe fdf1 	bl	8004b8e <vListInsertEnd>
 8005fac:	e005      	b.n	8005fba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	480e      	ldr	r0, [pc, #56]	; (8005ff0 <xTaskRemoveFromEventList+0xbc>)
 8005fb6:	f7fe fdea 	bl	8004b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <xTaskRemoveFromEventList+0xc0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d905      	bls.n	8005fd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <xTaskRemoveFromEventList+0xc4>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e001      	b.n	8005fd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fd8:	697b      	ldr	r3, [r7, #20]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000bf4 	.word	0x20000bf4
 8005fe8:	20000bd4 	.word	0x20000bd4
 8005fec:	200006fc 	.word	0x200006fc
 8005ff0:	20000b8c 	.word	0x20000b8c
 8005ff4:	200006f8 	.word	0x200006f8
 8005ff8:	20000be0 	.word	0x20000be0

08005ffc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <vTaskInternalSetTimeOutState+0x24>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <vTaskInternalSetTimeOutState+0x28>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20000be4 	.word	0x20000be4
 8006024:	20000bd0 	.word	0x20000bd0

08006028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b088      	sub	sp, #32
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	613b      	str	r3, [r7, #16]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800606a:	f000 fe7b 	bl	8006d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800606e:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <xTaskCheckForTimeOut+0xbc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006086:	d102      	bne.n	800608e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e023      	b.n	80060d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <xTaskCheckForTimeOut+0xc0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d007      	beq.n	80060aa <xTaskCheckForTimeOut+0x82>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e015      	b.n	80060d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d20b      	bcs.n	80060cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff9b 	bl	8005ffc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e004      	b.n	80060d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 fe75 	bl	8006dc4 <vPortExitCritical>

	return xReturn;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000bd0 	.word	0x20000bd0
 80060e8:	20000be4 	.word	0x20000be4

080060ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060f0:	4b03      	ldr	r3, [pc, #12]	; (8006100 <vTaskMissedYield+0x14>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000be0 	.word	0x20000be0

08006104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800610c:	f000 f852 	bl	80061b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <prvIdleTask+0x28>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d9f9      	bls.n	800610c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <prvIdleTask+0x2c>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006128:	e7f0      	b.n	800610c <prvIdleTask+0x8>
 800612a:	bf00      	nop
 800612c:	200006fc 	.word	0x200006fc
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	e00c      	b.n	800615a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4a12      	ldr	r2, [pc, #72]	; (8006194 <prvInitialiseTaskLists+0x60>)
 800614c:	4413      	add	r3, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fcf0 	bl	8004b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3301      	adds	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b37      	cmp	r3, #55	; 0x37
 800615e:	d9ef      	bls.n	8006140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006160:	480d      	ldr	r0, [pc, #52]	; (8006198 <prvInitialiseTaskLists+0x64>)
 8006162:	f7fe fce7 	bl	8004b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006166:	480d      	ldr	r0, [pc, #52]	; (800619c <prvInitialiseTaskLists+0x68>)
 8006168:	f7fe fce4 	bl	8004b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800616c:	480c      	ldr	r0, [pc, #48]	; (80061a0 <prvInitialiseTaskLists+0x6c>)
 800616e:	f7fe fce1 	bl	8004b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006172:	480c      	ldr	r0, [pc, #48]	; (80061a4 <prvInitialiseTaskLists+0x70>)
 8006174:	f7fe fcde 	bl	8004b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006178:	480b      	ldr	r0, [pc, #44]	; (80061a8 <prvInitialiseTaskLists+0x74>)
 800617a:	f7fe fcdb 	bl	8004b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <prvInitialiseTaskLists+0x78>)
 8006180:	4a05      	ldr	r2, [pc, #20]	; (8006198 <prvInitialiseTaskLists+0x64>)
 8006182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <prvInitialiseTaskLists+0x7c>)
 8006186:	4a05      	ldr	r2, [pc, #20]	; (800619c <prvInitialiseTaskLists+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200006fc 	.word	0x200006fc
 8006198:	20000b5c 	.word	0x20000b5c
 800619c:	20000b70 	.word	0x20000b70
 80061a0:	20000b8c 	.word	0x20000b8c
 80061a4:	20000ba0 	.word	0x20000ba0
 80061a8:	20000bb8 	.word	0x20000bb8
 80061ac:	20000b84 	.word	0x20000b84
 80061b0:	20000b88 	.word	0x20000b88

080061b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ba:	e019      	b.n	80061f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061bc:	f000 fdd2 	bl	8006d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <prvCheckTasksWaitingTermination+0x50>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe fd3b 	bl	8004c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061d2:	4b0d      	ldr	r3, [pc, #52]	; (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061e6:	f000 fded 	bl	8006dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f810 	bl	8006210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f0:	4b06      	ldr	r3, [pc, #24]	; (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e1      	bne.n	80061bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000ba0 	.word	0x20000ba0
 8006208:	20000bcc 	.word	0x20000bcc
 800620c:	20000bb4 	.word	0x20000bb4

08006210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800621e:	2b00      	cmp	r3, #0
 8006220:	d108      	bne.n	8006234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	4618      	mov	r0, r3
 8006228:	f000 ff8a 	bl	8007140 <vPortFree>
				vPortFree( pxTCB );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 ff87 	bl	8007140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006232:	e018      	b.n	8006266 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800623a:	2b01      	cmp	r3, #1
 800623c:	d103      	bne.n	8006246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 ff7e 	bl	8007140 <vPortFree>
	}
 8006244:	e00f      	b.n	8006266 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800624c:	2b02      	cmp	r3, #2
 800624e:	d00a      	beq.n	8006266 <prvDeleteTCB+0x56>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <prvDeleteTCB+0x54>
	}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvResetNextTaskUnblockTime+0x38>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvResetNextTaskUnblockTime+0x3c>)
 8006282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006288:	e008      	b.n	800629c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <prvResetNextTaskUnblockTime+0x38>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a04      	ldr	r2, [pc, #16]	; (80062ac <prvResetNextTaskUnblockTime+0x3c>)
 800629a:	6013      	str	r3, [r2, #0]
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	20000b84 	.word	0x20000b84
 80062ac:	20000bec 	.word	0x20000bec

080062b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <xTaskGetSchedulerState+0x34>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d102      	bne.n	80062c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062be:	2301      	movs	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	e008      	b.n	80062d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <xTaskGetSchedulerState+0x38>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062cc:	2302      	movs	r3, #2
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	e001      	b.n	80062d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062d6:	687b      	ldr	r3, [r7, #4]
	}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20000bd8 	.word	0x20000bd8
 80062e8:	20000bf4 	.word	0x20000bf4

080062ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d056      	beq.n	80063b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006302:	4b2e      	ldr	r3, [pc, #184]	; (80063bc <xTaskPriorityDisinherit+0xd0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d00a      	beq.n	8006322 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	60fb      	str	r3, [r7, #12]
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60bb      	str	r3, [r7, #8]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006344:	1e5a      	subs	r2, r3, #1
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	429a      	cmp	r2, r3
 8006354:	d02c      	beq.n	80063b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635a:	2b00      	cmp	r3, #0
 800635c:	d128      	bne.n	80063b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	3304      	adds	r3, #4
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe fc70 	bl	8004c48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4b0f      	ldr	r3, [pc, #60]	; (80063c0 <xTaskPriorityDisinherit+0xd4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d903      	bls.n	8006390 <xTaskPriorityDisinherit+0xa4>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <xTaskPriorityDisinherit+0xd4>)
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	4613      	mov	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <xTaskPriorityDisinherit+0xd8>)
 800639e:	441a      	add	r2, r3
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f7fe fbf1 	bl	8004b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063b0:	697b      	ldr	r3, [r7, #20]
	}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	200006f8 	.word	0x200006f8
 80063c0:	20000bd4 	.word	0x20000bd4
 80063c4:	200006fc 	.word	0x200006fc

080063c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063d2:	4b21      	ldr	r3, [pc, #132]	; (8006458 <prvAddCurrentTaskToDelayedList+0x90>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d8:	4b20      	ldr	r3, [pc, #128]	; (800645c <prvAddCurrentTaskToDelayedList+0x94>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3304      	adds	r3, #4
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fc32 	bl	8004c48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d10a      	bne.n	8006402 <prvAddCurrentTaskToDelayedList+0x3a>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <prvAddCurrentTaskToDelayedList+0x94>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4819      	ldr	r0, [pc, #100]	; (8006460 <prvAddCurrentTaskToDelayedList+0x98>)
 80063fc:	f7fe fbc7 	bl	8004b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006400:	e026      	b.n	8006450 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <prvAddCurrentTaskToDelayedList+0x94>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	429a      	cmp	r2, r3
 8006418:	d209      	bcs.n	800642e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <prvAddCurrentTaskToDelayedList+0x9c>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <prvAddCurrentTaskToDelayedList+0x94>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe fbd5 	bl	8004bd6 <vListInsert>
}
 800642c:	e010      	b.n	8006450 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642e:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <prvAddCurrentTaskToDelayedList+0x94>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7fe fbcb 	bl	8004bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d202      	bcs.n	8006450 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800644a:	4a08      	ldr	r2, [pc, #32]	; (800646c <prvAddCurrentTaskToDelayedList+0xa4>)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000bd0 	.word	0x20000bd0
 800645c:	200006f8 	.word	0x200006f8
 8006460:	20000bb8 	.word	0x20000bb8
 8006464:	20000b88 	.word	0x20000b88
 8006468:	20000b84 	.word	0x20000b84
 800646c:	20000bec 	.word	0x20000bec

08006470 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800647a:	f000 fb07 	bl	8006a8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800647e:	4b1c      	ldr	r3, [pc, #112]	; (80064f0 <xTimerCreateTimerTask+0x80>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d021      	beq.n	80064ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800648e:	1d3a      	adds	r2, r7, #4
 8006490:	f107 0108 	add.w	r1, r7, #8
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fb31 	bl	8004b00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	9202      	str	r2, [sp, #8]
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	2302      	movs	r3, #2
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	2300      	movs	r3, #0
 80064ae:	460a      	mov	r2, r1
 80064b0:	4910      	ldr	r1, [pc, #64]	; (80064f4 <xTimerCreateTimerTask+0x84>)
 80064b2:	4811      	ldr	r0, [pc, #68]	; (80064f8 <xTimerCreateTimerTask+0x88>)
 80064b4:	f7ff f8de 	bl	8005674 <xTaskCreateStatic>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4a10      	ldr	r2, [pc, #64]	; (80064fc <xTimerCreateTimerTask+0x8c>)
 80064bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064be:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <xTimerCreateTimerTask+0x8c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064c6:	2301      	movs	r3, #1
 80064c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	613b      	str	r3, [r7, #16]
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000c28 	.word	0x20000c28
 80064f4:	0800741c 	.word	0x0800741c
 80064f8:	08006635 	.word	0x08006635
 80064fc:	20000c2c 	.word	0x20000c2c

08006500 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	; 0x28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	623b      	str	r3, [r7, #32]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <xTimerGenericCommand+0x98>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02a      	beq.n	800658c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b05      	cmp	r3, #5
 8006546:	dc18      	bgt.n	800657a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006548:	f7ff feb2 	bl	80062b0 <xTaskGetSchedulerState>
 800654c:	4603      	mov	r3, r0
 800654e:	2b02      	cmp	r3, #2
 8006550:	d109      	bne.n	8006566 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006552:	4b11      	ldr	r3, [pc, #68]	; (8006598 <xTimerGenericCommand+0x98>)
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f107 0110 	add.w	r1, r7, #16
 800655a:	2300      	movs	r3, #0
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	f7fe fca1 	bl	8004ea4 <xQueueGenericSend>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
 8006564:	e012      	b.n	800658c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <xTimerGenericCommand+0x98>)
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f107 0110 	add.w	r1, r7, #16
 800656e:	2300      	movs	r3, #0
 8006570:	2200      	movs	r2, #0
 8006572:	f7fe fc97 	bl	8004ea4 <xQueueGenericSend>
 8006576:	6278      	str	r0, [r7, #36]	; 0x24
 8006578:	e008      	b.n	800658c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800657a:	4b07      	ldr	r3, [pc, #28]	; (8006598 <xTimerGenericCommand+0x98>)
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	f107 0110 	add.w	r1, r7, #16
 8006582:	2300      	movs	r3, #0
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	f7fe fd8b 	bl	80050a0 <xQueueGenericSendFromISR>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800658e:	4618      	mov	r0, r3
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000c28 	.word	0x20000c28

0800659c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <prvProcessExpiredTimer+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fb47 	bl	8004c48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d022      	beq.n	800660e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	18d1      	adds	r1, r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	6978      	ldr	r0, [r7, #20]
 80065d6:	f000 f8d1 	bl	800677c <prvInsertTimerInActiveList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01f      	beq.n	8006620 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	2100      	movs	r1, #0
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	f7ff ff88 	bl	8006500 <xTimerGenericCommand>
 80065f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d113      	bne.n	8006620 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	60fb      	str	r3, [r7, #12]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	b2da      	uxtb	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	6978      	ldr	r0, [r7, #20]
 8006626:	4798      	blx	r3
}
 8006628:	bf00      	nop
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20000c20 	.word	0x20000c20

08006634 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4618      	mov	r0, r3
 8006642:	f000 f857 	bl	80066f4 <prvGetNextExpireTime>
 8006646:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4619      	mov	r1, r3
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f803 	bl	8006658 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006652:	f000 f8d5 	bl	8006800 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006656:	e7f1      	b.n	800663c <prvTimerTask+0x8>

08006658 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006662:	f7ff fa43 	bl	8005aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006666:	f107 0308 	add.w	r3, r7, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f866 	bl	800673c <prvSampleTimeNow>
 8006670:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d130      	bne.n	80066da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d806      	bhi.n	8006694 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006686:	f7ff fa3f 	bl	8005b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff ff85 	bl	800659c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006692:	e024      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d008      	beq.n	80066ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <prvProcessTimerOrBlockTask+0x90>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <prvProcessTimerOrBlockTask+0x50>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <prvProcessTimerOrBlockTask+0x52>
 80066a8:	2300      	movs	r3, #0
 80066aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <prvProcessTimerOrBlockTask+0x94>)
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fe ffa7 	bl	800560c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066be:	f7ff fa23 	bl	8005b08 <xTaskResumeAll>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066c8:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <prvProcessTimerOrBlockTask+0x98>)
 80066ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	f3bf 8f6f 	isb	sy
}
 80066d8:	e001      	b.n	80066de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066da:	f7ff fa15 	bl	8005b08 <xTaskResumeAll>
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000c24 	.word	0x20000c24
 80066ec:	20000c28 	.word	0x20000c28
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <prvGetNextExpireTime+0x44>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <prvGetNextExpireTime+0x16>
 8006706:	2201      	movs	r2, #1
 8006708:	e000      	b.n	800670c <prvGetNextExpireTime+0x18>
 800670a:	2200      	movs	r2, #0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <prvGetNextExpireTime+0x44>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e001      	b.n	8006728 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	20000c20 	.word	0x20000c20

0800673c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006744:	f7ff fa7e 	bl	8005c44 <xTaskGetTickCount>
 8006748:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800674a:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <prvSampleTimeNow+0x3c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	429a      	cmp	r2, r3
 8006752:	d205      	bcs.n	8006760 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006754:	f000 f936 	bl	80069c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e002      	b.n	8006766 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006766:	4a04      	ldr	r2, [pc, #16]	; (8006778 <prvSampleTimeNow+0x3c>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800676c:	68fb      	ldr	r3, [r7, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000c30 	.word	0x20000c30

0800677c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d812      	bhi.n	80067c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d302      	bcc.n	80067b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e01b      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067b6:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <prvInsertTimerInActiveList+0x7c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3304      	adds	r3, #4
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7fe fa08 	bl	8004bd6 <vListInsert>
 80067c6:	e012      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d206      	bcs.n	80067de <prvInsertTimerInActiveList+0x62>
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e007      	b.n	80067ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067de:	4b07      	ldr	r3, [pc, #28]	; (80067fc <prvInsertTimerInActiveList+0x80>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe f9f4 	bl	8004bd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	20000c24 	.word	0x20000c24
 80067fc:	20000c20 	.word	0x20000c20

08006800 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	; 0x38
 8006804:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006806:	e0ca      	b.n	800699e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da18      	bge.n	8006840 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	3304      	adds	r3, #4
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61fb      	str	r3, [r7, #28]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006836:	6850      	ldr	r0, [r2, #4]
 8006838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683a:	6892      	ldr	r2, [r2, #8]
 800683c:	4611      	mov	r1, r2
 800683e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f2c0 80aa 	blt.w	800699c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	3304      	adds	r3, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe f9f5 	bl	8004c48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800685e:	463b      	mov	r3, r7
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff ff6b 	bl	800673c <prvSampleTimeNow>
 8006866:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b09      	cmp	r3, #9
 800686c:	f200 8097 	bhi.w	800699e <prvProcessReceivedCommands+0x19e>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <prvProcessReceivedCommands+0x78>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	080068a1 	.word	0x080068a1
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068a1 	.word	0x080068a1
 8006884:	08006915 	.word	0x08006915
 8006888:	08006929 	.word	0x08006929
 800688c:	08006973 	.word	0x08006973
 8006890:	080068a1 	.word	0x080068a1
 8006894:	080068a1 	.word	0x080068a1
 8006898:	08006915 	.word	0x08006915
 800689c:	08006929 	.word	0x08006929
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	18d1      	adds	r1, r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c0:	f7ff ff5c 	bl	800677c <prvInsertTimerInActiveList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d069      	beq.n	800699e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d05e      	beq.n	800699e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	441a      	add	r2, r3
 80068e8:	2300      	movs	r3, #0
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	2300      	movs	r3, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068f2:	f7ff fe05 	bl	8006500 <xTimerGenericCommand>
 80068f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d14f      	bne.n	800699e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61bb      	str	r3, [r7, #24]
}
 8006910:	bf00      	nop
 8006912:	e7fe      	b.n	8006912 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691a:	f023 0301 	bic.w	r3, r3, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006926:	e03a      	b.n	800699e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	617b      	str	r3, [r7, #20]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	18d1      	adds	r1, r2, r3
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696c:	f7ff ff06 	bl	800677c <prvInsertTimerInActiveList>
					break;
 8006970:	e015      	b.n	800699e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006982:	f000 fbdd 	bl	8007140 <vPortFree>
 8006986:	e00a      	b.n	800699e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800699a:	e000      	b.n	800699e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800699c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800699e:	4b08      	ldr	r3, [pc, #32]	; (80069c0 <prvProcessReceivedCommands+0x1c0>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	1d39      	adds	r1, r7, #4
 80069a4:	2200      	movs	r2, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe fc16 	bl	80051d8 <xQueueReceive>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f af2a 	bne.w	8006808 <prvProcessReceivedCommands+0x8>
	}
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
 80069b8:	3730      	adds	r7, #48	; 0x30
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000c28 	.word	0x20000c28

080069c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ca:	e048      	b.n	8006a5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069cc:	4b2d      	ldr	r3, [pc, #180]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f92f 	bl	8004c48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02e      	beq.n	8006a5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d90e      	bls.n	8006a30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a1e:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3304      	adds	r3, #4
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7fe f8d4 	bl	8004bd6 <vListInsert>
 8006a2e:	e016      	b.n	8006a5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a30:	2300      	movs	r3, #0
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	2300      	movs	r3, #0
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f7ff fd60 	bl	8006500 <xTimerGenericCommand>
 8006a40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	603b      	str	r3, [r7, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a5e:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1b1      	bne.n	80069cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <prvSwitchTimerLists+0xc0>)
 8006a74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a76:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <prvSwitchTimerLists+0xc4>)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6013      	str	r3, [r2, #0]
}
 8006a7c:	bf00      	nop
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000c20 	.word	0x20000c20
 8006a88:	20000c24 	.word	0x20000c24

08006a8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a92:	f000 f967 	bl	8006d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a96:	4b15      	ldr	r3, [pc, #84]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d120      	bne.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a9e:	4814      	ldr	r0, [pc, #80]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aa0:	f7fe f848 	bl	8004b34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006aa4:	4813      	ldr	r0, [pc, #76]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006aa6:	f7fe f845 	bl	8004b34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <prvCheckForValidListAndQueue+0x6c>)
 8006aac:	4a10      	ldr	r2, [pc, #64]	; (8006af0 <prvCheckForValidListAndQueue+0x64>)
 8006aae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ab0:	4b12      	ldr	r3, [pc, #72]	; (8006afc <prvCheckForValidListAndQueue+0x70>)
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <prvCheckForValidListAndQueue+0x68>)
 8006ab4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <prvCheckForValidListAndQueue+0x74>)
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <prvCheckForValidListAndQueue+0x78>)
 8006abe:	2110      	movs	r1, #16
 8006ac0:	200a      	movs	r0, #10
 8006ac2:	f7fe f953 	bl	8004d6c <xQueueGenericCreateStatic>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a08      	ldr	r2, [pc, #32]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006aca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <prvCheckForValidListAndQueue+0x60>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	490b      	ldr	r1, [pc, #44]	; (8006b08 <prvCheckForValidListAndQueue+0x7c>)
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fd6c 	bl	80055b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ae0:	f000 f970 	bl	8006dc4 <vPortExitCritical>
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000c28 	.word	0x20000c28
 8006af0:	20000bf8 	.word	0x20000bf8
 8006af4:	20000c0c 	.word	0x20000c0c
 8006af8:	20000c20 	.word	0x20000c20
 8006afc:	20000c24 	.word	0x20000c24
 8006b00:	20000cd4 	.word	0x20000cd4
 8006b04:	20000c34 	.word	0x20000c34
 8006b08:	08007424 	.word	0x08007424

08006b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	3b04      	subs	r3, #4
 8006b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3b04      	subs	r3, #4
 8006b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0201 	bic.w	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3b04      	subs	r3, #4
 8006b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b3c:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <pxPortInitialiseStack+0x64>)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3b14      	subs	r3, #20
 8006b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f06f 0202 	mvn.w	r2, #2
 8006b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3b20      	subs	r3, #32
 8006b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	08006b75 	.word	0x08006b75

08006b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <prvTaskExitError+0x54>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b86:	d00a      	beq.n	8006b9e <prvTaskExitError+0x2a>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	60fb      	str	r3, [r7, #12]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <prvTaskExitError+0x28>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60bb      	str	r3, [r7, #8]
}
 8006bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bb2:	bf00      	nop
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0fc      	beq.n	8006bb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	2000000c 	.word	0x2000000c
 8006bcc:	00000000 	.word	0x00000000

08006bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <pxCurrentTCBConst2>)
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	6808      	ldr	r0, [r1, #0]
 8006bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	f380 8809 	msr	PSP, r0
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f04f 0000 	mov.w	r0, #0
 8006be6:	f380 8811 	msr	BASEPRI, r0
 8006bea:	4770      	bx	lr
 8006bec:	f3af 8000 	nop.w

08006bf0 <pxCurrentTCBConst2>:
 8006bf0:	200006f8 	.word	0x200006f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop

08006bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bf8:	4808      	ldr	r0, [pc, #32]	; (8006c1c <prvPortStartFirstTask+0x24>)
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	6800      	ldr	r0, [r0, #0]
 8006bfe:	f380 8808 	msr	MSP, r0
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f380 8814 	msr	CONTROL, r0
 8006c0a:	b662      	cpsie	i
 8006c0c:	b661      	cpsie	f
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	df00      	svc	0
 8006c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c1a:	bf00      	nop
 8006c1c:	e000ed08 	.word	0xe000ed08

08006c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c26:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <xPortStartScheduler+0x120>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a46      	ldr	r2, [pc, #280]	; (8006d44 <xPortStartScheduler+0x124>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10a      	bne.n	8006c46 <xPortStartScheduler+0x26>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	613b      	str	r3, [r7, #16]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c46:	4b3e      	ldr	r3, [pc, #248]	; (8006d40 <xPortStartScheduler+0x120>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <xPortStartScheduler+0x128>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d10a      	bne.n	8006c66 <xPortStartScheduler+0x46>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c66:	4b39      	ldr	r3, [pc, #228]	; (8006d4c <xPortStartScheduler+0x12c>)
 8006c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	22ff      	movs	r2, #255	; 0xff
 8006c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <xPortStartScheduler+0x130>)
 8006c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c8e:	4b31      	ldr	r3, [pc, #196]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c94:	e009      	b.n	8006caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c96:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4a2d      	ldr	r2, [pc, #180]	; (8006d54 <xPortStartScheduler+0x134>)
 8006c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb2:	2b80      	cmp	r3, #128	; 0x80
 8006cb4:	d0ef      	beq.n	8006c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cb6:	4b27      	ldr	r3, [pc, #156]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1c3 0307 	rsb	r3, r3, #7
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d00a      	beq.n	8006cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	60bb      	str	r3, [r7, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <xPortStartScheduler+0x134>)
 8006ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <xPortStartScheduler+0x134>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cea:	4a1a      	ldr	r2, [pc, #104]	; (8006d54 <xPortStartScheduler+0x134>)
 8006cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <xPortStartScheduler+0x138>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <xPortStartScheduler+0x138>)
 8006cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a14      	ldr	r2, [pc, #80]	; (8006d58 <xPortStartScheduler+0x138>)
 8006d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d0e:	f000 f8dd 	bl	8006ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <xPortStartScheduler+0x13c>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d18:	f000 f8fc 	bl	8006f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <xPortStartScheduler+0x140>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0f      	ldr	r2, [pc, #60]	; (8006d60 <xPortStartScheduler+0x140>)
 8006d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d28:	f7ff ff66 	bl	8006bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d2c:	f7ff f854 	bl	8005dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d30:	f7ff ff20 	bl	8006b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000ed00 	.word	0xe000ed00
 8006d44:	410fc271 	.word	0x410fc271
 8006d48:	410fc270 	.word	0x410fc270
 8006d4c:	e000e400 	.word	0xe000e400
 8006d50:	20000d24 	.word	0x20000d24
 8006d54:	20000d28 	.word	0x20000d28
 8006d58:	e000ed20 	.word	0xe000ed20
 8006d5c:	2000000c 	.word	0x2000000c
 8006d60:	e000ef34 	.word	0xe000ef34

08006d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	607b      	str	r3, [r7, #4]
}
 8006d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3301      	adds	r3, #1
 8006d84:	4a0d      	ldr	r2, [pc, #52]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <vPortEnterCritical+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10f      	bne.n	8006db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <vPortEnterCritical+0x5c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	603b      	str	r3, [r7, #0]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <vPortEnterCritical+0x4a>
	}
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	2000000c 	.word	0x2000000c
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <vPortExitCritical+0x50>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <vPortExitCritical+0x24>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <vPortExitCritical+0x50>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <vPortExitCritical+0x50>)
 8006df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006df2:	4b08      	ldr	r3, [pc, #32]	; (8006e14 <vPortExitCritical+0x50>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <vPortExitCritical+0x42>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	2000000c 	.word	0x2000000c
	...

08006e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e20:	f3ef 8009 	mrs	r0, PSP
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <pxCurrentTCBConst>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f01e 0f10 	tst.w	lr, #16
 8006e30:	bf08      	it	eq
 8006e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	6010      	str	r0, [r2, #0]
 8006e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e44:	f380 8811 	msr	BASEPRI, r0
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f7fe ffc2 	bl	8005dd8 <vTaskSwitchContext>
 8006e54:	f04f 0000 	mov.w	r0, #0
 8006e58:	f380 8811 	msr	BASEPRI, r0
 8006e5c:	bc09      	pop	{r0, r3}
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	6808      	ldr	r0, [r1, #0]
 8006e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e66:	f01e 0f10 	tst.w	lr, #16
 8006e6a:	bf08      	it	eq
 8006e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e70:	f380 8809 	msr	PSP, r0
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	f3af 8000 	nop.w

08006e80 <pxCurrentTCBConst>:
 8006e80:	200006f8 	.word	0x200006f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop

08006e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	607b      	str	r3, [r7, #4]
}
 8006ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ea2:	f7fe fedf 	bl	8005c64 <xTaskIncrementTick>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <xPortSysTickHandler+0x40>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <vPortSetupTimerInterrupt+0x38>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006edc:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <vPortSetupTimerInterrupt+0x3c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <vPortSetupTimerInterrupt+0x40>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <vPortSetupTimerInterrupt+0x44>)
 8006eea:	3b01      	subs	r3, #1
 8006eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <vPortSetupTimerInterrupt+0x34>)
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	601a      	str	r2, [r3, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	e000e010 	.word	0xe000e010
 8006f04:	e000e018 	.word	0xe000e018
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	10624dd3 	.word	0x10624dd3
 8006f10:	e000e014 	.word	0xe000e014

08006f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f24 <vPortEnableVFP+0x10>
 8006f18:	6801      	ldr	r1, [r0, #0]
 8006f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f1e:	6001      	str	r1, [r0, #0]
 8006f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f22:	bf00      	nop
 8006f24:	e000ed88 	.word	0xe000ed88

08006f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f2e:	f3ef 8305 	mrs	r3, IPSR
 8006f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b0f      	cmp	r3, #15
 8006f38:	d914      	bls.n	8006f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f3a:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <vPortValidateInterruptPriority+0x70>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f44:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <vPortValidateInterruptPriority+0x74>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	7afa      	ldrb	r2, [r7, #11]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d20a      	bcs.n	8006f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	607b      	str	r3, [r7, #4]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f64:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <vPortValidateInterruptPriority+0x78>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <vPortValidateInterruptPriority+0x7c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d90a      	bls.n	8006f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	603b      	str	r3, [r7, #0]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <vPortValidateInterruptPriority+0x60>
	}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	e000e3f0 	.word	0xe000e3f0
 8006f9c:	20000d24 	.word	0x20000d24
 8006fa0:	e000ed0c 	.word	0xe000ed0c
 8006fa4:	20000d28 	.word	0x20000d28

08006fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fb4:	f7fe fd9a 	bl	8005aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fb8:	4b5b      	ldr	r3, [pc, #364]	; (8007128 <pvPortMalloc+0x180>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fc0:	f000 f920 	bl	8007204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fc4:	4b59      	ldr	r3, [pc, #356]	; (800712c <pvPortMalloc+0x184>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f040 8093 	bne.w	80070f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01d      	beq.n	8007014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fd8:	2208      	movs	r2, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d014      	beq.n	8007014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <pvPortMalloc+0x6c>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	617b      	str	r3, [r7, #20]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d06e      	beq.n	80070f8 <pvPortMalloc+0x150>
 800701a:	4b45      	ldr	r3, [pc, #276]	; (8007130 <pvPortMalloc+0x188>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d869      	bhi.n	80070f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007024:	4b43      	ldr	r3, [pc, #268]	; (8007134 <pvPortMalloc+0x18c>)
 8007026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007028:	4b42      	ldr	r3, [pc, #264]	; (8007134 <pvPortMalloc+0x18c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800702e:	e004      	b.n	800703a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <pvPortMalloc+0xa4>
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f1      	bne.n	8007030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800704c:	4b36      	ldr	r3, [pc, #216]	; (8007128 <pvPortMalloc+0x180>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007052:	429a      	cmp	r2, r3
 8007054:	d050      	beq.n	80070f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007056:	6a3b      	ldr	r3, [r7, #32]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2208      	movs	r2, #8
 800705c:	4413      	add	r3, r2
 800705e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	6a3b      	ldr	r3, [r7, #32]
 8007066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	2308      	movs	r3, #8
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	429a      	cmp	r2, r3
 8007076:	d91f      	bls.n	80070b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <pvPortMalloc+0xf8>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	613b      	str	r3, [r7, #16]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	1ad2      	subs	r2, r2, r3
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070b2:	69b8      	ldr	r0, [r7, #24]
 80070b4:	f000 f908 	bl	80072c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <pvPortMalloc+0x188>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	4a1b      	ldr	r2, [pc, #108]	; (8007130 <pvPortMalloc+0x188>)
 80070c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <pvPortMalloc+0x188>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <pvPortMalloc+0x190>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d203      	bcs.n	80070da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <pvPortMalloc+0x188>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a18      	ldr	r2, [pc, #96]	; (8007138 <pvPortMalloc+0x190>)
 80070d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <pvPortMalloc+0x184>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	431a      	orrs	r2, r3
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <pvPortMalloc+0x194>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3301      	adds	r3, #1
 80070f4:	4a11      	ldr	r2, [pc, #68]	; (800713c <pvPortMalloc+0x194>)
 80070f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070f8:	f7fe fd06 	bl	8005b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <pvPortMalloc+0x174>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60fb      	str	r3, [r7, #12]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <pvPortMalloc+0x172>
	return pvReturn;
 800711c:	69fb      	ldr	r3, [r7, #28]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	200018ec 	.word	0x200018ec
 800712c:	20001900 	.word	0x20001900
 8007130:	200018f0 	.word	0x200018f0
 8007134:	200018e4 	.word	0x200018e4
 8007138:	200018f4 	.word	0x200018f4
 800713c:	200018f8 	.word	0x200018f8

08007140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04d      	beq.n	80071ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007152:	2308      	movs	r3, #8
 8007154:	425b      	negs	r3, r3
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4413      	add	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <vPortFree+0xb8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4013      	ands	r3, r2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <vPortFree+0x44>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	60fb      	str	r3, [r7, #12]
}
 8007180:	bf00      	nop
 8007182:	e7fe      	b.n	8007182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <vPortFree+0x62>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	60bb      	str	r3, [r7, #8]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <vPortFree+0xb8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4013      	ands	r3, r2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01e      	beq.n	80071ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11a      	bne.n	80071ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <vPortFree+0xb8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	43db      	mvns	r3, r3
 80071c2:	401a      	ands	r2, r3
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071c8:	f7fe fc90 	bl	8005aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	4b0a      	ldr	r3, [pc, #40]	; (80071fc <vPortFree+0xbc>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4413      	add	r3, r2
 80071d6:	4a09      	ldr	r2, [pc, #36]	; (80071fc <vPortFree+0xbc>)
 80071d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071da:	6938      	ldr	r0, [r7, #16]
 80071dc:	f000 f874 	bl	80072c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <vPortFree+0xc0>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	4a06      	ldr	r2, [pc, #24]	; (8007200 <vPortFree+0xc0>)
 80071e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80071ea:	f7fe fc8d 	bl	8005b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071ee:	bf00      	nop
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20001900 	.word	0x20001900
 80071fc:	200018f0 	.word	0x200018f0
 8007200:	200018fc 	.word	0x200018fc

08007204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800720a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800720e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007210:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <prvHeapInit+0xac>)
 8007212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3307      	adds	r3, #7
 8007222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0307 	bic.w	r3, r3, #7
 800722a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	4a1f      	ldr	r2, [pc, #124]	; (80072b0 <prvHeapInit+0xac>)
 8007234:	4413      	add	r3, r2
 8007236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800723c:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <prvHeapInit+0xb0>)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <prvHeapInit+0xb0>)
 8007244:	2200      	movs	r2, #0
 8007246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4413      	add	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007250:	2208      	movs	r2, #8
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1a9b      	subs	r3, r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0307 	bic.w	r3, r3, #7
 800725e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <prvHeapInit+0xb4>)
 8007264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <prvHeapInit+0xb4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2200      	movs	r2, #0
 800726c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800726e:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <prvHeapInit+0xb4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <prvHeapInit+0xb4>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <prvHeapInit+0xb8>)
 8007292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <prvHeapInit+0xbc>)
 800729a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800729c:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <prvHeapInit+0xc0>)
 800729e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20000d2c 	.word	0x20000d2c
 80072b4:	200018e4 	.word	0x200018e4
 80072b8:	200018ec 	.word	0x200018ec
 80072bc:	200018f4 	.word	0x200018f4
 80072c0:	200018f0 	.word	0x200018f0
 80072c4:	20001900 	.word	0x20001900

080072c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072d0:	4b28      	ldr	r3, [pc, #160]	; (8007374 <prvInsertBlockIntoFreeList+0xac>)
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e002      	b.n	80072dc <prvInsertBlockIntoFreeList+0x14>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d8f7      	bhi.n	80072d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4413      	add	r3, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d108      	bne.n	800730a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	441a      	add	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	441a      	add	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d118      	bne.n	8007350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	4b15      	ldr	r3, [pc, #84]	; (8007378 <prvInsertBlockIntoFreeList+0xb0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d00d      	beq.n	8007346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	441a      	add	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	e008      	b.n	8007358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007346:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <prvInsertBlockIntoFreeList+0xb0>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	e003      	b.n	8007358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	429a      	cmp	r2, r3
 800735e:	d002      	beq.n	8007366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007366:	bf00      	nop
 8007368:	3714      	adds	r7, #20
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	200018e4 	.word	0x200018e4
 8007378:	200018ec 	.word	0x200018ec

0800737c <__libc_init_array>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	4d0d      	ldr	r5, [pc, #52]	; (80073b4 <__libc_init_array+0x38>)
 8007380:	4c0d      	ldr	r4, [pc, #52]	; (80073b8 <__libc_init_array+0x3c>)
 8007382:	1b64      	subs	r4, r4, r5
 8007384:	10a4      	asrs	r4, r4, #2
 8007386:	2600      	movs	r6, #0
 8007388:	42a6      	cmp	r6, r4
 800738a:	d109      	bne.n	80073a0 <__libc_init_array+0x24>
 800738c:	4d0b      	ldr	r5, [pc, #44]	; (80073bc <__libc_init_array+0x40>)
 800738e:	4c0c      	ldr	r4, [pc, #48]	; (80073c0 <__libc_init_array+0x44>)
 8007390:	f000 f82e 	bl	80073f0 <_init>
 8007394:	1b64      	subs	r4, r4, r5
 8007396:	10a4      	asrs	r4, r4, #2
 8007398:	2600      	movs	r6, #0
 800739a:	42a6      	cmp	r6, r4
 800739c:	d105      	bne.n	80073aa <__libc_init_array+0x2e>
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a4:	4798      	blx	r3
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7ee      	b.n	8007388 <__libc_init_array+0xc>
 80073aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80073ae:	4798      	blx	r3
 80073b0:	3601      	adds	r6, #1
 80073b2:	e7f2      	b.n	800739a <__libc_init_array+0x1e>
 80073b4:	080074a0 	.word	0x080074a0
 80073b8:	080074a0 	.word	0x080074a0
 80073bc:	080074a0 	.word	0x080074a0
 80073c0:	080074a4 	.word	0x080074a4

080073c4 <memcpy>:
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073cc:	d100      	bne.n	80073d0 <memcpy+0xc>
 80073ce:	4770      	bx	lr
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073da:	4291      	cmp	r1, r2
 80073dc:	d1f9      	bne.n	80073d2 <memcpy+0xe>
 80073de:	bd10      	pop	{r4, pc}

080073e0 <memset>:
 80073e0:	4402      	add	r2, r0
 80073e2:	4603      	mov	r3, r0
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d100      	bne.n	80073ea <memset+0xa>
 80073e8:	4770      	bx	lr
 80073ea:	f803 1b01 	strb.w	r1, [r3], #1
 80073ee:	e7f9      	b.n	80073e4 <memset+0x4>

080073f0 <_init>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr

080073fc <_fini>:
 80073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fe:	bf00      	nop
 8007400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007402:	bc08      	pop	{r3}
 8007404:	469e      	mov	lr, r3
 8007406:	4770      	bx	lr
