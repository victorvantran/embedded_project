
hello_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800834c  0800834c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800834c  0800834c  0001834c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008354  08008354  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008354  08008354  00018354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800835c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab0  20000010  0800836c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac0  0800836c  00021ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021218  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4a  00000000  00000000  00041258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00044ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  000466d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004142  00000000  00000000  00047fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9d4  00000000  00000000  0004c102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001108d2  00000000  00000000  00066ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001773a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007070  00000000  00000000  001773fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082a0 	.word	0x080082a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080082a0 	.word	0x080082a0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc26 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f81c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9d8 	bl	8000888 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f9a6 	bl	8000828 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004dc:	f000 f914 	bl	8000708 <MX_TIM1_Init>
  MX_ADC1_Init();
 80004e0:	f000 f89c 	bl	800061c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f005 f952 	bl	800578c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of soundDemoTask */
  soundDemoTaskHandle = osThreadNew(StartSoundDemoTask, NULL, &soundDemoTask_attributes);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x38>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x3c>)
 80004ee:	f005 f997 	bl	8005820 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <main+0x40>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f005 f96c 	bl	80057d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x34>
 80004fe:	bf00      	nop
 8000500:	080082e0 	.word	0x080082e0
 8000504:	08000901 	.word	0x08000901
 8000508:	20001958 	.word	0x20001958

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b0b8      	sub	sp, #224	; 0xe0
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000516:	2244      	movs	r2, #68	; 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f007 feb8 	bl	8008290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	463b      	mov	r3, r7
 8000532:	2288      	movs	r2, #136	; 0x88
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f007 feaa 	bl	8008290 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054a:	2310      	movs	r3, #16
 800054c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000562:	230a      	movs	r3, #10
 8000564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000568:	2307      	movs	r3, #7
 800056a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f8fe 	bl	8002780 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058a:	f000 f9ef 	bl	800096c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fcca 	bl	8002f4c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005be:	f000 f9d5 	bl	800096c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005c2:	f244 0302 	movw	r3, #16386	; 0x4002
 80005c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005d2:	2302      	movs	r3, #2
 80005d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005da:	2308      	movs	r3, #8
 80005dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005de:	2307      	movs	r3, #7
 80005e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005ee:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fee2 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80005fe:	f000 f9b5 	bl	800096c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f002 f865 	bl	80026d4 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000610:	f000 f9ac 	bl	800096c <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	37e0      	adds	r7, #224	; 0xe0
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800063e:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000640:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <MX_ADC1_Init+0xe4>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000650:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_ADC1_Init+0xe0>)
 800065e:	2204      	movs	r2, #4
 8000660:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_ADC1_Init+0xe0>)
 800066a:	2200      	movs	r2, #0
 800066c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800066e:	4b23      	ldr	r3, [pc, #140]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000670:	2201      	movs	r2, #1
 8000672:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069e:	4817      	ldr	r0, [pc, #92]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006a0:	f000 fd60 	bl	8001164 <HAL_ADC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006aa:	f000 f95f 	bl	800096c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006ba:	f001 fcc1 	bl	8002040 <HAL_ADCEx_MultiModeConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006c4:	f000 f952 	bl	800096c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006cc:	2306      	movs	r3, #6
 80006ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d4:	237f      	movs	r3, #127	; 0x7f
 80006d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d8:	2304      	movs	r3, #4
 80006da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006e6:	f001 f833 	bl	8001750 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f0:	f000 f93c 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200018f4 	.word	0x200018f4
 8000700:	50040000 	.word	0x50040000
 8000704:	14f00020 	.word	0x14f00020

08000708 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b096      	sub	sp, #88	; 0x58
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	222c      	movs	r2, #44	; 0x2c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f007 fdab 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800073a:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_TIM1_Init+0x118>)
 800073c:	4a39      	ldr	r2, [pc, #228]	; (8000824 <MX_TIM1_Init+0x11c>)
 800073e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80 - 1;
 8000740:	4b37      	ldr	r3, [pc, #220]	; (8000820 <MX_TIM1_Init+0x118>)
 8000742:	224f      	movs	r2, #79	; 0x4f
 8000744:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b36      	ldr	r3, [pc, #216]	; (8000820 <MX_TIM1_Init+0x118>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800074c:	4b34      	ldr	r3, [pc, #208]	; (8000820 <MX_TIM1_Init+0x118>)
 800074e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000752:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_TIM1_Init+0x118>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <MX_TIM1_Init+0x118>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <MX_TIM1_Init+0x118>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000766:	482e      	ldr	r0, [pc, #184]	; (8000820 <MX_TIM1_Init+0x118>)
 8000768:	f003 fbb6 	bl	8003ed8 <HAL_TIM_PWM_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f8fb 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000786:	4619      	mov	r1, r3
 8000788:	4825      	ldr	r0, [pc, #148]	; (8000820 <MX_TIM1_Init+0x118>)
 800078a:	f004 f9c3 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f8ea 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <MX_TIM1_Init+0x118>)
 80007be:	f003 fd01 	bl	80041c4 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007c8:	f000 f8d0 	bl	800096c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4807      	ldr	r0, [pc, #28]	; (8000820 <MX_TIM1_Init+0x118>)
 8000802:	f004 fa0f 	bl	8004c24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800080c:	f000 f8ae 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <MX_TIM1_Init+0x118>)
 8000812:	f000 f937 	bl	8000a84 <HAL_TIM_MspPostInit>

}
 8000816:	bf00      	nop
 8000818:	3758      	adds	r7, #88	; 0x58
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000195c 	.word	0x2000195c
 8000824:	40012c00 	.word	0x40012c00

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART2_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x58>)
 800086c:	f004 fa76 	bl	8004d5c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f879 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200019a8 	.word	0x200019a8
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_GPIO_Init+0x74>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a1a      	ldr	r2, [pc, #104]	; (80008fc <MX_GPIO_Init+0x74>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_GPIO_Init+0x74>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_GPIO_Init+0x74>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <MX_GPIO_Init+0x74>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_GPIO_Init+0x74>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_GPIO_Init+0x74>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <MX_GPIO_Init+0x74>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_GPIO_Init+0x74>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_GPIO_Init+0x74>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MX_GPIO_Init+0x74>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_GPIO_Init+0x74>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <StartSoundDemoTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSoundDemoTask */
void StartSoundDemoTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	HAL_ADC_Start(&hadc1);
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <StartSoundDemoTask+0x3c>)
 800090a:	f000 fd81 	bl	8001410 <HAL_ADC_Start>
  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800090e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <StartSoundDemoTask+0x3c>)
 8000914:	f000 fe36 	bl	8001584 <HAL_ADC_PollForConversion>
  	adc_raw = HAL_ADC_GetValue(&hadc1);
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <StartSoundDemoTask+0x3c>)
 800091a:	f000 ff0b 	bl	8001734 <HAL_ADC_GetValue>
 800091e:	4603      	mov	r3, r0
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <StartSoundDemoTask+0x40>)
 8000924:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, (uint8_t *)&adc_raw, 2, HAL_MAX_DELAY);
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092a:	2202      	movs	r2, #2
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <StartSoundDemoTask+0x40>)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <StartSoundDemoTask+0x44>)
 8000930:	f004 fa62 	bl	8004df8 <HAL_UART_Transmit>

  	//printf("hello\r\n");
  	//printf("%u\r\n", adc_raw & 0xFFFF);

    osDelay(10);
 8000934:	200a      	movs	r0, #10
 8000936:	f005 f805 	bl	8005944 <osDelay>
  	HAL_ADC_Start(&hadc1);
 800093a:	e7e5      	b.n	8000908 <StartSoundDemoTask+0x8>
 800093c:	200018f4 	.word	0x200018f4
 8000940:	20001a2c 	.word	0x20001a2c
 8000944:	200019a8 	.word	0x200019a8

08000948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095a:	f000 f9ff 	bl	8000d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40001000 	.word	0x40001000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_MspInit+0x4c>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_MspInit+0x4c>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_MspInit+0x4c>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_MspInit+0x4c>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_MspInit+0x4c>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	210f      	movs	r1, #15
 80009b2:	f06f 0001 	mvn.w	r0, #1
 80009b6:	f001 fcab 	bl	8002310 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <HAL_ADC_MspInit+0x74>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d124      	bne.n	8000a34 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 80009f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_ADC_MspInit+0x78>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a1e:	230b      	movs	r3, #11
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f001 fc98 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	50040000 	.word	0x50040000
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_TIM_PWM_MspInit+0x38>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d10b      	bne.n	8000a6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40012c00 	.word	0x40012c00
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_TIM_MspPostInit+0x68>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d11d      	bne.n	8000ae2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_TIM_MspPostInit+0x6c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_TIM_MspPostInit+0x6c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_TIM_MspPostInit+0x6c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f001 fc41 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a17      	ldr	r2, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x7c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d128      	bne.n	8000b68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_UART_MspInit+0x80>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f001 fbfe 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	2036      	movs	r0, #54	; 0x36
 8000b8e:	f001 fbbf 	bl	8002310 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b92:	2036      	movs	r0, #54	; 0x36
 8000b94:	f001 fbd8 	bl	8002348 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_InitTick+0x9c>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <HAL_InitTick+0x9c>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_InitTick+0x9c>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fb6c 	bl	8003298 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc0:	f002 fb3e 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8000bc4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <HAL_InitTick+0xa0>)
 8000bca:	fba2 2303 	umull	r2, r3, r2, r3
 8000bce:	0c9b      	lsrs	r3, r3, #18
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <HAL_InitTick+0xa8>)
 8000bd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_InitTick+0xa4>)
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bf4:	4809      	ldr	r0, [pc, #36]	; (8000c1c <HAL_InitTick+0xa4>)
 8000bf6:	f003 f89d 	bl	8003d34 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d104      	bne.n	8000c0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <HAL_InitTick+0xa4>)
 8000c02:	f003 f8f9 	bl	8003df8 <HAL_TIM_Base_Start_IT>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20001a30 	.word	0x20001a30
 8000c20:	40001000 	.word	0x40001000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM6_DAC_IRQHandler+0x10>)
 8000c56:	f003 f996 	bl	8003f86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20001a30 	.word	0x20001a30

08000c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <SystemInit+0x5c>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <SystemInit+0x5c>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <SystemInit+0x60>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <SystemInit+0x60>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <SystemInit+0x60>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <SystemInit+0x60>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <SystemInit+0x60>)
 8000c90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SystemInit+0x60>)
 8000c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <SystemInit+0x60>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <SystemInit+0x60>)
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SystemInit+0x60>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffca 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cd2:	e003      	b.n	8000cdc <LoopCopyDataInit>

08000cd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cda:	3104      	adds	r1, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ce0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ce2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ce4:	d3f6      	bcc.n	8000cd4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ce8:	e002      	b.n	8000cf0 <LoopFillZerobss>

08000cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cec:	f842 3b04 	str.w	r3, [r2], #4

08000cf0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <LoopForever+0x16>)
	cmp	r2, r3
 8000cf2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cf4:	d3f9      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f007 fa99 	bl	800822c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fbe5 	bl	80004c8 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d04:	0800835c 	.word	0x0800835c
	ldr	r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d0c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000d10:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000d14:	20001ac0 	.word	0x20001ac0

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_Init+0x3c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_Init+0x3c>)
 8000d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f001 fae1 	bl	80022fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ff1d 	bl	8000b78 <HAL_InitTick>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	e001      	b.n	8000d4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4a:	f7ff fe15 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40022000 	.word	0x40022000

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20001a7c 	.word	0x20001a7c

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001a7c 	.word	0x20001a7c

08000d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3360      	adds	r3, #96	; 0x60
 8000e16:	461a      	mov	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <LL_ADC_SetOffset+0x44>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	4313      	orrs	r3, r2
 8000e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	03fff000 	.word	0x03fff000

08000e4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3360      	adds	r3, #96	; 0x60
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3360      	adds	r3, #96	; 0x60
 8000e88:	461a      	mov	r2, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ea2:	bf00      	nop
 8000ea4:	371c      	adds	r7, #28
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3330      	adds	r3, #48	; 0x30
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	4413      	add	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f003 031f 	and.w	r3, r3, #31
 8000efe:	211f      	movs	r1, #31
 8000f00:	fa01 f303 	lsl.w	r3, r1, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	0e9b      	lsrs	r3, r3, #26
 8000f0c:	f003 011f 	and.w	r1, r3, #31
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3314      	adds	r3, #20
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	0e5b      	lsrs	r3, r3, #25
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	0d1b      	lsrs	r3, r3, #20
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	2107      	movs	r1, #7
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	0d1b      	lsrs	r3, r3, #20
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	431a      	orrs	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0318 	and.w	r3, r3, #24
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fa8:	40d9      	lsrs	r1, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	400b      	ands	r3, r1
 8000fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	0007ffff 	.word	0x0007ffff

08000fcc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 031f 	and.w	r3, r3, #31
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6093      	str	r3, [r2, #8]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800103c:	d101      	bne.n	8001042 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800108c:	d101      	bne.n	8001092 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <LL_ADC_IsEnabled+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_ADC_IsEnabled+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001102:	f043 0204 	orr.w	r2, r3, #4
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b04      	cmp	r3, #4
 8001128:	d101      	bne.n	800112e <LL_ADC_REG_IsConversionOngoing+0x18>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b08      	cmp	r3, #8
 800114e:	d101      	bne.n	8001154 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e136      	b.n	80013ec <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	2b00      	cmp	r3, #0
 800118a:	d109      	bne.n	80011a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fc1b 	bl	80009c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff3f 	bl	8001028 <LL_ADC_IsDeepPowerDownEnabled>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff25 	bl	8001004 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff5a 	bl	8001078 <LL_ADC_IsInternalRegulatorEnabled>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ff3e 	bl	8001050 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011d4:	4b87      	ldr	r3, [pc, #540]	; (80013f4 <HAL_ADC_Init+0x290>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	4a87      	ldr	r2, [pc, #540]	; (80013f8 <HAL_ADC_Init+0x294>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	3301      	adds	r3, #1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff3c 	bl	8001078 <LL_ADC_IsInternalRegulatorEnabled>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f043 0210 	orr.w	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff75 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 800122c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80cf 	bne.w	80013da <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f040 80cb 	bne.w	80013da <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001248:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff35 	bl	80010c8 <LL_ADC_IsEnabled>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d115      	bne.n	8001290 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001264:	4865      	ldr	r0, [pc, #404]	; (80013fc <HAL_ADC_Init+0x298>)
 8001266:	f7ff ff2f 	bl	80010c8 <LL_ADC_IsEnabled>
 800126a:	4604      	mov	r4, r0
 800126c:	4864      	ldr	r0, [pc, #400]	; (8001400 <HAL_ADC_Init+0x29c>)
 800126e:	f7ff ff2b 	bl	80010c8 <LL_ADC_IsEnabled>
 8001272:	4603      	mov	r3, r0
 8001274:	431c      	orrs	r4, r3
 8001276:	4863      	ldr	r0, [pc, #396]	; (8001404 <HAL_ADC_Init+0x2a0>)
 8001278:	f7ff ff26 	bl	80010c8 <LL_ADC_IsEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	4323      	orrs	r3, r4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4619      	mov	r1, r3
 800128a:	485f      	ldr	r0, [pc, #380]	; (8001408 <HAL_ADC_Init+0x2a4>)
 800128c:	f7ff fd86 	bl	8000d9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e5b      	ldrb	r3, [r3, #25]
 8001294:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800129a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80012a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80012a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d106      	bne.n	80012cc <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	3b01      	subs	r3, #1
 80012c4:	045b      	lsls	r3, r3, #17
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_ADC_Init+0x2a8>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff08 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001306:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff15 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 8001312:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13d      	bne.n	8001396 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d13a      	bne.n	8001396 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001324:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800132c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800133c:	f023 0302 	bic.w	r3, r3, #2
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	69b9      	ldr	r1, [r7, #24]
 8001346:	430b      	orrs	r3, r1
 8001348:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001350:	2b01      	cmp	r3, #1
 8001352:	d118      	bne.n	8001386 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800135e:	f023 0304 	bic.w	r3, r3, #4
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800136a:	4311      	orrs	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001370:	4311      	orrs	r1, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001376:	430a      	orrs	r2, r1
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	e007      	b.n	8001396 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d10c      	bne.n	80013b8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f023 010f 	bic.w	r1, r3, #15
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	631a      	str	r2, [r3, #48]	; 0x30
 80013b6:	e007      	b.n	80013c8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 020f 	bic.w	r2, r2, #15
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f023 0303 	bic.w	r3, r3, #3
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
 80013d8:	e007      	b.n	80013ea <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	053e2d63 	.word	0x053e2d63
 80013fc:	50040000 	.word	0x50040000
 8001400:	50040100 	.word	0x50040100
 8001404:	50040200 	.word	0x50040200
 8001408:	50040300 	.word	0x50040300
 800140c:	fff0c007 	.word	0xfff0c007

08001410 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001418:	4857      	ldr	r0, [pc, #348]	; (8001578 <HAL_ADC_Start+0x168>)
 800141a:	f7ff fdd7 	bl	8000fcc <LL_ADC_GetMultimode>
 800141e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fe76 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 809c 	bne.w	800156a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_Start+0x30>
 800143c:	2302      	movs	r3, #2
 800143e:	e097      	b.n	8001570 <HAL_ADC_Start+0x160>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fd71 	bl	8001f30 <ADC_Enable>
 800144e:	4603      	mov	r3, r0
 8001450:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 8083 	bne.w	8001560 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_ADC_Start+0x16c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d002      	beq.n	800147e <HAL_ADC_Start+0x6e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	e000      	b.n	8001480 <HAL_ADC_Start+0x70>
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_ADC_Start+0x170>)
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	4293      	cmp	r3, r2
 8001486:	d002      	beq.n	800148e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	f023 0206 	bic.w	r2, r3, #6
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58
 80014b4:	e002      	b.n	80014bc <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	221c      	movs	r2, #28
 80014c2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a2a      	ldr	r2, [pc, #168]	; (800157c <HAL_ADC_Start+0x16c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d002      	beq.n	80014dc <HAL_ADC_Start+0xcc>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	e000      	b.n	80014de <HAL_ADC_Start+0xce>
 80014dc:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_ADC_Start+0x170>)
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d008      	beq.n	80014f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d002      	beq.n	80014f8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d114      	bne.n	8001522 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800150e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fde7 	bl	80010ee <LL_ADC_REG_StartConversion>
 8001520:	e025      	b.n	800156e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <HAL_ADC_Start+0x16c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d002      	beq.n	800153e <HAL_ADC_Start+0x12e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e000      	b.n	8001540 <HAL_ADC_Start+0x130>
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_ADC_Start+0x170>)
 8001540:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00f      	beq.n	800156e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001556:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
 800155e:	e006      	b.n	800156e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001568:	e001      	b.n	800156e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800156a:	2302      	movs	r3, #2
 800156c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	50040300 	.word	0x50040300
 800157c:	50040100 	.word	0x50040100
 8001580:	50040000 	.word	0x50040000

08001584 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800158e:	4866      	ldr	r0, [pc, #408]	; (8001728 <HAL_ADC_PollForConversion+0x1a4>)
 8001590:	f7ff fd1c 	bl	8000fcc <LL_ADC_GetMultimode>
 8001594:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	2b08      	cmp	r3, #8
 800159c:	d102      	bne.n	80015a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800159e:	2308      	movs	r3, #8
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e02a      	b.n	80015fa <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d002      	beq.n	80015b6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b09      	cmp	r3, #9
 80015b4:	d111      	bne.n	80015da <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0a4      	b.n	800171e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015d4:	2304      	movs	r3, #4
 80015d6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015d8:	e00f      	b.n	80015fa <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015da:	4853      	ldr	r0, [pc, #332]	; (8001728 <HAL_ADC_PollForConversion+0x1a4>)
 80015dc:	f7ff fd04 	bl	8000fe8 <LL_ADC_GetMultiDMATransfer>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e093      	b.n	800171e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015f6:	2304      	movs	r3, #4
 80015f8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015fa:	f7ff fbc3 	bl	8000d84 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001600:	e021      	b.n	8001646 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001608:	d01d      	beq.n	8001646 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800160a:	f7ff fbbb 	bl	8000d84 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d302      	bcc.n	8001620 <HAL_ADC_PollForConversion+0x9c>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d112      	bne.n	8001646 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10b      	bne.n	8001646 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f043 0204 	orr.w	r2, r3, #4
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e06b      	b.n	800171e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	4013      	ands	r3, r2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0d6      	beq.n	8001602 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fc22 	bl	8000eae <LL_ADC_REG_IsTriggerSourceSWStart>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7e5b      	ldrb	r3, [r3, #25]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d118      	bne.n	80016aa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b08      	cmp	r3, #8
 8001684:	d111      	bne.n	80016aa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1f      	ldr	r2, [pc, #124]	; (800172c <HAL_ADC_PollForConversion+0x1a8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d002      	beq.n	80016ba <HAL_ADC_PollForConversion+0x136>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e000      	b.n	80016bc <HAL_ADC_PollForConversion+0x138>
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_ADC_PollForConversion+0x1ac>)
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d008      	beq.n	80016d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d002      	beq.n	80016d6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b09      	cmp	r3, #9
 80016d4:	d104      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	e00c      	b.n	80016fa <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_PollForConversion+0x1a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d002      	beq.n	80016f0 <HAL_ADC_PollForConversion+0x16c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	e000      	b.n	80016f2 <HAL_ADC_PollForConversion+0x16e>
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_ADC_PollForConversion+0x1ac>)
 80016f2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d104      	bne.n	800170a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2208      	movs	r2, #8
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e008      	b.n	800171c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	220c      	movs	r2, #12
 800171a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	50040300 	.word	0x50040300
 800172c:	50040100 	.word	0x50040100
 8001730:	50040000 	.word	0x50040000

08001734 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0b6      	sub	sp, #216	; 0xd8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x22>
 800176e:	2302      	movs	r3, #2
 8001770:	e3c7      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x7b2>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fcc9 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 83a8 	bne.w	8001edc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b05      	cmp	r3, #5
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	3b02      	subs	r3, #2
 800179a:	2b03      	cmp	r3, #3
 800179c:	d81b      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0x86>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_ADC_ConfigChannel+0x54>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	080017b5 	.word	0x080017b5
 80017a8:	080017bd 	.word	0x080017bd
 80017ac:	080017c5 	.word	0x080017c5
 80017b0:	080017cd 	.word	0x080017cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	220c      	movs	r2, #12
 80017b8:	605a      	str	r2, [r3, #4]
          break;
 80017ba:	e011      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2212      	movs	r2, #18
 80017c0:	605a      	str	r2, [r3, #4]
          break;
 80017c2:	e00d      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	2218      	movs	r2, #24
 80017c8:	605a      	str	r2, [r3, #4]
          break;
 80017ca:	e009      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d2:	605a      	str	r2, [r3, #4]
          break;
 80017d4:	e004      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2206      	movs	r2, #6
 80017da:	605a      	str	r2, [r3, #4]
          break;
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f7ff fb71 	bl	8000ed4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc8d 	bl	8001116 <LL_ADC_REG_IsConversionOngoing>
 80017fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fc99 	bl	800113c <LL_ADC_INJ_IsConversionOngoing>
 800180a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800180e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 81a6 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 81a1 	bne.w	8001b64 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	461a      	mov	r2, r3
 8001830:	f7ff fb7c 	bl	8000f2c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d00a      	beq.n	800186c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001866:	f7ff facd 	bl	8000e04 <LL_ADC_SetOffset>
 800186a:	e17b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff faea 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x148>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fadf 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	f003 021f 	and.w	r2, r3, #31
 8001896:	e01e      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x186>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fad4 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80018c6:	2320      	movs	r3, #32
 80018c8:	e004      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80018ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x19e>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e9b      	lsrs	r3, r3, #26
 80018e8:	f003 031f 	and.w	r3, r3, #31
 80018ec:	e018      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800190a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001912:	2320      	movs	r3, #32
 8001914:	e004      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001916:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001920:	429a      	cmp	r2, r3
 8001922:	d106      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faa3 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa87 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_ADC_ConfigChannel+0x20e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fa7c 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	0e9b      	lsrs	r3, r3, #26
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	e01e      	b.n	800199c <HAL_ADC_ConfigChannel+0x24c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fa71 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800197c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e004      	b.n	800199a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x264>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0e9b      	lsrs	r3, r3, #26
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	e018      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x296>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80019d8:	2320      	movs	r3, #32
 80019da:	e004      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80019dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	2101      	movs	r1, #1
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa40 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2102      	movs	r1, #2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fa24 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x2d4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2102      	movs	r1, #2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fa19 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	0e9b      	lsrs	r3, r3, #26
 8001a1e:	f003 021f 	and.w	r2, r3, #31
 8001a22:	e01e      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x312>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa0e 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a3a:	fa93 f3a3 	rbit	r3, r3
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a52:	2320      	movs	r3, #32
 8001a54:	e004      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x32a>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	0e9b      	lsrs	r3, r3, #26
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	e016      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x358>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	e004      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aa2:	fab3 f383 	clz	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d106      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9df 	bl	8000e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2103      	movs	r1, #3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f9c3 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10a      	bne.n	8001ae6 <HAL_ADC_ConfigChannel+0x396>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f9b8 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	0e9b      	lsrs	r3, r3, #26
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	e017      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x3c6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2103      	movs	r1, #3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9ad 	bl	8000e4c <LL_ADC_GetOffsetChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b00:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x3de>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	e011      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x402>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b46:	2320      	movs	r3, #32
 8001b48:	e003      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2103      	movs	r1, #3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f98a 	bl	8000e78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff faad 	bl	80010c8 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 813f 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff f9fe 	bl	8000f84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a8e      	ldr	r2, [pc, #568]	; (8001dc8 <HAL_ADC_ConfigChannel+0x678>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 8130 	bne.w	8001df4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10b      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x46c>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0e9b      	lsrs	r3, r3, #26
 8001baa:	3301      	adds	r3, #1
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e019      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x4a0>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	e003      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	3301      	adds	r3, #1
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2b09      	cmp	r3, #9
 8001be8:	bf94      	ite	ls
 8001bea:	2301      	movls	r3, #1
 8001bec:	2300      	movhi	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d079      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d107      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x4c0>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	3301      	adds	r3, #1
 8001c08:	069b      	lsls	r3, r3, #26
 8001c0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c0e:	e015      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x4ec>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c20:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c28:	2320      	movs	r3, #32
 8001c2a:	e003      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x50c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	e017      	b.n	8001c8c <HAL_ADC_ConfigChannel+0x53c>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	ea42 0103 	orr.w	r1, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x562>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	0e9b      	lsrs	r3, r3, #26
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	051b      	lsls	r3, r3, #20
 8001cb0:	e018      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x594>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	e080      	b.n	8001dea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x5b4>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0e9b      	lsrs	r3, r3, #26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	069b      	lsls	r3, r3, #26
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d02:	e015      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x5e0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	e003      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	069b      	lsls	r3, r3, #26
 8001d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x600>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	e017      	b.n	8001d80 <HAL_ADC_ConfigChannel+0x630>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	e003      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	ea42 0103 	orr.w	r1, r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10d      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x65c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001daa:	e01d      	b.n	8001de8 <HAL_ADC_ConfigChannel+0x698>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	613b      	str	r3, [r7, #16]
  return result;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e005      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x684>
 8001dc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 021f 	and.w	r2, r3, #31
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	3b1e      	subs	r3, #30
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de8:	430b      	orrs	r3, r1
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	6892      	ldr	r2, [r2, #8]
 8001dee:	4619      	mov	r1, r3
 8001df0:	f7ff f89c 	bl	8000f2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <HAL_ADC_ConfigChannel+0x7bc>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d07a      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e00:	4843      	ldr	r0, [pc, #268]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e02:	f7fe fff1 	bl	8000de8 <LL_ADC_GetCommonPathInternalCh>
 8001e06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a41      	ldr	r2, [pc, #260]	; (8001f14 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d12c      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d126      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x6e4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <HAL_ADC_ConfigChannel+0x7cc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d15d      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4834      	ldr	r0, [pc, #208]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e40:	f7fe ffbf 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	4a36      	ldr	r2, [pc, #216]	; (8001f24 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e5e:	e002      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f9      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e6c:	e040      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a2d      	ldr	r2, [pc, #180]	; (8001f28 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d118      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x75a>
 8001e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d112      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <HAL_ADC_ConfigChannel+0x7c8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_ADC_ConfigChannel+0x748>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_ADC_ConfigChannel+0x7cc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d12d      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481b      	ldr	r0, [pc, #108]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea4:	f7fe ff8d 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea8:	e024      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1f      	ldr	r2, [pc, #124]	; (8001f2c <HAL_ADC_ConfigChannel+0x7dc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d120      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11a      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d115      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480e      	ldr	r0, [pc, #56]	; (8001f10 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ed6:	f7fe ff74 	bl	8000dc2 <LL_ADC_SetCommonPathInternalCh>
 8001eda:	e00c      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee0:	f043 0220 	orr.w	r2, r3, #32
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001eee:	e002      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ef0:	bf00      	nop
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001efe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	37d8      	adds	r7, #216	; 0xd8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	80080000 	.word	0x80080000
 8001f10:	50040300 	.word	0x50040300
 8001f14:	c7520000 	.word	0xc7520000
 8001f18:	50040000 	.word	0x50040000
 8001f1c:	50040200 	.word	0x50040200
 8001f20:	20000000 	.word	0x20000000
 8001f24:	053e2d63 	.word	0x053e2d63
 8001f28:	cb840000 	.word	0xcb840000
 8001f2c:	80000001 	.word	0x80000001

08001f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8c3 	bl	80010c8 <LL_ADC_IsEnabled>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d14d      	bne.n	8001fe4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <ADC_Enable+0xc0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00d      	beq.n	8001f72 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e039      	b.n	8001fe6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f892 	bl	80010a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f7c:	f7fe ff02 	bl	8000d84 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f82:	e028      	b.n	8001fd6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f89d 	bl	80010c8 <LL_ADC_IsEnabled>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f881 	bl	80010a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9e:	f7fe fef1 	bl	8000d84 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d914      	bls.n	8001fd6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d00d      	beq.n	8001fd6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0210 	orr.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e007      	b.n	8001fe6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d1cf      	bne.n	8001f84 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	8000003f 	.word	0x8000003f

08001ff4 <LL_ADC_IsEnabled>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <LL_ADC_IsEnabled+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_ADC_IsEnabled+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_ADC_REG_IsConversionOngoing>:
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d101      	bne.n	8002032 <LL_ADC_REG_IsConversionOngoing+0x18>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b09f      	sub	sp, #124	; 0x7c
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800205a:	2302      	movs	r3, #2
 800205c:	e093      	b.n	8002186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002066:	2300      	movs	r3, #0
 8002068:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800206a:	2300      	movs	r3, #0
 800206c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a47      	ldr	r2, [pc, #284]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002078:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	e001      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e072      	b.n	8002186 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ffb9 	bl	800201a <LL_ADC_REG_IsConversionOngoing>
 80020a8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ffb3 	bl	800201a <LL_ADC_REG_IsConversionOngoing>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d154      	bne.n	8002164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80020ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d151      	bne.n	8002164 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80020c0:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80020c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d02c      	beq.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	035b      	lsls	r3, r3, #13
 80020e0:	430b      	orrs	r3, r1
 80020e2:	431a      	orrs	r2, r3
 80020e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e8:	4829      	ldr	r0, [pc, #164]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020ea:	f7ff ff83 	bl	8001ff4 <LL_ADC_IsEnabled>
 80020ee:	4604      	mov	r4, r0
 80020f0:	4828      	ldr	r0, [pc, #160]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020f2:	f7ff ff7f 	bl	8001ff4 <LL_ADC_IsEnabled>
 80020f6:	4603      	mov	r3, r0
 80020f8:	431c      	orrs	r4, r3
 80020fa:	4828      	ldr	r0, [pc, #160]	; (800219c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020fc:	f7ff ff7a 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002100:	4603      	mov	r3, r0
 8002102:	4323      	orrs	r3, r4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d137      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002110:	f023 030f 	bic.w	r3, r3, #15
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	6811      	ldr	r1, [r2, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	6892      	ldr	r2, [r2, #8]
 800211c:	430a      	orrs	r2, r1
 800211e:	431a      	orrs	r2, r3
 8002120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002122:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002124:	e028      	b.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002130:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002132:	4817      	ldr	r0, [pc, #92]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002134:	f7ff ff5e 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002138:	4604      	mov	r4, r0
 800213a:	4816      	ldr	r0, [pc, #88]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800213c:	f7ff ff5a 	bl	8001ff4 <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	431c      	orrs	r4, r3
 8002144:	4815      	ldr	r0, [pc, #84]	; (800219c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002146:	f7ff ff55 	bl	8001ff4 <LL_ADC_IsEnabled>
 800214a:	4603      	mov	r3, r0
 800214c:	4323      	orrs	r3, r4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800215a:	f023 030f 	bic.w	r3, r3, #15
 800215e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002160:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002162:	e009      	b.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002176:	e000      	b.n	800217a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002178:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002186:	4618      	mov	r0, r3
 8002188:	377c      	adds	r7, #124	; 0x7c
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop
 8002190:	50040000 	.word	0x50040000
 8002194:	50040100 	.word	0x50040100
 8002198:	50040300 	.word	0x50040300
 800219c:	50040200 	.word	0x50040200

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff4c 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002322:	f7ff ff61 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 8002326:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	6978      	ldr	r0, [r7, #20]
 800232e:	f7ff ffb1 	bl	8002294 <NVIC_EncodePriority>
 8002332:	4602      	mov	r2, r0
 8002334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff80 	bl	8002240 <__NVIC_SetPriority>
}
 8002340:	bf00      	nop
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff54 	bl	8002204 <__NVIC_EnableIRQ>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e17f      	b.n	8002674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8171 	beq.w	800266e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d00b      	beq.n	80023ac <HAL_GPIO_Init+0x48>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023a0:	2b11      	cmp	r3, #17
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b12      	cmp	r3, #18
 80023aa:	d130      	bne.n	800240e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023e2:	2201      	movs	r2, #1
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0201 	and.w	r2, r3, #1
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b03      	cmp	r3, #3
 8002418:	d118      	bne.n	800244c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002420:	2201      	movs	r2, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f003 0201 	and.w	r2, r3, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x128>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b12      	cmp	r3, #18
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <HAL_GPIO_Init+0x330>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	; (800269c <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	; (80026a0 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	; (80026a4 <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	; (80026a8 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x22a>
 800258a:	2306      	movs	r3, #6
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800258e:	2307      	movs	r3, #7
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b8:	4937      	ldr	r1, [pc, #220]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_GPIO_Init+0x350>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800261a:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_GPIO_Init+0x350>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	; (80026b4 <HAL_GPIO_Init+0x350>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f ae78 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40007000 	.word	0x40007000

080026d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e2:	d130      	bne.n	8002746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f0:	d038      	beq.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fa:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2232      	movs	r2, #50	; 0x32
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002718:	e002      	b.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3b01      	subs	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d102      	bne.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f2      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d110      	bne.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e00f      	b.n	8002766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002752:	d007      	beq.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800275c:	4a05      	ldr	r2, [pc, #20]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000
 8002778:	20000000 	.word	0x20000000
 800277c:	431bde83 	.word	0x431bde83

08002780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e3d4      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4ba1      	ldr	r3, [pc, #644]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800279c:	4b9e      	ldr	r3, [pc, #632]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80e4 	beq.w	800297c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_RCC_OscConfig+0x4a>
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	f040 808b 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	f040 8087 	bne.w	80028d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ca:	4b93      	ldr	r3, [pc, #588]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_RCC_OscConfig+0x62>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e3ac      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1a      	ldr	r2, [r3, #32]
 80027e6:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCC_OscConfig+0x7c>
 80027f2:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027fa:	e005      	b.n	8002808 <HAL_RCC_OscConfig+0x88>
 80027fc:	4b86      	ldr	r3, [pc, #536]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002808:	4293      	cmp	r3, r2
 800280a:	d223      	bcs.n	8002854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fd73 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e38d      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002820:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a7c      	ldr	r2, [pc, #496]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b7a      	ldr	r3, [pc, #488]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4977      	ldr	r1, [pc, #476]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	4972      	ldr	r1, [pc, #456]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
 8002852:	e025      	b.n	80028a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6f      	ldr	r2, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	496a      	ldr	r1, [pc, #424]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002872:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4965      	ldr	r1, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd33 	bl	80032fc <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e34d      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a0:	f000 fc36 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	495a      	ldr	r1, [pc, #360]	; (8002a1c <HAL_RCC_OscConfig+0x29c>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x2a0>)
 80028be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028c0:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_RCC_OscConfig+0x2a4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe f957 	bl	8000b78 <HAL_InitTick>
 80028ca:	4603      	mov	r3, r0
 80028cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d052      	beq.n	800297a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	e331      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d032      	beq.n	8002946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028e0:	4b4d      	ldr	r3, [pc, #308]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4c      	ldr	r2, [pc, #304]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ec:	f7fe fa4a 	bl	8000d84 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f4:	f7fe fa46 	bl	8000d84 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e31a      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002918:	f043 0308 	orr.w	r3, r3, #8
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	493b      	ldr	r1, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	4936      	ldr	r1, [pc, #216]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002946:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a33      	ldr	r2, [pc, #204]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002952:	f7fe fa17 	bl	8000d84 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800295a:	f7fe fa13 	bl	8000d84 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e2e7      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x1da>
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800297a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d074      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x21a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d10e      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b03      	cmp	r3, #3
 8002998:	d10b      	bne.n	80029b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d064      	beq.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d160      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e2c4      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x24a>
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a15      	ldr	r2, [pc, #84]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	e01d      	b.n	8002a06 <HAL_RCC_OscConfig+0x286>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x26e>
 80029d4:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x286>
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x298>)
 8002a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7fe f9b9 	bl	8000d84 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a14:	e011      	b.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08008304 	.word	0x08008304
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe f9ac 	bl	8000d84 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e280      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4baf      	ldr	r3, [pc, #700]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x2a8>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe f99c 	bl	8000d84 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe f998 	bl	8000d84 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e26c      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a62:	4ba5      	ldr	r3, [pc, #660]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x2d0>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d060      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x310>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d119      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d116      	bne.n	8002abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a90:	4b99      	ldr	r3, [pc, #612]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x328>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e249      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa8:	4b93      	ldr	r3, [pc, #588]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4990      	ldr	r1, [pc, #576]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002abc:	e040      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d023      	beq.n	8002b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac6:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a8b      	ldr	r2, [pc, #556]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f957 	bl	8000d84 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ada:	f7fe f953 	bl	8000d84 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e227      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aec:	4b82      	ldr	r3, [pc, #520]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af8:	4b7f      	ldr	r3, [pc, #508]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	497c      	ldr	r1, [pc, #496]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
 8002b0c:	e018      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0e:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a79      	ldr	r2, [pc, #484]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f933 	bl	8000d84 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b22:	f7fe f92f 	bl	8000d84 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e203      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b34:	4b70      	ldr	r3, [pc, #448]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b54:	4b68      	ldr	r3, [pc, #416]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe f90e 	bl	8000d84 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe f90a 	bl	8000d84 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1de      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <HAL_RCC_OscConfig+0x3ec>
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe f8f1 	bl	8000d84 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f8ed 	bl	8000d84 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1c1      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bb8:	4b4f      	ldr	r3, [pc, #316]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ef      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a6 	beq.w	8002d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10d      	bne.n	8002c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be8:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6593      	str	r3, [r2, #88]	; 0x58
 8002bf0:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c00:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <HAL_RCC_OscConfig+0x57c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d118      	bne.n	8002c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCC_OscConfig+0x57c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x57c>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c18:	f7fe f8b4 	bl	8000d84 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe f8b0 	bl	8000d84 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e184      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <HAL_RCC_OscConfig+0x57c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x4d8>
 8002c46:	4b2c      	ldr	r3, [pc, #176]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c56:	e024      	b.n	8002ca2 <HAL_RCC_OscConfig+0x522>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d110      	bne.n	8002c82 <HAL_RCC_OscConfig+0x502>
 8002c60:	4b25      	ldr	r3, [pc, #148]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c80:	e00f      	b.n	8002ca2 <HAL_RCC_OscConfig+0x522>
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002c9a:	f023 0304 	bic.w	r3, r3, #4
 8002c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d016      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe f86b 	bl	8000d84 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7fe f867 	bl	8000d84 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e139      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_OscConfig+0x578>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ed      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x532>
 8002cd6:	e01a      	b.n	8002d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe f854 	bl	8000d84 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cde:	e00f      	b.n	8002d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe f850 	bl	8000d84 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d906      	bls.n	8002d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e122      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d00:	4b90      	ldr	r3, [pc, #576]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e8      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b8b      	ldr	r3, [pc, #556]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	4a8a      	ldr	r2, [pc, #552]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8108 	beq.w	8002f3a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	f040 80d0 	bne.w	8002ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d34:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d130      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d127      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d11f      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d74:	2a07      	cmp	r2, #7
 8002d76:	bf14      	ite	ne
 8002d78:	2201      	movne	r2, #1
 8002d7a:	2200      	moveq	r2, #0
 8002d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d113      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d06e      	beq.n	8002e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d069      	beq.n	8002e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002db0:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b7      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dcc:	4b5d      	ldr	r3, [pc, #372]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5c      	ldr	r2, [pc, #368]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd8:	f7fd ffd4 	bl	8000d84 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fd ffd0 	bl	8000d84 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e0a4      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df2:	4b54      	ldr	r3, [pc, #336]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x7c8>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e18:	0212      	lsls	r2, r2, #8
 8002e1a:	4311      	orrs	r1, r2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0552      	lsls	r2, r2, #21
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e2c:	0852      	lsrs	r2, r2, #1
 8002e2e:	3a01      	subs	r2, #1
 8002e30:	0652      	lsls	r2, r2, #25
 8002e32:	4311      	orrs	r1, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e38:	0912      	lsrs	r2, r2, #4
 8002e3a:	0452      	lsls	r2, r2, #17
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4941      	ldr	r1, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e44:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a3b      	ldr	r2, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e5c:	f7fd ff92 	bl	8000d84 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fd ff8e 	bl	8000d84 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e062      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	4b33      	ldr	r3, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e82:	e05a      	b.n	8002f3a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e059      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e88:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d152      	bne.n	8002f3a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eac:	f7fd ff6a 	bl	8000d84 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fd ff66 	bl	8000d84 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e03a      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x734>
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d02d      	beq.n	8002f36 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002f04:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fd ff39 	bl	8000d84 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd ff35 	bl	8000d84 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e009      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_RCC_OscConfig+0x7c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x796>
 8002f34:	e001      	b.n	8002f3a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	f99d808c 	.word	0xf99d808c

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0c8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d910      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	4961      	ldr	r1, [pc, #388]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b0      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04c      	beq.n	8003036 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e09e      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e092      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e086      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e07e      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	493f      	ldr	r1, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fd febd 	bl	8000d84 <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fd feb9 	bl	8000d84 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e066      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 020c 	and.w	r2, r3, #12
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	429a      	cmp	r2, r3
 8003034:	d1eb      	bne.n	800300e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	492c      	ldr	r1, [pc, #176]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d210      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4924      	ldr	r1, [pc, #144]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e036      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4918      	ldr	r1, [pc, #96]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4910      	ldr	r1, [pc, #64]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c2:	f000 f825 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490c      	ldr	r1, [pc, #48]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fd46 	bl	8000b78 <HAL_InitTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80030f0:	7afb      	ldrb	r3, [r7, #11]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40021000 	.word	0x40021000
 8003104:	08008304 	.word	0x08008304
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x34>
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d121      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11e      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e005      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800316c:	4a2b      	ldr	r2, [pc, #172]	; (800321c <HAL_RCC_GetSysClockFreq+0x10c>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d102      	bne.n	800318e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_GetSysClockFreq+0x110>)
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e004      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d101      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_RCC_GetSysClockFreq+0x114>)
 8003196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d134      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d003      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0xac>
 80031b4:	e005      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_GetSysClockFreq+0x110>)
 80031b8:	617b      	str	r3, [r7, #20]
      break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_GetSysClockFreq+0x114>)
 80031be:	617b      	str	r3, [r7, #20]
      break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	617b      	str	r3, [r7, #20]
      break;
 80031c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	3301      	adds	r3, #1
 80031d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	fb02 f203 	mul.w	r2, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	0e5b      	lsrs	r3, r3, #25
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	3301      	adds	r3, #1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003208:	69bb      	ldr	r3, [r7, #24]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	0800831c 	.word	0x0800831c
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4904      	ldr	r1, [pc, #16]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08008314 	.word	0x08008314

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003270:	f7ff ffda 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0adb      	lsrs	r3, r3, #11
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	08008314 	.word	0x08008314

08003298 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	220f      	movs	r2, #15
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032a8:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_GetClockConfig+0x5c>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0203 	and.w	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_GetClockConfig+0x5c>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_GetClockConfig+0x5c>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_GetClockConfig+0x5c>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032da:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_RCC_GetClockConfig+0x60>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0207 	and.w	r2, r3, #7
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	601a      	str	r2, [r3, #0]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40022000 	.word	0x40022000

080032fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003314:	f7ff f9d0 	bl	80026b8 <HAL_PWREx_GetVoltageRange>
 8003318:	6178      	str	r0, [r7, #20]
 800331a:	e014      	b.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003334:	f7ff f9c0 	bl	80026b8 <HAL_PWREx_GetVoltageRange>
 8003338:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a1d      	ldr	r2, [pc, #116]	; (80033b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003344:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334c:	d10b      	bne.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d919      	bls.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2ba0      	cmp	r3, #160	; 0xa0
 8003358:	d902      	bls.n	8003360 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800335a:	2302      	movs	r3, #2
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	e013      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003360:	2301      	movs	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e010      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b80      	cmp	r3, #128	; 0x80
 800336a:	d902      	bls.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800336c:	2303      	movs	r3, #3
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	e00a      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b80      	cmp	r3, #128	; 0x80
 8003376:	d102      	bne.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003378:	2302      	movs	r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	e004      	b.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d101      	bne.n	8003388 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003384:	2301      	movs	r3, #1
 8003386:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f023 0207 	bic.w	r2, r3, #7
 8003390:	4909      	ldr	r1, [pc, #36]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d001      	beq.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40022000 	.word	0x40022000

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c4:	2300      	movs	r3, #0
 80033c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c8:	2300      	movs	r3, #0
 80033ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d041      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033e0:	d02a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033e6:	d824      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ec:	d008      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033f2:	d81e      	bhi.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d010      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033fe:	e018      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003400:	4b86      	ldr	r3, [pc, #536]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800340c:	e015      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3304      	adds	r3, #4
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fabb 	bl	8003990 <RCCEx_PLLSAI1_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800341e:	e00c      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3320      	adds	r3, #32
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fba6 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	74fb      	strb	r3, [r7, #19]
      break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003440:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	4973      	ldr	r1, [pc, #460]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003456:	e001      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d041      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003470:	d02a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003476:	d824      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800347e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003482:	d81e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d010      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800348e:	e018      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003490:	4b62      	ldr	r3, [pc, #392]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a61      	ldr	r2, [pc, #388]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800349c:	e015      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fa73 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ae:	e00c      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3320      	adds	r3, #32
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fb5e 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	74fb      	strb	r3, [r7, #19]
      break;
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034d0:	4b52      	ldr	r3, [pc, #328]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034de:	494f      	ldr	r1, [pc, #316]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034e6:	e001      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80a0 	beq.w	800363a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800350e:	2300      	movs	r3, #0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	4a40      	ldr	r2, [pc, #256]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352c:	2301      	movs	r3, #1
 800352e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003530:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353c:	f7fd fc22 	bl	8000d84 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003542:	e009      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003544:	f7fd fc1e 	bl	8000d84 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d902      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	74fb      	strb	r3, [r7, #19]
        break;
 8003556:	e005      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ef      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d15c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01f      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d019      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003588:	4b24      	ldr	r3, [pc, #144]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	4a20      	ldr	r2, [pc, #128]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a4:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035b4:	4a19      	ldr	r2, [pc, #100]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fbdd 	bl	8000d84 <HAL_GetTick>
 80035ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	e00b      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fbd9 	bl	8000d84 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d902      	bls.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	74fb      	strb	r3, [r7, #19]
            break;
 80035e4:	e006      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ec      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800360a:	4904      	ldr	r1, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003612:	e009      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003628:	7c7b      	ldrb	r3, [r7, #17]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b9e      	ldr	r3, [pc, #632]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4a9d      	ldr	r2, [pc, #628]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003646:	4b98      	ldr	r3, [pc, #608]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f023 0203 	bic.w	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	4994      	ldr	r1, [pc, #592]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003668:	4b8f      	ldr	r3, [pc, #572]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 020c 	bic.w	r2, r3, #12
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	498c      	ldr	r1, [pc, #560]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368a:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4983      	ldr	r1, [pc, #524]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	497b      	ldr	r1, [pc, #492]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ce:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036dc:	4972      	ldr	r1, [pc, #456]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	496a      	ldr	r1, [pc, #424]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003712:	4b65      	ldr	r3, [pc, #404]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	4961      	ldr	r1, [pc, #388]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003734:	4b5c      	ldr	r3, [pc, #368]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003742:	4959      	ldr	r1, [pc, #356]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003756:	4b54      	ldr	r3, [pc, #336]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	4950      	ldr	r1, [pc, #320]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	4948      	ldr	r1, [pc, #288]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800379a:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	493f      	ldr	r1, [pc, #252]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d028      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ca:	4937      	ldr	r1, [pc, #220]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037da:	d106      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a31      	ldr	r2, [pc, #196]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	60d3      	str	r3, [r2, #12]
 80037e8:	e011      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f2:	d10c      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3304      	adds	r3, #4
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f8c8 	bl	8003990 <RCCEx_PLLSAI1_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003804:	7cfb      	ldrb	r3, [r7, #19]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800380a:	7cfb      	ldrb	r3, [r7, #19]
 800380c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d028      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800381a:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	491f      	ldr	r1, [pc, #124]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003838:	d106      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003844:	60d3      	str	r3, [r2, #12]
 8003846:	e011      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3304      	adds	r3, #4
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f899 	bl	8003990 <RCCEx_PLLSAI1_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02b      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003896:	d109      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a02      	ldr	r2, [pc, #8]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a2:	60d3      	str	r3, [r2, #12]
 80038a4:	e014      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3304      	adds	r3, #4
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 f867 	bl	8003990 <RCCEx_PLLSAI1_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ea:	4928      	ldr	r1, [pc, #160]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fa:	d10d      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f844 	bl	8003990 <RCCEx_PLLSAI1_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800390c:	7cfb      	ldrb	r3, [r7, #19]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003912:	7cfb      	ldrb	r3, [r7, #19]
 8003914:	74bb      	strb	r3, [r7, #18]
 8003916:	e011      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003920:	d10c      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3320      	adds	r3, #32
 8003926:	2102      	movs	r1, #2
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f925 	bl	8003b78 <RCCEx_PLLSAI2_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003948:	4b10      	ldr	r3, [pc, #64]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003956:	490d      	ldr	r1, [pc, #52]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800397a:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003982:	7cbb      	ldrb	r3, [r7, #18]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000

08003990 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800399e:	4b75      	ldr	r3, [pc, #468]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d018      	beq.n	80039dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0203 	and.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
       ||
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039c2:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	1c5a      	adds	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
       ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d047      	beq.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	e044      	b.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d018      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x86>
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d825      	bhi.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d002      	beq.n	80039f2 <RCCEx_PLLSAI1_Config+0x62>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d009      	beq.n	8003a04 <RCCEx_PLLSAI1_Config+0x74>
 80039f0:	e020      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039f2:	4b60      	ldr	r3, [pc, #384]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11d      	bne.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a02:	e01a      	b.n	8003a3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a04:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d116      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e013      	b.n	8003a3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a32:	e006      	b.n	8003a42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	e004      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10d      	bne.n	8003a66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	4944      	ldr	r1, [pc, #272]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d17d      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a6c:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a78:	f7fd f984 	bl	8000d84 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7e:	e009      	b.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a80:	f7fd f980 	bl	8000d84 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d902      	bls.n	8003a94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	73fb      	strb	r3, [r7, #15]
        break;
 8003a92:	e005      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a94:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ef      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d160      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d111      	bne.n	8003ad0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aac:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0912      	lsrs	r2, r2, #4
 8003ac4:	0452      	lsls	r2, r2, #17
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	492a      	ldr	r1, [pc, #168]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	610b      	str	r3, [r1, #16]
 8003ace:	e027      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d112      	bne.n	8003afc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ade:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6892      	ldr	r2, [r2, #8]
 8003ae6:	0211      	lsls	r1, r2, #8
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6912      	ldr	r2, [r2, #16]
 8003aec:	0852      	lsrs	r2, r2, #1
 8003aee:	3a01      	subs	r2, #1
 8003af0:	0552      	lsls	r2, r2, #21
 8003af2:	430a      	orrs	r2, r1
 8003af4:	491f      	ldr	r1, [pc, #124]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	610b      	str	r3, [r1, #16]
 8003afa:	e011      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6892      	ldr	r2, [r2, #8]
 8003b0c:	0211      	lsls	r1, r2, #8
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6952      	ldr	r2, [r2, #20]
 8003b12:	0852      	lsrs	r2, r2, #1
 8003b14:	3a01      	subs	r2, #1
 8003b16:	0652      	lsls	r2, r2, #25
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	4916      	ldr	r1, [pc, #88]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b20:	4b14      	ldr	r3, [pc, #80]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd f92a 	bl	8000d84 <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b32:	e009      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b34:	f7fd f926 	bl	8000d84 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d902      	bls.n	8003b48 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	73fb      	strb	r3, [r7, #15]
          break;
 8003b46:	e005      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ef      	beq.n	8003b34 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4904      	ldr	r1, [pc, #16]	; (8003b74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000

08003b78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b86:	4b6a      	ldr	r3, [pc, #424]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d018      	beq.n	8003bc4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b92:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f003 0203 	and.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d10d      	bne.n	8003bbe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d047      	beq.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e044      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d018      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0x86>
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d825      	bhi.n	8003c1c <RCCEx_PLLSAI2_Config+0xa4>
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d002      	beq.n	8003bda <RCCEx_PLLSAI2_Config+0x62>
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d009      	beq.n	8003bec <RCCEx_PLLSAI2_Config+0x74>
 8003bd8:	e020      	b.n	8003c1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bda:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11d      	bne.n	8003c22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bea:	e01a      	b.n	8003c22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d116      	bne.n	8003c26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e013      	b.n	8003c26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10f      	bne.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c1a:	e006      	b.n	8003c2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c20:	e004      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	430b      	orrs	r3, r1
 8003c48:	4939      	ldr	r1, [pc, #228]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d167      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c54:	4b36      	ldr	r3, [pc, #216]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd f890 	bl	8000d84 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c66:	e009      	b.n	8003c7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c68:	f7fd f88c 	bl	8000d84 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d902      	bls.n	8003c7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	73fb      	strb	r3, [r7, #15]
        break;
 8003c7a:	e005      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ef      	bne.n	8003c68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d14a      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d111      	bne.n	8003cb8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c94:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68d2      	ldr	r2, [r2, #12]
 8003caa:	0912      	lsrs	r2, r2, #4
 8003cac:	0452      	lsls	r2, r2, #17
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	614b      	str	r3, [r1, #20]
 8003cb6:	e011      	b.n	8003cdc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6912      	ldr	r2, [r2, #16]
 8003cce:	0852      	lsrs	r2, r2, #1
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0652      	lsls	r2, r2, #25
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	4916      	ldr	r1, [pc, #88]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd f84c 	bl	8000d84 <HAL_GetTick>
 8003cec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cee:	e009      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cf0:	f7fd f848 	bl	8000d84 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d902      	bls.n	8003d04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	73fb      	strb	r3, [r7, #15]
          break;
 8003d02:	e005      	b.n	8003d10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ef      	beq.n	8003cf0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4904      	ldr	r1, [pc, #16]	; (8003d30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000

08003d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e049      	b.n	8003dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f841 	bl	8003de2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fb5e 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d001      	beq.n	8003e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e04f      	b.n	8003eb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a23      	ldr	r2, [pc, #140]	; (8003ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d018      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_Base_Start_IT+0x76>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d115      	bne.n	8003e9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d015      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0xb4>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e86:	d011      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	e008      	b.n	8003eac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0201 	orr.w	r2, r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40000400 	.word	0x40000400
 8003ec4:	40000800 	.word	0x40000800
 8003ec8:	40000c00 	.word	0x40000c00
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40014000 	.word	0x40014000
 8003ed4:	00010007 	.word	0x00010007

08003ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e049      	b.n	8003f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fc fda0 	bl	8000a44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 fa8c 	bl	8004434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d122      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f06f 0202 	mvn.w	r2, #2
 8003fb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fa15 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8003fce:	e005      	b.n	8003fdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa07 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa18 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d122      	bne.n	8004036 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d11b      	bne.n	8004036 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0204 	mvn.w	r2, #4
 8004006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f9eb 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004022:	e005      	b.n	8004030 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f9dd 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9ee 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b08      	cmp	r3, #8
 8004042:	d122      	bne.n	800408a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	d11b      	bne.n	800408a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0208 	mvn.w	r2, #8
 800405a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 0303 	and.w	r3, r3, #3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f9c1 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 8004076:	e005      	b.n	8004084 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9b3 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9c4 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b10      	cmp	r3, #16
 8004096:	d122      	bne.n	80040de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d11b      	bne.n	80040de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0210 	mvn.w	r2, #16
 80040ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2208      	movs	r2, #8
 80040b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f997 	bl	80043f8 <HAL_TIM_IC_CaptureCallback>
 80040ca:	e005      	b.n	80040d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f989 	bl	80043e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f99a 	bl	800440c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10e      	bne.n	800410a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f06f 0201 	mvn.w	r2, #1
 8004102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fc fc1f 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d10e      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d107      	bne.n	8004136 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fdff 	bl	8004d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004150:	2b80      	cmp	r3, #128	; 0x80
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fdf2 	bl	8004d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b40      	cmp	r3, #64	; 0x40
 8004170:	d10e      	bne.n	8004190 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d107      	bne.n	8004190 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f948 	bl	8004420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b20      	cmp	r3, #32
 800419c:	d10e      	bne.n	80041bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d107      	bne.n	80041bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0220 	mvn.w	r2, #32
 80041b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fdb2 	bl	8004d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041da:	2302      	movs	r3, #2
 80041dc:	e0fd      	b.n	80043da <HAL_TIM_PWM_ConfigChannel+0x216>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b14      	cmp	r3, #20
 80041ea:	f200 80f0 	bhi.w	80043ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004249 	.word	0x08004249
 80041f8:	080043cf 	.word	0x080043cf
 80041fc:	080043cf 	.word	0x080043cf
 8004200:	080043cf 	.word	0x080043cf
 8004204:	08004289 	.word	0x08004289
 8004208:	080043cf 	.word	0x080043cf
 800420c:	080043cf 	.word	0x080043cf
 8004210:	080043cf 	.word	0x080043cf
 8004214:	080042cb 	.word	0x080042cb
 8004218:	080043cf 	.word	0x080043cf
 800421c:	080043cf 	.word	0x080043cf
 8004220:	080043cf 	.word	0x080043cf
 8004224:	0800430b 	.word	0x0800430b
 8004228:	080043cf 	.word	0x080043cf
 800422c:	080043cf 	.word	0x080043cf
 8004230:	080043cf 	.word	0x080043cf
 8004234:	0800434d 	.word	0x0800434d
 8004238:	080043cf 	.word	0x080043cf
 800423c:	080043cf 	.word	0x080043cf
 8004240:	080043cf 	.word	0x080043cf
 8004244:	0800438d 	.word	0x0800438d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f98a 	bl	8004568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6999      	ldr	r1, [r3, #24]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	619a      	str	r2, [r3, #24]
      break;
 8004286:	e0a3      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9fa 	bl	8004688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6999      	ldr	r1, [r3, #24]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	021a      	lsls	r2, r3, #8
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]
      break;
 80042c8:	e082      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fa63 	bl	800479c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0208 	orr.w	r2, r2, #8
 80042e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69d9      	ldr	r1, [r3, #28]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	61da      	str	r2, [r3, #28]
      break;
 8004308:	e062      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 facb 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	021a      	lsls	r2, r3, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	61da      	str	r2, [r3, #28]
      break;
 800434a:	e041      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb14 	bl	8004980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0208 	orr.w	r2, r2, #8
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800438a:	e021      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fb58 	bl	8004a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043cc:	e000      	b.n	80043d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80043ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop

080043e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a3d      	ldr	r2, [pc, #244]	; (800454c <TIM_Base_SetConfig+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <TIM_Base_SetConfig+0x120>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d108      	bne.n	8004486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2f      	ldr	r2, [pc, #188]	; (8004548 <TIM_Base_SetConfig+0x114>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d01f      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004494:	d01b      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2c      	ldr	r2, [pc, #176]	; (800454c <TIM_Base_SetConfig+0x118>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d017      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <TIM_Base_SetConfig+0x11c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2a      	ldr	r2, [pc, #168]	; (8004554 <TIM_Base_SetConfig+0x120>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <TIM_Base_SetConfig+0x124>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a28      	ldr	r2, [pc, #160]	; (800455c <TIM_Base_SetConfig+0x128>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a27      	ldr	r2, [pc, #156]	; (8004560 <TIM_Base_SetConfig+0x12c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a26      	ldr	r2, [pc, #152]	; (8004564 <TIM_Base_SetConfig+0x130>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a10      	ldr	r2, [pc, #64]	; (8004548 <TIM_Base_SetConfig+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a12      	ldr	r2, [pc, #72]	; (8004558 <TIM_Base_SetConfig+0x124>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a11      	ldr	r2, [pc, #68]	; (800455c <TIM_Base_SetConfig+0x128>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a10      	ldr	r2, [pc, #64]	; (8004560 <TIM_Base_SetConfig+0x12c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0xf8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <TIM_Base_SetConfig+0x130>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d103      	bne.n	8004534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	615a      	str	r2, [r3, #20]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40013400 	.word	0x40013400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800

08004568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 0302 	bic.w	r3, r3, #2
 80045b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a2c      	ldr	r2, [pc, #176]	; (8004674 <TIM_OC1_SetConfig+0x10c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a2b      	ldr	r2, [pc, #172]	; (8004678 <TIM_OC1_SetConfig+0x110>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00b      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <TIM_OC1_SetConfig+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <TIM_OC1_SetConfig+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_OC1_SetConfig+0x80>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a28      	ldr	r2, [pc, #160]	; (8004684 <TIM_OC1_SetConfig+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <TIM_OC1_SetConfig+0x10c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <TIM_OC1_SetConfig+0x110>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <TIM_OC1_SetConfig+0x114>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <TIM_OC1_SetConfig+0x118>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_OC1_SetConfig+0xc2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <TIM_OC1_SetConfig+0x11c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d111      	bne.n	800464e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0210 	bic.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a28      	ldr	r2, [pc, #160]	; (8004788 <TIM_OC2_SetConfig+0x100>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_OC2_SetConfig+0x6c>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <TIM_OC2_SetConfig+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10d      	bne.n	8004710 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a1d      	ldr	r2, [pc, #116]	; (8004788 <TIM_OC2_SetConfig+0x100>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00f      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1c      	ldr	r2, [pc, #112]	; (800478c <TIM_OC2_SetConfig+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00b      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <TIM_OC2_SetConfig+0x108>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <TIM_OC2_SetConfig+0x10c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0xb0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <TIM_OC2_SetConfig+0x110>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d113      	bne.n	8004760 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800473e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	621a      	str	r2, [r3, #32]
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40013400 	.word	0x40013400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0303 	bic.w	r3, r3, #3
 80047d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a27      	ldr	r2, [pc, #156]	; (8004898 <TIM_OC3_SetConfig+0xfc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_OC3_SetConfig+0x6a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a26      	ldr	r2, [pc, #152]	; (800489c <TIM_OC3_SetConfig+0x100>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1c      	ldr	r2, [pc, #112]	; (8004898 <TIM_OC3_SetConfig+0xfc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1b      	ldr	r2, [pc, #108]	; (800489c <TIM_OC3_SetConfig+0x100>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1a      	ldr	r2, [pc, #104]	; (80048a0 <TIM_OC3_SetConfig+0x104>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <TIM_OC3_SetConfig+0x108>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC3_SetConfig+0xae>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <TIM_OC3_SetConfig+0x10c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d113      	bne.n	8004872 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	621a      	str	r2, [r3, #32]
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40013400 	.word	0x40013400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	031b      	lsls	r3, r3, #12
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <TIM_OC4_SetConfig+0xc0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a17      	ldr	r2, [pc, #92]	; (8004970 <TIM_OC4_SetConfig+0xc4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a16      	ldr	r2, [pc, #88]	; (8004974 <TIM_OC4_SetConfig+0xc8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <TIM_OC4_SetConfig+0xcc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC4_SetConfig+0x84>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a14      	ldr	r2, [pc, #80]	; (800497c <TIM_OC4_SetConfig+0xd0>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d109      	bne.n	8004944 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800

08004980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <TIM_OC5_SetConfig+0xb4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00f      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a16      	ldr	r2, [pc, #88]	; (8004a38 <TIM_OC5_SetConfig+0xb8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d00b      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <TIM_OC5_SetConfig+0xbc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d007      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <TIM_OC5_SetConfig+0xc0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d003      	beq.n	80049fa <TIM_OC5_SetConfig+0x7a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <TIM_OC5_SetConfig+0xc4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d109      	bne.n	8004a0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012c00 	.word	0x40012c00
 8004a38:	40013400 	.word	0x40013400
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	051b      	lsls	r3, r3, #20
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <TIM_OC6_SetConfig+0xb8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <TIM_OC6_SetConfig+0xbc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <TIM_OC6_SetConfig+0xc0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <TIM_OC6_SetConfig+0xc4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC6_SetConfig+0x7c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC6_SetConfig+0xc8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	029b      	lsls	r3, r3, #10
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e068      	b.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d10c      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40013400 	.word	0x40013400
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e065      	b.n	8004d0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d115      	bne.n	8004cfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	051b      	lsls	r3, r3, #20
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40013400 	.word	0x40013400

08004d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e040      	b.n	8004df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fb feb8 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8c0 	bl	8004f20 <UART_SetConfig>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e022      	b.n	8004df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fb3e 	bl	8005434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fbc5 	bl	8005578 <UART_CheckIdleState>
 8004dee:	4603      	mov	r3, r0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	f040 8082 	bne.w	8004f16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_UART_Transmit+0x26>
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07a      	b.n	8004f18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UART_Transmit+0x38>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e073      	b.n	8004f18 <HAL_UART_Transmit+0x120>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2221      	movs	r2, #33	; 0x21
 8004e44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e46:	f7fb ff9d 	bl	8000d84 <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	88fa      	ldrh	r2, [r7, #6]
 8004e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e64:	d108      	bne.n	8004e78 <HAL_UART_Transmit+0x80>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e003      	b.n	8004e80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004e88:	e02d      	b.n	8004ee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	; 0x80
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fbb8 	bl	800560a <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e039      	b.n	8004f18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	881a      	ldrh	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb6:	b292      	uxth	r2, r2
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e008      	b.n	8004ed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1cb      	bne.n	8004e8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	; 0x40
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb84 	bl	800560a <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e005      	b.n	8004f18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4bad      	ldr	r3, [pc, #692]	; (8005200 <UART_SetConfig+0x2e0>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4aa2      	ldr	r2, [pc, #648]	; (8005204 <UART_SetConfig+0x2e4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a99      	ldr	r2, [pc, #612]	; (8005208 <UART_SetConfig+0x2e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d121      	bne.n	8004fea <UART_SetConfig+0xca>
 8004fa6:	4b99      	ldr	r3, [pc, #612]	; (800520c <UART_SetConfig+0x2ec>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d817      	bhi.n	8004fe4 <UART_SetConfig+0xc4>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x9c>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fd3 	.word	0x08004fd3
 8004fc8:	08004fdf 	.word	0x08004fdf
 8004fcc:	2301      	movs	r3, #1
 8004fce:	76fb      	strb	r3, [r7, #27]
 8004fd0:	e0e7      	b.n	80051a2 <UART_SetConfig+0x282>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	76fb      	strb	r3, [r7, #27]
 8004fd6:	e0e4      	b.n	80051a2 <UART_SetConfig+0x282>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	76fb      	strb	r3, [r7, #27]
 8004fdc:	e0e1      	b.n	80051a2 <UART_SetConfig+0x282>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	76fb      	strb	r3, [r7, #27]
 8004fe2:	e0de      	b.n	80051a2 <UART_SetConfig+0x282>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	76fb      	strb	r3, [r7, #27]
 8004fe8:	e0db      	b.n	80051a2 <UART_SetConfig+0x282>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a88      	ldr	r2, [pc, #544]	; (8005210 <UART_SetConfig+0x2f0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d132      	bne.n	800505a <UART_SetConfig+0x13a>
 8004ff4:	4b85      	ldr	r3, [pc, #532]	; (800520c <UART_SetConfig+0x2ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d828      	bhi.n	8005054 <UART_SetConfig+0x134>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0xe8>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800503d 	.word	0x0800503d
 800500c:	08005055 	.word	0x08005055
 8005010:	08005055 	.word	0x08005055
 8005014:	08005055 	.word	0x08005055
 8005018:	08005049 	.word	0x08005049
 800501c:	08005055 	.word	0x08005055
 8005020:	08005055 	.word	0x08005055
 8005024:	08005055 	.word	0x08005055
 8005028:	08005043 	.word	0x08005043
 800502c:	08005055 	.word	0x08005055
 8005030:	08005055 	.word	0x08005055
 8005034:	08005055 	.word	0x08005055
 8005038:	0800504f 	.word	0x0800504f
 800503c:	2300      	movs	r3, #0
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	e0af      	b.n	80051a2 <UART_SetConfig+0x282>
 8005042:	2302      	movs	r3, #2
 8005044:	76fb      	strb	r3, [r7, #27]
 8005046:	e0ac      	b.n	80051a2 <UART_SetConfig+0x282>
 8005048:	2304      	movs	r3, #4
 800504a:	76fb      	strb	r3, [r7, #27]
 800504c:	e0a9      	b.n	80051a2 <UART_SetConfig+0x282>
 800504e:	2308      	movs	r3, #8
 8005050:	76fb      	strb	r3, [r7, #27]
 8005052:	e0a6      	b.n	80051a2 <UART_SetConfig+0x282>
 8005054:	2310      	movs	r3, #16
 8005056:	76fb      	strb	r3, [r7, #27]
 8005058:	e0a3      	b.n	80051a2 <UART_SetConfig+0x282>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6d      	ldr	r2, [pc, #436]	; (8005214 <UART_SetConfig+0x2f4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d120      	bne.n	80050a6 <UART_SetConfig+0x186>
 8005064:	4b69      	ldr	r3, [pc, #420]	; (800520c <UART_SetConfig+0x2ec>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800506e:	2b30      	cmp	r3, #48	; 0x30
 8005070:	d013      	beq.n	800509a <UART_SetConfig+0x17a>
 8005072:	2b30      	cmp	r3, #48	; 0x30
 8005074:	d814      	bhi.n	80050a0 <UART_SetConfig+0x180>
 8005076:	2b20      	cmp	r3, #32
 8005078:	d009      	beq.n	800508e <UART_SetConfig+0x16e>
 800507a:	2b20      	cmp	r3, #32
 800507c:	d810      	bhi.n	80050a0 <UART_SetConfig+0x180>
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <UART_SetConfig+0x168>
 8005082:	2b10      	cmp	r3, #16
 8005084:	d006      	beq.n	8005094 <UART_SetConfig+0x174>
 8005086:	e00b      	b.n	80050a0 <UART_SetConfig+0x180>
 8005088:	2300      	movs	r3, #0
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e089      	b.n	80051a2 <UART_SetConfig+0x282>
 800508e:	2302      	movs	r3, #2
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e086      	b.n	80051a2 <UART_SetConfig+0x282>
 8005094:	2304      	movs	r3, #4
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e083      	b.n	80051a2 <UART_SetConfig+0x282>
 800509a:	2308      	movs	r3, #8
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e080      	b.n	80051a2 <UART_SetConfig+0x282>
 80050a0:	2310      	movs	r3, #16
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e07d      	b.n	80051a2 <UART_SetConfig+0x282>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5b      	ldr	r2, [pc, #364]	; (8005218 <UART_SetConfig+0x2f8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d120      	bne.n	80050f2 <UART_SetConfig+0x1d2>
 80050b0:	4b56      	ldr	r3, [pc, #344]	; (800520c <UART_SetConfig+0x2ec>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ba:	2bc0      	cmp	r3, #192	; 0xc0
 80050bc:	d013      	beq.n	80050e6 <UART_SetConfig+0x1c6>
 80050be:	2bc0      	cmp	r3, #192	; 0xc0
 80050c0:	d814      	bhi.n	80050ec <UART_SetConfig+0x1cc>
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d009      	beq.n	80050da <UART_SetConfig+0x1ba>
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d810      	bhi.n	80050ec <UART_SetConfig+0x1cc>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <UART_SetConfig+0x1b4>
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d006      	beq.n	80050e0 <UART_SetConfig+0x1c0>
 80050d2:	e00b      	b.n	80050ec <UART_SetConfig+0x1cc>
 80050d4:	2300      	movs	r3, #0
 80050d6:	76fb      	strb	r3, [r7, #27]
 80050d8:	e063      	b.n	80051a2 <UART_SetConfig+0x282>
 80050da:	2302      	movs	r3, #2
 80050dc:	76fb      	strb	r3, [r7, #27]
 80050de:	e060      	b.n	80051a2 <UART_SetConfig+0x282>
 80050e0:	2304      	movs	r3, #4
 80050e2:	76fb      	strb	r3, [r7, #27]
 80050e4:	e05d      	b.n	80051a2 <UART_SetConfig+0x282>
 80050e6:	2308      	movs	r3, #8
 80050e8:	76fb      	strb	r3, [r7, #27]
 80050ea:	e05a      	b.n	80051a2 <UART_SetConfig+0x282>
 80050ec:	2310      	movs	r3, #16
 80050ee:	76fb      	strb	r3, [r7, #27]
 80050f0:	e057      	b.n	80051a2 <UART_SetConfig+0x282>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a49      	ldr	r2, [pc, #292]	; (800521c <UART_SetConfig+0x2fc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d125      	bne.n	8005148 <UART_SetConfig+0x228>
 80050fc:	4b43      	ldr	r3, [pc, #268]	; (800520c <UART_SetConfig+0x2ec>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510a:	d017      	beq.n	800513c <UART_SetConfig+0x21c>
 800510c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005110:	d817      	bhi.n	8005142 <UART_SetConfig+0x222>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d00b      	beq.n	8005130 <UART_SetConfig+0x210>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d811      	bhi.n	8005142 <UART_SetConfig+0x222>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <UART_SetConfig+0x20a>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d006      	beq.n	8005136 <UART_SetConfig+0x216>
 8005128:	e00b      	b.n	8005142 <UART_SetConfig+0x222>
 800512a:	2300      	movs	r3, #0
 800512c:	76fb      	strb	r3, [r7, #27]
 800512e:	e038      	b.n	80051a2 <UART_SetConfig+0x282>
 8005130:	2302      	movs	r3, #2
 8005132:	76fb      	strb	r3, [r7, #27]
 8005134:	e035      	b.n	80051a2 <UART_SetConfig+0x282>
 8005136:	2304      	movs	r3, #4
 8005138:	76fb      	strb	r3, [r7, #27]
 800513a:	e032      	b.n	80051a2 <UART_SetConfig+0x282>
 800513c:	2308      	movs	r3, #8
 800513e:	76fb      	strb	r3, [r7, #27]
 8005140:	e02f      	b.n	80051a2 <UART_SetConfig+0x282>
 8005142:	2310      	movs	r3, #16
 8005144:	76fb      	strb	r3, [r7, #27]
 8005146:	e02c      	b.n	80051a2 <UART_SetConfig+0x282>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <UART_SetConfig+0x2e4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d125      	bne.n	800519e <UART_SetConfig+0x27e>
 8005152:	4b2e      	ldr	r3, [pc, #184]	; (800520c <UART_SetConfig+0x2ec>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800515c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005160:	d017      	beq.n	8005192 <UART_SetConfig+0x272>
 8005162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005166:	d817      	bhi.n	8005198 <UART_SetConfig+0x278>
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800516c:	d00b      	beq.n	8005186 <UART_SetConfig+0x266>
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d811      	bhi.n	8005198 <UART_SetConfig+0x278>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0x260>
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x26c>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x278>
 8005180:	2300      	movs	r3, #0
 8005182:	76fb      	strb	r3, [r7, #27]
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x282>
 8005186:	2302      	movs	r3, #2
 8005188:	76fb      	strb	r3, [r7, #27]
 800518a:	e00a      	b.n	80051a2 <UART_SetConfig+0x282>
 800518c:	2304      	movs	r3, #4
 800518e:	76fb      	strb	r3, [r7, #27]
 8005190:	e007      	b.n	80051a2 <UART_SetConfig+0x282>
 8005192:	2308      	movs	r3, #8
 8005194:	76fb      	strb	r3, [r7, #27]
 8005196:	e004      	b.n	80051a2 <UART_SetConfig+0x282>
 8005198:	2310      	movs	r3, #16
 800519a:	76fb      	strb	r3, [r7, #27]
 800519c:	e001      	b.n	80051a2 <UART_SetConfig+0x282>
 800519e:	2310      	movs	r3, #16
 80051a0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <UART_SetConfig+0x2e4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	f040 8087 	bne.w	80052bc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ae:	7efb      	ldrb	r3, [r7, #27]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d837      	bhi.n	8005224 <UART_SetConfig+0x304>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x29c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	08005225 	.word	0x08005225
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005225 	.word	0x08005225
 80051cc:	080051ef 	.word	0x080051ef
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005225 	.word	0x08005225
 80051d8:	08005225 	.word	0x08005225
 80051dc:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fe f82e 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 80051e4:	6178      	str	r0, [r7, #20]
        break;
 80051e6:	e022      	b.n	800522e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <UART_SetConfig+0x300>)
 80051ea:	617b      	str	r3, [r7, #20]
        break;
 80051ec:	e01f      	b.n	800522e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fd ff8f 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80051f2:	6178      	str	r0, [r7, #20]
        break;
 80051f4:	e01b      	b.n	800522e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fa:	617b      	str	r3, [r7, #20]
        break;
 80051fc:	e017      	b.n	800522e <UART_SetConfig+0x30e>
 80051fe:	bf00      	nop
 8005200:	efff69f3 	.word	0xefff69f3
 8005204:	40008000 	.word	0x40008000
 8005208:	40013800 	.word	0x40013800
 800520c:	40021000 	.word	0x40021000
 8005210:	40004400 	.word	0x40004400
 8005214:	40004800 	.word	0x40004800
 8005218:	40004c00 	.word	0x40004c00
 800521c:	40005000 	.word	0x40005000
 8005220:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
        break;
 800522c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80f1 	beq.w	8005418 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	429a      	cmp	r2, r3
 8005244:	d305      	bcc.n	8005252 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	429a      	cmp	r2, r3
 8005250:	d902      	bls.n	8005258 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	76bb      	strb	r3, [r7, #26]
 8005256:	e0df      	b.n	8005418 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4618      	mov	r0, r3
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	020b      	lsls	r3, r1, #8
 800526a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800526e:	0202      	lsls	r2, r0, #8
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	6849      	ldr	r1, [r1, #4]
 8005274:	0849      	lsrs	r1, r1, #1
 8005276:	4608      	mov	r0, r1
 8005278:	f04f 0100 	mov.w	r1, #0
 800527c:	1814      	adds	r4, r2, r0
 800527e:	eb43 0501 	adc.w	r5, r3, r1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	461a      	mov	r2, r3
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	4620      	mov	r0, r4
 800528e:	4629      	mov	r1, r5
 8005290:	f7fa ff9e 	bl	80001d0 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a2:	d308      	bcc.n	80052b6 <UART_SetConfig+0x396>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052aa:	d204      	bcs.n	80052b6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e0b0      	b.n	8005418 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	76bb      	strb	r3, [r7, #26]
 80052ba:	e0ad      	b.n	8005418 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c4:	d15c      	bne.n	8005380 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80052c6:	7efb      	ldrb	r3, [r7, #27]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d828      	bhi.n	800531e <UART_SetConfig+0x3fe>
 80052cc:	a201      	add	r2, pc, #4	; (adr r2, 80052d4 <UART_SetConfig+0x3b4>)
 80052ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d2:	bf00      	nop
 80052d4:	080052f9 	.word	0x080052f9
 80052d8:	08005301 	.word	0x08005301
 80052dc:	08005309 	.word	0x08005309
 80052e0:	0800531f 	.word	0x0800531f
 80052e4:	0800530f 	.word	0x0800530f
 80052e8:	0800531f 	.word	0x0800531f
 80052ec:	0800531f 	.word	0x0800531f
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	08005317 	.word	0x08005317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fd ffa2 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 80052fc:	6178      	str	r0, [r7, #20]
        break;
 80052fe:	e013      	b.n	8005328 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fd ffb4 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8005304:	6178      	str	r0, [r7, #20]
        break;
 8005306:	e00f      	b.n	8005328 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <UART_SetConfig+0x510>)
 800530a:	617b      	str	r3, [r7, #20]
        break;
 800530c:	e00c      	b.n	8005328 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530e:	f7fd feff 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8005312:	6178      	str	r0, [r7, #20]
        break;
 8005314:	e008      	b.n	8005328 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800531a:	617b      	str	r3, [r7, #20]
        break;
 800531c:	e004      	b.n	8005328 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	76bb      	strb	r3, [r7, #26]
        break;
 8005326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d074      	beq.n	8005418 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	005a      	lsls	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d916      	bls.n	800537a <UART_SetConfig+0x45a>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005352:	d212      	bcs.n	800537a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f023 030f 	bic.w	r3, r3, #15
 800535c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	b29a      	uxth	r2, r3
 800536a:	89fb      	ldrh	r3, [r7, #14]
 800536c:	4313      	orrs	r3, r2
 800536e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	89fa      	ldrh	r2, [r7, #14]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e04e      	b.n	8005418 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	76bb      	strb	r3, [r7, #26]
 800537e:	e04b      	b.n	8005418 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005380:	7efb      	ldrb	r3, [r7, #27]
 8005382:	2b08      	cmp	r3, #8
 8005384:	d827      	bhi.n	80053d6 <UART_SetConfig+0x4b6>
 8005386:	a201      	add	r2, pc, #4	; (adr r2, 800538c <UART_SetConfig+0x46c>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	080053b1 	.word	0x080053b1
 8005390:	080053b9 	.word	0x080053b9
 8005394:	080053c1 	.word	0x080053c1
 8005398:	080053d7 	.word	0x080053d7
 800539c:	080053c7 	.word	0x080053c7
 80053a0:	080053d7 	.word	0x080053d7
 80053a4:	080053d7 	.word	0x080053d7
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053cf 	.word	0x080053cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b0:	f7fd ff46 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 80053b4:	6178      	str	r0, [r7, #20]
        break;
 80053b6:	e013      	b.n	80053e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b8:	f7fd ff58 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 80053bc:	6178      	str	r0, [r7, #20]
        break;
 80053be:	e00f      	b.n	80053e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <UART_SetConfig+0x510>)
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	e00c      	b.n	80053e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053c6:	f7fd fea3 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80053ca:	6178      	str	r0, [r7, #20]
        break;
 80053cc:	e008      	b.n	80053e0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e004      	b.n	80053e0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	76bb      	strb	r3, [r7, #26]
        break;
 80053de:	bf00      	nop
    }

    if (pclk != 0U)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d018      	beq.n	8005418 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	085a      	lsrs	r2, r3, #1
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	441a      	add	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b0f      	cmp	r3, #15
 8005400:	d908      	bls.n	8005414 <UART_SetConfig+0x4f4>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d204      	bcs.n	8005414 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e001      	b.n	8005418 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005424:	7ebb      	ldrb	r3, [r7, #26]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bdb0      	pop	{r4, r5, r7, pc}
 800542e:	bf00      	nop
 8005430:	00f42400 	.word	0x00f42400

08005434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01a      	beq.n	800554a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005532:	d10a      	bne.n	800554a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af02      	add	r7, sp, #8
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005588:	f7fb fbfc 	bl	8000d84 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0308 	and.w	r3, r3, #8
 8005598:	2b08      	cmp	r3, #8
 800559a:	d10e      	bne.n	80055ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f82d 	bl	800560a <UART_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e023      	b.n	8005602 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d10e      	bne.n	80055e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f817 	bl	800560a <UART_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e00d      	b.n	8005602 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	4613      	mov	r3, r2
 8005618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561a:	e05e      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005622:	d05a      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005624:	f7fb fbae 	bl	8000d84 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	429a      	cmp	r2, r3
 8005632:	d302      	bcc.n	800563a <UART_WaitOnFlagUntilTimeout+0x30>
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11b      	bne.n	8005672 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005648:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e043      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d02c      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800568e:	d124      	bne.n	80056da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005698:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056a8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e00f      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d091      	beq.n	800561c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <__NVIC_SetPriority>:
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	6039      	str	r1, [r7, #0]
 800570e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005714:	2b00      	cmp	r3, #0
 8005716:	db0a      	blt.n	800572e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	490c      	ldr	r1, [pc, #48]	; (8005750 <__NVIC_SetPriority+0x4c>)
 800571e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005722:	0112      	lsls	r2, r2, #4
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	440b      	add	r3, r1
 8005728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800572c:	e00a      	b.n	8005744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	4908      	ldr	r1, [pc, #32]	; (8005754 <__NVIC_SetPriority+0x50>)
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	3b04      	subs	r3, #4
 800573c:	0112      	lsls	r2, r2, #4
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	440b      	add	r3, r1
 8005742:	761a      	strb	r2, [r3, #24]
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	e000e100 	.word	0xe000e100
 8005754:	e000ed00 	.word	0xe000ed00

08005758 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <SysTick_Handler+0x1c>)
 800575e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005760:	f001 fcfe 	bl	8007160 <xTaskGetSchedulerState>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d001      	beq.n	800576e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800576a:	f002 fae5 	bl	8007d38 <xPortSysTickHandler>
  }
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	e000e010 	.word	0xe000e010

08005778 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800577c:	2100      	movs	r1, #0
 800577e:	f06f 0004 	mvn.w	r0, #4
 8005782:	f7ff ffbf 	bl	8005704 <__NVIC_SetPriority>
#endif
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005792:	f3ef 8305 	mrs	r3, IPSR
 8005796:	603b      	str	r3, [r7, #0]
  return(result);
 8005798:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800579e:	f06f 0305 	mvn.w	r3, #5
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	e00c      	b.n	80057c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <osKernelInitialize+0x44>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <osKernelInitialize+0x44>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	e002      	b.n	80057c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057c0:	687b      	ldr	r3, [r7, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2000002c 	.word	0x2000002c

080057d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057da:	f3ef 8305 	mrs	r3, IPSR
 80057de:	603b      	str	r3, [r7, #0]
  return(result);
 80057e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80057e6:	f06f 0305 	mvn.w	r3, #5
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	e010      	b.n	8005810 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <osKernelStart+0x48>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d109      	bne.n	800580a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057f6:	f7ff ffbf 	bl	8005778 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <osKernelStart+0x48>)
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005800:	f001 f866 	bl	80068d0 <vTaskStartScheduler>
      stat = osOK;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e002      	b.n	8005810 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800580e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005810:	687b      	ldr	r3, [r7, #4]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000002c 	.word	0x2000002c

08005820 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af04      	add	r7, sp, #16
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005830:	f3ef 8305 	mrs	r3, IPSR
 8005834:	617b      	str	r3, [r7, #20]
  return(result);
 8005836:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005838:	2b00      	cmp	r3, #0
 800583a:	d17e      	bne.n	800593a <osThreadNew+0x11a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d07b      	beq.n	800593a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005846:	2318      	movs	r3, #24
 8005848:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005852:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d045      	beq.n	80058e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <osThreadNew+0x48>
        name = attr->name;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <osThreadNew+0x6e>
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b38      	cmp	r3, #56	; 0x38
 8005880:	d805      	bhi.n	800588e <osThreadNew+0x6e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <osThreadNew+0x72>
        return (NULL);
 800588e:	2300      	movs	r3, #0
 8005890:	e054      	b.n	800593c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	089b      	lsrs	r3, r3, #2
 80058a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00e      	beq.n	80058c8 <osThreadNew+0xa8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b5b      	cmp	r3, #91	; 0x5b
 80058b0:	d90a      	bls.n	80058c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d006      	beq.n	80058c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <osThreadNew+0xa8>
        mem = 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e010      	b.n	80058ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10c      	bne.n	80058ea <osThreadNew+0xca>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d108      	bne.n	80058ea <osThreadNew+0xca>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <osThreadNew+0xca>
          mem = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e001      	b.n	80058ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d110      	bne.n	8005912 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058f8:	9202      	str	r2, [sp, #8]
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fe0c 	bl	8006524 <xTaskCreateStatic>
 800590c:	4603      	mov	r3, r0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e013      	b.n	800593a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d110      	bne.n	800593a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	b29a      	uxth	r2, r3
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	9301      	str	r3, [sp, #4]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fe57 	bl	80065de <xTaskCreate>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <osThreadNew+0x11a>
            hTask = NULL;
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800593a:	693b      	ldr	r3, [r7, #16]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3728      	adds	r7, #40	; 0x28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594c:	f3ef 8305 	mrs	r3, IPSR
 8005950:	60bb      	str	r3, [r7, #8]
  return(result);
 8005952:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <osDelay+0x1c>
    stat = osErrorISR;
 8005958:	f06f 0305 	mvn.w	r3, #5
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	e007      	b.n	8005970 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <osDelay+0x2c>
      vTaskDelay(ticks);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 ff7c 	bl	8006868 <vTaskDelay>
    }
  }

  return (stat);
 8005970:	68fb      	ldr	r3, [r7, #12]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a07      	ldr	r2, [pc, #28]	; (80059a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800598c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a06      	ldr	r2, [pc, #24]	; (80059ac <vApplicationGetIdleTaskMemory+0x30>)
 8005992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	601a      	str	r2, [r3, #0]
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000030 	.word	0x20000030
 80059ac:	2000008c 	.word	0x2000008c

080059b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a07      	ldr	r2, [pc, #28]	; (80059dc <vApplicationGetTimerTaskMemory+0x2c>)
 80059c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <vApplicationGetTimerTaskMemory+0x30>)
 80059c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059ce:	601a      	str	r2, [r3, #0]
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	2000028c 	.word	0x2000028c
 80059e0:	200002e8 	.word	0x200002e8

080059e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f103 0208 	add.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f103 0208 	add.w	r2, r3, #8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 0208 	add.w	r2, r3, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9c:	d103      	bne.n	8005aa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	e00c      	b.n	8005ac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	e002      	b.n	8005ab4 <vListInsert+0x2e>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d2f6      	bcs.n	8005aae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6892      	ldr	r2, [r2, #8]
 8005b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6852      	ldr	r2, [r2, #4]
 8005b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d103      	bne.n	8005b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b76:	f002 f84d 	bl	8007c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	68f9      	ldr	r1, [r7, #12]
 8005b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	22ff      	movs	r2, #255	; 0xff
 8005bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d114      	bne.n	8005bf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01a      	beq.n	8005c0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f001 f903 	bl	8006de4 <xTaskRemoveFromEventList>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <xQueueGenericReset+0xcc>)
 8005be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	e009      	b.n	8005c0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3310      	adds	r3, #16
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fef2 	bl	80059e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3324      	adds	r3, #36	; 0x24
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff feed 	bl	80059e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c0a:	f002 f833 	bl	8007c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c0e:	2301      	movs	r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <xQueueGenericCreateStatic+0x52>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <xQueueGenericCreateStatic+0x56>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e000      	b.n	8005c74 <xQueueGenericCreateStatic+0x58>
 8005c72:	2300      	movs	r3, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	623b      	str	r3, [r7, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <xQueueGenericCreateStatic+0x7e>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <xQueueGenericCreateStatic+0x82>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <xQueueGenericCreateStatic+0x84>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	61fb      	str	r3, [r7, #28]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005cba:	2350      	movs	r3, #80	; 0x50
 8005cbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b50      	cmp	r3, #80	; 0x50
 8005cc2:	d00a      	beq.n	8005cda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	61bb      	str	r3, [r7, #24]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005cda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00d      	beq.n	8005d02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f805 	bl	8005d0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3730      	adds	r7, #48	; 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	69b8      	ldr	r0, [r7, #24]
 8005d3e:	f7ff ff05 	bl	8005b4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueGenericSend+0x32>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <xQueueGenericSend+0x40>
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <xQueueGenericSend+0x44>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <xQueueGenericSend+0x46>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <xQueueGenericSend+0x60>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d103      	bne.n	8005dc2 <xQueueGenericSend+0x6e>
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <xQueueGenericSend+0x72>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueGenericSend+0x74>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	623b      	str	r3, [r7, #32]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005de2:	f001 f9bd 	bl	8007160 <xTaskGetSchedulerState>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <xQueueGenericSend+0x9e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <xQueueGenericSend+0xa2>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <xQueueGenericSend+0xa4>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xQueueGenericSend+0xbe>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	61fb      	str	r3, [r7, #28]
}
 8005e0e:	bf00      	nop
 8005e10:	e7fe      	b.n	8005e10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e12:	f001 feff 	bl	8007c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d302      	bcc.n	8005e28 <xQueueGenericSend+0xd4>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d129      	bne.n	8005e7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2e:	f000 fa0b 	bl	8006248 <prvCopyDataToQueue>
 8005e32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	3324      	adds	r3, #36	; 0x24
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 ffcf 	bl	8006de4 <xTaskRemoveFromEventList>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d013      	beq.n	8005e74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e00a      	b.n	8005e74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e64:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e74:	f001 fefe 	bl	8007c74 <vPortExitCritical>
				return pdPASS;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e063      	b.n	8005f44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e82:	f001 fef7 	bl	8007c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e05c      	b.n	8005f44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4618      	mov	r0, r3
 8005e96:	f001 f809 	bl	8006eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e9e:	f001 fee9 	bl	8007c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ea2:	f000 fd7b 	bl	800699c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ea6:	f001 feb5 	bl	8007c14 <vPortEnterCritical>
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb0:	b25b      	sxtb	r3, r3
 8005eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb6:	d103      	bne.n	8005ec0 <xQueueGenericSend+0x16c>
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec6:	b25b      	sxtb	r3, r3
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ecc:	d103      	bne.n	8005ed6 <xQueueGenericSend+0x182>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed6:	f001 fecd 	bl	8007c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eda:	1d3a      	adds	r2, r7, #4
 8005edc:	f107 0314 	add.w	r3, r7, #20
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fff8 	bl	8006ed8 <xTaskCheckForTimeOut>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d124      	bne.n	8005f38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005eee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef0:	f000 faa2 	bl	8006438 <prvIsQueueFull>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d018      	beq.n	8005f2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	3310      	adds	r3, #16
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 ff1e 	bl	8006d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f0a:	f000 fa2d 	bl	8006368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f0e:	f000 fd53 	bl	80069b8 <xTaskResumeAll>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f47f af7c 	bne.w	8005e12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <xQueueGenericSend+0x1f8>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e772      	b.n	8005e12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f2e:	f000 fa1b 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f32:	f000 fd41 	bl	80069b8 <xTaskResumeAll>
 8005f36:	e76c      	b.n	8005e12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f3a:	f000 fa15 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f3e:	f000 fd3b 	bl	80069b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3738      	adds	r7, #56	; 0x38
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b090      	sub	sp, #64	; 0x40
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f7a:	bf00      	nop
 8005f7c:	e7fe      	b.n	8005f7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <xQueueGenericSendFromISR+0x3c>
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xQueueGenericSendFromISR+0x40>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <xQueueGenericSendFromISR+0x42>
 8005f90:	2300      	movs	r3, #0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fa8:	bf00      	nop
 8005faa:	e7fe      	b.n	8005faa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSendFromISR+0x6a>
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <xQueueGenericSendFromISR+0x6e>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGenericSendFromISR+0x70>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	623b      	str	r3, [r7, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	e7fe      	b.n	8005fd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fda:	f001 fefd 	bl	8007dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fde:	f3ef 8211 	mrs	r2, BASEPRI
 8005fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	61fa      	str	r2, [r7, #28]
 8005ff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	429a      	cmp	r2, r3
 8006004:	d302      	bcc.n	800600c <xQueueGenericSendFromISR+0xbc>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d12f      	bne.n	800606c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006022:	f000 f911 	bl	8006248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d112      	bne.n	8006056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	3324      	adds	r3, #36	; 0x24
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fed1 	bl	8006de4 <xTaskRemoveFromEventList>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e007      	b.n	8006066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800605a:	3301      	adds	r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	b25a      	sxtb	r2, r3
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006066:	2301      	movs	r3, #1
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800606a:	e001      	b.n	8006070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800606c:	2300      	movs	r3, #0
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800607a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800607e:	4618      	mov	r0, r3
 8006080:	3740      	adds	r7, #64	; 0x40
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08c      	sub	sp, #48	; 0x30
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xQueueReceive+0x30>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	623b      	str	r3, [r7, #32]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <xQueueReceive+0x3e>
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <xQueueReceive+0x42>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueReceive+0x44>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueReceive+0x5e>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fb      	str	r3, [r7, #28]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e6:	f001 f83b 	bl	8007160 <xTaskGetSchedulerState>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <xQueueReceive+0x6e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <xQueueReceive+0x72>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <xQueueReceive+0x74>
 80060fa:	2300      	movs	r3, #0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xQueueReceive+0x8e>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	61bb      	str	r3, [r7, #24]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006116:	f001 fd7d 	bl	8007c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01f      	beq.n	8006166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612a:	f000 f8f7 	bl	800631c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	1e5a      	subs	r2, r3, #1
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00f      	beq.n	800615e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	3310      	adds	r3, #16
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fe4e 	bl	8006de4 <xTaskRemoveFromEventList>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800614e:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <xQueueReceive+0x1bc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800615e:	f001 fd89 	bl	8007c74 <vPortExitCritical>
				return pdPASS;
 8006162:	2301      	movs	r3, #1
 8006164:	e069      	b.n	800623a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800616c:	f001 fd82 	bl	8007c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006170:	2300      	movs	r3, #0
 8006172:	e062      	b.n	800623a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800617a:	f107 0310 	add.w	r3, r7, #16
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fe94 	bl	8006eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006184:	2301      	movs	r3, #1
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006188:	f001 fd74 	bl	8007c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800618c:	f000 fc06 	bl	800699c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006190:	f001 fd40 	bl	8007c14 <vPortEnterCritical>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800619a:	b25b      	sxtb	r3, r3
 800619c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a0:	d103      	bne.n	80061aa <xQueueReceive+0x122>
 80061a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b0:	b25b      	sxtb	r3, r3
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0x138>
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c0:	f001 fd58 	bl	8007c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061c4:	1d3a      	adds	r2, r7, #4
 80061c6:	f107 0310 	add.w	r3, r7, #16
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fe83 	bl	8006ed8 <xTaskCheckForTimeOut>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d123      	bne.n	8006220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061da:	f000 f917 	bl	800640c <prvIsQueueEmpty>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d017      	beq.n	8006214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e6:	3324      	adds	r3, #36	; 0x24
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fda9 	bl	8006d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 f8b8 	bl	8006368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061f8:	f000 fbde 	bl	80069b8 <xTaskResumeAll>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d189      	bne.n	8006116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006202:	4b10      	ldr	r3, [pc, #64]	; (8006244 <xQueueReceive+0x1bc>)
 8006204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	e780      	b.n	8006116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 f8a7 	bl	8006368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800621a:	f000 fbcd 	bl	80069b8 <xTaskResumeAll>
 800621e:	e77a      	b.n	8006116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006222:	f000 f8a1 	bl	8006368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006226:	f000 fbc7 	bl	80069b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800622a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622c:	f000 f8ee 	bl	800640c <prvIsQueueEmpty>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f43f af6f 	beq.w	8006116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800623a:	4618      	mov	r0, r3
 800623c:	3730      	adds	r7, #48	; 0x30
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d14d      	bne.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 ff92 	bl	800719c <xTaskPriorityDisinherit>
 8006278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	e043      	b.n	800630a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d119      	bne.n	80062bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6858      	ldr	r0, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	461a      	mov	r2, r3
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	f001 ffee 	bl	8008274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d32b      	bcc.n	800630a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	e026      	b.n	800630a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68d8      	ldr	r0, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	461a      	mov	r2, r3
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	f001 ffd4 	bl	8008274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	425b      	negs	r3, r3
 80062d6:	441a      	add	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d207      	bcs.n	80062f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	425b      	negs	r3, r3
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d105      	bne.n	800630a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	3b01      	subs	r3, #1
 8006308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006312:	697b      	ldr	r3, [r7, #20]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d018      	beq.n	8006360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	441a      	add	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	d303      	bcc.n	8006350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68d9      	ldr	r1, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	461a      	mov	r2, r3
 800635a:	6838      	ldr	r0, [r7, #0]
 800635c:	f001 ff8a 	bl	8008274 <memcpy>
	}
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006370:	f001 fc50 	bl	8007c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800637a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637c:	e011      	b.n	80063a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fd2a 	bl	8006de4 <xTaskRemoveFromEventList>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006396:	f000 fe01 	bl	8006f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
 800639c:	3b01      	subs	r3, #1
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dce9      	bgt.n	800637e <prvUnlockQueue+0x16>
 80063aa:	e000      	b.n	80063ae <prvUnlockQueue+0x46>
					break;
 80063ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	22ff      	movs	r2, #255	; 0xff
 80063b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063b6:	f001 fc5d 	bl	8007c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063ba:	f001 fc2b 	bl	8007c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c6:	e011      	b.n	80063ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fd05 	bl	8006de4 <xTaskRemoveFromEventList>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063e0:	f000 fddc 	bl	8006f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dce9      	bgt.n	80063c8 <prvUnlockQueue+0x60>
 80063f4:	e000      	b.n	80063f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	22ff      	movs	r2, #255	; 0xff
 80063fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006400:	f001 fc38 	bl	8007c74 <vPortExitCritical>
}
 8006404:	bf00      	nop
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006414:	f001 fbfe 	bl	8007c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e001      	b.n	800642a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800642a:	f001 fc23 	bl	8007c74 <vPortExitCritical>

	return xReturn;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006440:	f001 fbe8 	bl	8007c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	429a      	cmp	r2, r3
 800644e:	d102      	bne.n	8006456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e001      	b.n	800645a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800645a:	f001 fc0b 	bl	8007c74 <vPortExitCritical>

	return xReturn;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e014      	b.n	80064a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006478:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <vQueueAddToRegistry+0x50>)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006484:	490c      	ldr	r1, [pc, #48]	; (80064b8 <vQueueAddToRegistry+0x50>)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <vQueueAddToRegistry+0x50>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800649a:	e006      	b.n	80064aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	d9e7      	bls.n	8006478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20001a80 	.word	0x20001a80

080064bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80064cc:	f001 fba2 	bl	8007c14 <vPortEnterCritical>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064d6:	b25b      	sxtb	r3, r3
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064dc:	d103      	bne.n	80064e6 <vQueueWaitForMessageRestricted+0x2a>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ec:	b25b      	sxtb	r3, r3
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f2:	d103      	bne.n	80064fc <vQueueWaitForMessageRestricted+0x40>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064fc:	f001 fbba 	bl	8007c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	3324      	adds	r3, #36	; 0x24
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fc3b 	bl	8006d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006516:	6978      	ldr	r0, [r7, #20]
 8006518:	f7ff ff26 	bl	8006368 <prvUnlockQueue>
	}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08e      	sub	sp, #56	; 0x38
 8006528:	af04      	add	r7, sp, #16
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	623b      	str	r3, [r7, #32]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCreateStatic+0x46>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	61fb      	str	r3, [r7, #28]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800656a:	235c      	movs	r3, #92	; 0x5c
 800656c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b5c      	cmp	r3, #92	; 0x5c
 8006572:	d00a      	beq.n	800658a <xTaskCreateStatic+0x66>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61bb      	str	r3, [r7, #24]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800658a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01e      	beq.n	80065d0 <xTaskCreateStatic+0xac>
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01b      	beq.n	80065d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065aa:	2300      	movs	r3, #0
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9302      	str	r3, [sp, #8]
 80065b2:	f107 0314 	add.w	r3, r7, #20
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f850 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ca:	f000 f8dd 	bl	8006788 <prvAddNewTaskToReadyList>
 80065ce:	e001      	b.n	80065d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065d4:	697b      	ldr	r3, [r7, #20]
	}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3728      	adds	r7, #40	; 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08c      	sub	sp, #48	; 0x30
 80065e2:	af04      	add	r7, sp, #16
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f001 fc30 	bl	8007e58 <pvPortMalloc>
 80065f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006600:	205c      	movs	r0, #92	; 0x5c
 8006602:	f001 fc29 	bl	8007e58 <pvPortMalloc>
 8006606:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
 8006614:	e005      	b.n	8006622 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f001 fcea 	bl	8007ff0 <vPortFree>
 800661c:	e001      	b.n	8006622 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d017      	beq.n	8006658 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006630:	88fa      	ldrh	r2, [r7, #6]
 8006632:	2300      	movs	r3, #0
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	9302      	str	r3, [sp, #8]
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f80e 	bl	8006668 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800664c:	69f8      	ldr	r0, [r7, #28]
 800664e:	f000 f89b 	bl	8006788 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006652:	2301      	movs	r3, #1
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e002      	b.n	800665e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800665c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800665e:	69bb      	ldr	r3, [r7, #24]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	461a      	mov	r2, r3
 8006680:	21a5      	movs	r1, #165	; 0xa5
 8006682:	f001 fe05 	bl	8008290 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006690:	3b01      	subs	r3, #1
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	617b      	str	r3, [r7, #20]
}
 80066bc:	bf00      	nop
 80066be:	e7fe      	b.n	80066be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01f      	beq.n	8006706 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	e012      	b.n	80066f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	7819      	ldrb	r1, [r3, #0]
 80066d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	3334      	adds	r3, #52	; 0x34
 80066dc:	460a      	mov	r2, r1
 80066de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d006      	beq.n	80066fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d9e9      	bls.n	80066cc <prvInitialiseNewTask+0x64>
 80066f8:	e000      	b.n	80066fc <prvInitialiseNewTask+0x94>
			{
				break;
 80066fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006704:	e003      	b.n	800670e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	2b37      	cmp	r3, #55	; 0x37
 8006712:	d901      	bls.n	8006718 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006714:	2337      	movs	r3, #55	; 0x37
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800671c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	3304      	adds	r3, #4
 800672e:	4618      	mov	r0, r3
 8006730:	f7ff f978 	bl	8005a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006736:	3318      	adds	r3, #24
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff f973 	bl	8005a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	2200      	movs	r2, #0
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	68f9      	ldr	r1, [r7, #12]
 8006766:	69b8      	ldr	r0, [r7, #24]
 8006768:	f001 f928 	bl	80079bc <pxPortInitialiseStack>
 800676c:	4602      	mov	r2, r0
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800677e:	bf00      	nop
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006790:	f001 fa40 	bl	8007c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	4a2c      	ldr	r2, [pc, #176]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 800679c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800679e:	4b2c      	ldr	r3, [pc, #176]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <prvAddNewTaskToReadyList+0xc4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d110      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067b4:	f000 fc16 	bl	8006fe4 <prvInitialiseTaskLists>
 80067b8:	e00d      	b.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <prvAddNewTaskToReadyList+0xcc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067c2:	4b23      	ldr	r3, [pc, #140]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d802      	bhi.n	80067d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067d0:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	4a1e      	ldr	r2, [pc, #120]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80067e0:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <prvAddNewTaskToReadyList+0xd0>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <prvAddNewTaskToReadyList+0xd4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d903      	bls.n	80067fc <prvAddNewTaskToReadyList+0x74>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a18      	ldr	r2, [pc, #96]	; (800685c <prvAddNewTaskToReadyList+0xd4>)
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4a15      	ldr	r2, [pc, #84]	; (8006860 <prvAddNewTaskToReadyList+0xd8>)
 800680a:	441a      	add	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7ff f913 	bl	8005a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006818:	f001 fa2c 	bl	8007c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <prvAddNewTaskToReadyList+0xcc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00e      	beq.n	8006842 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006824:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvAddNewTaskToReadyList+0xc8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	429a      	cmp	r2, r3
 8006830:	d207      	bcs.n	8006842 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <prvAddNewTaskToReadyList+0xdc>)
 8006834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000bbc 	.word	0x20000bbc
 8006850:	200006e8 	.word	0x200006e8
 8006854:	20000bc8 	.word	0x20000bc8
 8006858:	20000bd8 	.word	0x20000bd8
 800685c:	20000bc4 	.word	0x20000bc4
 8006860:	200006ec 	.word	0x200006ec
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d017      	beq.n	80068aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <vTaskDelay+0x60>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00a      	beq.n	8006898 <vTaskDelay+0x30>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006898:	f000 f880 	bl	800699c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800689c:	2100      	movs	r1, #0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fcea 	bl	8007278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068a4:	f000 f888 	bl	80069b8 <xTaskResumeAll>
 80068a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d107      	bne.n	80068c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <vTaskDelay+0x64>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000be4 	.word	0x20000be4
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08a      	sub	sp, #40	; 0x28
 80068d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068de:	463a      	mov	r2, r7
 80068e0:	1d39      	adds	r1, r7, #4
 80068e2:	f107 0308 	add.w	r3, r7, #8
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff f848 	bl	800597c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	9202      	str	r2, [sp, #8]
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	460a      	mov	r2, r1
 80068fe:	4921      	ldr	r1, [pc, #132]	; (8006984 <vTaskStartScheduler+0xb4>)
 8006900:	4821      	ldr	r0, [pc, #132]	; (8006988 <vTaskStartScheduler+0xb8>)
 8006902:	f7ff fe0f 	bl	8006524 <xTaskCreateStatic>
 8006906:	4603      	mov	r3, r0
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <vTaskStartScheduler+0xbc>)
 800690a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800690c:	4b1f      	ldr	r3, [pc, #124]	; (800698c <vTaskStartScheduler+0xbc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006914:	2301      	movs	r3, #1
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e001      	b.n	800691e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d102      	bne.n	800692a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006924:	f000 fcfc 	bl	8007320 <xTimerCreateTimerTask>
 8006928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d116      	bne.n	800695e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
}
 8006942:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <vTaskStartScheduler+0xc0>)
 8006946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800694c:	4b11      	ldr	r3, [pc, #68]	; (8006994 <vTaskStartScheduler+0xc4>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006952:	4b11      	ldr	r3, [pc, #68]	; (8006998 <vTaskStartScheduler+0xc8>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006958:	f001 f8ba 	bl	8007ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800695c:	e00e      	b.n	800697c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006964:	d10a      	bne.n	800697c <vTaskStartScheduler+0xac>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60fb      	str	r3, [r7, #12]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <vTaskStartScheduler+0xaa>
}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	080082c8 	.word	0x080082c8
 8006988:	08006fb5 	.word	0x08006fb5
 800698c:	20000be0 	.word	0x20000be0
 8006990:	20000bdc 	.word	0x20000bdc
 8006994:	20000bc8 	.word	0x20000bc8
 8006998:	20000bc0 	.word	0x20000bc0

0800699c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069a0:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <vTaskSuspendAll+0x18>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3301      	adds	r3, #1
 80069a6:	4a03      	ldr	r2, [pc, #12]	; (80069b4 <vTaskSuspendAll+0x18>)
 80069a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069aa:	bf00      	nop
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000be4 	.word	0x20000be4

080069b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069c6:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	e7fe      	b.n	80069e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069e4:	f001 f916 	bl	8007c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069e8:	4b39      	ldr	r3, [pc, #228]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	4a38      	ldr	r2, [pc, #224]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f2:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <xTaskResumeAll+0x118>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d162      	bne.n	8006ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069fa:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <xTaskResumeAll+0x11c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d05e      	beq.n	8006ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a02:	e02f      	b.n	8006a64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a04:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <xTaskResumeAll+0x120>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3318      	adds	r3, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff f871 	bl	8005af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff f86c 	bl	8005af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <xTaskResumeAll+0x124>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d903      	bls.n	8006a34 <xTaskResumeAll+0x7c>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <xTaskResumeAll+0x124>)
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <xTaskResumeAll+0x128>)
 8006a42:	441a      	add	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f7fe fff7 	bl	8005a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4b23      	ldr	r3, [pc, #140]	; (8006ae4 <xTaskResumeAll+0x12c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006a60:	2201      	movs	r2, #1
 8006a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a64:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTaskResumeAll+0x120>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1cb      	bne.n	8006a04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a72:	f000 fb55 	bl	8007120 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a76:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <xTaskResumeAll+0x134>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a82:	f000 f847 	bl	8006b14 <xTaskIncrementTick>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a8c:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3b01      	subs	r3, #1
 8006a96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f1      	bne.n	8006a82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a9e:	4b13      	ldr	r3, [pc, #76]	; (8006aec <xTaskResumeAll+0x134>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aa4:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <xTaskResumeAll+0x130>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <xTaskResumeAll+0x138>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 f8d8 	bl	8007c74 <vPortExitCritical>

	return xAlreadyYielded;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000be4 	.word	0x20000be4
 8006ad4:	20000bbc 	.word	0x20000bbc
 8006ad8:	20000b7c 	.word	0x20000b7c
 8006adc:	20000bc4 	.word	0x20000bc4
 8006ae0:	200006ec 	.word	0x200006ec
 8006ae4:	200006e8 	.word	0x200006e8
 8006ae8:	20000bd0 	.word	0x20000bd0
 8006aec:	20000bcc 	.word	0x20000bcc
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <xTaskGetTickCount+0x1c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b00:	687b      	ldr	r3, [r7, #4]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000bc0 	.word	0x20000bc0

08006b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b1e:	4b4f      	ldr	r3, [pc, #316]	; (8006c5c <xTaskIncrementTick+0x148>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 808f 	bne.w	8006c46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b28:	4b4d      	ldr	r3, [pc, #308]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b30:	4a4b      	ldr	r2, [pc, #300]	; (8006c60 <xTaskIncrementTick+0x14c>)
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d120      	bne.n	8006b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b3c:	4b49      	ldr	r3, [pc, #292]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	603b      	str	r3, [r7, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskIncrementTick+0x46>
 8006b5c:	4b41      	ldr	r3, [pc, #260]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	4b41      	ldr	r3, [pc, #260]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3f      	ldr	r2, [pc, #252]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <xTaskIncrementTick+0x154>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	4b3e      	ldr	r3, [pc, #248]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a3d      	ldr	r2, [pc, #244]	; (8006c6c <xTaskIncrementTick+0x158>)
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	f000 fad1 	bl	8007120 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b7e:	4b3c      	ldr	r3, [pc, #240]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d349      	bcc.n	8006c1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b88:	4b36      	ldr	r3, [pc, #216]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b98:	601a      	str	r2, [r3, #0]
					break;
 8006b9a:	e03f      	b.n	8006c1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	4b31      	ldr	r3, [pc, #196]	; (8006c64 <xTaskIncrementTick+0x150>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d203      	bcs.n	8006bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bb4:	4a2e      	ldr	r2, [pc, #184]	; (8006c70 <xTaskIncrementTick+0x15c>)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bba:	e02f      	b.n	8006c1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fe ff99 	bl	8005af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe ff90 	bl	8005af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bdc:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d903      	bls.n	8006bec <xTaskIncrementTick+0xd8>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <xTaskIncrementTick+0x160>)
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	3304      	adds	r3, #4
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe ff1b 	bl	8005a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d3b8      	bcc.n	8006b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1a:	e7b5      	b.n	8006b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c1c:	4b17      	ldr	r3, [pc, #92]	; (8006c7c <xTaskIncrementTick+0x168>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	4915      	ldr	r1, [pc, #84]	; (8006c78 <xTaskIncrementTick+0x164>)
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d901      	bls.n	8006c38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <xTaskIncrementTick+0x16c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e004      	b.n	8006c50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <xTaskIncrementTick+0x170>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	4a0d      	ldr	r2, [pc, #52]	; (8006c84 <xTaskIncrementTick+0x170>)
 8006c4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c50:	697b      	ldr	r3, [r7, #20]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000be4 	.word	0x20000be4
 8006c60:	20000bc0 	.word	0x20000bc0
 8006c64:	20000b74 	.word	0x20000b74
 8006c68:	20000b78 	.word	0x20000b78
 8006c6c:	20000bd4 	.word	0x20000bd4
 8006c70:	20000bdc 	.word	0x20000bdc
 8006c74:	20000bc4 	.word	0x20000bc4
 8006c78:	200006ec 	.word	0x200006ec
 8006c7c:	200006e8 	.word	0x200006e8
 8006c80:	20000bd0 	.word	0x20000bd0
 8006c84:	20000bcc 	.word	0x20000bcc

08006c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c8e:	4b28      	ldr	r3, [pc, #160]	; (8006d30 <vTaskSwitchContext+0xa8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c96:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c9c:	e041      	b.n	8006d22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006c9e:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <vTaskSwitchContext+0xac>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vTaskSwitchContext+0xb0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	e010      	b.n	8006cce <vTaskSwitchContext+0x46>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	607b      	str	r3, [r7, #4]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <vTaskSwitchContext+0x3e>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	491b      	ldr	r1, [pc, #108]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	440b      	add	r3, r1
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0e4      	beq.n	8006cac <vTaskSwitchContext+0x24>
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <vTaskSwitchContext+0xb4>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	3308      	adds	r3, #8
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d104      	bne.n	8006d12 <vTaskSwitchContext+0x8a>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <vTaskSwitchContext+0xb8>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <vTaskSwitchContext+0xb0>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6013      	str	r3, [r2, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000be4 	.word	0x20000be4
 8006d34:	20000bd0 	.word	0x20000bd0
 8006d38:	20000bc4 	.word	0x20000bc4
 8006d3c:	200006ec 	.word	0x200006ec
 8006d40:	200006e8 	.word	0x200006e8

08006d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	60fb      	str	r3, [r7, #12]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <vTaskPlaceOnEventList+0x44>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3318      	adds	r3, #24
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fe fe87 	bl	8005a86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d78:	2101      	movs	r1, #1
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f000 fa7c 	bl	8007278 <prvAddCurrentTaskToDelayedList>
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	200006e8 	.word	0x200006e8

08006d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	617b      	str	r3, [r7, #20]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006db4:	4b0a      	ldr	r3, [pc, #40]	; (8006de0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3318      	adds	r3, #24
 8006dba:	4619      	mov	r1, r3
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7fe fe3e 	bl	8005a3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dcc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	68b8      	ldr	r0, [r7, #8]
 8006dd2:	f000 fa51 	bl	8007278 <prvAddCurrentTaskToDelayedList>
	}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200006e8 	.word	0x200006e8

08006de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60fb      	str	r3, [r7, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	3318      	adds	r3, #24
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fe6f 	bl	8005af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e1a:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <xTaskRemoveFromEventList+0xb0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d11d      	bne.n	8006e5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe fe66 	bl	8005af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4b19      	ldr	r3, [pc, #100]	; (8006e98 <xTaskRemoveFromEventList+0xb4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <xTaskRemoveFromEventList+0x5c>
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <xTaskRemoveFromEventList+0xb4>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <xTaskRemoveFromEventList+0xb8>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe fdf1 	bl	8005a3e <vListInsertEnd>
 8006e5c:	e005      	b.n	8006e6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	3318      	adds	r3, #24
 8006e62:	4619      	mov	r1, r3
 8006e64:	480e      	ldr	r0, [pc, #56]	; (8006ea0 <xTaskRemoveFromEventList+0xbc>)
 8006e66:	f7fe fdea 	bl	8005a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <xTaskRemoveFromEventList+0xc0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d905      	bls.n	8006e84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <xTaskRemoveFromEventList+0xc4>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e001      	b.n	8006e88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e88:	697b      	ldr	r3, [r7, #20]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000be4 	.word	0x20000be4
 8006e98:	20000bc4 	.word	0x20000bc4
 8006e9c:	200006ec 	.word	0x200006ec
 8006ea0:	20000b7c 	.word	0x20000b7c
 8006ea4:	200006e8 	.word	0x200006e8
 8006ea8:	20000bd0 	.word	0x20000bd0

08006eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <vTaskInternalSetTimeOutState+0x24>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <vTaskInternalSetTimeOutState+0x28>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	605a      	str	r2, [r3, #4]
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20000bd4 	.word	0x20000bd4
 8006ed4:	20000bc0 	.word	0x20000bc0

08006ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10a      	bne.n	8006efe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	613b      	str	r3, [r7, #16]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f1a:	f000 fe7b 	bl	8007c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <xTaskCheckForTimeOut+0xbc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f36:	d102      	bne.n	8006f3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e023      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <xTaskCheckForTimeOut+0xc0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d007      	beq.n	8006f5a <xTaskCheckForTimeOut+0x82>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e015      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d20b      	bcs.n	8006f7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff9b 	bl	8006eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e004      	b.n	8006f86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f86:	f000 fe75 	bl	8007c74 <vPortExitCritical>

	return xReturn;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000bc0 	.word	0x20000bc0
 8006f98:	20000bd4 	.word	0x20000bd4

08006f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <vTaskMissedYield+0x14>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000bd0 	.word	0x20000bd0

08006fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fbc:	f000 f852 	bl	8007064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fc0:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <prvIdleTask+0x28>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d9f9      	bls.n	8006fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <prvIdleTask+0x2c>)
 8006fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fd8:	e7f0      	b.n	8006fbc <prvIdleTask+0x8>
 8006fda:	bf00      	nop
 8006fdc:	200006ec 	.word	0x200006ec
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	e00c      	b.n	800700a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <prvInitialiseTaskLists+0x60>)
 8006ffc:	4413      	add	r3, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fcf0 	bl	80059e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3301      	adds	r3, #1
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b37      	cmp	r3, #55	; 0x37
 800700e:	d9ef      	bls.n	8006ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007010:	480d      	ldr	r0, [pc, #52]	; (8007048 <prvInitialiseTaskLists+0x64>)
 8007012:	f7fe fce7 	bl	80059e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007016:	480d      	ldr	r0, [pc, #52]	; (800704c <prvInitialiseTaskLists+0x68>)
 8007018:	f7fe fce4 	bl	80059e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800701c:	480c      	ldr	r0, [pc, #48]	; (8007050 <prvInitialiseTaskLists+0x6c>)
 800701e:	f7fe fce1 	bl	80059e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007022:	480c      	ldr	r0, [pc, #48]	; (8007054 <prvInitialiseTaskLists+0x70>)
 8007024:	f7fe fcde 	bl	80059e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007028:	480b      	ldr	r0, [pc, #44]	; (8007058 <prvInitialiseTaskLists+0x74>)
 800702a:	f7fe fcdb 	bl	80059e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <prvInitialiseTaskLists+0x78>)
 8007030:	4a05      	ldr	r2, [pc, #20]	; (8007048 <prvInitialiseTaskLists+0x64>)
 8007032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007034:	4b0a      	ldr	r3, [pc, #40]	; (8007060 <prvInitialiseTaskLists+0x7c>)
 8007036:	4a05      	ldr	r2, [pc, #20]	; (800704c <prvInitialiseTaskLists+0x68>)
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	200006ec 	.word	0x200006ec
 8007048:	20000b4c 	.word	0x20000b4c
 800704c:	20000b60 	.word	0x20000b60
 8007050:	20000b7c 	.word	0x20000b7c
 8007054:	20000b90 	.word	0x20000b90
 8007058:	20000ba8 	.word	0x20000ba8
 800705c:	20000b74 	.word	0x20000b74
 8007060:	20000b78 	.word	0x20000b78

08007064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800706a:	e019      	b.n	80070a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800706c:	f000 fdd2 	bl	8007c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007070:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <prvCheckTasksWaitingTermination+0x50>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fd3b 	bl	8005af8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	4a0b      	ldr	r2, [pc, #44]	; (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 800708a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 8007094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007096:	f000 fded 	bl	8007c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f810 	bl	80070c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <prvCheckTasksWaitingTermination+0x58>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e1      	bne.n	800706c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000b90 	.word	0x20000b90
 80070b8:	20000bbc 	.word	0x20000bbc
 80070bc:	20000ba4 	.word	0x20000ba4

080070c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d108      	bne.n	80070e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 ff8a 	bl	8007ff0 <vPortFree>
				vPortFree( pxTCB );
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 ff87 	bl	8007ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070e2:	e018      	b.n	8007116 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d103      	bne.n	80070f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ff7e 	bl	8007ff0 <vPortFree>
	}
 80070f4:	e00f      	b.n	8007116 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d00a      	beq.n	8007116 <prvDeleteTCB+0x56>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <prvDeleteTCB+0x54>
	}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <prvResetNextTaskUnblockTime+0x38>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <prvResetNextTaskUnblockTime+0x3c>)
 8007132:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007136:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007138:	e008      	b.n	800714c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713a:	4b07      	ldr	r3, [pc, #28]	; (8007158 <prvResetNextTaskUnblockTime+0x38>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <prvResetNextTaskUnblockTime+0x3c>)
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	20000b74 	.word	0x20000b74
 800715c:	20000bdc 	.word	0x20000bdc

08007160 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <xTaskGetSchedulerState+0x34>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800716e:	2301      	movs	r3, #1
 8007170:	607b      	str	r3, [r7, #4]
 8007172:	e008      	b.n	8007186 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <xTaskGetSchedulerState+0x38>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800717c:	2302      	movs	r3, #2
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	e001      	b.n	8007186 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007182:	2300      	movs	r3, #0
 8007184:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007186:	687b      	ldr	r3, [r7, #4]
	}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	20000bc8 	.word	0x20000bc8
 8007198:	20000be4 	.word	0x20000be4

0800719c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d056      	beq.n	8007260 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071b2:	4b2e      	ldr	r3, [pc, #184]	; (800726c <xTaskPriorityDisinherit+0xd0>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d00a      	beq.n	80071d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60fb      	str	r3, [r7, #12]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	60bb      	str	r3, [r7, #8]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007202:	429a      	cmp	r2, r3
 8007204:	d02c      	beq.n	8007260 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720a:	2b00      	cmp	r3, #0
 800720c:	d128      	bne.n	8007260 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4618      	mov	r0, r3
 8007214:	f7fe fc70 	bl	8005af8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <xTaskPriorityDisinherit+0xd4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	d903      	bls.n	8007240 <xTaskPriorityDisinherit+0xa4>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <xTaskPriorityDisinherit+0xd4>)
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4a09      	ldr	r2, [pc, #36]	; (8007274 <xTaskPriorityDisinherit+0xd8>)
 800724e:	441a      	add	r2, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3304      	adds	r3, #4
 8007254:	4619      	mov	r1, r3
 8007256:	4610      	mov	r0, r2
 8007258:	f7fe fbf1 	bl	8005a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007260:	697b      	ldr	r3, [r7, #20]
	}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	200006e8 	.word	0x200006e8
 8007270:	20000bc4 	.word	0x20000bc4
 8007274:	200006ec 	.word	0x200006ec

08007278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007282:	4b21      	ldr	r3, [pc, #132]	; (8007308 <prvAddCurrentTaskToDelayedList+0x90>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007288:	4b20      	ldr	r3, [pc, #128]	; (800730c <prvAddCurrentTaskToDelayedList+0x94>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fc32 	bl	8005af8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800729a:	d10a      	bne.n	80072b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072a2:	4b1a      	ldr	r3, [pc, #104]	; (800730c <prvAddCurrentTaskToDelayedList+0x94>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3304      	adds	r3, #4
 80072a8:	4619      	mov	r1, r3
 80072aa:	4819      	ldr	r0, [pc, #100]	; (8007310 <prvAddCurrentTaskToDelayedList+0x98>)
 80072ac:	f7fe fbc7 	bl	8005a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80072b0:	e026      	b.n	8007300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4413      	add	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072ba:	4b14      	ldr	r3, [pc, #80]	; (800730c <prvAddCurrentTaskToDelayedList+0x94>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d209      	bcs.n	80072de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <prvAddCurrentTaskToDelayedList+0x94>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3304      	adds	r3, #4
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7fe fbd5 	bl	8005a86 <vListInsert>
}
 80072dc:	e010      	b.n	8007300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072de:	4b0e      	ldr	r3, [pc, #56]	; (8007318 <prvAddCurrentTaskToDelayedList+0xa0>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b0a      	ldr	r3, [pc, #40]	; (800730c <prvAddCurrentTaskToDelayedList+0x94>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe fbcb 	bl	8005a86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d202      	bcs.n	8007300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072fa:	4a08      	ldr	r2, [pc, #32]	; (800731c <prvAddCurrentTaskToDelayedList+0xa4>)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6013      	str	r3, [r2, #0]
}
 8007300:	bf00      	nop
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20000bc0 	.word	0x20000bc0
 800730c:	200006e8 	.word	0x200006e8
 8007310:	20000ba8 	.word	0x20000ba8
 8007314:	20000b78 	.word	0x20000b78
 8007318:	20000b74 	.word	0x20000b74
 800731c:	20000bdc 	.word	0x20000bdc

08007320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800732a:	f000 fb07 	bl	800793c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800732e:	4b1c      	ldr	r3, [pc, #112]	; (80073a0 <xTimerCreateTimerTask+0x80>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d021      	beq.n	800737a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800733e:	1d3a      	adds	r2, r7, #4
 8007340:	f107 0108 	add.w	r1, r7, #8
 8007344:	f107 030c 	add.w	r3, r7, #12
 8007348:	4618      	mov	r0, r3
 800734a:	f7fe fb31 	bl	80059b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	2302      	movs	r3, #2
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2300      	movs	r3, #0
 800735e:	460a      	mov	r2, r1
 8007360:	4910      	ldr	r1, [pc, #64]	; (80073a4 <xTimerCreateTimerTask+0x84>)
 8007362:	4811      	ldr	r0, [pc, #68]	; (80073a8 <xTimerCreateTimerTask+0x88>)
 8007364:	f7ff f8de 	bl	8006524 <xTaskCreateStatic>
 8007368:	4603      	mov	r3, r0
 800736a:	4a10      	ldr	r2, [pc, #64]	; (80073ac <xTimerCreateTimerTask+0x8c>)
 800736c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <xTimerCreateTimerTask+0x8c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007376:	2301      	movs	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	613b      	str	r3, [r7, #16]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007396:	697b      	ldr	r3, [r7, #20]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000c18 	.word	0x20000c18
 80073a4:	080082d0 	.word	0x080082d0
 80073a8:	080074e5 	.word	0x080074e5
 80073ac:	20000c1c 	.word	0x20000c1c

080073b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	; 0x28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTimerGenericCommand+0x2e>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	623b      	str	r3, [r7, #32]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073de:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <xTimerGenericCommand+0x98>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d02a      	beq.n	800743c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	dc18      	bgt.n	800742a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073f8:	f7ff feb2 	bl	8007160 <xTaskGetSchedulerState>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d109      	bne.n	8007416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <xTimerGenericCommand+0x98>)
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	f107 0110 	add.w	r1, r7, #16
 800740a:	2300      	movs	r3, #0
 800740c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740e:	f7fe fca1 	bl	8005d54 <xQueueGenericSend>
 8007412:	6278      	str	r0, [r7, #36]	; 0x24
 8007414:	e012      	b.n	800743c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <xTimerGenericCommand+0x98>)
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f107 0110 	add.w	r1, r7, #16
 800741e:	2300      	movs	r3, #0
 8007420:	2200      	movs	r2, #0
 8007422:	f7fe fc97 	bl	8005d54 <xQueueGenericSend>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24
 8007428:	e008      	b.n	800743c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <xTimerGenericCommand+0x98>)
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f107 0110 	add.w	r1, r7, #16
 8007432:	2300      	movs	r3, #0
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	f7fe fd8b 	bl	8005f50 <xQueueGenericSendFromISR>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000c18 	.word	0x20000c18

0800744c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <prvProcessExpiredTimer+0x94>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3304      	adds	r3, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fb47 	bl	8005af8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d022      	beq.n	80074be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	18d1      	adds	r1, r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f000 f8d1 	bl	800762c <prvInsertTimerInActiveList>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01f      	beq.n	80074d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007490:	2300      	movs	r3, #0
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	2100      	movs	r1, #0
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff88 	bl	80073b0 <xTimerGenericCommand>
 80074a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d113      	bne.n	80074d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60fb      	str	r3, [r7, #12]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	4798      	blx	r3
}
 80074d8:	bf00      	nop
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000c10 	.word	0x20000c10

080074e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f857 	bl	80075a4 <prvGetNextExpireTime>
 80074f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f803 	bl	8007508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007502:	f000 f8d5 	bl	80076b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007506:	e7f1      	b.n	80074ec <prvTimerTask+0x8>

08007508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007512:	f7ff fa43 	bl	800699c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f866 	bl	80075ec <prvSampleTimeNow>
 8007520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d130      	bne.n	800758a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <prvProcessTimerOrBlockTask+0x3c>
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	429a      	cmp	r2, r3
 8007534:	d806      	bhi.n	8007544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007536:	f7ff fa3f 	bl	80069b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ff85 	bl	800744c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007542:	e024      	b.n	800758e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <prvProcessTimerOrBlockTask+0x90>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <prvProcessTimerOrBlockTask+0x50>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <prvProcessTimerOrBlockTask+0x52>
 8007558:	2300      	movs	r3, #0
 800755a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <prvProcessTimerOrBlockTask+0x94>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	4619      	mov	r1, r3
 800756a:	f7fe ffa7 	bl	80064bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800756e:	f7ff fa23 	bl	80069b8 <xTaskResumeAll>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <prvProcessTimerOrBlockTask+0x98>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
}
 8007588:	e001      	b.n	800758e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800758a:	f7ff fa15 	bl	80069b8 <xTaskResumeAll>
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000c14 	.word	0x20000c14
 800759c:	20000c18 	.word	0x20000c18
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <prvGetNextExpireTime+0x44>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <prvGetNextExpireTime+0x16>
 80075b6:	2201      	movs	r2, #1
 80075b8:	e000      	b.n	80075bc <prvGetNextExpireTime+0x18>
 80075ba:	2200      	movs	r2, #0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c8:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <prvGetNextExpireTime+0x44>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e001      	b.n	80075d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075d8:	68fb      	ldr	r3, [r7, #12]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000c10 	.word	0x20000c10

080075ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075f4:	f7ff fa7e 	bl	8006af4 <xTaskGetTickCount>
 80075f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <prvSampleTimeNow+0x3c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	d205      	bcs.n	8007610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007604:	f000 f936 	bl	8007874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007616:	4a04      	ldr	r2, [pc, #16]	; (8007628 <prvSampleTimeNow+0x3c>)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800761c:	68fb      	ldr	r3, [r7, #12]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000c20 	.word	0x20000c20

0800762c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d812      	bhi.n	8007678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	e01b      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007666:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <prvInsertTimerInActiveList+0x7c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fe fa08 	bl	8005a86 <vListInsert>
 8007676:	e012      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d206      	bcs.n	800768e <prvInsertTimerInActiveList+0x62>
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d302      	bcc.n	800768e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e007      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800768e:	4b07      	ldr	r3, [pc, #28]	; (80076ac <prvInsertTimerInActiveList+0x80>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fe f9f4 	bl	8005a86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000c14 	.word	0x20000c14
 80076ac:	20000c10 	.word	0x20000c10

080076b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076b6:	e0ca      	b.n	800784e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da18      	bge.n	80076f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	3304      	adds	r3, #4
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61fb      	str	r3, [r7, #28]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e6:	6850      	ldr	r0, [r2, #4]
 80076e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ea:	6892      	ldr	r2, [r2, #8]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f2c0 80aa 	blt.w	800784c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe f9f5 	bl	8005af8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800770e:	463b      	mov	r3, r7
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff ff6b 	bl	80075ec <prvSampleTimeNow>
 8007716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b09      	cmp	r3, #9
 800771c:	f200 8097 	bhi.w	800784e <prvProcessReceivedCommands+0x19e>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <prvProcessReceivedCommands+0x78>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007751 	.word	0x08007751
 800772c:	08007751 	.word	0x08007751
 8007730:	08007751 	.word	0x08007751
 8007734:	080077c5 	.word	0x080077c5
 8007738:	080077d9 	.word	0x080077d9
 800773c:	08007823 	.word	0x08007823
 8007740:	08007751 	.word	0x08007751
 8007744:	08007751 	.word	0x08007751
 8007748:	080077c5 	.word	0x080077c5
 800774c:	080077d9 	.word	0x080077d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	18d1      	adds	r1, r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007770:	f7ff ff5c 	bl	800762c <prvInsertTimerInActiveList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d069      	beq.n	800784e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05e      	beq.n	800784e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	441a      	add	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a2:	f7ff fe05 	bl	80073b0 <xTimerGenericCommand>
 80077a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d14f      	bne.n	800784e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61bb      	str	r3, [r7, #24]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80077d6:	e03a      	b.n	800784e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	617b      	str	r3, [r7, #20]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	18d1      	adds	r1, r2, r3
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781c:	f7ff ff06 	bl	800762c <prvInsertTimerInActiveList>
					break;
 8007820:	e015      	b.n	800784e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007832:	f000 fbdd 	bl	8007ff0 <vPortFree>
 8007836:	e00a      	b.n	800784e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800784a:	e000      	b.n	800784e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800784c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800784e:	4b08      	ldr	r3, [pc, #32]	; (8007870 <prvProcessReceivedCommands+0x1c0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1d39      	adds	r1, r7, #4
 8007854:	2200      	movs	r2, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fc16 	bl	8006088 <xQueueReceive>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	f47f af2a 	bne.w	80076b8 <prvProcessReceivedCommands+0x8>
	}
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000c18 	.word	0x20000c18

08007874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800787a:	e048      	b.n	800790e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <prvSwitchTimerLists+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007886:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe f92f 	bl	8005af8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d02e      	beq.n	800790e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d90e      	bls.n	80078e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <prvSwitchTimerLists+0xc0>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fe f8d4 	bl	8005a86 <vListInsert>
 80078de:	e016      	b.n	800790e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078e0:	2300      	movs	r3, #0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fd60 	bl	80073b0 <xTimerGenericCommand>
 80078f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	603b      	str	r3, [r7, #0]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1b1      	bne.n	800787c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <prvSwitchTimerLists+0xc0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <prvSwitchTimerLists+0xc4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a04      	ldr	r2, [pc, #16]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007926:	4a04      	ldr	r2, [pc, #16]	; (8007938 <prvSwitchTimerLists+0xc4>)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000c10 	.word	0x20000c10
 8007938:	20000c14 	.word	0x20000c14

0800793c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007942:	f000 f967 	bl	8007c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d120      	bne.n	8007990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800794e:	4814      	ldr	r0, [pc, #80]	; (80079a0 <prvCheckForValidListAndQueue+0x64>)
 8007950:	f7fe f848 	bl	80059e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007954:	4813      	ldr	r0, [pc, #76]	; (80079a4 <prvCheckForValidListAndQueue+0x68>)
 8007956:	f7fe f845 	bl	80059e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <prvCheckForValidListAndQueue+0x6c>)
 800795c:	4a10      	ldr	r2, [pc, #64]	; (80079a0 <prvCheckForValidListAndQueue+0x64>)
 800795e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007960:	4b12      	ldr	r3, [pc, #72]	; (80079ac <prvCheckForValidListAndQueue+0x70>)
 8007962:	4a10      	ldr	r2, [pc, #64]	; (80079a4 <prvCheckForValidListAndQueue+0x68>)
 8007964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <prvCheckForValidListAndQueue+0x74>)
 800796c:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <prvCheckForValidListAndQueue+0x78>)
 800796e:	2110      	movs	r1, #16
 8007970:	200a      	movs	r0, #10
 8007972:	f7fe f953 	bl	8005c1c <xQueueGenericCreateStatic>
 8007976:	4603      	mov	r3, r0
 8007978:	4a08      	ldr	r2, [pc, #32]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 800797a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	490b      	ldr	r1, [pc, #44]	; (80079b8 <prvCheckForValidListAndQueue+0x7c>)
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fd6c 	bl	8006468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007990:	f000 f970 	bl	8007c74 <vPortExitCritical>
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000c18 	.word	0x20000c18
 80079a0:	20000be8 	.word	0x20000be8
 80079a4:	20000bfc 	.word	0x20000bfc
 80079a8:	20000c10 	.word	0x20000c10
 80079ac:	20000c14 	.word	0x20000c14
 80079b0:	20000cc4 	.word	0x20000cc4
 80079b4:	20000c24 	.word	0x20000c24
 80079b8:	080082d8 	.word	0x080082d8

080079bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3b04      	subs	r3, #4
 80079cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3b04      	subs	r3, #4
 80079da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b04      	subs	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079ec:	4a0c      	ldr	r2, [pc, #48]	; (8007a20 <pxPortInitialiseStack+0x64>)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b14      	subs	r3, #20
 80079f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3b04      	subs	r3, #4
 8007a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f06f 0202 	mvn.w	r2, #2
 8007a0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3b20      	subs	r3, #32
 8007a10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a12:	68fb      	ldr	r3, [r7, #12]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	08007a25 	.word	0x08007a25

08007a24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a2e:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <prvTaskExitError+0x54>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a36:	d00a      	beq.n	8007a4e <prvTaskExitError+0x2a>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	60fb      	str	r3, [r7, #12]
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <prvTaskExitError+0x28>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60bb      	str	r3, [r7, #8]
}
 8007a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a62:	bf00      	nop
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0fc      	beq.n	8007a64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	2000000c 	.word	0x2000000c
 8007a7c:	00000000 	.word	0x00000000

08007a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <pxCurrentTCBConst2>)
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	6808      	ldr	r0, [r1, #0]
 8007a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	f380 8809 	msr	PSP, r0
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	4770      	bx	lr
 8007a9c:	f3af 8000 	nop.w

08007aa0 <pxCurrentTCBConst2>:
 8007aa0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007aa8:	4808      	ldr	r0, [pc, #32]	; (8007acc <prvPortStartFirstTask+0x24>)
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f380 8808 	msr	MSP, r0
 8007ab2:	f04f 0000 	mov.w	r0, #0
 8007ab6:	f380 8814 	msr	CONTROL, r0
 8007aba:	b662      	cpsie	i
 8007abc:	b661      	cpsie	f
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	df00      	svc	0
 8007ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aca:	bf00      	nop
 8007acc:	e000ed08 	.word	0xe000ed08

08007ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ad6:	4b46      	ldr	r3, [pc, #280]	; (8007bf0 <xPortStartScheduler+0x120>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a46      	ldr	r2, [pc, #280]	; (8007bf4 <xPortStartScheduler+0x124>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10a      	bne.n	8007af6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	613b      	str	r3, [r7, #16]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007af6:	4b3e      	ldr	r3, [pc, #248]	; (8007bf0 <xPortStartScheduler+0x120>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a3f      	ldr	r2, [pc, #252]	; (8007bf8 <xPortStartScheduler+0x128>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d10a      	bne.n	8007b16 <xPortStartScheduler+0x46>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	60fb      	str	r3, [r7, #12]
}
 8007b12:	bf00      	nop
 8007b14:	e7fe      	b.n	8007b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b16:	4b39      	ldr	r3, [pc, #228]	; (8007bfc <xPortStartScheduler+0x12c>)
 8007b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	22ff      	movs	r2, #255	; 0xff
 8007b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	4b31      	ldr	r3, [pc, #196]	; (8007c00 <xPortStartScheduler+0x130>)
 8007b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b3e:	4b31      	ldr	r3, [pc, #196]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b40:	2207      	movs	r2, #7
 8007b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b44:	e009      	b.n	8007b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b46:	4b2f      	ldr	r3, [pc, #188]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	4a2d      	ldr	r2, [pc, #180]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b50:	78fb      	ldrb	r3, [r7, #3]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	005b      	lsls	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b62:	2b80      	cmp	r3, #128	; 0x80
 8007b64:	d0ef      	beq.n	8007b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b66:	4b27      	ldr	r3, [pc, #156]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1c3 0307 	rsb	r3, r3, #7
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d00a      	beq.n	8007b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	60bb      	str	r3, [r7, #8]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b88:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b92:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	; (8007c04 <xPortStartScheduler+0x134>)
 8007b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ba6:	4b18      	ldr	r3, [pc, #96]	; (8007c08 <xPortStartScheduler+0x138>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a17      	ldr	r2, [pc, #92]	; (8007c08 <xPortStartScheduler+0x138>)
 8007bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <xPortStartScheduler+0x138>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <xPortStartScheduler+0x138>)
 8007bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bbe:	f000 f8dd 	bl	8007d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <xPortStartScheduler+0x13c>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bc8:	f000 f8fc 	bl	8007dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bcc:	4b10      	ldr	r3, [pc, #64]	; (8007c10 <xPortStartScheduler+0x140>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a0f      	ldr	r2, [pc, #60]	; (8007c10 <xPortStartScheduler+0x140>)
 8007bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bd8:	f7ff ff66 	bl	8007aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bdc:	f7ff f854 	bl	8006c88 <vTaskSwitchContext>
	prvTaskExitError();
 8007be0:	f7ff ff20 	bl	8007a24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	e000ed00 	.word	0xe000ed00
 8007bf4:	410fc271 	.word	0x410fc271
 8007bf8:	410fc270 	.word	0x410fc270
 8007bfc:	e000e400 	.word	0xe000e400
 8007c00:	20000d14 	.word	0x20000d14
 8007c04:	20000d18 	.word	0x20000d18
 8007c08:	e000ed20 	.word	0xe000ed20
 8007c0c:	2000000c 	.word	0x2000000c
 8007c10:	e000ef34 	.word	0xe000ef34

08007c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	607b      	str	r3, [r7, #4]
}
 8007c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <vPortEnterCritical+0x58>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	4a0d      	ldr	r2, [pc, #52]	; (8007c6c <vPortEnterCritical+0x58>)
 8007c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c38:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <vPortEnterCritical+0x58>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d10f      	bne.n	8007c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <vPortEnterCritical+0x5c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	603b      	str	r3, [r7, #0]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <vPortEnterCritical+0x4a>
	}
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	2000000c 	.word	0x2000000c
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c7a:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <vPortExitCritical+0x50>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <vPortExitCritical+0x24>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	607b      	str	r3, [r7, #4]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c98:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <vPortExitCritical+0x50>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <vPortExitCritical+0x50>)
 8007ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ca2:	4b08      	ldr	r3, [pc, #32]	; (8007cc4 <vPortExitCritical+0x50>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d105      	bne.n	8007cb6 <vPortExitCritical+0x42>
 8007caa:	2300      	movs	r3, #0
 8007cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f383 8811 	msr	BASEPRI, r3
}
 8007cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	2000000c 	.word	0x2000000c
	...

08007cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cd0:	f3ef 8009 	mrs	r0, PSP
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <pxCurrentTCBConst>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	f01e 0f10 	tst.w	lr, #16
 8007ce0:	bf08      	it	eq
 8007ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	6010      	str	r0, [r2, #0]
 8007cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cf4:	f380 8811 	msr	BASEPRI, r0
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f7fe ffc2 	bl	8006c88 <vTaskSwitchContext>
 8007d04:	f04f 0000 	mov.w	r0, #0
 8007d08:	f380 8811 	msr	BASEPRI, r0
 8007d0c:	bc09      	pop	{r0, r3}
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	6808      	ldr	r0, [r1, #0]
 8007d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d16:	f01e 0f10 	tst.w	lr, #16
 8007d1a:	bf08      	it	eq
 8007d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d20:	f380 8809 	msr	PSP, r0
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst>:
 8007d30:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d52:	f7fe fedf 	bl	8006b14 <xTaskIncrementTick>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <xPortSysTickHandler+0x40>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f383 8811 	msr	BASEPRI, r3
}
 8007d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <vPortSetupTimerInterrupt+0x38>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <vPortSetupTimerInterrupt+0x3c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <vPortSetupTimerInterrupt+0x40>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <vPortSetupTimerInterrupt+0x44>)
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d9e:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	e000e010 	.word	0xe000e010
 8007db4:	e000e018 	.word	0xe000e018
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	10624dd3 	.word	0x10624dd3
 8007dc0:	e000e014 	.word	0xe000e014

08007dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007dd4 <vPortEnableVFP+0x10>
 8007dc8:	6801      	ldr	r1, [r0, #0]
 8007dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dce:	6001      	str	r1, [r0, #0]
 8007dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed88 	.word	0xe000ed88

08007dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dde:	f3ef 8305 	mrs	r3, IPSR
 8007de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	d914      	bls.n	8007e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dea:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <vPortValidateInterruptPriority+0x70>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007df4:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <vPortValidateInterruptPriority+0x74>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	7afa      	ldrb	r2, [r7, #11]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d20a      	bcs.n	8007e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e14:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <vPortValidateInterruptPriority+0x78>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <vPortValidateInterruptPriority+0x7c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d90a      	bls.n	8007e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	603b      	str	r3, [r7, #0]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <vPortValidateInterruptPriority+0x60>
	}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	e000e3f0 	.word	0xe000e3f0
 8007e4c:	20000d14 	.word	0x20000d14
 8007e50:	e000ed0c 	.word	0xe000ed0c
 8007e54:	20000d18 	.word	0x20000d18

08007e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e64:	f7fe fd9a 	bl	800699c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e68:	4b5b      	ldr	r3, [pc, #364]	; (8007fd8 <pvPortMalloc+0x180>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e70:	f000 f920 	bl	80080b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e74:	4b59      	ldr	r3, [pc, #356]	; (8007fdc <pvPortMalloc+0x184>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f040 8093 	bne.w	8007fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01d      	beq.n	8007ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e88:	2208      	movs	r2, #8
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d014      	beq.n	8007ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f023 0307 	bic.w	r3, r3, #7
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	617b      	str	r3, [r7, #20]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d06e      	beq.n	8007fa8 <pvPortMalloc+0x150>
 8007eca:	4b45      	ldr	r3, [pc, #276]	; (8007fe0 <pvPortMalloc+0x188>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d869      	bhi.n	8007fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ed4:	4b43      	ldr	r3, [pc, #268]	; (8007fe4 <pvPortMalloc+0x18c>)
 8007ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ed8:	4b42      	ldr	r3, [pc, #264]	; (8007fe4 <pvPortMalloc+0x18c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ede:	e004      	b.n	8007eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d903      	bls.n	8007efc <pvPortMalloc+0xa4>
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1f1      	bne.n	8007ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007efc:	4b36      	ldr	r3, [pc, #216]	; (8007fd8 <pvPortMalloc+0x180>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d050      	beq.n	8007fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	4413      	add	r3, r2
 8007f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	2308      	movs	r3, #8
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d91f      	bls.n	8007f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <pvPortMalloc+0xf8>
	__asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	613b      	str	r3, [r7, #16]
}
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f62:	69b8      	ldr	r0, [r7, #24]
 8007f64:	f000 f908 	bl	8008178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f68:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <pvPortMalloc+0x188>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <pvPortMalloc+0x188>)
 8007f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <pvPortMalloc+0x188>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <pvPortMalloc+0x190>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d203      	bcs.n	8007f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f82:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <pvPortMalloc+0x188>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <pvPortMalloc+0x190>)
 8007f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <pvPortMalloc+0x184>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <pvPortMalloc+0x194>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	4a11      	ldr	r2, [pc, #68]	; (8007fec <pvPortMalloc+0x194>)
 8007fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fa8:	f7fe fd06 	bl	80069b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <pvPortMalloc+0x174>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	60fb      	str	r3, [r7, #12]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <pvPortMalloc+0x172>
	return pvReturn;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200018dc 	.word	0x200018dc
 8007fdc:	200018f0 	.word	0x200018f0
 8007fe0:	200018e0 	.word	0x200018e0
 8007fe4:	200018d4 	.word	0x200018d4
 8007fe8:	200018e4 	.word	0x200018e4
 8007fec:	200018e8 	.word	0x200018e8

08007ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d04d      	beq.n	800809e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008002:	2308      	movs	r3, #8
 8008004:	425b      	negs	r3, r3
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4413      	add	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	4b24      	ldr	r3, [pc, #144]	; (80080a8 <vPortFree+0xb8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4013      	ands	r3, r2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10a      	bne.n	8008034 <vPortFree+0x44>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60fb      	str	r3, [r7, #12]
}
 8008030:	bf00      	nop
 8008032:	e7fe      	b.n	8008032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <vPortFree+0x62>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	60bb      	str	r3, [r7, #8]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	4b14      	ldr	r3, [pc, #80]	; (80080a8 <vPortFree+0xb8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01e      	beq.n	800809e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11a      	bne.n	800809e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <vPortFree+0xb8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	43db      	mvns	r3, r3
 8008072:	401a      	ands	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008078:	f7fe fc90 	bl	800699c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <vPortFree+0xbc>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4413      	add	r3, r2
 8008086:	4a09      	ldr	r2, [pc, #36]	; (80080ac <vPortFree+0xbc>)
 8008088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800808a:	6938      	ldr	r0, [r7, #16]
 800808c:	f000 f874 	bl	8008178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <vPortFree+0xc0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	4a06      	ldr	r2, [pc, #24]	; (80080b0 <vPortFree+0xc0>)
 8008098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800809a:	f7fe fc8d 	bl	80069b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800809e:	bf00      	nop
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200018f0 	.word	0x200018f0
 80080ac:	200018e0 	.word	0x200018e0
 80080b0:	200018ec 	.word	0x200018ec

080080b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80080be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080c0:	4b27      	ldr	r3, [pc, #156]	; (8008160 <prvHeapInit+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <prvHeapInit+0xac>)
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ec:	4a1d      	ldr	r2, [pc, #116]	; (8008164 <prvHeapInit+0xb0>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080f2:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <prvHeapInit+0xb0>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a15      	ldr	r2, [pc, #84]	; (8008168 <prvHeapInit+0xb4>)
 8008114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <prvHeapInit+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <prvHeapInit+0xb4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <prvHeapInit+0xb4>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <prvHeapInit+0xb8>)
 8008142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <prvHeapInit+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800814c:	4b09      	ldr	r3, [pc, #36]	; (8008174 <prvHeapInit+0xc0>)
 800814e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20000d1c 	.word	0x20000d1c
 8008164:	200018d4 	.word	0x200018d4
 8008168:	200018dc 	.word	0x200018dc
 800816c:	200018e4 	.word	0x200018e4
 8008170:	200018e0 	.word	0x200018e0
 8008174:	200018f0 	.word	0x200018f0

08008178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008180:	4b28      	ldr	r3, [pc, #160]	; (8008224 <prvInsertBlockIntoFreeList+0xac>)
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e002      	b.n	800818c <prvInsertBlockIntoFreeList+0x14>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d8f7      	bhi.n	8008186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d108      	bne.n	80081ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d118      	bne.n	8008200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d00d      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e008      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <prvInsertBlockIntoFreeList+0xb0>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e003      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d002      	beq.n	8008216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200018d4 	.word	0x200018d4
 8008228:	200018dc 	.word	0x200018dc

0800822c <__libc_init_array>:
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	4d0d      	ldr	r5, [pc, #52]	; (8008264 <__libc_init_array+0x38>)
 8008230:	4c0d      	ldr	r4, [pc, #52]	; (8008268 <__libc_init_array+0x3c>)
 8008232:	1b64      	subs	r4, r4, r5
 8008234:	10a4      	asrs	r4, r4, #2
 8008236:	2600      	movs	r6, #0
 8008238:	42a6      	cmp	r6, r4
 800823a:	d109      	bne.n	8008250 <__libc_init_array+0x24>
 800823c:	4d0b      	ldr	r5, [pc, #44]	; (800826c <__libc_init_array+0x40>)
 800823e:	4c0c      	ldr	r4, [pc, #48]	; (8008270 <__libc_init_array+0x44>)
 8008240:	f000 f82e 	bl	80082a0 <_init>
 8008244:	1b64      	subs	r4, r4, r5
 8008246:	10a4      	asrs	r4, r4, #2
 8008248:	2600      	movs	r6, #0
 800824a:	42a6      	cmp	r6, r4
 800824c:	d105      	bne.n	800825a <__libc_init_array+0x2e>
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	f855 3b04 	ldr.w	r3, [r5], #4
 8008254:	4798      	blx	r3
 8008256:	3601      	adds	r6, #1
 8008258:	e7ee      	b.n	8008238 <__libc_init_array+0xc>
 800825a:	f855 3b04 	ldr.w	r3, [r5], #4
 800825e:	4798      	blx	r3
 8008260:	3601      	adds	r6, #1
 8008262:	e7f2      	b.n	800824a <__libc_init_array+0x1e>
 8008264:	08008354 	.word	0x08008354
 8008268:	08008354 	.word	0x08008354
 800826c:	08008354 	.word	0x08008354
 8008270:	08008358 	.word	0x08008358

08008274 <memcpy>:
 8008274:	440a      	add	r2, r1
 8008276:	4291      	cmp	r1, r2
 8008278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800827c:	d100      	bne.n	8008280 <memcpy+0xc>
 800827e:	4770      	bx	lr
 8008280:	b510      	push	{r4, lr}
 8008282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800828a:	4291      	cmp	r1, r2
 800828c:	d1f9      	bne.n	8008282 <memcpy+0xe>
 800828e:	bd10      	pop	{r4, pc}

08008290 <memset>:
 8008290:	4402      	add	r2, r0
 8008292:	4603      	mov	r3, r0
 8008294:	4293      	cmp	r3, r2
 8008296:	d100      	bne.n	800829a <memset+0xa>
 8008298:	4770      	bx	lr
 800829a:	f803 1b01 	strb.w	r1, [r3], #1
 800829e:	e7f9      	b.n	8008294 <memset+0x4>

080082a0 <_init>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr

080082ac <_fini>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr
