
hello_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800bd80  0800bd80  0001bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f4  0800c1f4  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1fc  0800c1fc  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c200  0800c200  0001c200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800c204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  200002c8  0800c4cc  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  0800c4cc  00021db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000246f4  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004223  00000000  00000000  000449ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00048c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  0004a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000774f  00000000  00000000  0004c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d32f  00000000  00000000  00053997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a83  00000000  00000000  00070cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000867c  00000000  00000000  0017479c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c8 	.word	0x200002c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd64 	.word	0x0800bd64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002cc 	.word	0x200002cc
 80001cc:	0800bd64 	.word	0x0800bd64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fcd8 	bl	8001866 <null_ptr_check>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d133      	bne.n	8000f2a <bme280_init+0x8a>
		while (try_count) {
 8000ec2:	e028      	b.n	8000f16 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ec4:	f107 010d 	add.w	r1, r7, #13
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	20d0      	movs	r0, #208	; 0xd0
 8000ece:	f000 f832 	bl	8000f36 <bme280_get_regs>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <bme280_init+0x68>
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	2b60      	cmp	r3, #96	; 0x60
 8000ee2:	d111      	bne.n	8000f08 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000ee4:	7b7a      	ldrb	r2, [r7, #13]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f944 	bl	8001178 <bme280_soft_reset>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d110      	bne.n	8000f1e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fb28 	bl	8001552 <get_calib_data>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f06:	e00a      	b.n	8000f1e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	4798      	blx	r3
			--try_count;
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1d3      	bne.n	8000ec4 <bme280_init+0x24>
 8000f1c:	e000      	b.n	8000f20 <bme280_init+0x80>
				break;
 8000f1e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000f26:	23fe      	movs	r3, #254	; 0xfe
 8000f28:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000f36:	b590      	push	{r4, r7, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	4613      	mov	r3, r2
 8000f46:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fc8c 	bl	8001866 <null_ptr_check>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d117      	bne.n	8000f8a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d003      	beq.n	8000f6a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f68:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685c      	ldr	r4, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7858      	ldrb	r0, [r3, #1]
 8000f72:	89bb      	ldrh	r3, [r7, #12]
 8000f74:	7bf9      	ldrb	r1, [r7, #15]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	47a0      	blx	r4
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000f86:	23fc      	movs	r3, #252	; 0xfc
 8000f88:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b08d      	sub	sp, #52	; 0x34
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d901      	bls.n	8000fb0 <bme280_set_regs+0x1a>
		len = 10;
 8000fac:	230a      	movs	r3, #10
 8000fae:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f000 fc58 	bl	8001866 <null_ptr_check>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000fbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d156      	bne.n	8001072 <bme280_set_regs+0xdc>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d053      	beq.n	8001072 <bme280_set_regs+0xdc>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d050      	beq.n	8001072 <bme280_set_regs+0xdc>
		if (len != 0) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d049      	beq.n	800106a <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d01a      	beq.n	800101a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000fea:	e011      	b.n	8001010 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800100a:	3301      	adds	r3, #1
 800100c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001010:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3e8      	bcc.n	8000fec <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d90d      	bls.n	800103c <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f107 0114 	add.w	r1, r7, #20
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 fad7 	bl	80015dc <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	b29b      	uxth	r3, r3
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800103a:	e001      	b.n	8001040 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689c      	ldr	r4, [r3, #8]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	7858      	ldrb	r0, [r3, #1]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	7819      	ldrb	r1, [r3, #0]
 800104c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800104e:	f107 0214 	add.w	r2, r7, #20
 8001052:	47a0      	blx	r4
 8001054:	4603      	mov	r3, r0
 8001056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800105a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 8001062:	23fc      	movs	r3, #252	; 0xfc
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001068:	e007      	b.n	800107a <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800106a:	23fd      	movs	r3, #253	; 0xfd
 800106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001070:	e003      	b.n	800107a <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001078:	e000      	b.n	800107c <bme280_set_regs+0xe6>
		if (len != 0) {
 800107a:	bf00      	nop
	}


	return rslt;
 800107c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001080:	4618      	mov	r0, r3
 8001082:	3734      	adds	r7, #52	; 0x34
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f000 fbe6 	bl	8001866 <null_ptr_check>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d13f      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80010a6:	f107 030e 	add.w	r3, r7, #14
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f840 	bl	8001132 <bme280_get_sensor_mode>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <bme280_set_sensor_settings+0x46>
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f000 f9f7 	bl	80014b8 <put_device_to_sleep>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d127      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4619      	mov	r1, r3
 80010da:	2007      	movs	r0, #7
 80010dc:	f000 fba7 	bl	800182e <are_settings_changed>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f866 	bl	80011c2 <set_osr_settings>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d111      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4619      	mov	r1, r3
 8001106:	2018      	movs	r0, #24
 8001108:	f000 fb91 	bl	800182e <are_settings_changed>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f8ed 	bl	80012fc <set_filter_standby_settings>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f000 fb92 	bl	8001866 <null_ptr_check>
 8001142:	4603      	mov	r3, r0
 8001144:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10e      	bne.n	800116c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	20f4      	movs	r0, #244	; 0xf4
 8001156:	f7ff feee 	bl	8000f36 <bme280_get_regs>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	b2da      	uxtb	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001180:	23e0      	movs	r3, #224	; 0xe0
 8001182:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001184:	23b6      	movs	r3, #182	; 0xb6
 8001186:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb6c 	bl	8001866 <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10d      	bne.n	80011b6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800119a:	f107 010d 	add.w	r1, r7, #13
 800119e:	f107 000e 	add.w	r0, r7, #14
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f7ff fef6 	bl	8000f96 <bme280_set_regs>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2002      	movs	r0, #2
 80011b4:	4798      	blx	r3
	}

	return rslt;
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80011d0:	2301      	movs	r3, #1
 80011d2:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	68b8      	ldr	r0, [r7, #8]
 80011e2:	f000 f815 	bl	8001210 <set_osr_humidity_settings>
 80011e6:	4603      	mov	r3, r0
 80011e8:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d007      	beq.n	8001204 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f842 	bl	8001284 <set_osr_press_temp_settings>
 8001200:	4603      	mov	r3, r0
 8001202:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800121a:	23f2      	movs	r3, #242	; 0xf2
 800121c:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	789b      	ldrb	r3, [r3, #2]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	b2db      	uxtb	r3, r3
 8001228:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800122a:	f107 010e 	add.w	r1, r7, #14
 800122e:	f107 000c 	add.w	r0, r7, #12
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2201      	movs	r2, #1
 8001236:	f7ff feae 	bl	8000f96 <bme280_set_regs>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8001246:	23f4      	movs	r3, #244	; 0xf4
 8001248:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800124a:	7b38      	ldrb	r0, [r7, #12]
 800124c:	f107 010d 	add.w	r1, r7, #13
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	f7ff fe6f 	bl	8000f36 <bme280_get_regs>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d109      	bne.n	8001278 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001264:	f107 010d 	add.w	r1, r7, #13
 8001268:	f107 000c 	add.w	r0, r7, #12
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	f7ff fe91 	bl	8000f96 <bme280_set_regs>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001292:	23f4      	movs	r3, #244	; 0xf4
 8001294:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001296:	7db8      	ldrb	r0, [r7, #22]
 8001298:	f107 0115 	add.w	r1, r7, #21
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f7ff fe49 	bl	8000f36 <bme280_get_regs>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80012a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d11f      	bne.n	80012f0 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80012ba:	f107 0315 	add.w	r3, r7, #21
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f88e 	bl	80013e2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80012d0:	f107 0315 	add.w	r3, r7, #21
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f8a0 	bl	800141c <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80012dc:	f107 0115 	add.w	r1, r7, #21
 80012e0:	f107 0016 	add.w	r0, r7, #22
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f7ff fe55 	bl	8000f96 <bme280_set_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80012f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800130a:	23f5      	movs	r3, #245	; 0xf5
 800130c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800130e:	7db8      	ldrb	r0, [r7, #22]
 8001310:	f107 0115 	add.w	r1, r7, #21
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f7ff fe0d 	bl	8000f36 <bme280_get_regs>
 800131c:	4603      	mov	r3, r0
 800131e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001320:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d11f      	bne.n	8001368 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001332:	f107 0315 	add.w	r3, r7, #21
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f81b 	bl	8001374 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8001348:	f107 0315 	add.w	r3, r7, #21
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f82d 	bl	80013ae <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001354:	f107 0115 	add.w	r1, r7, #21
 8001358:	f107 0016 	add.w	r0, r7, #22
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f7ff fe19 	bl	8000f96 <bme280_set_regs>
 8001364:	4603      	mov	r3, r0
 8001366:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	f023 031c 	bic.w	r3, r3, #28
 8001388:	b25a      	sxtb	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	78db      	ldrb	r3, [r3, #3]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	b25b      	sxtb	r3, r3
 8001392:	f003 031c 	and.w	r3, r3, #28
 8001396:	b25b      	sxtb	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b25b      	sxtb	r3, r3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	701a      	strb	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	b25a      	sxtb	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	015b      	lsls	r3, r3, #5
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	f023 031c 	bic.w	r3, r3, #28
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	f003 031c 	and.w	r3, r3, #28
 8001404:	b25b      	sxtb	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b25b      	sxtb	r3, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	701a      	strb	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	b25a      	sxtb	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b25b      	sxtb	r3, r3
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	701a      	strb	r2, [r3, #0]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	b2da      	uxtb	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3302      	adds	r3, #2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	109b      	asrs	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	b2da      	uxtb	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3302      	adds	r3, #2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2da      	uxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3303      	adds	r3, #3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	109b      	asrs	r3, r3, #2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	b2da      	uxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	711a      	strb	r2, [r3, #4]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80014c0:	f107 0110 	add.w	r1, r7, #16
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	20f2      	movs	r0, #242	; 0xf2
 80014ca:	f7ff fd34 	bl	8000f36 <bme280_get_regs>
 80014ce:	4603      	mov	r3, r0
 80014d0:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80014d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80014da:	f107 0208 	add.w	r2, r7, #8
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffb3 	bl	8001450 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe44 	bl	8001178 <bme280_soft_reset>
 80014f0:	4603      	mov	r3, r0
 80014f2:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80014f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f808 	bl	8001518 <reload_device_settings>
 8001508:	4603      	mov	r3, r0
 800150a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800150c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	201f      	movs	r0, #31
 8001528:	f7ff fe4b 	bl	80011c2 <set_osr_settings>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d106      	bne.n	8001546 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	201f      	movs	r0, #31
 800153e:	f7ff fedd 	bl	80012fc <set_filter_standby_settings>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b08a      	sub	sp, #40	; 0x28
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800155a:	2388      	movs	r3, #136	; 0x88
 800155c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	221a      	movs	r2, #26
 8001582:	f7ff fcd8 	bl	8000f36 <bme280_get_regs>
 8001586:	4603      	mov	r3, r0
 8001588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800158c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11d      	bne.n	80015d0 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f84a 	bl	8001634 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80015a0:	23e1      	movs	r3, #225	; 0xe1
 80015a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80015a6:	f107 010c 	add.w	r1, r7, #12
 80015aa:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2207      	movs	r2, #7
 80015b2:	f7ff fcc0 	bl	8000f36 <bme280_get_regs>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80015bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f8e1 	bl	8001792 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80015d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
 80015ee:	e016      	b.n	800161e <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80015f0:	7dfb      	ldrb	r3, [r7, #23]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	441a      	add	r2, r3
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	440b      	add	r3, r1
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	441a      	add	r2, r3
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4619      	mov	r1, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	440b      	add	r3, r1
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	3301      	adds	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
 800161e:	7dfa      	ldrb	r2, [r7, #23]
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	429a      	cmp	r2, r3
 8001624:	d3e4      	bcc.n	80015f0 <interleave_reg_addr+0x14>
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3310      	adds	r3, #16
 8001642:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3303      	adds	r3, #3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3302      	adds	r3, #2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3305      	adds	r3, #5
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21a      	sxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3307      	adds	r3, #7
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3306      	adds	r3, #6
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3309      	adds	r3, #9
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3308      	adds	r3, #8
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	330b      	adds	r3, #11
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	330a      	adds	r3, #10
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	330d      	adds	r3, #13
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	330c      	adds	r3, #12
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	330f      	adds	r3, #15
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	b21a      	sxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	330e      	adds	r3, #14
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	4313      	orrs	r3, r2
 8001710:	b21a      	sxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3311      	adds	r3, #17
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3310      	adds	r3, #16
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21a      	sxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3313      	adds	r3, #19
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	b21a      	sxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3312      	adds	r3, #18
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21a      	sxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3315      	adds	r3, #21
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3314      	adds	r3, #20
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b21a      	sxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3317      	adds	r3, #23
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b21a      	sxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3316      	adds	r3, #22
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b21a      	sxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7e5a      	ldrb	r2, [r3, #25]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	761a      	strb	r2, [r3, #24]

}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3310      	adds	r3, #16
 80017a0:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3301      	adds	r3, #1
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	789a      	ldrb	r2, [r3, #2]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3304      	adds	r3, #4
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80017e0:	8a7a      	ldrh	r2, [r7, #18]
 80017e2:	8a3b      	ldrh	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3305      	adds	r3, #5
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3304      	adds	r3, #4
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	b2db      	uxtb	r3, r3
 8001806:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8001808:	89fa      	ldrh	r2, [r7, #14]
 800180a:	89bb      	ldrh	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	b21a      	sxth	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3306      	adds	r3, #6
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b25a      	sxtb	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	460a      	mov	r2, r1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	4613      	mov	r3, r2
 800183c:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	4013      	ands	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
 8001852:	e001      	b.n	8001858 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8001866:	b480      	push	{r7}
 8001868:	b085      	sub	sp, #20
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <null_ptr_check+0x26>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d007      	beq.n	800188c <null_ptr_check+0x26>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <null_ptr_check+0x26>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800188c:	23ff      	movs	r3, #255	; 0xff
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	e001      	b.n	8001896 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80018b0:	1d39      	adds	r1, r7, #4
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	2201      	movs	r2, #1
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <__io_putchar+0x20>)
 80018ba:	f004 fb2f 	bl	8005f1c <HAL_UART_Transmit>
	return ch;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20001c94 	.word	0x20001c94

080018cc <user_i2c_read>:

char line1[16];
char line2[16];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	603a      	str	r2, [r7, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	460b      	mov	r3, r1
 80018dc:	71bb      	strb	r3, [r7, #6]
 80018de:	4613      	mov	r3, r2
 80018e0:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	b299      	uxth	r1, r3
 80018ea:	1dba      	adds	r2, r7, #6
 80018ec:	230a      	movs	r3, #10
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2301      	movs	r3, #1
 80018f2:	4811      	ldr	r0, [pc, #68]	; (8001938 <user_i2c_read+0x6c>)
 80018f4:	f002 f852 	bl	800399c <HAL_I2C_Master_Transmit>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <user_i2c_read+0x38>
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	e014      	b.n	800192e <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b21b      	sxth	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b21b      	sxth	r3, r3
 8001910:	b299      	uxth	r1, r3
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	220a      	movs	r2, #10
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <user_i2c_read+0x6c>)
 800191c:	f002 f932 	bl	8003b84 <HAL_I2C_Master_Receive>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <user_i2c_read+0x60>
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800192a:	e000      	b.n	800192e <user_i2c_read+0x62>

  return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20001c0c 	.word	0x20001c0c

0800193c <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 fbaf 	bl	80030a8 <HAL_Delay>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af02      	add	r7, sp, #8
 800195a:	603a      	str	r2, [r7, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
 8001962:	460b      	mov	r3, r1
 8001964:	71bb      	strb	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800196a:	88bb      	ldrh	r3, [r7, #4]
 800196c:	3301      	adds	r3, #1
 800196e:	4618      	mov	r0, r3
 8001970:	f007 fd16 	bl	80093a0 <malloc>
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8001978:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	88ba      	ldrh	r2, [r7, #4]
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f007 fd19 	bl	80093c0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	b29b      	uxth	r3, r3
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b299      	uxth	r1, r3
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	3301      	adds	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019a0:	9200      	str	r2, [sp, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <user_i2c_write+0x74>)
 80019a6:	f001 fff9 	bl	800399c <HAL_I2C_Master_Transmit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <user_i2c_write+0x62>
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b4:	e003      	b.n	80019be <user_i2c_write+0x6a>

  free(buf);
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f007 fcfa 	bl	80093b0 <free>
  return 0;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20001c0c 	.word	0x20001c0c

080019cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d0:	f001 fb2a 	bl	8003028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019d4:	f000 f87c 	bl	8001ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d8:	f000 f962 	bl	8001ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019dc:	f000 f930 	bl	8001c40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019e0:	f000 f8ee 	bl	8001bc0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <main+0xd8>)
 80019e6:	2276      	movs	r2, #118	; 0x76
 80019e8:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <main+0xd8>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <main+0xd8>)
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <main+0xdc>)
 80019f4:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <main+0xd8>)
 80019f8:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <main+0xe0>)
 80019fa:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <main+0xd8>)
 80019fe:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <main+0xe4>)
 8001a00:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 8001a02:	4828      	ldr	r0, [pc, #160]	; (8001aa4 <main+0xd8>)
 8001a04:	f7ff fa4c 	bl	8000ea0 <bme280_init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <main+0xe8>)
 8001a0e:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <main+0xd8>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <main+0xd8>)
 8001a1a:	2205      	movs	r2, #5
 8001a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <main+0xd8>)
 8001a22:	2202      	movs	r2, #2
 8001a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <main+0xd8>)
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8001a30:	491c      	ldr	r1, [pc, #112]	; (8001aa4 <main+0xd8>)
 8001a32:	200f      	movs	r0, #15
 8001a34:	f7ff fb28 	bl	8001088 <bme280_set_sensor_settings>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <main+0xe8>)
 8001a3e:	701a      	strb	r2, [r3, #0]


  // Init the VL53L0x
  tofInit(1); // set long range mode (up to 2m)
 8001a40:	2001      	movs	r0, #1
 8001a42:	f000 fc11 	bl	8002268 <tofInit>
  tofGetModel(&model, &revision);
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <main+0xec>)
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <main+0xf0>)
 8001a4a:	f001 fa7d 	bl	8002f48 <tofGetModel>

  // Re-init the VL53L0X if there is any problems
  while(model != 238 || revision != 16)
 8001a4e:	e014      	b.n	8001a7a <main+0xae>
  {
  	while(HAL_I2C_DeInit(&hi2c1) != HAL_OK);
 8001a50:	bf00      	nop
 8001a52:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <main+0xf4>)
 8001a54:	f001 ff73 	bl	800393e <HAL_I2C_DeInit>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f9      	bne.n	8001a52 <main+0x86>
  	while(HAL_I2C_Init(&hi2c1) != HAL_OK);
 8001a5e:	bf00      	nop
 8001a60:	4817      	ldr	r0, [pc, #92]	; (8001ac0 <main+0xf4>)
 8001a62:	f001 fedd 	bl	8003820 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f9      	bne.n	8001a60 <main+0x94>
    tofInit(1); // set long range mode (up to 2m)
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 fbfb 	bl	8002268 <tofInit>
    tofGetModel(&model, &revision);
 8001a72:	4911      	ldr	r1, [pc, #68]	; (8001ab8 <main+0xec>)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <main+0xf0>)
 8001a76:	f001 fa67 	bl	8002f48 <tofGetModel>
  while(model != 238 || revision != 16)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <main+0xf0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2bee      	cmp	r3, #238	; 0xee
 8001a80:	d1e6      	bne.n	8001a50 <main+0x84>
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <main+0xec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d1e2      	bne.n	8001a50 <main+0x84>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a8a:	f004 ff11 	bl	80068b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bme280Task */
  bme280TaskHandle = osThreadNew(StartBME280Task, NULL, &bme280Task_attributes);
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <main+0xf8>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <main+0xfc>)
 8001a94:	f004 ff56 	bl	8006944 <osThreadNew>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <main+0x100>)
 8001a9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a9e:	f004 ff2b 	bl	80068f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <main+0xd6>
 8001aa4:	20001bc8 	.word	0x20001bc8
 8001aa8:	080018cd 	.word	0x080018cd
 8001aac:	08001955 	.word	0x08001955
 8001ab0:	0800193d 	.word	0x0800193d
 8001ab4:	20001c08 	.word	0x20001c08
 8001ab8:	200002e8 	.word	0x200002e8
 8001abc:	200002e4 	.word	0x200002e4
 8001ac0:	20001c0c 	.word	0x20001c0c
 8001ac4:	0800bda4 	.word	0x0800bda4
 8001ac8:	08001d71 	.word	0x08001d71
 8001acc:	20001c80 	.word	0x20001c80

08001ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0b8      	sub	sp, #224	; 0xe0
 8001ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ada:	2244      	movs	r2, #68	; 0x44
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f007 fc7c 	bl	80093dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2288      	movs	r2, #136	; 0x88
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fc6e 	bl	80093dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b14:	2302      	movs	r3, #2
 8001b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b26:	230a      	movs	r3, #10
 8001b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fbf0 	bl	8004328 <HAL_RCC_OscConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b4e:	f000 f945 	bl	8001ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b52:	230f      	movs	r3, #15
 8001b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b70:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b74:	2104      	movs	r1, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 ffbc 	bl	8004af4 <HAL_RCC_ClockConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001b82:	f000 f92b 	bl	8001ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001b86:	2342      	movs	r3, #66	; 0x42
 8001b88:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f9e5 	bl	8004f64 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ba0:	f000 f91c 	bl	8001ddc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ba4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ba8:	f002 fb68 	bl	800427c <HAL_PWREx_ControlVoltageScaling>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001bb2:	f000 f913 	bl	8001ddc <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	37e0      	adds	r7, #224	; 0xe0
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <MX_I2C1_Init+0x78>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <MX_I2C1_Init+0x7c>)
 8001bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001be2:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bfa:	480e      	ldr	r0, [pc, #56]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001bfc:	f001 fe10 	bl	8003820 <HAL_I2C_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c06:	f000 f8e9 	bl	8001ddc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4809      	ldr	r0, [pc, #36]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001c0e:	f002 fa8f 	bl	8004130 <HAL_I2CEx_ConfigAnalogFilter>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c18:	f000 f8e0 	bl	8001ddc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_I2C1_Init+0x74>)
 8001c20:	f002 fad1 	bl	80041c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c2a:	f000 f8d7 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20001c0c 	.word	0x20001c0c
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	10909cec 	.word	0x10909cec

08001c40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <MX_USART2_UART_Init+0x5c>)
 8001c48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART2_UART_Init+0x58>)
 8001c84:	f004 f8fc 	bl	8005e80 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f8a5 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20001c94 	.word	0x20001c94
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a2a      	ldr	r2, [pc, #168]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a1e      	ldr	r2, [pc, #120]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_GPIO_Init+0xc4>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2120      	movs	r1, #32
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f001 fd67 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_GPIO_Init+0xc8>)
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	480d      	ldr	r0, [pc, #52]	; (8001d6c <MX_GPIO_Init+0xcc>)
 8001d38:	f001 fabc 	bl	80032b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f001 faad 	bl	80032b4 <HAL_GPIO_Init>

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	10210000 	.word	0x10210000
 8001d6c:	48000800 	.word	0x48000800

08001d70 <StartBME280Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBME280Task */
void StartBME280Task(void *argument)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	// BME280
	const uint8_t bme280_address = 0x76;
 8001d7c:	2376      	movs	r3, #118	; 0x76
 8001d7e:	f887 33f7 	strb.w	r3, [r7, #1015]	; 0x3f7


	const uint8_t vl53l0x_address = 0x29;
 8001d82:	2329      	movs	r3, #41	; 0x29
 8001d84:	f887 33f6 	strb.w	r3, [r7, #1014]	; 0x3f6


	uint8_t tData = 0x61; //0xD0;
 8001d88:	2361      	movs	r3, #97	; 0x61
 8001d8a:	f887 33f5 	strb.w	r3, [r7, #1013]	; 0x3f5
  	//osDelay(500);



  	/////
  	uint16_t distance = tofReadDistance();
 8001d8e:	f001 f895 	bl	8002ebc <tofReadDistance>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	f107 030a 	add.w	r3, r7, #10
 8001d9a:	801a      	strh	r2, [r3, #0]
  	//printf("Distance: %u\r\n", distance);
  	HAL_UART_Transmit(&huart2, (uint8_t *)&distance, 2, 0xFFFF);
 8001d9c:	f107 010a 	add.w	r1, r7, #10
 8001da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da4:	2202      	movs	r2, #2
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <StartBME280Task+0x44>)
 8001da8:	f004 f8b8 	bl	8005f1c <HAL_UART_Transmit>


  	osDelay(50);
 8001dac:	2032      	movs	r0, #50	; 0x32
 8001dae:	f004 fe5b 	bl	8006a68 <osDelay>
  {
 8001db2:	e7ec      	b.n	8001d8e <StartBME280Task+0x1e>
 8001db4:	20001c94 	.word	0x20001c94

08001db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dca:	f001 f94d 	bl	8003068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40001000 	.word	0x40001000

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <Error_Handler+0x8>
	...

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_MspInit+0x4c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_MspInit+0x4c>)
 8001dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6593      	str	r3, [r2, #88]	; 0x58
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_MspInit+0x4c>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	210f      	movs	r1, #15
 8001e22:	f06f 0001 	mvn.w	r0, #1
 8001e26:	f001 fa1b 	bl	8003260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_I2C_MspInit+0x7c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d128      	bne.n	8001eac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e78:	2312      	movs	r3, #18
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e84:	2304      	movs	r3, #4
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480b      	ldr	r0, [pc, #44]	; (8001ebc <HAL_I2C_MspInit+0x84>)
 8001e90:	f001 fa10 	bl	80032b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_I2C_MspInit+0x80>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_I2C_MspDeInit+0x3c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_I2C_MspDeInit+0x40>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_I2C_MspDeInit+0x40>)
 8001ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001edc:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee2:	4808      	ldr	r0, [pc, #32]	; (8001f04 <HAL_I2C_MspDeInit+0x44>)
 8001ee4:	f001 fb90 	bl	8003608 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <HAL_I2C_MspDeInit+0x44>)
 8001eee:	f001 fb8b 	bl	8003608 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40005400 	.word	0x40005400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	48000400 	.word	0x48000400

08001f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0x7c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d128      	bne.n	8001f7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f001 f99c 	bl	80032b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	2036      	movs	r0, #54	; 0x36
 8001fa2:	f001 f95d 	bl	8003260 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa6:	2036      	movs	r0, #54	; 0x36
 8001fa8:	f001 f976 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_InitTick+0x9c>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_InitTick+0x9c>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_InitTick+0x9c>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc4:	f107 0210 	add.w	r2, r7, #16
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 ff36 	bl	8004e40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fd4:	f002 ff08 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8001fd8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_InitTick+0xa0>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_InitTick+0xa4>)
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_InitTick+0xa8>)
 8001fec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_InitTick+0xa4>)
 8001ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_InitTick+0xa4>)
 8001ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_InitTick+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_InitTick+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <HAL_InitTick+0xa4>)
 800200a:	f003 fc67 	bl	80058dc <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002014:	4806      	ldr	r0, [pc, #24]	; (8002030 <HAL_InitTick+0xa4>)
 8002016:	f003 fcc3 	bl	80059a0 <HAL_TIM_Base_Start_IT>
 800201a:	4603      	mov	r3, r0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3730      	adds	r7, #48	; 0x30
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	431bde83 	.word	0x431bde83
 8002030:	20001d18 	.word	0x20001d18
 8002034:	40001000 	.word	0x40001000

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <TIM6_DAC_IRQHandler+0x10>)
 800206a:	f003 fd09 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20001d18 	.word	0x20001d18

08002078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_kill>:

int _kill(int pid, int sig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002092:	f007 f95b 	bl	800934c <__errno>
 8002096:	4603      	mov	r3, r0
 8002098:	2216      	movs	r2, #22
 800209a:	601a      	str	r2, [r3, #0]
	return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_exit>:

void _exit (int status)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffe7 	bl	8002088 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ba:	e7fe      	b.n	80020ba <_exit+0x12>

080020bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00a      	b.n	80020e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ce:	f3af 8000 	nop.w
 80020d2:	4601      	mov	r1, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	60ba      	str	r2, [r7, #8]
 80020da:	b2ca      	uxtb	r2, r1
 80020dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3301      	adds	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dbf0      	blt.n	80020ce <_read+0x12>
	}

return len;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e009      	b.n	800211c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	60ba      	str	r2, [r7, #8]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fbc9 	bl	80018a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf1      	blt.n	8002108 <_write+0x12>
	}
	return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_close>:

int _close(int file)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
	return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002156:	605a      	str	r2, [r3, #4]
	return 0;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_isatty>:

int _isatty(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
	return 0;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f007 f8c0 	bl	800934c <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20018000 	.word	0x20018000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	200002ec 	.word	0x200002ec
 8002200:	20001db8 	.word	0x20001db8

08002204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <SystemInit+0x5c>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a14      	ldr	r2, [pc, #80]	; (8002260 <SystemInit+0x5c>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002218:	4b12      	ldr	r3, [pc, #72]	; (8002264 <SystemInit+0x60>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a11      	ldr	r2, [pc, #68]	; (8002264 <SystemInit+0x60>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <SystemInit+0x60>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <SystemInit+0x60>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <SystemInit+0x60>)
 8002230:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002234:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002238:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <SystemInit+0x60>)
 800223c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002240:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <SystemInit+0x60>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <SystemInit+0x60>)
 8002248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SystemInit+0x60>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	40021000 	.word	0x40021000

08002268 <tofInit>:
// Opens a file system handle to the I2C device
// reads the calibration data and sets the device
// into auto sensing mode
//
int tofInit(int bLongRange)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	return initSensor(bLongRange); // finally, initialize the magic numbers in the sensor
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fd05 	bl	8002c80 <initSensor>
 8002276:	4603      	mov	r3, r0

} /* tofInit() */
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <readReg16>:

//
// Read a pair of registers as a 16-bit value
//
static unsigned short readReg16(uint8_t ucAddr)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp[2];

	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 800228a:	1dfa      	adds	r2, r7, #7
 800228c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2301      	movs	r3, #1
 8002294:	2152      	movs	r1, #82	; 0x52
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <readReg16+0x48>)
 8002298:	f001 fb80 	bl	800399c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, ucTemp, 2, 1000);
 800229c:	f107 020c 	add.w	r2, r7, #12
 80022a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	2153      	movs	r1, #83	; 0x53
 80022aa:	4807      	ldr	r0, [pc, #28]	; (80022c8 <readReg16+0x48>)
 80022ac:	f001 fc6a 	bl	8003b84 <HAL_I2C_Master_Receive>

	return (unsigned short)((ucTemp[0]<<8) + ucTemp[1]);
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	b29b      	uxth	r3, r3
} /* readReg16() */
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20001c0c 	.word	0x20001c0c

080022cc <readReg>:

//
// Read a single register value from I2C device
//
static unsigned char readReg(uint8_t ucAddr)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ucTemp;

	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 80022d6:	1dfa      	adds	r2, r7, #7
 80022d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2301      	movs	r3, #1
 80022e0:	2152      	movs	r1, #82	; 0x52
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <readReg+0x3c>)
 80022e4:	f001 fb5a 	bl	800399c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 80022e8:	f107 020f 	add.w	r2, r7, #15
 80022ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	2153      	movs	r1, #83	; 0x53
 80022f6:	4804      	ldr	r0, [pc, #16]	; (8002308 <readReg+0x3c>)
 80022f8:	f001 fc44 	bl	8003b84 <HAL_I2C_Master_Receive>

	return ucTemp;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
} /* ReadReg() */
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20001c0c 	.word	0x20001c0c

0800230c <readMulti>:

static void readMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af02      	add	r7, sp, #8
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 800231c:	1dfa      	adds	r2, r7, #7
 800231e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2301      	movs	r3, #1
 8002326:	2152      	movs	r1, #82	; 0x52
 8002328:	4807      	ldr	r0, [pc, #28]	; (8002348 <readMulti+0x3c>)
 800232a:	f001 fb37 	bl	800399c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, pBuf, iCount, 1000);
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002334:	9200      	str	r2, [sp, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	2153      	movs	r1, #83	; 0x53
 800233a:	4803      	ldr	r0, [pc, #12]	; (8002348 <readMulti+0x3c>)
 800233c:	f001 fc22 	bl	8003b84 <HAL_I2C_Master_Receive>
} /* readMulti() */
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20001c0c 	.word	0x20001c0c

0800234c <writeMulti>:

static void writeMulti(uint8_t ucAddr, uint8_t *pBuf, uint16_t iCount)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	4613      	mov	r3, r2
 800235a:	80bb      	strh	r3, [r7, #4]
 800235c:	466b      	mov	r3, sp
 800235e:	461d      	mov	r5, r3
	uint8_t ucTemp[iCount+1];
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	1c5c      	adds	r4, r3, #1
 8002364:	1e63      	subs	r3, r4, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4623      	mov	r3, r4
 800236a:	4618      	mov	r0, r3
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	00cb      	lsls	r3, r1, #3
 800237a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800237e:	00c2      	lsls	r2, r0, #3
 8002380:	4623      	mov	r3, r4
 8002382:	4618      	mov	r0, r3
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	00cb      	lsls	r3, r1, #3
 8002392:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002396:	00c2      	lsls	r2, r0, #3
 8002398:	4623      	mov	r3, r4
 800239a:	3307      	adds	r3, #7
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	ebad 0d03 	sub.w	sp, sp, r3
 80023a4:	ab02      	add	r3, sp, #8
 80023a6:	3300      	adds	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]

	ucTemp[0] = ucAddr;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	701a      	strb	r2, [r3, #0]
	memcpy(&ucTemp[1], pBuf, iCount);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	3301      	adds	r3, #1
 80023b4:	88ba      	ldrh	r2, [r7, #4]
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f007 f801 	bl	80093c0 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, iCount+1, 1000);
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	88bb      	ldrh	r3, [r7, #4]
 80023c2:	3301      	adds	r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023ca:	9100      	str	r1, [sp, #0]
 80023cc:	2152      	movs	r1, #82	; 0x52
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <writeMulti+0x94>)
 80023d0:	f001 fae4 	bl	800399c <HAL_I2C_Master_Transmit>
 80023d4:	46ad      	mov	sp, r5
} /* writeMulti() */
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bdb0      	pop	{r4, r5, r7, pc}
 80023de:	bf00      	nop
 80023e0:	20001c0c 	.word	0x20001c0c

080023e4 <writeReg16>:
//
// Write a 16-bit value to a register
//
static void writeReg16(uint8_t ucAddr, uint16_t usValue)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	4603      	mov	r3, r0
 80023ec:	460a      	mov	r2, r1
 80023ee:	71fb      	strb	r3, [r7, #7]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80bb      	strh	r3, [r7, #4]
	uint8_t ucTemp[4];

	ucTemp[0] = ucAddr;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = (uint8_t)(usValue >> 8); // MSB first
 80023f8:	88bb      	ldrh	r3, [r7, #4]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	737b      	strb	r3, [r7, #13]
	ucTemp[2] = (uint8_t)usValue;
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, 3, 1000);
 8002408:	f107 020c 	add.w	r2, r7, #12
 800240c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2303      	movs	r3, #3
 8002414:	2152      	movs	r1, #82	; 0x52
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <writeReg16+0x40>)
 8002418:	f001 fac0 	bl	800399c <HAL_I2C_Master_Transmit>
} /* writeReg16() */
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20001c0c 	.word	0x20001c0c

08002428 <writeReg>:
//
// Write a single register/value pair
//
static void writeReg(uint8_t ucAddr, uint8_t ucValue)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	4603      	mov	r3, r0
 8002430:	460a      	mov	r2, r1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	4613      	mov	r3, r2
 8002436:	71bb      	strb	r3, [r7, #6]
	uint8_t ucTemp[2];

	ucTemp[0] = ucAddr;
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	733b      	strb	r3, [r7, #12]
	ucTemp[1] = ucValue;
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucTemp, 2, 1000);
 8002440:	f107 020c 	add.w	r2, r7, #12
 8002444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2302      	movs	r3, #2
 800244c:	2152      	movs	r1, #82	; 0x52
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <writeReg+0x34>)
 8002450:	f001 faa4 	bl	800399c <HAL_I2C_Master_Transmit>
} /* writeReg() */
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20001c0c 	.word	0x20001c0c

08002460 <writeRegList>:

//
// Write a list of register/value pairs to the I2C device
//
static void writeRegList(uint8_t *ucList)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af02      	add	r7, sp, #8
 8002466:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = *ucList++; // count is the first element in the list
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	73fb      	strb	r3, [r7, #15]


	while (ucCount)
 8002472:	e00e      	b.n	8002492 <writeRegList+0x32>
	{
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, ucList, 2, 1000);
 8002474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2302      	movs	r3, #2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	2152      	movs	r1, #82	; 0x52
 8002480:	4808      	ldr	r0, [pc, #32]	; (80024a4 <writeRegList+0x44>)
 8002482:	f001 fa8b 	bl	800399c <HAL_I2C_Master_Transmit>
		ucList += 2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3302      	adds	r3, #2
 800248a:	607b      	str	r3, [r7, #4]
		ucCount--;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3b01      	subs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
	while (ucCount)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ed      	bne.n	8002474 <writeRegList+0x14>
	}
} /* writeRegList() */
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001c0c 	.word	0x20001c0c

080024a8 <getSpadInfo>:
0x44,0x00, 0x45,0x20, 0x47,0x08, 0x48,0x28, 0x67,0x00, 0x70,0x04, 0x71,0x01,
0x72,0xfe, 0x76,0x00, 0x77,0x00, 0xff,0x01, 0x0d,0x01, 0xff,0x00, 0x80,0x01,
0x01,0xf8, 0xff,0x01, 0x8e,0x01, 0x00,0x01, 0xff,0x00, 0x80,0x00};

static int getSpadInfo(uint8_t *pCount, uint8_t *pTypeIsAperture)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
int iTimeout;
uint8_t ucTemp;
#define MAX_TIMEOUT 50

  writeRegList(ucSPAD0);
 80024b2:	482d      	ldr	r0, [pc, #180]	; (8002568 <getSpadInfo+0xc0>)
 80024b4:	f7ff ffd4 	bl	8002460 <writeRegList>
  writeReg(0x83, readReg(0x83) | 0x04);
 80024b8:	2083      	movs	r0, #131	; 0x83
 80024ba:	f7ff ff07 	bl	80022cc <readReg>
 80024be:	4603      	mov	r3, r0
 80024c0:	f043 0304 	orr.w	r3, r3, #4
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	2083      	movs	r0, #131	; 0x83
 80024ca:	f7ff ffad 	bl	8002428 <writeReg>
  writeRegList(ucSPAD1);
 80024ce:	4827      	ldr	r0, [pc, #156]	; (800256c <getSpadInfo+0xc4>)
 80024d0:	f7ff ffc6 	bl	8002460 <writeRegList>
  iTimeout = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  while(iTimeout < MAX_TIMEOUT)
 80024d8:	e00b      	b.n	80024f2 <getSpadInfo+0x4a>
  {
    if (readReg(0x83) != 0x00) break;
 80024da:	2083      	movs	r0, #131	; 0x83
 80024dc:	f7ff fef6 	bl	80022cc <readReg>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <getSpadInfo+0x52>
    iTimeout++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3301      	adds	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 80024ec:	2005      	movs	r0, #5
 80024ee:	f000 fddb 	bl	80030a8 <HAL_Delay>
  while(iTimeout < MAX_TIMEOUT)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b31      	cmp	r3, #49	; 0x31
 80024f6:	ddf0      	ble.n	80024da <getSpadInfo+0x32>
 80024f8:	e000      	b.n	80024fc <getSpadInfo+0x54>
    if (readReg(0x83) != 0x00) break;
 80024fa:	bf00      	nop
  }
  if (iTimeout == MAX_TIMEOUT)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b32      	cmp	r3, #50	; 0x32
 8002500:	d101      	bne.n	8002506 <getSpadInfo+0x5e>
  {
    //fprintf(stderr, "Timeout while waiting for SPAD info\n");
    return 0;
 8002502:	2300      	movs	r3, #0
 8002504:	e02b      	b.n	800255e <getSpadInfo+0xb6>
  }
  writeReg(0x83,0x01);
 8002506:	2101      	movs	r1, #1
 8002508:	2083      	movs	r0, #131	; 0x83
 800250a:	f7ff ff8d 	bl	8002428 <writeReg>
  ucTemp = readReg(0x92);
 800250e:	2092      	movs	r0, #146	; 0x92
 8002510:	f7ff fedc 	bl	80022cc <readReg>
 8002514:	4603      	mov	r3, r0
 8002516:	72fb      	strb	r3, [r7, #11]
  *pCount = (ucTemp & 0x7f);
 8002518:	7afb      	ldrb	r3, [r7, #11]
 800251a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251e:	b2da      	uxtb	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	701a      	strb	r2, [r3, #0]
  *pTypeIsAperture = (ucTemp & 0x80);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800252a:	b2da      	uxtb	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	701a      	strb	r2, [r3, #0]
  writeReg(0x81,0x00);
 8002530:	2100      	movs	r1, #0
 8002532:	2081      	movs	r0, #129	; 0x81
 8002534:	f7ff ff78 	bl	8002428 <writeReg>
  writeReg(0xff,0x06);
 8002538:	2106      	movs	r1, #6
 800253a:	20ff      	movs	r0, #255	; 0xff
 800253c:	f7ff ff74 	bl	8002428 <writeReg>
  writeReg(0x83, readReg(0x83) & ~0x04);
 8002540:	2083      	movs	r0, #131	; 0x83
 8002542:	f7ff fec3 	bl	80022cc <readReg>
 8002546:	4603      	mov	r3, r0
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	2083      	movs	r0, #131	; 0x83
 8002552:	f7ff ff69 	bl	8002428 <writeReg>
  writeRegList(ucSPAD2);
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <getSpadInfo+0xc8>)
 8002558:	f7ff ff82 	bl	8002460 <writeRegList>
  
  return 1;
 800255c:	2301      	movs	r3, #1
} /* getSpadInfo() */
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000018 	.word	0x20000018
 800256c:	20000024 	.word	0x20000024
 8002570:	20000030 	.word	0x20000030

08002574 <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
static uint16_t decodeTimeout(uint16_t reg_val)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002582:	88fa      	ldrh	r2, [r7, #6]
 8002584:	0a12      	lsrs	r2, r2, #8
 8002586:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002588:	4093      	lsls	r3, r2
 800258a:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800258c:	3301      	adds	r3, #1
 800258e:	b29b      	uxth	r3, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
static uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	4613      	mov	r3, r2
 80025aa:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <timeoutMclksToMicroseconds+0x48>)
 80025b0:	fb02 f303 	mul.w	r3, r2, r3
 80025b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025b8:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <timeoutMclksToMicroseconds+0x4c>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	fb02 f203 	mul.w	r2, r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <timeoutMclksToMicroseconds+0x4c>)
 80025d2:	fba2 2303 	umull	r2, r3, r2, r3
 80025d6:	099b      	lsrs	r3, r3, #6
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	003a2f00 	.word	0x003a2f00
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <timeoutMicrosecondsToMclks+0x44>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002604:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <timeoutMicrosecondsToMclks+0x48>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	099b      	lsrs	r3, r3, #6
 800260c:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002614:	fb02 f203 	mul.w	r2, r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	085b      	lsrs	r3, r3, #1
 800261c:	441a      	add	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	003a2f00 	.word	0x003a2f00
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
static uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d018      	beq.n	8002682 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 8002650:	88fb      	ldrh	r3, [r7, #6]
 8002652:	3b01      	subs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8002656:	e005      	b.n	8002664 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 800265e:	897b      	ldrh	r3, [r7, #10]
 8002660:	3301      	adds	r3, #1
 8002662:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f4      	bne.n	8002658 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 800266e:	897b      	ldrh	r3, [r7, #10]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	b29b      	uxth	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	b29b      	uxth	r3, r3
 800267c:	4313      	orrs	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	e000      	b.n	8002684 <encodeTimeout+0x4c>
  }
  else { return 0; }
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <getSequenceStepTimeouts>:

static void getSequenceStepTimeouts(uint8_t enables, SequenceStepTimeouts * timeouts)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  timeouts->pre_range_vcsel_period_pclks = ((readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 800269c:	2050      	movs	r0, #80	; 0x50
 800269e:	f7ff fe15 	bl	80022cc <readReg>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80026b2:	2046      	movs	r0, #70	; 0x46
 80026b4:	f7ff fe0a 	bl	80022cc <readReg>
 80026b8:	4603      	mov	r3, r0
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3301      	adds	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f7ff ff63 	bl	800259c <timeoutMclksToMicroseconds>
 80026d6:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 80026dc:	2051      	movs	r0, #81	; 0x51
 80026de:	f7ff fdcf 	bl	8002280 <readReg16>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff45 	bl	8002574 <decodeTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f7ff ff4c 	bl	800259c <timeoutMclksToMicroseconds>
 8002704:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = ((readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD) +1) << 1);
 800270a:	2070      	movs	r0, #112	; 0x70
 800270c:	f7ff fdde 	bl	80022cc <readReg>
 8002710:	4603      	mov	r3, r0
 8002712:	b29b      	uxth	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8002720:	2071      	movs	r0, #113	; 0x71
 8002722:	f7ff fdad 	bl	8002280 <readReg16>
 8002726:	4603      	mov	r3, r0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff23 	bl	8002574 <decodeTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	811a      	strh	r2, [r3, #8]

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <getSequenceStepTimeouts+0xc0>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	891a      	ldrh	r2, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	88db      	ldrh	r3, [r3, #6]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f7ff ff1d 	bl	800259c <timeoutMclksToMicroseconds>
 8002762:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	615a      	str	r2, [r3, #20]
} /* getSequenceStepTimeouts() */
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
static int setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	460a      	mov	r2, r1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	4613      	mov	r3, r2
 800277e:	71bb      	strb	r3, [r7, #6]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fd9d 	bl	80022cc <readReg>
 8002792:	4603      	mov	r3, r0
 8002794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  getSequenceStepTimeouts(enables, &timeouts);
 8002798:	f107 020c 	add.w	r2, r7, #12
 800279c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff74 	bl	8002690 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d15c      	bne.n	8002868 <setVcselPulsePeriod+0xf8>
  {
    // "Set phase check limits"
    switch (period_pclks)
 80027ae:	79bb      	ldrb	r3, [r7, #6]
 80027b0:	3b0c      	subs	r3, #12
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d824      	bhi.n	8002800 <setVcselPulsePeriod+0x90>
 80027b6:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <setVcselPulsePeriod+0x4c>)
 80027b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027bc:	080027d9 	.word	0x080027d9
 80027c0:	08002801 	.word	0x08002801
 80027c4:	080027e3 	.word	0x080027e3
 80027c8:	08002801 	.word	0x08002801
 80027cc:	080027ed 	.word	0x080027ed
 80027d0:	08002801 	.word	0x08002801
 80027d4:	080027f7 	.word	0x080027f7
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80027d8:	2118      	movs	r1, #24
 80027da:	2057      	movs	r0, #87	; 0x57
 80027dc:	f7ff fe24 	bl	8002428 <writeReg>
        break;
 80027e0:	e010      	b.n	8002804 <setVcselPulsePeriod+0x94>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80027e2:	2130      	movs	r1, #48	; 0x30
 80027e4:	2057      	movs	r0, #87	; 0x57
 80027e6:	f7ff fe1f 	bl	8002428 <writeReg>
        break;
 80027ea:	e00b      	b.n	8002804 <setVcselPulsePeriod+0x94>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80027ec:	2140      	movs	r1, #64	; 0x40
 80027ee:	2057      	movs	r0, #87	; 0x57
 80027f0:	f7ff fe1a 	bl	8002428 <writeReg>
        break;
 80027f4:	e006      	b.n	8002804 <setVcselPulsePeriod+0x94>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80027f6:	2150      	movs	r1, #80	; 0x50
 80027f8:	2057      	movs	r0, #87	; 0x57
 80027fa:	f7ff fe15 	bl	8002428 <writeReg>
        break;
 80027fe:	e001      	b.n	8002804 <setVcselPulsePeriod+0x94>

      default:
        // invalid period
        return 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e0fe      	b.n	8002a02 <setVcselPulsePeriod+0x292>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 8002804:	2108      	movs	r1, #8
 8002806:	2056      	movs	r0, #86	; 0x56
 8002808:	f7ff fe0e 	bl	8002428 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 800280c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002810:	4619      	mov	r1, r3
 8002812:	2050      	movs	r0, #80	; 0x50
 8002814:	f7ff fe08 	bl	8002428 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	79ba      	ldrb	r2, [r7, #6]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fee4 	bl	80025ec <timeoutMicrosecondsToMclks>
 8002824:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8002826:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002828:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff04 	bl	8002638 <encodeTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	4619      	mov	r1, r3
 8002834:	2051      	movs	r0, #81	; 0x51
 8002836:	f7ff fdd5 	bl	80023e4 <writeReg16>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	79ba      	ldrb	r2, [r7, #6]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fed3 	bl	80025ec <timeoutMicrosecondsToMclks>
 8002846:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8002848:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 800284a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002850:	d804      	bhi.n	800285c <setVcselPulsePeriod+0xec>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8002852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002854:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8002856:	3b01      	subs	r3, #1
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e000      	b.n	800285e <setVcselPulsePeriod+0xee>
 800285c:	23ff      	movs	r3, #255	; 0xff
 800285e:	4619      	mov	r1, r3
 8002860:	2046      	movs	r0, #70	; 0x46
 8002862:	f7ff fde1 	bl	8002428 <writeReg>
 8002866:	e0b3      	b.n	80029d0 <setVcselPulsePeriod+0x260>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	2b01      	cmp	r3, #1
 800286c:	f040 80ae 	bne.w	80029cc <setVcselPulsePeriod+0x25c>
  {
    switch (period_pclks)
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	3b08      	subs	r3, #8
 8002874:	2b06      	cmp	r3, #6
 8002876:	f200 8085 	bhi.w	8002984 <setVcselPulsePeriod+0x214>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <setVcselPulsePeriod+0x110>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	0800289d 	.word	0x0800289d
 8002884:	08002985 	.word	0x08002985
 8002888:	080028d7 	.word	0x080028d7
 800288c:	08002985 	.word	0x08002985
 8002890:	08002911 	.word	0x08002911
 8002894:	08002985 	.word	0x08002985
 8002898:	0800294b 	.word	0x0800294b
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800289c:	2110      	movs	r1, #16
 800289e:	2048      	movs	r0, #72	; 0x48
 80028a0:	f7ff fdc2 	bl	8002428 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80028a4:	2108      	movs	r1, #8
 80028a6:	2047      	movs	r0, #71	; 0x47
 80028a8:	f7ff fdbe 	bl	8002428 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 80028ac:	2102      	movs	r1, #2
 80028ae:	2032      	movs	r0, #50	; 0x32
 80028b0:	f7ff fdba 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80028b4:	210c      	movs	r1, #12
 80028b6:	2030      	movs	r0, #48	; 0x30
 80028b8:	f7ff fdb6 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x01);
 80028bc:	2101      	movs	r1, #1
 80028be:	20ff      	movs	r0, #255	; 0xff
 80028c0:	f7ff fdb2 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 80028c4:	2130      	movs	r1, #48	; 0x30
 80028c6:	2030      	movs	r0, #48	; 0x30
 80028c8:	f7ff fdae 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x00);
 80028cc:	2100      	movs	r1, #0
 80028ce:	20ff      	movs	r0, #255	; 0xff
 80028d0:	f7ff fdaa 	bl	8002428 <writeReg>
        break;
 80028d4:	e058      	b.n	8002988 <setVcselPulsePeriod+0x218>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80028d6:	2128      	movs	r1, #40	; 0x28
 80028d8:	2048      	movs	r0, #72	; 0x48
 80028da:	f7ff fda5 	bl	8002428 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80028de:	2108      	movs	r1, #8
 80028e0:	2047      	movs	r0, #71	; 0x47
 80028e2:	f7ff fda1 	bl	8002428 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80028e6:	2103      	movs	r1, #3
 80028e8:	2032      	movs	r0, #50	; 0x32
 80028ea:	f7ff fd9d 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80028ee:	2109      	movs	r1, #9
 80028f0:	2030      	movs	r0, #48	; 0x30
 80028f2:	f7ff fd99 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x01);
 80028f6:	2101      	movs	r1, #1
 80028f8:	20ff      	movs	r0, #255	; 0xff
 80028fa:	f7ff fd95 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80028fe:	2120      	movs	r1, #32
 8002900:	2030      	movs	r0, #48	; 0x30
 8002902:	f7ff fd91 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x00);
 8002906:	2100      	movs	r1, #0
 8002908:	20ff      	movs	r0, #255	; 0xff
 800290a:	f7ff fd8d 	bl	8002428 <writeReg>
        break;
 800290e:	e03b      	b.n	8002988 <setVcselPulsePeriod+0x218>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8002910:	2138      	movs	r1, #56	; 0x38
 8002912:	2048      	movs	r0, #72	; 0x48
 8002914:	f7ff fd88 	bl	8002428 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002918:	2108      	movs	r1, #8
 800291a:	2047      	movs	r0, #71	; 0x47
 800291c:	f7ff fd84 	bl	8002428 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002920:	2103      	movs	r1, #3
 8002922:	2032      	movs	r0, #50	; 0x32
 8002924:	f7ff fd80 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8002928:	2108      	movs	r1, #8
 800292a:	2030      	movs	r0, #48	; 0x30
 800292c:	f7ff fd7c 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x01);
 8002930:	2101      	movs	r1, #1
 8002932:	20ff      	movs	r0, #255	; 0xff
 8002934:	f7ff fd78 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8002938:	2120      	movs	r1, #32
 800293a:	2030      	movs	r0, #48	; 0x30
 800293c:	f7ff fd74 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x00);
 8002940:	2100      	movs	r1, #0
 8002942:	20ff      	movs	r0, #255	; 0xff
 8002944:	f7ff fd70 	bl	8002428 <writeReg>
        break;
 8002948:	e01e      	b.n	8002988 <setVcselPulsePeriod+0x218>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 800294a:	2148      	movs	r1, #72	; 0x48
 800294c:	2048      	movs	r0, #72	; 0x48
 800294e:	f7ff fd6b 	bl	8002428 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002952:	2108      	movs	r1, #8
 8002954:	2047      	movs	r0, #71	; 0x47
 8002956:	f7ff fd67 	bl	8002428 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800295a:	2103      	movs	r1, #3
 800295c:	2032      	movs	r0, #50	; 0x32
 800295e:	f7ff fd63 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8002962:	2107      	movs	r1, #7
 8002964:	2030      	movs	r0, #48	; 0x30
 8002966:	f7ff fd5f 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x01);
 800296a:	2101      	movs	r1, #1
 800296c:	20ff      	movs	r0, #255	; 0xff
 800296e:	f7ff fd5b 	bl	8002428 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8002972:	2120      	movs	r1, #32
 8002974:	2030      	movs	r0, #48	; 0x30
 8002976:	f7ff fd57 	bl	8002428 <writeReg>
        writeReg(0xFF, 0x00);
 800297a:	2100      	movs	r1, #0
 800297c:	20ff      	movs	r0, #255	; 0xff
 800297e:	f7ff fd53 	bl	8002428 <writeReg>
        break;
 8002982:	e001      	b.n	8002988 <setVcselPulsePeriod+0x218>

      default:
        // invalid period
        return 0;
 8002984:	2300      	movs	r3, #0
 8002986:	e03c      	b.n	8002a02 <setVcselPulsePeriod+0x292>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800298c:	4619      	mov	r1, r3
 800298e:	2070      	movs	r0, #112	; 0x70
 8002990:	f7ff fd4a 	bl	8002428 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	79ba      	ldrb	r2, [r7, #6]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fe26 	bl	80025ec <timeoutMicrosecondsToMclks>
 80029a0:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 80029a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 80029a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <setVcselPulsePeriod+0x248>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 80029b0:	8a7a      	ldrh	r2, [r7, #18]
 80029b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029b4:	4413      	add	r3, r2
 80029b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80029b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe3c 	bl	8002638 <encodeTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4619      	mov	r1, r3
 80029c4:	2071      	movs	r0, #113	; 0x71
 80029c6:	f7ff fd0d 	bl	80023e4 <writeReg16>
 80029ca:	e001      	b.n	80029d0 <setVcselPulsePeriod+0x260>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e018      	b.n	8002a02 <setVcselPulsePeriod+0x292>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(measurement_timing_budget_us);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <setVcselPulsePeriod+0x29c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f81b 	bl	8002a10 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fc76 	bl	80022cc <readReg>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80029e6:	2102      	movs	r1, #2
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fd1d 	bl	8002428 <writeReg>
  performSingleRefCalibration(0x0);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f916 	bl	8002c20 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	4619      	mov	r1, r3
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7ff fd14 	bl	8002428 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return 1;
 8002a00:	2301      	movs	r3, #1
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3730      	adds	r7, #48	; 0x30
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200002f4 	.word	0x200002f4

08002a10 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
static int setMeasurementTimingBudget(uint32_t budget_us)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b090      	sub	sp, #64	; 0x40
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
uint16_t final_range_timeout_mclks;

  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8002a18:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8002a1c:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const EndOverhead        = 960;
 8002a1e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a22:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const MsrcOverhead       = 660;
 8002a24:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a28:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t const TccOverhead        = 590;
 8002a2a:	f240 234e 	movw	r3, #590	; 0x24e
 8002a2e:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const DssOverhead        = 690;
 8002a30:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002a34:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const PreRangeOverhead   = 660;
 8002a36:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002a3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const FinalRangeOverhead = 550;
 8002a3c:	f240 2326 	movw	r3, #550	; 0x226
 8002a40:	85bb      	strh	r3, [r7, #44]	; 0x2c

  uint32_t const MinTimingBudget = 20000;
 8002a42:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a46:	62bb      	str	r3, [r7, #40]	; 0x28

  if (budget_us < MinTimingBudget) { return 0; }
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d201      	bcs.n	8002a54 <setMeasurementTimingBudget+0x44>
 8002a50:	2300      	movs	r3, #0
 8002a52:	e074      	b.n	8002b3e <setMeasurementTimingBudget+0x12e>

  used_budget_us = StartOverhead + EndOverhead;
 8002a54:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002a56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a58:	4413      	add	r3, r2
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	f7ff fc35 	bl	80022cc <readReg>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  getSequenceStepTimeouts(enables, &timeouts);
 8002a68:	f107 0208 	add.w	r2, r7, #8
 8002a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fe0c 	bl	8002690 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <setMeasurementTimingBudget+0x80>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a88:	4413      	add	r3, r2
 8002a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a8c:	4413      	add	r3, r2
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <setMeasurementTimingBudget+0x9c>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002aa0:	4413      	add	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa6:	4413      	add	r3, r2
 8002aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aaa:	e00b      	b.n	8002ac4 <setMeasurementTimingBudget+0xb4>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002aac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <setMeasurementTimingBudget+0xb4>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002abc:	4413      	add	r3, r2
 8002abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ac0:	4413      	add	r3, r2
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <setMeasurementTimingBudget+0xcc>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ad4:	4413      	add	r3, r2
 8002ad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad8:	4413      	add	r3, r2
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	da2b      	bge.n	8002b3c <setMeasurementTimingBudget+0x12c>
  {
    used_budget_us += FinalRangeOverhead;
 8002ae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ae8:	4413      	add	r3, r2
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 8002aec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d901      	bls.n	8002af8 <setMeasurementTimingBudget+0xe8>
    {
      // "Requested timeout too big."
      return 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e022      	b.n	8002b3e <setMeasurementTimingBudget+0x12e>
    }

    final_range_timeout_us = budget_us - used_budget_us;
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	623b      	str	r3, [r7, #32]
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8002b00:	897b      	ldrh	r3, [r7, #10]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f7ff fd70 	bl	80025ec <timeoutMicrosecondsToMclks>
 8002b0c:	4603      	mov	r3, r0
    final_range_timeout_mclks =
 8002b0e:	877b      	strh	r3, [r7, #58]	; 0x3a

    if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <setMeasurementTimingBudget+0x114>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002b20:	4413      	add	r3, r2
 8002b22:	877b      	strh	r3, [r7, #58]	; 0x3a
    }

    writeReg16(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002b24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fd86 	bl	8002638 <encodeTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4619      	mov	r1, r3
 8002b30:	2071      	movs	r0, #113	; 0x71
 8002b32:	f7ff fc57 	bl	80023e4 <writeReg16>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    measurement_timing_budget_us = budget_us; // store for internal reuse
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <setMeasurementTimingBudget+0x138>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6013      	str	r3, [r2, #0]
  }
  return 1;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3740      	adds	r7, #64	; 0x40
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200002f4 	.word	0x200002f4

08002b4c <getMeasurementTimingBudget>:

static uint32_t getMeasurementTimingBudget(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08c      	sub	sp, #48	; 0x30
 8002b50:	af00      	add	r7, sp, #0
  uint8_t enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8002b52:	f240 7376 	movw	r3, #1910	; 0x776
 8002b56:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const EndOverhead        = 960;
 8002b58:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b5c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const MsrcOverhead       = 660;
 8002b5e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b62:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const TccOverhead        = 590;
 8002b64:	f240 234e 	movw	r3, #590	; 0x24e
 8002b68:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t const DssOverhead        = 690;
 8002b6a:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002b6e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t const PreRangeOverhead   = 660;
 8002b70:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002b74:	843b      	strh	r3, [r7, #32]
  uint16_t const FinalRangeOverhead = 550;
 8002b76:	f240 2326 	movw	r3, #550	; 0x226
 8002b7a:	83fb      	strh	r3, [r7, #30]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8002b7c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002b7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b80:	4413      	add	r3, r2
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  enables = readReg(SYSTEM_SEQUENCE_CONFIG);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7ff fba1 	bl	80022cc <readReg>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	777b      	strb	r3, [r7, #29]
  getSequenceStepTimeouts(enables, &timeouts);
 8002b8e:	1d3a      	adds	r2, r7, #4
 8002b90:	7f7b      	ldrb	r3, [r7, #29]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fd7b 	bl	8002690 <getSequenceStepTimeouts>

  if (enables & SEQUENCE_ENABLE_TCC)
 8002b9a:	7f7b      	ldrb	r3, [r7, #29]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <getMeasurementTimingBudget+0x64>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba8:	4413      	add	r3, r2
 8002baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bac:	4413      	add	r3, r2
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_DSS)
 8002bb0:	7f7b      	ldrb	r3, [r7, #29]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <getMeasurementTimingBudget+0x7e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc4:	4413      	add	r3, r2
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc8:	e00a      	b.n	8002be0 <getMeasurementTimingBudget+0x94>
  }
  else if (enables & SEQUENCE_ENABLE_MSRC)
 8002bca:	7f7b      	ldrb	r3, [r7, #29]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <getMeasurementTimingBudget+0x94>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002bd8:	4413      	add	r3, r2
 8002bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bdc:	4413      	add	r3, r2
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_PRE_RANGE)
 8002be0:	7f7b      	ldrb	r3, [r7, #29]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	8c3b      	ldrh	r3, [r7, #32]
 8002bee:	4413      	add	r3, r2
 8002bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf2:	4413      	add	r3, r2
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  if (enables & SEQUENCE_ENABLE_FINAL_RANGE)
 8002bf6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da05      	bge.n	8002c0a <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	8bfb      	ldrh	r3, [r7, #30]
 8002c02:	4413      	add	r3, r2
 8002c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c06:	4413      	add	r3, r2
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  measurement_timing_budget_us = budget_us; // store for internal reuse
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <getMeasurementTimingBudget+0xd0>)
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	6013      	str	r3, [r2, #0]
  return budget_us;
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3730      	adds	r7, #48	; 0x30
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200002f4 	.word	0x200002f4

08002c20 <performSingleRefCalibration>:

static int performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
int iTimeout;
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4619      	mov	r1, r3
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7ff fbf7 	bl	8002428 <writeReg>

  iTimeout = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c3e:	e00a      	b.n	8002c56 <performSingleRefCalibration+0x36>
  {
    iTimeout++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(5);//usleep(5000);
 8002c46:	2005      	movs	r0, #5
 8002c48:	f000 fa2e 	bl	80030a8 <HAL_Delay>
    if (iTimeout > 100) { return 0; }
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	dd01      	ble.n	8002c56 <performSingleRefCalibration+0x36>
 8002c52:	2300      	movs	r3, #0
 8002c54:	e010      	b.n	8002c78 <performSingleRefCalibration+0x58>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002c56:	2013      	movs	r0, #19
 8002c58:	f7ff fb38 	bl	80022cc <readReg>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ec      	beq.n	8002c40 <performSingleRefCalibration+0x20>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002c66:	2101      	movs	r1, #1
 8002c68:	200b      	movs	r0, #11
 8002c6a:	f7ff fbdd 	bl	8002428 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff fbd9 	bl	8002428 <writeReg>

  return 1;
 8002c76:	2301      	movs	r3, #1
} /* performSingleRefCalibration() */
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <initSensor>:

//
// Initialize the vl53l0x
//
static int initSensor(int bLongRangeMode)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
unsigned char spad_count=0, spad_type_is_aperture=0, ref_spad_map[6];
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75bb      	strb	r3, [r7, #22]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	757b      	strb	r3, [r7, #21]
unsigned char ucFirstSPAD, ucSPADsEnabled;
int i;

// set 2.8V mode instead of default 1.8V mode for VDD
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
  readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8002c90:	2089      	movs	r0, #137	; 0x89
 8002c92:	f7ff fb1b 	bl	80022cc <readReg>
 8002c96:	4603      	mov	r3, r0
  writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	2089      	movs	r0, #137	; 0x89
 8002ca2:	f7ff fbc1 	bl	8002428 <writeReg>
// Set I2C standard mode
  writeRegList(ucI2CMode);
 8002ca6:	486b      	ldr	r0, [pc, #428]	; (8002e54 <initSensor+0x1d4>)
 8002ca8:	f7ff fbda 	bl	8002460 <writeRegList>
  stop_variable = readReg(0x91);
 8002cac:	2091      	movs	r0, #145	; 0x91
 8002cae:	f7ff fb0d 	bl	80022cc <readReg>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <initSensor+0x1d8>)
 8002cb8:	701a      	strb	r2, [r3, #0]
  writeRegList(ucI2CMode2);
 8002cba:	4868      	ldr	r0, [pc, #416]	; (8002e5c <initSensor+0x1dc>)
 8002cbc:	f7ff fbd0 	bl	8002460 <writeRegList>
// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(REG_MSRC_CONFIG_CONTROL, readReg(REG_MSRC_CONFIG_CONTROL) | 0x12);
 8002cc0:	2060      	movs	r0, #96	; 0x60
 8002cc2:	f7ff fb03 	bl	80022cc <readReg>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f043 0312 	orr.w	r3, r3, #18
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	4619      	mov	r1, r3
 8002cd0:	2060      	movs	r0, #96	; 0x60
 8002cd2:	f7ff fba9 	bl	8002428 <writeReg>
  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 32); // 0.25
 8002cd6:	2120      	movs	r1, #32
 8002cd8:	2044      	movs	r0, #68	; 0x44
 8002cda:	f7ff fb83 	bl	80023e4 <writeReg16>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002cde:	21ff      	movs	r1, #255	; 0xff
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7ff fba1 	bl	8002428 <writeReg>
  getSpadInfo(&spad_count, &spad_type_is_aperture);
 8002ce6:	f107 0215 	add.w	r2, r7, #21
 8002cea:	f107 0316 	add.w	r3, r7, #22
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbd9 	bl	80024a8 <getSpadInfo>

  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2206      	movs	r2, #6
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	20b0      	movs	r0, #176	; 0xb0
 8002d00:	f7ff fb04 	bl	800230c <readMulti>
//printf("initial spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);
  writeRegList(ucSPAD);
 8002d04:	4856      	ldr	r0, [pc, #344]	; (8002e60 <initSensor+0x1e0>)
 8002d06:	f7ff fbab 	bl	8002460 <writeRegList>
  ucFirstSPAD = (spad_type_is_aperture) ? 12: 0;
 8002d0a:	7d7b      	ldrb	r3, [r7, #21]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <initSensor+0x94>
 8002d10:	230c      	movs	r3, #12
 8002d12:	e000      	b.n	8002d16 <initSensor+0x96>
 8002d14:	2300      	movs	r3, #0
 8002d16:	75fb      	strb	r3, [r7, #23]
  ucSPADsEnabled = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
// clear bits for unused SPADs
  for (i=0; i<48; i++)
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	e03a      	b.n	8002d98 <initSensor+0x118>
  {
    if (i < ucFirstSPAD || ucSPADsEnabled == spad_count)
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	db03      	blt.n	8002d32 <initSensor+0xb2>
 8002d2a:	7dbb      	ldrb	r3, [r7, #22]
 8002d2c:	7ffa      	ldrb	r2, [r7, #31]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11b      	bne.n	8002d6a <initSensor+0xea>
    {
      ref_spad_map[i>>3] &= ~(1<<(i & 7));
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	10db      	asrs	r3, r3, #3
 8002d36:	f107 0220 	add.w	r2, r7, #32
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d40:	b25a      	sxtb	r2, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	2101      	movs	r1, #1
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	10db      	asrs	r3, r3, #3
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f107 0120 	add.w	r1, r7, #32
 8002d62:	440b      	add	r3, r1
 8002d64:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002d68:	e013      	b.n	8002d92 <initSensor+0x112>
    }
    else if (ref_spad_map[i>>3] & (1<< (i & 7)))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	10db      	asrs	r3, r3, #3
 8002d6e:	f107 0220 	add.w	r2, r7, #32
 8002d72:	4413      	add	r3, r2
 8002d74:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	fa42 f303 	asr.w	r3, r2, r3
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <initSensor+0x112>
    {
      ucSPADsEnabled++;
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	77fb      	strb	r3, [r7, #31]
  for (i=0; i<48; i++)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	3301      	adds	r3, #1
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b2f      	cmp	r3, #47	; 0x2f
 8002d9c:	ddc1      	ble.n	8002d22 <initSensor+0xa2>
    }
  } // for i
  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002d9e:	f107 030c 	add.w	r3, r7, #12
 8002da2:	2206      	movs	r2, #6
 8002da4:	4619      	mov	r1, r3
 8002da6:	20b0      	movs	r0, #176	; 0xb0
 8002da8:	f7ff fad0 	bl	800234c <writeMulti>
//printf("final spad map: %02x,%02x,%02x,%02x,%02x,%02x\n", ref_spad_map[0], 
//ref_spad_map[1], ref_spad_map[2], ref_spad_map[3], ref_spad_map[4], ref_spad_map[5]);

// load default tuning settings
  writeRegList(ucDefTuning); // long list of magic numbers
 8002dac:	482d      	ldr	r0, [pc, #180]	; (8002e64 <initSensor+0x1e4>)
 8002dae:	f7ff fb57 	bl	8002460 <writeRegList>

// change some settings for long range mode
  if (bLongRangeMode)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <initSensor+0x150>
  {
	writeReg16(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, 13); // 0.1
 8002db8:	210d      	movs	r1, #13
 8002dba:	2044      	movs	r0, #68	; 0x44
 8002dbc:	f7ff fb12 	bl	80023e4 <writeReg16>
	setVcselPulsePeriod(VcselPeriodPreRange, 18);
 8002dc0:	2112      	movs	r1, #18
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff fcd4 	bl	8002770 <setVcselPulsePeriod>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 8002dc8:	210e      	movs	r1, #14
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7ff fcd0 	bl	8002770 <setVcselPulsePeriod>
  }

// set interrupt configuration to "new sample ready"
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	200a      	movs	r0, #10
 8002dd4:	f7ff fb28 	bl	8002428 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8002dd8:	2084      	movs	r0, #132	; 0x84
 8002dda:	f7ff fa77 	bl	80022cc <readReg>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f023 0310 	bic.w	r3, r3, #16
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	2084      	movs	r0, #132	; 0x84
 8002dea:	f7ff fb1d 	bl	8002428 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002dee:	2101      	movs	r1, #1
 8002df0:	200b      	movs	r0, #11
 8002df2:	f7ff fb19 	bl	8002428 <writeReg>
  measurement_timing_budget_us = getMeasurementTimingBudget();
 8002df6:	f7ff fea9 	bl	8002b4c <getMeasurementTimingBudget>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <initSensor+0x1e8>)
 8002dfe:	6013      	str	r3, [r2, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002e00:	21e8      	movs	r1, #232	; 0xe8
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7ff fb10 	bl	8002428 <writeReg>
  setMeasurementTimingBudget(measurement_timing_budget_us);
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <initSensor+0x1e8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fdff 	bl	8002a10 <setMeasurementTimingBudget>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8002e12:	2101      	movs	r1, #1
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7ff fb07 	bl	8002428 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return 0; }
 8002e1a:	2040      	movs	r0, #64	; 0x40
 8002e1c:	f7ff ff00 	bl	8002c20 <performSingleRefCalibration>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <initSensor+0x1aa>
 8002e26:	2300      	movs	r3, #0
 8002e28:	e010      	b.n	8002e4c <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f7ff fafb 	bl	8002428 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return 0; }
 8002e32:	2000      	movs	r0, #0
 8002e34:	f7ff fef4 	bl	8002c20 <performSingleRefCalibration>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <initSensor+0x1c2>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e004      	b.n	8002e4c <initSensor+0x1cc>
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xe8);
 8002e42:	21e8      	movs	r1, #232	; 0xe8
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff faef 	bl	8002428 <writeReg>
  return 1;
 8002e4a:	2301      	movs	r3, #1
} /* initSensor() */
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000004 	.word	0x20000004
 8002e58:	200002f0 	.word	0x200002f0
 8002e5c:	20000010 	.word	0x20000010
 8002e60:	2000003c 	.word	0x2000003c
 8002e64:	20000048 	.word	0x20000048
 8002e68:	200002f4 	.word	0x200002f4

08002e6c <readRangeContinuousMillimeters>:

uint16_t readRangeContinuousMillimeters(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
int iTimeout = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
uint16_t range;

  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002e76:	e00b      	b.n	8002e90 <readRangeContinuousMillimeters+0x24>
  {
    iTimeout++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);//usleep(5000);
 8002e7e:	2005      	movs	r0, #5
 8002e80:	f000 f912 	bl	80030a8 <HAL_Delay>
    if (iTimeout > 50)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b32      	cmp	r3, #50	; 0x32
 8002e88:	dd02      	ble.n	8002e90 <readRangeContinuousMillimeters+0x24>
    {
      return -1;
 8002e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e8e:	e011      	b.n	8002eb4 <readRangeContinuousMillimeters+0x48>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002e90:	2013      	movs	r0, #19
 8002e92:	f7ff fa1b 	bl	80022cc <readReg>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0eb      	beq.n	8002e78 <readRangeContinuousMillimeters+0xc>
    }
  }

  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  range = readReg16(RESULT_RANGE_STATUS + 10);
 8002ea0:	201e      	movs	r0, #30
 8002ea2:	f7ff f9ed 	bl	8002280 <readReg16>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	807b      	strh	r3, [r7, #2]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	200b      	movs	r0, #11
 8002eae:	f7ff fabb 	bl	8002428 <writeReg>

  return range;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <tofReadDistance>:
//
// Read the current distance in mm
//
int tofReadDistance(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
int iTimeout;

  writeReg(0x80, 0x01);
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	2080      	movs	r0, #128	; 0x80
 8002ec6:	f7ff faaf 	bl	8002428 <writeReg>
  writeReg(0xFF, 0x01);
 8002eca:	2101      	movs	r1, #1
 8002ecc:	20ff      	movs	r0, #255	; 0xff
 8002ece:	f7ff faab 	bl	8002428 <writeReg>
  writeReg(0x00, 0x00);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff faa7 	bl	8002428 <writeReg>
  writeReg(0x91, stop_variable);
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <tofReadDistance+0x88>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2091      	movs	r0, #145	; 0x91
 8002ee2:	f7ff faa1 	bl	8002428 <writeReg>
  writeReg(0x00, 0x01);
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff fa9d 	bl	8002428 <writeReg>
  writeReg(0xFF, 0x00);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	20ff      	movs	r0, #255	; 0xff
 8002ef2:	f7ff fa99 	bl	8002428 <writeReg>
  writeReg(0x80, 0x00);
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	2080      	movs	r0, #128	; 0x80
 8002efa:	f7ff fa95 	bl	8002428 <writeReg>

  writeReg(SYSRANGE_START, 0x01);
 8002efe:	2101      	movs	r1, #1
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7ff fa91 	bl	8002428 <writeReg>

  // "Wait until start bit has been cleared"
  iTimeout = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
  while (readReg(SYSRANGE_START) & 0x01)
 8002f0a:	e00b      	b.n	8002f24 <tofReadDistance+0x68>
  {
    iTimeout++;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	607b      	str	r3, [r7, #4]
    HAL_Delay(5);//usleep(5000);
 8002f12:	2005      	movs	r0, #5
 8002f14:	f000 f8c8 	bl	80030a8 <HAL_Delay>
    if (iTimeout > 50)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b32      	cmp	r3, #50	; 0x32
 8002f1c:	dd02      	ble.n	8002f24 <tofReadDistance+0x68>
    {
      return -1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f22:	e00a      	b.n	8002f3a <tofReadDistance+0x7e>
  while (readReg(SYSRANGE_START) & 0x01)
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7ff f9d1 	bl	80022cc <readReg>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1eb      	bne.n	8002f0c <tofReadDistance+0x50>
    }
  }

  return readRangeContinuousMillimeters();
 8002f34:	f7ff ff9a 	bl	8002e6c <readRangeContinuousMillimeters>
 8002f38:	4603      	mov	r3, r0

} /* tofReadDistance() */
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200002f0 	.word	0x200002f0

08002f48 <tofGetModel>:

int tofGetModel(int *model, int *revision)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
	uint8_t ucTemp, ucAddr;

	if (model)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d019      	beq.n	8002f8c <tofGetModel+0x44>
	{
		ucAddr = REG_IDENTIFICATION_MODEL_ID;
 8002f58:	23c0      	movs	r3, #192	; 0xc0
 8002f5a:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 8002f5c:	f107 020e 	add.w	r2, r7, #14
 8002f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2301      	movs	r3, #1
 8002f68:	2152      	movs	r1, #82	; 0x52
 8002f6a:	4819      	ldr	r0, [pc, #100]	; (8002fd0 <tofGetModel+0x88>)
 8002f6c:	f000 fd16 	bl	800399c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8002f70:	f107 020f 	add.w	r2, r7, #15
 8002f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	2153      	movs	r1, #83	; 0x53
 8002f7e:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <tofGetModel+0x88>)
 8002f80:	f000 fe00 	bl	8003b84 <HAL_I2C_Master_Receive>
		*model = ucTemp;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
	}
	if (revision)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d019      	beq.n	8002fc6 <tofGetModel+0x7e>
	{
		ucAddr = REG_IDENTIFICATION_REVISION_ID;
 8002f92:	23c2      	movs	r3, #194	; 0xc2
 8002f94:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(&hi2c1, ToF_Device_Address, &ucAddr, 1, 1000);
 8002f96:	f107 020e 	add.w	r2, r7, #14
 8002f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	2152      	movs	r1, #82	; 0x52
 8002fa4:	480a      	ldr	r0, [pc, #40]	; (8002fd0 <tofGetModel+0x88>)
 8002fa6:	f000 fcf9 	bl	800399c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, ToF_Device_Address + 1, &ucTemp, 1, 1000);
 8002faa:	f107 020f 	add.w	r2, r7, #15
 8002fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2153      	movs	r1, #83	; 0x53
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <tofGetModel+0x88>)
 8002fba:	f000 fde3 	bl	8003b84 <HAL_I2C_Master_Receive>
		*revision = ucTemp;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
	}
	return 1;
 8002fc6:	2301      	movs	r3, #1

} /* tofGetModel() */
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20001c0c 	.word	0x20001c0c

08002fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800300c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fd8:	f7ff f914 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fde:	e003      	b.n	8002fe8 <LoopCopyDataInit>

08002fe0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fe2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fe4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fe6:	3104      	adds	r1, #4

08002fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fe8:	480a      	ldr	r0, [pc, #40]	; (8003014 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fea:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ff0:	d3f6      	bcc.n	8002fe0 <CopyDataInit>
	ldr	r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ff4:	e002      	b.n	8002ffc <LoopFillZerobss>

08002ff6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ff6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ff8:	f842 3b04 	str.w	r3, [r2], #4

08002ffc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <LoopForever+0x16>)
	cmp	r2, r3
 8002ffe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003000:	d3f9      	bcc.n	8002ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003002:	f006 f9a9 	bl	8009358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003006:	f7fe fce1 	bl	80019cc <main>

0800300a <LoopForever>:

LoopForever:
    b LoopForever
 800300a:	e7fe      	b.n	800300a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003010:	0800c204 	.word	0x0800c204
	ldr	r0, =_sdata
 8003014:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003018:	200002c8 	.word	0x200002c8
	ldr	r2, =_sbss
 800301c:	200002c8 	.word	0x200002c8
	ldr	r3, = _ebss
 8003020:	20001db8 	.word	0x20001db8

08003024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_2_IRQHandler>
	...

08003028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_Init+0x3c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_Init+0x3c>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f000 f903 	bl	800324a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003044:	2000      	movs	r0, #0
 8003046:	f7fe ffa1 	bl	8001f8c <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	e001      	b.n	800305a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003056:	f7fe fec7 	bl	8001de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305a:	79fb      	ldrb	r3, [r7, #7]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x20>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_IncTick+0x24>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4413      	add	r3, r2
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <HAL_IncTick+0x24>)
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	200000f0 	.word	0x200000f0
 800308c:	20001d64 	.word	0x20001d64

08003090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return uwTick;
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_GetTick+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20001d64 	.word	0x20001d64

080030a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b0:	f7ff ffee 	bl	8003090 <HAL_GetTick>
 80030b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c0:	d005      	beq.n	80030ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_Delay+0x44>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ce:	bf00      	nop
 80030d0:	f7ff ffde 	bl	8003090 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d8f7      	bhi.n	80030d0 <HAL_Delay+0x28>
  {
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200000f0 	.word	0x200000f0

080030f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	60d3      	str	r3, [r2, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff4c 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003272:	f7ff ff61 	bl	8003138 <__NVIC_GetPriorityGrouping>
 8003276:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7ff ffb1 	bl	80031e4 <NVIC_EncodePriority>
 8003282:	4602      	mov	r2, r0
 8003284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff80 	bl	8003190 <__NVIC_SetPriority>
}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff54 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032c2:	e17f      	b.n	80035c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8171 	beq.w	80035be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00b      	beq.n	80032fc <HAL_GPIO_Init+0x48>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d007      	beq.n	80032fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032f0:	2b11      	cmp	r3, #17
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d130      	bne.n	800335e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4013      	ands	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003332:	2201      	movs	r2, #1
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	f003 0201 	and.w	r2, r3, #1
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b03      	cmp	r3, #3
 8003368:	d118      	bne.n	800339c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4013      	ands	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x128>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	6939      	ldr	r1, [r7, #16]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80ac 	beq.w	80035be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <HAL_GPIO_Init+0x330>)
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <HAL_GPIO_Init+0x330>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	6613      	str	r3, [r2, #96]	; 0x60
 8003472:	4b5c      	ldr	r3, [pc, #368]	; (80035e4 <HAL_GPIO_Init+0x330>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800347e:	4a5a      	ldr	r2, [pc, #360]	; (80035e8 <HAL_GPIO_Init+0x334>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	220f      	movs	r2, #15
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a8:	d025      	beq.n	80034f6 <HAL_GPIO_Init+0x242>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4f      	ldr	r2, [pc, #316]	; (80035ec <HAL_GPIO_Init+0x338>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <HAL_GPIO_Init+0x23e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4e      	ldr	r2, [pc, #312]	; (80035f0 <HAL_GPIO_Init+0x33c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x23a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4d      	ldr	r2, [pc, #308]	; (80035f4 <HAL_GPIO_Init+0x340>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x236>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4c      	ldr	r2, [pc, #304]	; (80035f8 <HAL_GPIO_Init+0x344>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x232>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_GPIO_Init+0x348>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x22e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_GPIO_Init+0x34c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x22a>
 80034da:	2306      	movs	r3, #6
 80034dc:	e00c      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034de:	2307      	movs	r3, #7
 80034e0:	e00a      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034e2:	2305      	movs	r3, #5
 80034e4:	e008      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034e6:	2304      	movs	r3, #4
 80034e8:	e006      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034ea:	2303      	movs	r3, #3
 80034ec:	e004      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_GPIO_Init+0x244>
 80034f6:	2300      	movs	r3, #0
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	f002 0203 	and.w	r2, r2, #3
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	4093      	lsls	r3, r2
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_GPIO_Init+0x334>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	3302      	adds	r3, #2
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_GPIO_Init+0x350>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800353a:	4a32      	ldr	r2, [pc, #200]	; (8003604 <HAL_GPIO_Init+0x350>)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003540:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_GPIO_Init+0x350>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <HAL_GPIO_Init+0x350>)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_GPIO_Init+0x350>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <HAL_GPIO_Init+0x350>)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_GPIO_Init+0x350>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <HAL_GPIO_Init+0x350>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f47f ae78 	bne.w	80032c4 <HAL_GPIO_Init+0x10>
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40010000 	.word	0x40010000
 80035ec:	48000400 	.word	0x48000400
 80035f0:	48000800 	.word	0x48000800
 80035f4:	48000c00 	.word	0x48000c00
 80035f8:	48001000 	.word	0x48001000
 80035fc:	48001400 	.word	0x48001400
 8003600:	48001800 	.word	0x48001800
 8003604:	40010400 	.word	0x40010400

08003608 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003616:	e0cd      	b.n	80037b4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003618:	2201      	movs	r2, #1
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80c0 	beq.w	80037ae <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800362e:	4a68      	ldr	r2, [pc, #416]	; (80037d0 <HAL_GPIO_DeInit+0x1c8>)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	3302      	adds	r3, #2
 8003636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	220f      	movs	r2, #15
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003656:	d025      	beq.n	80036a4 <HAL_GPIO_DeInit+0x9c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a5e      	ldr	r2, [pc, #376]	; (80037d4 <HAL_GPIO_DeInit+0x1cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01f      	beq.n	80036a0 <HAL_GPIO_DeInit+0x98>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a5d      	ldr	r2, [pc, #372]	; (80037d8 <HAL_GPIO_DeInit+0x1d0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d019      	beq.n	800369c <HAL_GPIO_DeInit+0x94>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_GPIO_DeInit+0x1d4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_GPIO_DeInit+0x90>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_GPIO_DeInit+0x1d8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00d      	beq.n	8003694 <HAL_GPIO_DeInit+0x8c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a5a      	ldr	r2, [pc, #360]	; (80037e4 <HAL_GPIO_DeInit+0x1dc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <HAL_GPIO_DeInit+0x88>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a59      	ldr	r2, [pc, #356]	; (80037e8 <HAL_GPIO_DeInit+0x1e0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_GPIO_DeInit+0x84>
 8003688:	2306      	movs	r3, #6
 800368a:	e00c      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 800368c:	2307      	movs	r3, #7
 800368e:	e00a      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 8003690:	2305      	movs	r3, #5
 8003692:	e008      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 8003694:	2304      	movs	r3, #4
 8003696:	e006      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 8003698:	2303      	movs	r3, #3
 800369a:	e004      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 800369c:	2302      	movs	r3, #2
 800369e:	e002      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_GPIO_DeInit+0x9e>
 80036a4:	2300      	movs	r3, #0
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	f002 0203 	and.w	r2, r2, #3
 80036ac:	0092      	lsls	r2, r2, #2
 80036ae:	4093      	lsls	r3, r2
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d132      	bne.n	800371c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036b6:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	43db      	mvns	r3, r3
 80036be:	494b      	ldr	r1, [pc, #300]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80036c4:	4b49      	ldr	r3, [pc, #292]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	4947      	ldr	r1, [pc, #284]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80036d2:	4b46      	ldr	r3, [pc, #280]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	4944      	ldr	r1, [pc, #272]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036dc:	4013      	ands	r3, r2
 80036de:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	4940      	ldr	r1, [pc, #256]	; (80037ec <HAL_GPIO_DeInit+0x1e4>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	220f      	movs	r2, #15
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <HAL_GPIO_DeInit+0x1c8>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	3302      	adds	r3, #2
 8003706:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43da      	mvns	r2, r3
 800370e:	4830      	ldr	r0, [pc, #192]	; (80037d0 <HAL_GPIO_DeInit+0x1c8>)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	400a      	ands	r2, r1
 8003716:	3302      	adds	r3, #2
 8003718:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2103      	movs	r1, #3
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	08da      	lsrs	r2, r3, #3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3208      	adds	r2, #8
 8003738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	08d2      	lsrs	r2, r2, #3
 8003750:	4019      	ands	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2103      	movs	r1, #3
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	2101      	movs	r1, #1
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2103      	movs	r1, #3
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	2101      	movs	r1, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f af2b 	bne.w	8003618 <HAL_GPIO_DeInit+0x10>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48000c00 	.word	0x48000c00
 80037e0:	48001000 	.word	0x48001000
 80037e4:	48001400 	.word	0x48001400
 80037e8:	48001800 	.word	0x48001800
 80037ec:	40010400 	.word	0x40010400

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
 80037fc:	4613      	mov	r3, r2
 80037fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800380c:	e002      	b.n	8003814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e081      	b.n	8003936 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe faf6 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	; 0x24
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0201 	bic.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e006      	b.n	80038a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d104      	bne.n	80038ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	ea42 0103 	orr.w	r1, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69d9      	ldr	r1, [r3, #28]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e021      	b.n	8003994 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fe faa9 	bl	8001ec0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	461a      	mov	r2, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	817b      	strh	r3, [r7, #10]
 80039ac:	4613      	mov	r3, r2
 80039ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	f040 80da 	bne.w	8003b72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_I2C_Master_Transmit+0x30>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0d3      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039d4:	f7ff fb5c 	bl	8003090 <HAL_GetTick>
 80039d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2319      	movs	r3, #25
 80039e0:	2201      	movs	r2, #1
 80039e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9e6 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0be      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2bff      	cmp	r3, #255	; 0xff
 8003a26:	d90e      	bls.n	8003a46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	8979      	ldrh	r1, [r7, #10]
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_I2C_Master_Transmit+0x1e0>)
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fb48 	bl	80040d4 <I2C_TransferConfig>
 8003a44:	e06c      	b.n	8003b20 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	4b48      	ldr	r3, [pc, #288]	; (8003b7c <HAL_I2C_Master_Transmit+0x1e0>)
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fb37 	bl	80040d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003a66:	e05b      	b.n	8003b20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	6a39      	ldr	r1, [r7, #32]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9e3 	bl	8003e38 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e07b      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d034      	beq.n	8003b20 <HAL_I2C_Master_Transmit+0x184>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d130      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f975 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e04d      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2bff      	cmp	r3, #255	; 0xff
 8003ae0:	d90e      	bls.n	8003b00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22ff      	movs	r2, #255	; 0xff
 8003ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 faeb 	bl	80040d4 <I2C_TransferConfig>
 8003afe:	e00f      	b.n	8003b20 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fada 	bl	80040d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d19e      	bne.n	8003a68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	6a39      	ldr	r1, [r7, #32]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f9c2 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e01a      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2220      	movs	r2, #32
 8003b44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <HAL_I2C_Master_Transmit+0x1e4>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e000      	b.n	8003b74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b72:	2302      	movs	r3, #2
  }
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	80002000 	.word	0x80002000
 8003b80:	fe00e800 	.word	0xfe00e800

08003b84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
 8003b94:	4613      	mov	r3, r2
 8003b96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 80db 	bne.w	8003d5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_I2C_Master_Receive+0x30>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0d4      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bbc:	f7ff fa68 	bl	8003090 <HAL_GetTick>
 8003bc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2319      	movs	r3, #25
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f8f2 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0bf      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2222      	movs	r2, #34	; 0x22
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2210      	movs	r2, #16
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2bff      	cmp	r3, #255	; 0xff
 8003c0e:	d90e      	bls.n	8003c2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	22ff      	movs	r2, #255	; 0xff
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	8979      	ldrh	r1, [r7, #10]
 8003c1e:	4b52      	ldr	r3, [pc, #328]	; (8003d68 <HAL_I2C_Master_Receive+0x1e4>)
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa54 	bl	80040d4 <I2C_TransferConfig>
 8003c2c:	e06d      	b.n	8003d0a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <HAL_I2C_Master_Receive+0x1e4>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fa43 	bl	80040d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003c4e:	e05c      	b.n	8003d0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	6a39      	ldr	r1, [r7, #32]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f96b 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e07c      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d034      	beq.n	8003d0a <HAL_I2C_Master_Receive+0x186>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d130      	bne.n	8003d0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f880 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e04d      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2bff      	cmp	r3, #255	; 0xff
 8003cca:	d90e      	bls.n	8003cea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	22ff      	movs	r2, #255	; 0xff
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	8979      	ldrh	r1, [r7, #10]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f9f6 	bl	80040d4 <I2C_TransferConfig>
 8003ce8:	e00f      	b.n	8003d0a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f9e5 	bl	80040d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d19d      	bne.n	8003c50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	6a39      	ldr	r1, [r7, #32]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f8cd 	bl	8003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e01a      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_I2C_Master_Receive+0x1e8>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	80002400 	.word	0x80002400
 8003d6c:	fe00e800 	.word	0xfe00e800

08003d70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d103      	bne.n	8003d8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d007      	beq.n	8003dac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	619a      	str	r2, [r3, #24]
  }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	e022      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd0:	d01e      	beq.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7ff f95d 	bl	8003090 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e00f      	b.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d0cd      	beq.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e44:	e02c      	b.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f8dc 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e02a      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e60:	d01e      	beq.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7ff f915 	bl	8003090 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d113      	bne.n	8003ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d1cb      	bne.n	8003e46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ec4:	e028      	b.n	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f89c 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e026      	b.n	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7ff f8d9 	bl	8003090 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d113      	bne.n	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d1cf      	bne.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3c:	e055      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f860 	bl	8004008 <I2C_IsAcknowledgeFailed>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e053      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d129      	bne.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d105      	bne.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e03f      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003f8e:	400b      	ands	r3, r1
 8003f90:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e022      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7ff f86c 	bl	8003090 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0220 	orr.w	r2, r3, #32
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e007      	b.n	8003ffa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d1a2      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b10      	cmp	r3, #16
 8004020:	d151      	bne.n	80040c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004022:	e022      	b.n	800406a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402a:	d01e      	beq.n	800406a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7ff f830 	bl	8003090 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <I2C_IsAcknowledgeFailed+0x3a>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d113      	bne.n	800406a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e02e      	b.n	80040c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d1d5      	bne.n	8004024 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2210      	movs	r2, #16
 800407e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2220      	movs	r2, #32
 8004086:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fe71 	bl	8003d70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800409a:	400b      	ands	r3, r1
 800409c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	817b      	strh	r3, [r7, #10]
 80040e2:	4613      	mov	r3, r2
 80040e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	0d5b      	lsrs	r3, r3, #21
 80040f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <I2C_TransferConfig+0x58>)
 80040f6:	430b      	orrs	r3, r1
 80040f8:	43db      	mvns	r3, r3
 80040fa:	ea02 0103 	and.w	r1, r2, r3
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004104:	7a7b      	ldrb	r3, [r7, #9]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	03ff63ff 	.word	0x03ff63ff

08004130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d138      	bne.n	80041b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e032      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2224      	movs	r2, #36	; 0x24
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d139      	bne.n	8004250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e033      	b.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2224      	movs	r2, #36	; 0x24
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0201 	bic.w	r2, r2, #1
 8004208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_PWREx_GetVoltageRange+0x18>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000

0800427c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d130      	bne.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004298:	d038      	beq.n	800430c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a2:	4a1e      	ldr	r2, [pc, #120]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2232      	movs	r2, #50	; 0x32
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0c9b      	lsrs	r3, r3, #18
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c0:	e002      	b.n	80042c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d102      	bne.n	80042dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f2      	bne.n	80042c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d110      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d007      	beq.n	800430c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042fc:	4b07      	ldr	r3, [pc, #28]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004304:	4a05      	ldr	r2, [pc, #20]	; (800431c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800430a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40007000 	.word	0x40007000
 8004320:	20000000 	.word	0x20000000
 8004324:	431bde83 	.word	0x431bde83

08004328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e3d4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433a:	4ba1      	ldr	r3, [pc, #644]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004344:	4b9e      	ldr	r3, [pc, #632]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80e4 	beq.w	8004524 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_RCC_OscConfig+0x4a>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	f040 808b 	bne.w	8004480 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 8087 	bne.w	8004480 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004372:	4b93      	ldr	r3, [pc, #588]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x62>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e3ac      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	4b8c      	ldr	r3, [pc, #560]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCC_OscConfig+0x7c>
 800439a:	4b89      	ldr	r3, [pc, #548]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043a2:	e005      	b.n	80043b0 <HAL_RCC_OscConfig+0x88>
 80043a4:	4b86      	ldr	r3, [pc, #536]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d223      	bcs.n	80043fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fd73 	bl	8004ea4 <RCC_SetFlashLatencyFromMSIRange>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e38d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c8:	4b7d      	ldr	r3, [pc, #500]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a7c      	ldr	r2, [pc, #496]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043ce:	f043 0308 	orr.w	r3, r3, #8
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b7a      	ldr	r3, [pc, #488]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4977      	ldr	r1, [pc, #476]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e6:	4b76      	ldr	r3, [pc, #472]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	4972      	ldr	r1, [pc, #456]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
 80043fa:	e025      	b.n	8004448 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fc:	4b70      	ldr	r3, [pc, #448]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6f      	ldr	r2, [pc, #444]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004402:	f043 0308 	orr.w	r3, r3, #8
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	496a      	ldr	r1, [pc, #424]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800441a:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	4965      	ldr	r1, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fd33 	bl	8004ea4 <RCC_SetFlashLatencyFromMSIRange>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e34d      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004448:	f000 fc36 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	495a      	ldr	r1, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x29c>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a58      	ldr	r2, [pc, #352]	; (80045c8 <HAL_RCC_OscConfig+0x2a0>)
 8004466:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004468:	4b58      	ldr	r3, [pc, #352]	; (80045cc <HAL_RCC_OscConfig+0x2a4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd fd8d 	bl	8001f8c <HAL_InitTick>
 8004472:	4603      	mov	r3, r0
 8004474:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d052      	beq.n	8004522 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	e331      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d032      	beq.n	80044ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004488:	4b4d      	ldr	r3, [pc, #308]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004494:	f7fe fdfc 	bl	8003090 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800449c:	f7fe fdf8 	bl	8003090 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e31a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044ba:	4b41      	ldr	r3, [pc, #260]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a40      	ldr	r2, [pc, #256]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044c0:	f043 0308 	orr.w	r3, r3, #8
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b3e      	ldr	r3, [pc, #248]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	493b      	ldr	r1, [pc, #236]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044d8:	4b39      	ldr	r3, [pc, #228]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	4936      	ldr	r1, [pc, #216]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]
 80044ec:	e01a      	b.n	8004524 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ee:	4b34      	ldr	r3, [pc, #208]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a33      	ldr	r2, [pc, #204]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044fa:	f7fe fdc9 	bl	8003090 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004502:	f7fe fdc5 	bl	8003090 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e2e7      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004514:	4b2a      	ldr	r3, [pc, #168]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x1da>
 8004520:	e000      	b.n	8004524 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004522:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d074      	beq.n	800461a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b08      	cmp	r3, #8
 8004534:	d005      	beq.n	8004542 <HAL_RCC_OscConfig+0x21a>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d10e      	bne.n	800455a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d10b      	bne.n	800455a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d064      	beq.n	8004618 <HAL_RCC_OscConfig+0x2f0>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d160      	bne.n	8004618 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e2c4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004562:	d106      	bne.n	8004572 <HAL_RCC_OscConfig+0x24a>
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800456a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	e01d      	b.n	80045ae <HAL_RCC_OscConfig+0x286>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457a:	d10c      	bne.n	8004596 <HAL_RCC_OscConfig+0x26e>
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800458e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e00b      	b.n	80045ae <HAL_RCC_OscConfig+0x286>
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 800459c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <HAL_RCC_OscConfig+0x298>)
 80045a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01c      	beq.n	80045f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fe fd6b 	bl	8003090 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045bc:	e011      	b.n	80045e2 <HAL_RCC_OscConfig+0x2ba>
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800bdc8 	.word	0x0800bdc8
 80045c8:	20000000 	.word	0x20000000
 80045cc:	200000ec 	.word	0x200000ec
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fe fd5e 	bl	8003090 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e280      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045e2:	4baf      	ldr	r3, [pc, #700]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x2a8>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fd4e 	bl	8003090 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fe fd4a 	bl	8003090 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e26c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800460a:	4ba5      	ldr	r3, [pc, #660]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2d0>
 8004616:	e000      	b.n	800461a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d060      	beq.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x310>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b0c      	cmp	r3, #12
 8004630:	d119      	bne.n	8004666 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d116      	bne.n	8004666 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004638:	4b99      	ldr	r3, [pc, #612]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_OscConfig+0x328>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e249      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004650:	4b93      	ldr	r3, [pc, #588]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	4990      	ldr	r1, [pc, #576]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004660:	4313      	orrs	r3, r2
 8004662:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004664:	e040      	b.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d023      	beq.n	80046b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800466e:	4b8c      	ldr	r3, [pc, #560]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a8b      	ldr	r2, [pc, #556]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fe fd09 	bl	8003090 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004682:	f7fe fd05 	bl	8003090 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e227      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004694:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b7f      	ldr	r3, [pc, #508]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	061b      	lsls	r3, r3, #24
 80046ae:	497c      	ldr	r1, [pc, #496]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	e018      	b.n	80046e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a79      	ldr	r2, [pc, #484]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fe fce5 	bl	8003090 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fe fce1 	bl	8003090 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e203      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046dc:	4b70      	ldr	r3, [pc, #448]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d03c      	beq.n	800476e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01c      	beq.n	8004736 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fc:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	4a67      	ldr	r2, [pc, #412]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fe fcc0 	bl	8003090 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004714:	f7fe fcbc 	bl	8003090 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e1de      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004726:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0ef      	beq.n	8004714 <HAL_RCC_OscConfig+0x3ec>
 8004734:	e01b      	b.n	800476e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004736:	4b5a      	ldr	r3, [pc, #360]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473c:	4a58      	ldr	r2, [pc, #352]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004746:	f7fe fca3 	bl	8003090 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474e:	f7fe fc9f 	bl	8003090 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e1c1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004760:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ef      	bne.n	800474e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80a6 	beq.w	80048c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477c:	2300      	movs	r3, #0
 800477e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004780:	4b47      	ldr	r3, [pc, #284]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	6593      	str	r3, [r2, #88]	; 0x58
 8004798:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a8:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <HAL_RCC_OscConfig+0x57c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d118      	bne.n	80047e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <HAL_RCC_OscConfig+0x57c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_RCC_OscConfig+0x57c>)
 80047ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c0:	f7fe fc66 	bl	8003090 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c8:	f7fe fc62 	bl	8003090 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e184      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047da:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_RCC_OscConfig+0x57c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d108      	bne.n	8004800 <HAL_RCC_OscConfig+0x4d8>
 80047ee:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047fe:	e024      	b.n	800484a <HAL_RCC_OscConfig+0x522>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d110      	bne.n	800482a <HAL_RCC_OscConfig+0x502>
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004818:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004828:	e00f      	b.n	800484a <HAL_RCC_OscConfig+0x522>
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	4a1b      	ldr	r2, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800483a:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	4a17      	ldr	r2, [pc, #92]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004842:	f023 0304 	bic.w	r3, r3, #4
 8004846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fe fc1d 	bl	8003090 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe fc19 	bl	8003090 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e139      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_OscConfig+0x578>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ed      	beq.n	800485a <HAL_RCC_OscConfig+0x532>
 800487e:	e01a      	b.n	80048b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fe fc06 	bl	8003090 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004886:	e00f      	b.n	80048a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fe fc02 	bl	8003090 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d906      	bls.n	80048a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e122      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048a8:	4b90      	ldr	r3, [pc, #576]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e8      	bne.n	8004888 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048bc:	4b8b      	ldr	r3, [pc, #556]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4a8a      	ldr	r2, [pc, #552]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80048c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8108 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	f040 80d0 	bne.w	8004a7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048dc:	4b83      	ldr	r3, [pc, #524]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d130      	bne.n	8004952 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	3b01      	subs	r3, #1
 80048fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d127      	bne.n	8004952 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11f      	bne.n	8004952 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800491c:	2a07      	cmp	r2, #7
 800491e:	bf14      	ite	ne
 8004920:	2201      	movne	r2, #1
 8004922:	2200      	moveq	r2, #0
 8004924:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004926:	4293      	cmp	r3, r2
 8004928:	d113      	bne.n	8004952 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	3b01      	subs	r3, #1
 8004938:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d109      	bne.n	8004952 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494e:	429a      	cmp	r2, r3
 8004950:	d06e      	beq.n	8004a30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b0c      	cmp	r3, #12
 8004956:	d069      	beq.n	8004a2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0b7      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004974:	4b5d      	ldr	r3, [pc, #372]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5c      	ldr	r2, [pc, #368]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004980:	f7fe fb86 	bl	8003090 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe fb82 	bl	8003090 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0a4      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499a:	4b54      	ldr	r3, [pc, #336]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a6:	4b51      	ldr	r3, [pc, #324]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <HAL_RCC_OscConfig+0x7c8>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049b6:	3a01      	subs	r2, #1
 80049b8:	0112      	lsls	r2, r2, #4
 80049ba:	4311      	orrs	r1, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049c0:	0212      	lsls	r2, r2, #8
 80049c2:	4311      	orrs	r1, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049c8:	0852      	lsrs	r2, r2, #1
 80049ca:	3a01      	subs	r2, #1
 80049cc:	0552      	lsls	r2, r2, #21
 80049ce:	4311      	orrs	r1, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049d4:	0852      	lsrs	r2, r2, #1
 80049d6:	3a01      	subs	r2, #1
 80049d8:	0652      	lsls	r2, r2, #25
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049e0:	0912      	lsrs	r2, r2, #4
 80049e2:	0452      	lsls	r2, r2, #17
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4941      	ldr	r1, [pc, #260]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3e      	ldr	r2, [pc, #248]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049f8:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a3b      	ldr	r2, [pc, #236]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a04:	f7fe fb44 	bl	8003090 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe fb40 	bl	8003090 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e062      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	4b33      	ldr	r3, [pc, #204]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a2a:	e05a      	b.n	8004ae2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e059      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d152      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a48:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a27      	ldr	r2, [pc, #156]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a54:	f7fe fb1c 	bl	8003090 <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe fb18 	bl	8003090 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e03a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	4b1f      	ldr	r3, [pc, #124]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x734>
 8004a7a:	e032      	b.n	8004ae2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d02d      	beq.n	8004ade <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a9a:	4b14      	ldr	r3, [pc, #80]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004aa0:	f023 0303 	bic.w	r3, r3, #3
 8004aa4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004aac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab6:	f7fe faeb 	bl	8003090 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abe:	f7fe fae7 	bl	8003090 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e009      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_RCC_OscConfig+0x7c4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCC_OscConfig+0x796>
 8004adc:	e001      	b.n	8004ae2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	f99d808c 	.word	0xf99d808c

08004af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0c8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4961      	ldr	r1, [pc, #388]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b0      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d04c      	beq.n	8004bde <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4c:	4b56      	ldr	r3, [pc, #344]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d121      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e09e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d107      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d115      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e092      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b7c:	4b4a      	ldr	r3, [pc, #296]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e086      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b8c:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e07e      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 0203 	bic.w	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bae:	f7fe fa6f 	bl	8003090 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb6:	f7fe fa6b 	bl	8003090 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e066      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bcc:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 020c 	and.w	r2, r3, #12
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d1eb      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	492c      	ldr	r1, [pc, #176]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d210      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 0207 	bic.w	r2, r3, #7
 8004c12:	4924      	ldr	r1, [pc, #144]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e036      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4918      	ldr	r1, [pc, #96]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4910      	ldr	r1, [pc, #64]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c6a:	f000 f825 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	490c      	ldr	r1, [pc, #48]	; (8004cac <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	5ccb      	ldrb	r3, [r1, r3]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f97c 	bl	8001f8c <HAL_InitTick>
 8004c94:	4603      	mov	r3, r0
 8004c96:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c98:	7afb      	ldrb	r3, [r7, #11]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40022000 	.word	0x40022000
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800bdc8 	.word	0x0800bdc8
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	200000ec 	.word	0x200000ec

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cd0:	4b3b      	ldr	r3, [pc, #236]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b0c      	cmp	r3, #12
 8004ce4:	d121      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d11e      	bne.n	8004d2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e005      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d08:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d14:	4a2b      	ldr	r2, [pc, #172]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	e004      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d134      	bne.n	8004db0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d46:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0xac>
 8004d5c:	e005      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d60:	617b      	str	r3, [r7, #20]
      break;
 8004d62:	e005      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_GetSysClockFreq+0x114>)
 8004d66:	617b      	str	r3, [r7, #20]
      break;
 8004d68:	e002      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	617b      	str	r3, [r7, #20]
      break;
 8004d6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	fb02 f203 	mul.w	r2, r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	0e5b      	lsrs	r3, r3, #25
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	3301      	adds	r3, #1
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004db0:	69bb      	ldr	r3, [r7, #24]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3724      	adds	r7, #36	; 0x24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	0800bde0 	.word	0x0800bde0
 8004dc8:	00f42400 	.word	0x00f42400
 8004dcc:	007a1200 	.word	0x007a1200

08004dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	; (8004de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20000000 	.word	0x20000000

08004de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dec:	f7ff fff0 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	4904      	ldr	r1, [pc, #16]	; (8004e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dfe:	5ccb      	ldrb	r3, [r1, r3]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	0800bdd8 	.word	0x0800bdd8

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e18:	f7ff ffda 	bl	8004dd0 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0adb      	lsrs	r3, r3, #11
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4904      	ldr	r1, [pc, #16]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	0800bdd8 	.word	0x0800bdd8

08004e40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	220f      	movs	r2, #15
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f003 0203 	and.w	r2, r3, #3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e68:	4b0c      	ldr	r3, [pc, #48]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e74:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_GetClockConfig+0x5c>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <HAL_RCC_GetClockConfig+0x60>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0207 	and.w	r2, r3, #7
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40022000 	.word	0x40022000

08004ea4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ebc:	f7ff f9d0 	bl	8004260 <HAL_PWREx_GetVoltageRange>
 8004ec0:	6178      	str	r0, [r7, #20]
 8004ec2:	e014      	b.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6593      	str	r3, [r2, #88]	; 0x58
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004edc:	f7ff f9c0 	bl	8004260 <HAL_PWREx_GetVoltageRange>
 8004ee0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef4:	d10b      	bne.n	8004f0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d919      	bls.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2ba0      	cmp	r3, #160	; 0xa0
 8004f00:	d902      	bls.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f02:	2302      	movs	r3, #2
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	e013      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f08:	2301      	movs	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	e010      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d902      	bls.n	8004f1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f14:	2303      	movs	r3, #3
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	e00a      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	d102      	bne.n	8004f26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f20:	2302      	movs	r3, #2
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	e004      	b.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b70      	cmp	r3, #112	; 0x70
 8004f2a:	d101      	bne.n	8004f30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 0207 	bic.w	r2, r3, #7
 8004f38:	4909      	ldr	r1, [pc, #36]	; (8004f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d001      	beq.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40022000 	.word	0x40022000

08004f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f70:	2300      	movs	r3, #0
 8004f72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d041      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f88:	d02a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f8e:	d824      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f9a:	d81e      	bhi.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa4:	d010      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fa6:	e018      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fa8:	4b86      	ldr	r3, [pc, #536]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	4a85      	ldr	r2, [pc, #532]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fb4:	e015      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fabb 	bl	8005538 <RCCEx_PLLSAI1_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fc6:	e00c      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3320      	adds	r3, #32
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fba6 	bl	8005720 <RCCEx_PLLSAI2_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd8:	e003      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	74fb      	strb	r3, [r7, #19]
      break;
 8004fde:	e000      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fe8:	4b76      	ldr	r3, [pc, #472]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ff6:	4973      	ldr	r1, [pc, #460]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d041      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005014:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005018:	d02a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800501a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800501e:	d824      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005020:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005024:	d008      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800502a:	d81e      	bhi.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005034:	d010      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005036:	e018      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005038:	4b62      	ldr	r3, [pc, #392]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005044:	e015      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fa73 	bl	8005538 <RCCEx_PLLSAI1_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005056:	e00c      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3320      	adds	r3, #32
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fb5e 	bl	8005720 <RCCEx_PLLSAI2_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	74fb      	strb	r3, [r7, #19]
      break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005072:	7cfb      	ldrb	r3, [r7, #19]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005078:	4b52      	ldr	r3, [pc, #328]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005086:	494f      	ldr	r1, [pc, #316]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800508e:	e001      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80a0 	beq.w	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050a6:	4b47      	ldr	r3, [pc, #284]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050b6:	2300      	movs	r3, #0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c6:	6593      	str	r3, [r2, #88]	; 0x58
 80050c8:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d4:	2301      	movs	r3, #1
 80050d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d8:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050e4:	f7fd ffd4 	bl	8003090 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050ea:	e009      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ec:	f7fd ffd0 	bl	8003090 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d902      	bls.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	74fb      	strb	r3, [r7, #19]
        break;
 80050fe:	e005      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0ef      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d15c      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005112:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01f      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	429a      	cmp	r2, r3
 800512e:	d019      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800513c:	4b21      	ldr	r3, [pc, #132]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800515c:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516e:	f7fd ff8f 	bl	8003090 <HAL_GetTick>
 8005172:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005174:	e00b      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fd ff8b 	bl	8003090 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d902      	bls.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	74fb      	strb	r3, [r7, #19]
            break;
 800518c:	e006      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ec      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10c      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051ba:	e009      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	74bb      	strb	r3, [r7, #18]
 80051c0:	e006      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d0:	7c7b      	ldrb	r3, [r7, #17]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	4b9e      	ldr	r3, [pc, #632]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	4a9d      	ldr	r2, [pc, #628]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ee:	4b98      	ldr	r3, [pc, #608]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	4994      	ldr	r1, [pc, #592]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005210:	4b8f      	ldr	r3, [pc, #572]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f023 020c 	bic.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	498c      	ldr	r1, [pc, #560]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005232:	4b87      	ldr	r3, [pc, #540]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	4983      	ldr	r1, [pc, #524]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005254:	4b7e      	ldr	r3, [pc, #504]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	497b      	ldr	r1, [pc, #492]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005276:	4b76      	ldr	r3, [pc, #472]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	4972      	ldr	r1, [pc, #456]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0320 	and.w	r3, r3, #32
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005298:	4b6d      	ldr	r3, [pc, #436]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	496a      	ldr	r1, [pc, #424]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052ba:	4b65      	ldr	r3, [pc, #404]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	4961      	ldr	r1, [pc, #388]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052dc:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ea:	4959      	ldr	r1, [pc, #356]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052fe:	4b54      	ldr	r3, [pc, #336]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530c:	4950      	ldr	r1, [pc, #320]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005320:	4b4b      	ldr	r3, [pc, #300]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	4948      	ldr	r1, [pc, #288]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005350:	493f      	ldr	r1, [pc, #252]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d028      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005364:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	4937      	ldr	r1, [pc, #220]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005382:	d106      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005384:	4b32      	ldr	r3, [pc, #200]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a31      	ldr	r2, [pc, #196]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800538e:	60d3      	str	r3, [r2, #12]
 8005390:	e011      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800539a:	d10c      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	2101      	movs	r1, #1
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f8c8 	bl	8005538 <RCCEx_PLLSAI1_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d028      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	491f      	ldr	r1, [pc, #124]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e0:	d106      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053e2:	4b1b      	ldr	r3, [pc, #108]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ec:	60d3      	str	r3, [r2, #12]
 80053ee:	e011      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f8:	d10c      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f899 	bl	8005538 <RCCEx_PLLSAI1_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800540a:	7cfb      	ldrb	r3, [r7, #19]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005410:	7cfb      	ldrb	r3, [r7, #19]
 8005412:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02b      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542e:	4908      	ldr	r1, [pc, #32]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800543a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543e:	d109      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005440:	4b03      	ldr	r3, [pc, #12]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	4a02      	ldr	r2, [pc, #8]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544a:	60d3      	str	r3, [r2, #12]
 800544c:	e014      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800545c:	d10c      	bne.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	2101      	movs	r1, #1
 8005464:	4618      	mov	r0, r3
 8005466:	f000 f867 	bl	8005538 <RCCEx_PLLSAI1_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800546e:	7cfb      	ldrb	r3, [r7, #19]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005492:	4928      	ldr	r1, [pc, #160]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2102      	movs	r1, #2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f844 	bl	8005538 <RCCEx_PLLSAI1_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d014      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	74bb      	strb	r3, [r7, #18]
 80054be:	e011      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3320      	adds	r3, #32
 80054ce:	2102      	movs	r1, #2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f925 	bl	8005720 <RCCEx_PLLSAI2_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054fe:	490d      	ldr	r1, [pc, #52]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005522:	4904      	ldr	r1, [pc, #16]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800552a:	7cbb      	ldrb	r3, [r7, #18]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40021000 	.word	0x40021000

08005538 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005546:	4b75      	ldr	r3, [pc, #468]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d018      	beq.n	8005584 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005552:	4b72      	ldr	r3, [pc, #456]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f003 0203 	and.w	r2, r3, #3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d10d      	bne.n	800557e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
       ||
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800556a:	4b6c      	ldr	r3, [pc, #432]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
       ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d047      	beq.n	800560e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e044      	b.n	800560e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d018      	beq.n	80055be <RCCEx_PLLSAI1_Config+0x86>
 800558c:	2b03      	cmp	r3, #3
 800558e:	d825      	bhi.n	80055dc <RCCEx_PLLSAI1_Config+0xa4>
 8005590:	2b01      	cmp	r3, #1
 8005592:	d002      	beq.n	800559a <RCCEx_PLLSAI1_Config+0x62>
 8005594:	2b02      	cmp	r3, #2
 8005596:	d009      	beq.n	80055ac <RCCEx_PLLSAI1_Config+0x74>
 8005598:	e020      	b.n	80055dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800559a:	4b60      	ldr	r3, [pc, #384]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d11d      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055aa:	e01a      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055ac:	4b5b      	ldr	r3, [pc, #364]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d116      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055bc:	e013      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055be:	4b57      	ldr	r3, [pc, #348]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10f      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ca:	4b54      	ldr	r3, [pc, #336]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055da:	e006      	b.n	80055ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	73fb      	strb	r3, [r7, #15]
      break;
 80055e0:	e004      	b.n	80055ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e002      	b.n	80055ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10d      	bne.n	800560e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055f2:	4b4a      	ldr	r3, [pc, #296]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	430b      	orrs	r3, r1
 8005608:	4944      	ldr	r1, [pc, #272]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800560a:	4313      	orrs	r3, r2
 800560c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d17d      	bne.n	8005710 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a40      	ldr	r2, [pc, #256]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800561e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fd fd36 	bl	8003090 <HAL_GetTick>
 8005624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005626:	e009      	b.n	800563c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005628:	f7fd fd32 	bl	8003090 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d902      	bls.n	800563c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	73fb      	strb	r3, [r7, #15]
        break;
 800563a:	e005      	b.n	8005648 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800563c:	4b37      	ldr	r3, [pc, #220]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ef      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d160      	bne.n	8005710 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d111      	bne.n	8005678 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005654:	4b31      	ldr	r3, [pc, #196]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800565c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	6892      	ldr	r2, [r2, #8]
 8005664:	0211      	lsls	r1, r2, #8
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	0912      	lsrs	r2, r2, #4
 800566c:	0452      	lsls	r2, r2, #17
 800566e:	430a      	orrs	r2, r1
 8005670:	492a      	ldr	r1, [pc, #168]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]
 8005676:	e027      	b.n	80056c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d112      	bne.n	80056a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800567e:	4b27      	ldr	r3, [pc, #156]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6892      	ldr	r2, [r2, #8]
 800568e:	0211      	lsls	r1, r2, #8
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6912      	ldr	r2, [r2, #16]
 8005694:	0852      	lsrs	r2, r2, #1
 8005696:	3a01      	subs	r2, #1
 8005698:	0552      	lsls	r2, r2, #21
 800569a:	430a      	orrs	r2, r1
 800569c:	491f      	ldr	r1, [pc, #124]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	610b      	str	r3, [r1, #16]
 80056a2:	e011      	b.n	80056c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a4:	4b1d      	ldr	r3, [pc, #116]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6892      	ldr	r2, [r2, #8]
 80056b4:	0211      	lsls	r1, r2, #8
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6952      	ldr	r2, [r2, #20]
 80056ba:	0852      	lsrs	r2, r2, #1
 80056bc:	3a01      	subs	r2, #1
 80056be:	0652      	lsls	r2, r2, #25
 80056c0:	430a      	orrs	r2, r1
 80056c2:	4916      	ldr	r1, [pc, #88]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056c8:	4b14      	ldr	r3, [pc, #80]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a13      	ldr	r2, [pc, #76]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd fcdc 	bl	8003090 <HAL_GetTick>
 80056d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056da:	e009      	b.n	80056f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056dc:	f7fd fcd8 	bl	8003090 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d902      	bls.n	80056f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	73fb      	strb	r3, [r7, #15]
          break;
 80056ee:	e005      	b.n	80056fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f0:	4b0a      	ldr	r3, [pc, #40]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005702:	4b06      	ldr	r3, [pc, #24]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	4904      	ldr	r1, [pc, #16]	; (800571c <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	4313      	orrs	r3, r2
 800570e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000

08005720 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800572e:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d018      	beq.n	800576c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800573a:	4b67      	ldr	r3, [pc, #412]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0203 	and.w	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d10d      	bne.n	8005766 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
       ||
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005752:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
       ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d047      	beq.n	80057f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
 800576a:	e044      	b.n	80057f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d018      	beq.n	80057a6 <RCCEx_PLLSAI2_Config+0x86>
 8005774:	2b03      	cmp	r3, #3
 8005776:	d825      	bhi.n	80057c4 <RCCEx_PLLSAI2_Config+0xa4>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d002      	beq.n	8005782 <RCCEx_PLLSAI2_Config+0x62>
 800577c:	2b02      	cmp	r3, #2
 800577e:	d009      	beq.n	8005794 <RCCEx_PLLSAI2_Config+0x74>
 8005780:	e020      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005782:	4b55      	ldr	r3, [pc, #340]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11d      	bne.n	80057ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005792:	e01a      	b.n	80057ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005794:	4b50      	ldr	r3, [pc, #320]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800579c:	2b00      	cmp	r3, #0
 800579e:	d116      	bne.n	80057ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a4:	e013      	b.n	80057ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057a6:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057b2:	4b49      	ldr	r3, [pc, #292]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d109      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057c2:	e006      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e004      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ca:	bf00      	nop
 80057cc:	e002      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057ce:	bf00      	nop
 80057d0:	e000      	b.n	80057d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10d      	bne.n	80057f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057da:	4b3f      	ldr	r3, [pc, #252]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	430b      	orrs	r3, r1
 80057f0:	4939      	ldr	r1, [pc, #228]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d167      	bne.n	80058cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057fc:	4b36      	ldr	r3, [pc, #216]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005808:	f7fd fc42 	bl	8003090 <HAL_GetTick>
 800580c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800580e:	e009      	b.n	8005824 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005810:	f7fd fc3e 	bl	8003090 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d902      	bls.n	8005824 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	73fb      	strb	r3, [r7, #15]
        break;
 8005822:	e005      	b.n	8005830 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005824:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1ef      	bne.n	8005810 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d14a      	bne.n	80058cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d111      	bne.n	8005860 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6892      	ldr	r2, [r2, #8]
 800584c:	0211      	lsls	r1, r2, #8
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	0912      	lsrs	r2, r2, #4
 8005854:	0452      	lsls	r2, r2, #17
 8005856:	430a      	orrs	r2, r1
 8005858:	491f      	ldr	r1, [pc, #124]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585a:	4313      	orrs	r3, r2
 800585c:	614b      	str	r3, [r1, #20]
 800585e:	e011      	b.n	8005884 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005860:	4b1d      	ldr	r3, [pc, #116]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6892      	ldr	r2, [r2, #8]
 8005870:	0211      	lsls	r1, r2, #8
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6912      	ldr	r2, [r2, #16]
 8005876:	0852      	lsrs	r2, r2, #1
 8005878:	3a01      	subs	r2, #1
 800587a:	0652      	lsls	r2, r2, #25
 800587c:	430a      	orrs	r2, r1
 800587e:	4916      	ldr	r1, [pc, #88]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fd fbfe 	bl	8003090 <HAL_GetTick>
 8005894:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005896:	e009      	b.n	80058ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005898:	f7fd fbfa 	bl	8003090 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	73fb      	strb	r3, [r7, #15]
          break;
 80058aa:	e005      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ac:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ef      	beq.n	8005898 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	4904      	ldr	r1, [pc, #16]	; (80058d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40021000 	.word	0x40021000

080058dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e049      	b.n	8005982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d106      	bne.n	8005908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f841 	bl	800598a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f000 f9f8 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d001      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e04f      	b.n	8005a58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a23      	ldr	r2, [pc, #140]	; (8005a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01d      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d018      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d013      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d004      	beq.n	8005a16 <HAL_TIM_Base_Start_IT+0x76>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d115      	bne.n	8005a42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b06      	cmp	r3, #6
 8005a26:	d015      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0xb4>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2e:	d011      	beq.n	8005a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a40:	e008      	b.n	8005a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0201 	orr.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e000      	b.n	8005a56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0202 	mvn.w	r2, #2
 8005aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f905 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f7 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f908 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8db 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8cd 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8de 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0208 	mvn.w	r2, #8
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8b1 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8a3 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8b4 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2208      	movs	r2, #8
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f887 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f879 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f88a 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0201 	mvn.w	r2, #1
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fc f8da 	bl	8001db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d10e      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d107      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f914 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f907 	bl	8005e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10e      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f838 	bl	8005cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d10e      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0220 	mvn.w	r2, #32
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8c7 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3c      	ldr	r2, [pc, #240]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a11      	ldr	r2, [pc, #68]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e040      	b.n	8005f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc f830 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8c0 	bl	8006044 <UART_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e022      	b.n	8005f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fb3e 	bl	8006558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbc5 	bl	800669c <UART_CheckIdleState>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	f040 8082 	bne.w	800603a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit+0x26>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e07a      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x38>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e073      	b.n	800603c <HAL_UART_Transmit+0x120>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2221      	movs	r2, #33	; 0x21
 8005f68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6a:	f7fd f891 	bl	8003090 <HAL_GetTick>
 8005f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	88fa      	ldrh	r2, [r7, #6]
 8005f74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fac:	e02d      	b.n	800600a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fbb8 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e039      	b.n	800603c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881a      	ldrh	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e008      	b.n	8005ff8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1cb      	bne.n	8005fae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2140      	movs	r1, #64	; 0x40
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fb84 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e005      	b.n	800603c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800603a:	2302      	movs	r3, #2
  }
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	b5b0      	push	{r4, r5, r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4313      	orrs	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4bad      	ldr	r3, [pc, #692]	; (8006324 <UART_SetConfig+0x2e0>)
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	69f9      	ldr	r1, [r7, #28]
 8006078:	430b      	orrs	r3, r1
 800607a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4aa2      	ldr	r2, [pc, #648]	; (8006328 <UART_SetConfig+0x2e4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a99      	ldr	r2, [pc, #612]	; (800632c <UART_SetConfig+0x2e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d121      	bne.n	800610e <UART_SetConfig+0xca>
 80060ca:	4b99      	ldr	r3, [pc, #612]	; (8006330 <UART_SetConfig+0x2ec>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d817      	bhi.n	8006108 <UART_SetConfig+0xc4>
 80060d8:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x9c>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	080060f7 	.word	0x080060f7
 80060ec:	08006103 	.word	0x08006103
 80060f0:	2301      	movs	r3, #1
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e0e7      	b.n	80062c6 <UART_SetConfig+0x282>
 80060f6:	2302      	movs	r3, #2
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e0e4      	b.n	80062c6 <UART_SetConfig+0x282>
 80060fc:	2304      	movs	r3, #4
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e0e1      	b.n	80062c6 <UART_SetConfig+0x282>
 8006102:	2308      	movs	r3, #8
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e0de      	b.n	80062c6 <UART_SetConfig+0x282>
 8006108:	2310      	movs	r3, #16
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	e0db      	b.n	80062c6 <UART_SetConfig+0x282>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a88      	ldr	r2, [pc, #544]	; (8006334 <UART_SetConfig+0x2f0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d132      	bne.n	800617e <UART_SetConfig+0x13a>
 8006118:	4b85      	ldr	r3, [pc, #532]	; (8006330 <UART_SetConfig+0x2ec>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611e:	f003 030c 	and.w	r3, r3, #12
 8006122:	2b0c      	cmp	r3, #12
 8006124:	d828      	bhi.n	8006178 <UART_SetConfig+0x134>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <UART_SetConfig+0xe8>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006161 	.word	0x08006161
 8006130:	08006179 	.word	0x08006179
 8006134:	08006179 	.word	0x08006179
 8006138:	08006179 	.word	0x08006179
 800613c:	0800616d 	.word	0x0800616d
 8006140:	08006179 	.word	0x08006179
 8006144:	08006179 	.word	0x08006179
 8006148:	08006179 	.word	0x08006179
 800614c:	08006167 	.word	0x08006167
 8006150:	08006179 	.word	0x08006179
 8006154:	08006179 	.word	0x08006179
 8006158:	08006179 	.word	0x08006179
 800615c:	08006173 	.word	0x08006173
 8006160:	2300      	movs	r3, #0
 8006162:	76fb      	strb	r3, [r7, #27]
 8006164:	e0af      	b.n	80062c6 <UART_SetConfig+0x282>
 8006166:	2302      	movs	r3, #2
 8006168:	76fb      	strb	r3, [r7, #27]
 800616a:	e0ac      	b.n	80062c6 <UART_SetConfig+0x282>
 800616c:	2304      	movs	r3, #4
 800616e:	76fb      	strb	r3, [r7, #27]
 8006170:	e0a9      	b.n	80062c6 <UART_SetConfig+0x282>
 8006172:	2308      	movs	r3, #8
 8006174:	76fb      	strb	r3, [r7, #27]
 8006176:	e0a6      	b.n	80062c6 <UART_SetConfig+0x282>
 8006178:	2310      	movs	r3, #16
 800617a:	76fb      	strb	r3, [r7, #27]
 800617c:	e0a3      	b.n	80062c6 <UART_SetConfig+0x282>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a6d      	ldr	r2, [pc, #436]	; (8006338 <UART_SetConfig+0x2f4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d120      	bne.n	80061ca <UART_SetConfig+0x186>
 8006188:	4b69      	ldr	r3, [pc, #420]	; (8006330 <UART_SetConfig+0x2ec>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006192:	2b30      	cmp	r3, #48	; 0x30
 8006194:	d013      	beq.n	80061be <UART_SetConfig+0x17a>
 8006196:	2b30      	cmp	r3, #48	; 0x30
 8006198:	d814      	bhi.n	80061c4 <UART_SetConfig+0x180>
 800619a:	2b20      	cmp	r3, #32
 800619c:	d009      	beq.n	80061b2 <UART_SetConfig+0x16e>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d810      	bhi.n	80061c4 <UART_SetConfig+0x180>
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <UART_SetConfig+0x168>
 80061a6:	2b10      	cmp	r3, #16
 80061a8:	d006      	beq.n	80061b8 <UART_SetConfig+0x174>
 80061aa:	e00b      	b.n	80061c4 <UART_SetConfig+0x180>
 80061ac:	2300      	movs	r3, #0
 80061ae:	76fb      	strb	r3, [r7, #27]
 80061b0:	e089      	b.n	80062c6 <UART_SetConfig+0x282>
 80061b2:	2302      	movs	r3, #2
 80061b4:	76fb      	strb	r3, [r7, #27]
 80061b6:	e086      	b.n	80062c6 <UART_SetConfig+0x282>
 80061b8:	2304      	movs	r3, #4
 80061ba:	76fb      	strb	r3, [r7, #27]
 80061bc:	e083      	b.n	80062c6 <UART_SetConfig+0x282>
 80061be:	2308      	movs	r3, #8
 80061c0:	76fb      	strb	r3, [r7, #27]
 80061c2:	e080      	b.n	80062c6 <UART_SetConfig+0x282>
 80061c4:	2310      	movs	r3, #16
 80061c6:	76fb      	strb	r3, [r7, #27]
 80061c8:	e07d      	b.n	80062c6 <UART_SetConfig+0x282>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5b      	ldr	r2, [pc, #364]	; (800633c <UART_SetConfig+0x2f8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d120      	bne.n	8006216 <UART_SetConfig+0x1d2>
 80061d4:	4b56      	ldr	r3, [pc, #344]	; (8006330 <UART_SetConfig+0x2ec>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061de:	2bc0      	cmp	r3, #192	; 0xc0
 80061e0:	d013      	beq.n	800620a <UART_SetConfig+0x1c6>
 80061e2:	2bc0      	cmp	r3, #192	; 0xc0
 80061e4:	d814      	bhi.n	8006210 <UART_SetConfig+0x1cc>
 80061e6:	2b80      	cmp	r3, #128	; 0x80
 80061e8:	d009      	beq.n	80061fe <UART_SetConfig+0x1ba>
 80061ea:	2b80      	cmp	r3, #128	; 0x80
 80061ec:	d810      	bhi.n	8006210 <UART_SetConfig+0x1cc>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <UART_SetConfig+0x1b4>
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d006      	beq.n	8006204 <UART_SetConfig+0x1c0>
 80061f6:	e00b      	b.n	8006210 <UART_SetConfig+0x1cc>
 80061f8:	2300      	movs	r3, #0
 80061fa:	76fb      	strb	r3, [r7, #27]
 80061fc:	e063      	b.n	80062c6 <UART_SetConfig+0x282>
 80061fe:	2302      	movs	r3, #2
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e060      	b.n	80062c6 <UART_SetConfig+0x282>
 8006204:	2304      	movs	r3, #4
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e05d      	b.n	80062c6 <UART_SetConfig+0x282>
 800620a:	2308      	movs	r3, #8
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e05a      	b.n	80062c6 <UART_SetConfig+0x282>
 8006210:	2310      	movs	r3, #16
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e057      	b.n	80062c6 <UART_SetConfig+0x282>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a49      	ldr	r2, [pc, #292]	; (8006340 <UART_SetConfig+0x2fc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d125      	bne.n	800626c <UART_SetConfig+0x228>
 8006220:	4b43      	ldr	r3, [pc, #268]	; (8006330 <UART_SetConfig+0x2ec>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622e:	d017      	beq.n	8006260 <UART_SetConfig+0x21c>
 8006230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006234:	d817      	bhi.n	8006266 <UART_SetConfig+0x222>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623a:	d00b      	beq.n	8006254 <UART_SetConfig+0x210>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006240:	d811      	bhi.n	8006266 <UART_SetConfig+0x222>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <UART_SetConfig+0x20a>
 8006246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624a:	d006      	beq.n	800625a <UART_SetConfig+0x216>
 800624c:	e00b      	b.n	8006266 <UART_SetConfig+0x222>
 800624e:	2300      	movs	r3, #0
 8006250:	76fb      	strb	r3, [r7, #27]
 8006252:	e038      	b.n	80062c6 <UART_SetConfig+0x282>
 8006254:	2302      	movs	r3, #2
 8006256:	76fb      	strb	r3, [r7, #27]
 8006258:	e035      	b.n	80062c6 <UART_SetConfig+0x282>
 800625a:	2304      	movs	r3, #4
 800625c:	76fb      	strb	r3, [r7, #27]
 800625e:	e032      	b.n	80062c6 <UART_SetConfig+0x282>
 8006260:	2308      	movs	r3, #8
 8006262:	76fb      	strb	r3, [r7, #27]
 8006264:	e02f      	b.n	80062c6 <UART_SetConfig+0x282>
 8006266:	2310      	movs	r3, #16
 8006268:	76fb      	strb	r3, [r7, #27]
 800626a:	e02c      	b.n	80062c6 <UART_SetConfig+0x282>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <UART_SetConfig+0x2e4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d125      	bne.n	80062c2 <UART_SetConfig+0x27e>
 8006276:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <UART_SetConfig+0x2ec>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006284:	d017      	beq.n	80062b6 <UART_SetConfig+0x272>
 8006286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800628a:	d817      	bhi.n	80062bc <UART_SetConfig+0x278>
 800628c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006290:	d00b      	beq.n	80062aa <UART_SetConfig+0x266>
 8006292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006296:	d811      	bhi.n	80062bc <UART_SetConfig+0x278>
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <UART_SetConfig+0x260>
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d006      	beq.n	80062b0 <UART_SetConfig+0x26c>
 80062a2:	e00b      	b.n	80062bc <UART_SetConfig+0x278>
 80062a4:	2300      	movs	r3, #0
 80062a6:	76fb      	strb	r3, [r7, #27]
 80062a8:	e00d      	b.n	80062c6 <UART_SetConfig+0x282>
 80062aa:	2302      	movs	r3, #2
 80062ac:	76fb      	strb	r3, [r7, #27]
 80062ae:	e00a      	b.n	80062c6 <UART_SetConfig+0x282>
 80062b0:	2304      	movs	r3, #4
 80062b2:	76fb      	strb	r3, [r7, #27]
 80062b4:	e007      	b.n	80062c6 <UART_SetConfig+0x282>
 80062b6:	2308      	movs	r3, #8
 80062b8:	76fb      	strb	r3, [r7, #27]
 80062ba:	e004      	b.n	80062c6 <UART_SetConfig+0x282>
 80062bc:	2310      	movs	r3, #16
 80062be:	76fb      	strb	r3, [r7, #27]
 80062c0:	e001      	b.n	80062c6 <UART_SetConfig+0x282>
 80062c2:	2310      	movs	r3, #16
 80062c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <UART_SetConfig+0x2e4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	f040 8087 	bne.w	80063e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d2:	7efb      	ldrb	r3, [r7, #27]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d837      	bhi.n	8006348 <UART_SetConfig+0x304>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x29c>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006349 	.word	0x08006349
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006349 	.word	0x08006349
 80062f0:	08006313 	.word	0x08006313
 80062f4:	08006349 	.word	0x08006349
 80062f8:	08006349 	.word	0x08006349
 80062fc:	08006349 	.word	0x08006349
 8006300:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fe fd70 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8006308:	6178      	str	r0, [r7, #20]
        break;
 800630a:	e022      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x300>)
 800630e:	617b      	str	r3, [r7, #20]
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fe fcd1 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8006316:	6178      	str	r0, [r7, #20]
        break;
 8006318:	e01b      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e017      	b.n	8006352 <UART_SetConfig+0x30e>
 8006322:	bf00      	nop
 8006324:	efff69f3 	.word	0xefff69f3
 8006328:	40008000 	.word	0x40008000
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	40005000 	.word	0x40005000
 8006344:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	76bb      	strb	r3, [r7, #26]
        break;
 8006350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80f1 	beq.w	800653c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d305      	bcc.n	8006376 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	429a      	cmp	r2, r3
 8006374:	d902      	bls.n	800637c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	76bb      	strb	r3, [r7, #26]
 800637a:	e0df      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4618      	mov	r0, r3
 8006380:	f04f 0100 	mov.w	r1, #0
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	020b      	lsls	r3, r1, #8
 800638e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006392:	0202      	lsls	r2, r0, #8
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	0849      	lsrs	r1, r1, #1
 800639a:	4608      	mov	r0, r1
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	1814      	adds	r4, r2, r0
 80063a2:	eb43 0501 	adc.w	r5, r3, r1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7fa fbf8 	bl	8000ba8 <__aeabi_uldivmod>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4613      	mov	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c6:	d308      	bcc.n	80063da <UART_SetConfig+0x396>
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ce:	d204      	bcs.n	80063da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e0b0      	b.n	800653c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	76bb      	strb	r3, [r7, #26]
 80063de:	e0ad      	b.n	800653c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e8:	d15c      	bne.n	80064a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80063ea:	7efb      	ldrb	r3, [r7, #27]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d828      	bhi.n	8006442 <UART_SetConfig+0x3fe>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x3b4>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe fce4 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fe fcf6 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8006428:	6178      	str	r0, [r7, #20]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b49      	ldr	r3, [pc, #292]	; (8006554 <UART_SetConfig+0x510>)
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fe fc41 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8006436:	6178      	str	r0, [r7, #20]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	617b      	str	r3, [r7, #20]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	76bb      	strb	r3, [r7, #26]
        break;
 800644a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d074      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005a      	lsls	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	441a      	add	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b0f      	cmp	r3, #15
 800646e:	d916      	bls.n	800649e <UART_SetConfig+0x45a>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006476:	d212      	bcs.n	800649e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f023 030f 	bic.w	r3, r3, #15
 8006480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	b29a      	uxth	r2, r3
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	4313      	orrs	r3, r2
 8006492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	89fa      	ldrh	r2, [r7, #14]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e04e      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	76bb      	strb	r3, [r7, #26]
 80064a2:	e04b      	b.n	800653c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d827      	bhi.n	80064fa <UART_SetConfig+0x4b6>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x46c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fe fc88 	bl	8004de8 <HAL_RCC_GetPCLK1Freq>
 80064d8:	6178      	str	r0, [r7, #20]
        break;
 80064da:	e013      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fe fc9a 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 80064e0:	6178      	str	r0, [r7, #20]
        break;
 80064e2:	e00f      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <UART_SetConfig+0x510>)
 80064e6:	617b      	str	r3, [r7, #20]
        break;
 80064e8:	e00c      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fe fbe5 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 80064ee:	6178      	str	r0, [r7, #20]
        break;
 80064f0:	e008      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	617b      	str	r3, [r7, #20]
        break;
 80064f8:	e004      	b.n	8006504 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	76bb      	strb	r3, [r7, #26]
        break;
 8006502:	bf00      	nop
    }

    if (pclk != 0U)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085a      	lsrs	r2, r3, #1
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	441a      	add	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	d908      	bls.n	8006538 <UART_SetConfig+0x4f4>
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d204      	bcs.n	8006538 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e001      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006548:	7ebb      	ldrb	r3, [r7, #26]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bdb0      	pop	{r4, r5, r7, pc}
 8006552:	bf00      	nop
 8006554:	00f42400 	.word	0x00f42400

08006558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01a      	beq.n	800666e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006656:	d10a      	bne.n	800666e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066ac:	f7fc fcf0 	bl	8003090 <HAL_GetTick>
 80066b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d10e      	bne.n	80066de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f82d 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e023      	b.n	8006726 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d10e      	bne.n	800670a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f817 	bl	800672e <UART_WaitOnFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e00d      	b.n	8006726 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673e:	e05e      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006746:	d05a      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fc fca2 	bl	8003090 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <UART_WaitOnFlagUntilTimeout+0x30>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11b      	bne.n	8006796 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800676c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e043      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02c      	beq.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b2:	d124      	bne.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4013      	ands	r3, r2
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	bf0c      	ite	eq
 800680e:	2301      	moveq	r3, #1
 8006810:	2300      	movne	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	429a      	cmp	r2, r3
 800681a:	d091      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <__NVIC_SetPriority>:
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	6039      	str	r1, [r7, #0]
 8006832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006838:	2b00      	cmp	r3, #0
 800683a:	db0a      	blt.n	8006852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	490c      	ldr	r1, [pc, #48]	; (8006874 <__NVIC_SetPriority+0x4c>)
 8006842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006846:	0112      	lsls	r2, r2, #4
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	440b      	add	r3, r1
 800684c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006850:	e00a      	b.n	8006868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4908      	ldr	r1, [pc, #32]	; (8006878 <__NVIC_SetPriority+0x50>)
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	3b04      	subs	r3, #4
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	440b      	add	r3, r1
 8006866:	761a      	strb	r2, [r3, #24]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	e000e100 	.word	0xe000e100
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <SysTick_Handler+0x1c>)
 8006882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006884:	f001 fcfe 	bl	8008284 <xTaskGetSchedulerState>
 8006888:	4603      	mov	r3, r0
 800688a:	2b01      	cmp	r3, #1
 800688c:	d001      	beq.n	8006892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800688e:	f002 fae3 	bl	8008e58 <xPortSysTickHandler>
  }
}
 8006892:	bf00      	nop
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	e000e010 	.word	0xe000e010

0800689c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80068a0:	2100      	movs	r1, #0
 80068a2:	f06f 0004 	mvn.w	r0, #4
 80068a6:	f7ff ffbf 	bl	8006828 <__NVIC_SetPriority>
#endif
}
 80068aa:	bf00      	nop
 80068ac:	bd80      	pop	{r7, pc}
	...

080068b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b6:	f3ef 8305 	mrs	r3, IPSR
 80068ba:	603b      	str	r3, [r7, #0]
  return(result);
 80068bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80068c2:	f06f 0305 	mvn.w	r3, #5
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e00c      	b.n	80068e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <osKernelInitialize+0x44>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80068d2:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <osKernelInitialize+0x44>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80068d8:	2300      	movs	r3, #0
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	e002      	b.n	80068e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80068de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068e4:	687b      	ldr	r3, [r7, #4]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	200002f8 	.word	0x200002f8

080068f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	603b      	str	r3, [r7, #0]
  return(result);
 8006904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800690a:	f06f 0305 	mvn.w	r3, #5
 800690e:	607b      	str	r3, [r7, #4]
 8006910:	e010      	b.n	8006934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <osKernelStart+0x48>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d109      	bne.n	800692e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800691a:	f7ff ffbf 	bl	800689c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800691e:	4b08      	ldr	r3, [pc, #32]	; (8006940 <osKernelStart+0x48>)
 8006920:	2202      	movs	r2, #2
 8006922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006924:	f001 f866 	bl	80079f4 <vTaskStartScheduler>
      stat = osOK;
 8006928:	2300      	movs	r3, #0
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	e002      	b.n	8006934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006934:	687b      	ldr	r3, [r7, #4]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200002f8 	.word	0x200002f8

08006944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	; 0x38
 8006948:	af04      	add	r7, sp, #16
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006954:	f3ef 8305 	mrs	r3, IPSR
 8006958:	617b      	str	r3, [r7, #20]
  return(result);
 800695a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d17e      	bne.n	8006a5e <osThreadNew+0x11a>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d07b      	beq.n	8006a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800696a:	2318      	movs	r3, #24
 800696c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d045      	beq.n	8006a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <osThreadNew+0x48>
        name = attr->name;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <osThreadNew+0x6e>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b38      	cmp	r3, #56	; 0x38
 80069a4:	d805      	bhi.n	80069b2 <osThreadNew+0x6e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <osThreadNew+0x72>
        return (NULL);
 80069b2:	2300      	movs	r3, #0
 80069b4:	e054      	b.n	8006a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	089b      	lsrs	r3, r3, #2
 80069c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <osThreadNew+0xa8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b5b      	cmp	r3, #91	; 0x5b
 80069d4:	d90a      	bls.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <osThreadNew+0xa8>
        mem = 1;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	e010      	b.n	8006a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10c      	bne.n	8006a0e <osThreadNew+0xca>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <osThreadNew+0xca>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <osThreadNew+0xca>
          mem = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
 8006a08:	e001      	b.n	8006a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d110      	bne.n	8006a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a1c:	9202      	str	r2, [sp, #8]
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fe0c 	bl	8007648 <xTaskCreateStatic>
 8006a30:	4603      	mov	r3, r0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e013      	b.n	8006a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d110      	bne.n	8006a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fe57 	bl	8007702 <xTaskCreate>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <osThreadNew+0x11a>
            hTask = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a5e:	693b      	ldr	r3, [r7, #16]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3728      	adds	r7, #40	; 0x28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a70:	f3ef 8305 	mrs	r3, IPSR
 8006a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <osDelay+0x1c>
    stat = osErrorISR;
 8006a7c:	f06f 0305 	mvn.w	r3, #5
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	e007      	b.n	8006a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ff7c 	bl	800798c <vTaskDelay>
    }
  }

  return (stat);
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4a07      	ldr	r2, [pc, #28]	; (8006acc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4a06      	ldr	r2, [pc, #24]	; (8006ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8006ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2280      	movs	r2, #128	; 0x80
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	200002fc 	.word	0x200002fc
 8006ad0:	20000358 	.word	0x20000358

08006ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a07      	ldr	r2, [pc, #28]	; (8006b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	4a06      	ldr	r2, [pc, #24]	; (8006b04 <vApplicationGetTimerTaskMemory+0x30>)
 8006aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000558 	.word	0x20000558
 8006b04:	200005b4 	.word	0x200005b4

08006b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f103 0208 	add.w	r2, r3, #8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f103 0208 	add.w	r2, r3, #8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0208 	add.w	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d103      	bne.n	8006bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e00c      	b.n	8006be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	e002      	b.n	8006bd8 <vListInsert+0x2e>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d2f6      	bcs.n	8006bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
}
 8006c10:	bf00      	nop
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6852      	ldr	r2, [r2, #4]
 8006c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d103      	bne.n	8006c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	1e5a      	subs	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c9a:	f002 f84b 	bl	8008d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	441a      	add	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	68f9      	ldr	r1, [r7, #12]
 8006cce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	441a      	add	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d114      	bne.n	8006d1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01a      	beq.n	8006d2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 f903 	bl	8007f08 <xTaskRemoveFromEventList>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d012      	beq.n	8006d2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <xQueueGenericReset+0xcc>)
 8006d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	e009      	b.n	8006d2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fef2 	bl	8006b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff feed 	bl	8006b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d2e:	f002 f831 	bl	8008d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d32:	2301      	movs	r3, #1
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08e      	sub	sp, #56	; 0x38
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <xQueueGenericCreateStatic+0x52>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <xQueueGenericCreateStatic+0x56>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <xQueueGenericCreateStatic+0x58>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10a      	bne.n	8006db2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da0:	f383 8811 	msr	BASEPRI, r3
 8006da4:	f3bf 8f6f 	isb	sy
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	623b      	str	r3, [r7, #32]
}
 8006dae:	bf00      	nop
 8006db0:	e7fe      	b.n	8006db0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueGenericCreateStatic+0x7e>
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueGenericCreateStatic+0x82>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueGenericCreateStatic+0x84>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dde:	2350      	movs	r3, #80	; 0x50
 8006de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b50      	cmp	r3, #80	; 0x50
 8006de6:	d00a      	beq.n	8006dfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	61bb      	str	r3, [r7, #24]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00d      	beq.n	8006e26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f805 	bl	8006e30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3730      	adds	r7, #48	; 0x30
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	69ba      	ldr	r2, [r7, #24]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e5e:	2101      	movs	r1, #1
 8006e60:	69b8      	ldr	r0, [r7, #24]
 8006e62:	f7ff ff05 	bl	8006c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	78fa      	ldrb	r2, [r7, #3]
 8006e6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08e      	sub	sp, #56	; 0x38
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e86:	2300      	movs	r3, #0
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueGenericSend+0x32>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <xQueueGenericSend+0x40>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueGenericSend+0x44>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueGenericSend+0x46>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <xQueueGenericSend+0x60>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x6e>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <xQueueGenericSend+0x72>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericSend+0x74>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xQueueGenericSend+0x8e>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	623b      	str	r3, [r7, #32]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f06:	f001 f9bd 	bl	8008284 <xTaskGetSchedulerState>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <xQueueGenericSend+0x9e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSend+0xa2>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSend+0xa4>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61fb      	str	r3, [r7, #28]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f36:	f001 fefd 	bl	8008d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d302      	bcc.n	8006f4c <xQueueGenericSend+0xd4>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d129      	bne.n	8006fa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f52:	f000 fa0b 	bl	800736c <prvCopyDataToQueue>
 8006f56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d010      	beq.n	8006f82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 ffcf 	bl	8007f08 <xTaskRemoveFromEventList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d013      	beq.n	8006f98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f70:	4b3f      	ldr	r3, [pc, #252]	; (8007070 <xQueueGenericSend+0x1f8>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	e00a      	b.n	8006f98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d007      	beq.n	8006f98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f88:	4b39      	ldr	r3, [pc, #228]	; (8007070 <xQueueGenericSend+0x1f8>)
 8006f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f98:	f001 fefc 	bl	8008d94 <vPortExitCritical>
				return pdPASS;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e063      	b.n	8007068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fa6:	f001 fef5 	bl	8008d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e05c      	b.n	8007068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d106      	bne.n	8006fc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 f809 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fc2:	f001 fee7 	bl	8008d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fc6:	f000 fd7b 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fca:	f001 feb3 	bl	8008d34 <vPortEnterCritical>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fd4:	b25b      	sxtb	r3, r3
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fda:	d103      	bne.n	8006fe4 <xQueueGenericSend+0x16c>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff0:	d103      	bne.n	8006ffa <xQueueGenericSend+0x182>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ffa:	f001 fecb 	bl	8008d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ffe:	1d3a      	adds	r2, r7, #4
 8007000:	f107 0314 	add.w	r3, r7, #20
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fff8 	bl	8007ffc <xTaskCheckForTimeOut>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d124      	bne.n	800705c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007014:	f000 faa2 	bl	800755c <prvIsQueueFull>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f000 ff1e 	bl	8007e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800702c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702e:	f000 fa2d 	bl	800748c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007032:	f000 fd53 	bl	8007adc <xTaskResumeAll>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af7c 	bne.w	8006f36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <xQueueGenericSend+0x1f8>)
 8007040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	e772      	b.n	8006f36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007052:	f000 fa1b 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007056:	f000 fd41 	bl	8007adc <xTaskResumeAll>
 800705a:	e76c      	b.n	8006f36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800705c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800705e:	f000 fa15 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007062:	f000 fd3b 	bl	8007adc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007068:	4618      	mov	r0, r3
 800706a:	3738      	adds	r7, #56	; 0x38
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	e000ed04 	.word	0xe000ed04

08007074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b090      	sub	sp, #64	; 0x40
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <xQueueGenericSendFromISR+0x3c>
 80070a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <xQueueGenericSendFromISR+0x40>
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <xQueueGenericSendFromISR+0x42>
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d103      	bne.n	80070de <xQueueGenericSendFromISR+0x6a>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <xQueueGenericSendFromISR+0x6e>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <xQueueGenericSendFromISR+0x70>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	623b      	str	r3, [r7, #32]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070fe:	f001 fefb 	bl	8008ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007102:	f3ef 8211 	mrs	r2, BASEPRI
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	61fa      	str	r2, [r7, #28]
 8007118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800711a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <xQueueGenericSendFromISR+0xbc>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d12f      	bne.n	8007190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007146:	f000 f911 	bl	800736c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800714a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007152:	d112      	bne.n	800717a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d016      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fed1 	bl	8007f08 <xTaskRemoveFromEventList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	601a      	str	r2, [r3, #0]
 8007178:	e007      	b.n	800718a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800717a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800717e:	3301      	adds	r3, #1
 8007180:	b2db      	uxtb	r3, r3
 8007182:	b25a      	sxtb	r2, r3
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800718a:	2301      	movs	r3, #1
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800718e:	e001      	b.n	8007194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007190:	2300      	movs	r3, #0
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800719e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3740      	adds	r7, #64	; 0x40
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	; 0x30
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071b8:	2300      	movs	r3, #0
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10a      	bne.n	80071dc <xQueueReceive+0x30>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	623b      	str	r3, [r7, #32]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d103      	bne.n	80071ea <xQueueReceive+0x3e>
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueReceive+0x42>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueReceive+0x44>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueReceive+0x5e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61fb      	str	r3, [r7, #28]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800720a:	f001 f83b 	bl	8008284 <xTaskGetSchedulerState>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueReceive+0x6e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueReceive+0x72>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueReceive+0x74>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueReceive+0x8e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61bb      	str	r3, [r7, #24]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800723a:	f001 fd7b 	bl	8008d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01f      	beq.n	800728a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800724e:	f000 f8f7 	bl	8007440 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00f      	beq.n	8007282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	3310      	adds	r3, #16
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fe4e 	bl	8007f08 <xTaskRemoveFromEventList>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d007      	beq.n	8007282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007272:	4b3d      	ldr	r3, [pc, #244]	; (8007368 <xQueueReceive+0x1bc>)
 8007274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007282:	f001 fd87 	bl	8008d94 <vPortExitCritical>
				return pdPASS;
 8007286:	2301      	movs	r3, #1
 8007288:	e069      	b.n	800735e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007290:	f001 fd80 	bl	8008d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007294:	2300      	movs	r3, #0
 8007296:	e062      	b.n	800735e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800729e:	f107 0310 	add.w	r3, r7, #16
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fe94 	bl	8007fd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a8:	2301      	movs	r3, #1
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ac:	f001 fd72 	bl	8008d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b0:	f000 fc06 	bl	8007ac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072b4:	f001 fd3e 	bl	8008d34 <vPortEnterCritical>
 80072b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072c4:	d103      	bne.n	80072ce <xQueueReceive+0x122>
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072da:	d103      	bne.n	80072e4 <xQueueReceive+0x138>
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e4:	f001 fd56 	bl	8008d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e8:	1d3a      	adds	r2, r7, #4
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fe83 	bl	8007ffc <xTaskCheckForTimeOut>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d123      	bne.n	8007344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072fe:	f000 f917 	bl	8007530 <prvIsQueueEmpty>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d017      	beq.n	8007338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fda9 	bl	8007e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007318:	f000 f8b8 	bl	800748c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800731c:	f000 fbde 	bl	8007adc <xTaskResumeAll>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d189      	bne.n	800723a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <xQueueReceive+0x1bc>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	e780      	b.n	800723a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733a:	f000 f8a7 	bl	800748c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733e:	f000 fbcd 	bl	8007adc <xTaskResumeAll>
 8007342:	e77a      	b.n	800723a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007346:	f000 f8a1 	bl	800748c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800734a:	f000 fbc7 	bl	8007adc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007350:	f000 f8ee 	bl	8007530 <prvIsQueueEmpty>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	f43f af6f 	beq.w	800723a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800735c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800735e:	4618      	mov	r0, r3
 8007360:	3730      	adds	r7, #48	; 0x30
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000ed04 	.word	0xe000ed04

0800736c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10d      	bne.n	80073a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d14d      	bne.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 ff92 	bl	80082c0 <xTaskPriorityDisinherit>
 800739c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e043      	b.n	800742e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d119      	bne.n	80073e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6858      	ldr	r0, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	461a      	mov	r2, r3
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	f002 f802 	bl	80093c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	441a      	add	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d32b      	bcc.n	800742e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	e026      	b.n	800742e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68d8      	ldr	r0, [r3, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	461a      	mov	r2, r3
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	f001 ffe8 	bl	80093c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	425b      	negs	r3, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d207      	bcs.n	800741c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	425b      	negs	r3, r3
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d105      	bne.n	800742e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3b01      	subs	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d018      	beq.n	8007484 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	441a      	add	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	429a      	cmp	r2, r3
 800746a:	d303      	bcc.n	8007474 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68d9      	ldr	r1, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	461a      	mov	r2, r3
 800747e:	6838      	ldr	r0, [r7, #0]
 8007480:	f001 ff9e 	bl	80093c0 <memcpy>
	}
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007494:	f001 fc4e 	bl	8008d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800749e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a0:	e011      	b.n	80074c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	3324      	adds	r3, #36	; 0x24
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fd2a 	bl	8007f08 <xTaskRemoveFromEventList>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074ba:	f000 fe01 	bl	80080c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dce9      	bgt.n	80074a2 <prvUnlockQueue+0x16>
 80074ce:	e000      	b.n	80074d2 <prvUnlockQueue+0x46>
					break;
 80074d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074da:	f001 fc5b 	bl	8008d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074de:	f001 fc29 	bl	8008d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ea:	e011      	b.n	8007510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3310      	adds	r3, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fd05 	bl	8007f08 <xTaskRemoveFromEventList>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007504:	f000 fddc 	bl	80080c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	3b01      	subs	r3, #1
 800750c:	b2db      	uxtb	r3, r3
 800750e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	dce9      	bgt.n	80074ec <prvUnlockQueue+0x60>
 8007518:	e000      	b.n	800751c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800751a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	22ff      	movs	r2, #255	; 0xff
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007524:	f001 fc36 	bl	8008d94 <vPortExitCritical>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007538:	f001 fbfc 	bl	8008d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d102      	bne.n	800754a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e001      	b.n	800754e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800754e:	f001 fc21 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007564:	f001 fbe6 	bl	8008d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007570:	429a      	cmp	r2, r3
 8007572:	d102      	bne.n	800757a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e001      	b.n	800757e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800757e:	f001 fc09 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e014      	b.n	80075c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800759c:	4a0f      	ldr	r2, [pc, #60]	; (80075dc <vQueueAddToRegistry+0x50>)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075a8:	490c      	ldr	r1, [pc, #48]	; (80075dc <vQueueAddToRegistry+0x50>)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075b2:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <vQueueAddToRegistry+0x50>)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075be:	e006      	b.n	80075ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b07      	cmp	r3, #7
 80075ca:	d9e7      	bls.n	800759c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20001d68 	.word	0x20001d68

080075e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075f0:	f001 fba0 	bl	8008d34 <vPortEnterCritical>
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007600:	d103      	bne.n	800760a <vQueueWaitForMessageRestricted+0x2a>
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	d103      	bne.n	8007620 <vQueueWaitForMessageRestricted+0x40>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007620:	f001 fbb8 	bl	8008d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fc3b 	bl	8007eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	f7ff ff26 	bl	800748c <prvUnlockQueue>
	}
 8007640:	bf00      	nop
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af04      	add	r7, sp, #16
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCreateStatic+0x2a>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xTaskCreateStatic+0x46>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800768e:	235c      	movs	r3, #92	; 0x5c
 8007690:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b5c      	cmp	r3, #92	; 0x5c
 8007696:	d00a      	beq.n	80076ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01e      	beq.n	80076f4 <xTaskCreateStatic+0xac>
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ce:	2300      	movs	r3, #0
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	f107 0314 	add.w	r3, r7, #20
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f850 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ee:	f000 f8dd 	bl	80078ac <prvAddNewTaskToReadyList>
 80076f2:	e001      	b.n	80076f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f8:	697b      	ldr	r3, [r7, #20]
	}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007702:	b580      	push	{r7, lr}
 8007704:	b08c      	sub	sp, #48	; 0x30
 8007706:	af04      	add	r7, sp, #16
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	603b      	str	r3, [r7, #0]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fc2e 	bl	8008f78 <pvPortMalloc>
 800771c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007724:	205c      	movs	r0, #92	; 0x5c
 8007726:	f001 fc27 	bl	8008f78 <pvPortMalloc>
 800772a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
 8007738:	e005      	b.n	8007746 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800773a:	6978      	ldr	r0, [r7, #20]
 800773c:	f001 fce8 	bl	8009110 <vPortFree>
 8007740:	e001      	b.n	8007746 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d017      	beq.n	800777c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	2300      	movs	r3, #0
 8007758:	9303      	str	r3, [sp, #12]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	9302      	str	r3, [sp, #8]
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f80e 	bl	800778c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007770:	69f8      	ldr	r0, [r7, #28]
 8007772:	f000 f89b 	bl	80078ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007776:	2301      	movs	r3, #1
 8007778:	61bb      	str	r3, [r7, #24]
 800777a:	e002      	b.n	8007782 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800777c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007780:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007782:	69bb      	ldr	r3, [r7, #24]
	}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	461a      	mov	r2, r3
 80077a4:	21a5      	movs	r1, #165	; 0xa5
 80077a6:	f001 fe19 	bl	80093dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	3b01      	subs	r3, #1
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e012      	b.n	8007816 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	7819      	ldrb	r1, [r3, #0]
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	3334      	adds	r3, #52	; 0x34
 8007800:	460a      	mov	r2, r1
 8007802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d9e9      	bls.n	80077f0 <prvInitialiseNewTask+0x64>
 800781c:	e000      	b.n	8007820 <prvInitialiseNewTask+0x94>
			{
				break;
 800781e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	e003      	b.n	8007832 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	2b37      	cmp	r3, #55	; 0x37
 8007836:	d901      	bls.n	800783c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007838:	2337      	movs	r3, #55	; 0x37
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	2200      	movs	r2, #0
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff f978 	bl	8006b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	3318      	adds	r3, #24
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff f973 	bl	8006b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	2200      	movs	r2, #0
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	69b8      	ldr	r0, [r7, #24]
 800788c:	f001 f928 	bl	8008ae0 <pxPortInitialiseStack>
 8007890:	4602      	mov	r2, r0
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a2:	bf00      	nop
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078b4:	f001 fa3e 	bl	8008d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078b8:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a2c      	ldr	r2, [pc, #176]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078c2:	4b2c      	ldr	r3, [pc, #176]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ca:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078d0:	4b27      	ldr	r3, [pc, #156]	; (8007970 <prvAddNewTaskToReadyList+0xc4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d110      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078d8:	f000 fc16 	bl	8008108 <prvInitialiseTaskLists>
 80078dc:	e00d      	b.n	80078fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078de:	4b26      	ldr	r3, [pc, #152]	; (8007978 <prvAddNewTaskToReadyList+0xcc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d802      	bhi.n	80078fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078f4:	4a1f      	ldr	r2, [pc, #124]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3301      	adds	r3, #1
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007904:	4b1d      	ldr	r3, [pc, #116]	; (800797c <prvAddNewTaskToReadyList+0xd0>)
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <prvAddNewTaskToReadyList+0xd4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d903      	bls.n	8007920 <prvAddNewTaskToReadyList+0x74>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4a18      	ldr	r2, [pc, #96]	; (8007980 <prvAddNewTaskToReadyList+0xd4>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4a15      	ldr	r2, [pc, #84]	; (8007984 <prvAddNewTaskToReadyList+0xd8>)
 800792e:	441a      	add	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7ff f913 	bl	8006b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800793c:	f001 fa2a 	bl	8008d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007940:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <prvAddNewTaskToReadyList+0xcc>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <prvAddNewTaskToReadyList+0xc8>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	429a      	cmp	r2, r3
 8007954:	d207      	bcs.n	8007966 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007956:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <prvAddNewTaskToReadyList+0xdc>)
 8007958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000e88 	.word	0x20000e88
 8007974:	200009b4 	.word	0x200009b4
 8007978:	20000e94 	.word	0x20000e94
 800797c:	20000ea4 	.word	0x20000ea4
 8007980:	20000e90 	.word	0x20000e90
 8007984:	200009b8 	.word	0x200009b8
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d017      	beq.n	80079ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800799e:	4b13      	ldr	r3, [pc, #76]	; (80079ec <vTaskDelay+0x60>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <vTaskDelay+0x30>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60bb      	str	r3, [r7, #8]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079bc:	f000 f880 	bl	8007ac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fcea 	bl	800839c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079c8:	f000 f888 	bl	8007adc <xTaskResumeAll>
 80079cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079d4:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <vTaskDelay+0x64>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000eb0 	.word	0x20000eb0
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08a      	sub	sp, #40	; 0x28
 80079f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a02:	463a      	mov	r2, r7
 8007a04:	1d39      	adds	r1, r7, #4
 8007a06:	f107 0308 	add.w	r3, r7, #8
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f848 	bl	8006aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	9202      	str	r2, [sp, #8]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	460a      	mov	r2, r1
 8007a22:	4921      	ldr	r1, [pc, #132]	; (8007aa8 <vTaskStartScheduler+0xb4>)
 8007a24:	4821      	ldr	r0, [pc, #132]	; (8007aac <vTaskStartScheduler+0xb8>)
 8007a26:	f7ff fe0f 	bl	8007648 <xTaskCreateStatic>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <vTaskStartScheduler+0xbc>)
 8007a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a30:	4b1f      	ldr	r3, [pc, #124]	; (8007ab0 <vTaskStartScheduler+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	e001      	b.n	8007a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d102      	bne.n	8007a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a48:	f000 fcfc 	bl	8008444 <xTimerCreateTimerTask>
 8007a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d116      	bne.n	8007a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	613b      	str	r3, [r7, #16]
}
 8007a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <vTaskStartScheduler+0xc0>)
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <vTaskStartScheduler+0xc4>)
 8007a72:	2201      	movs	r2, #1
 8007a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <vTaskStartScheduler+0xc8>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a7c:	f001 f8b8 	bl	8008bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a80:	e00e      	b.n	8007aa0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a88:	d10a      	bne.n	8007aa0 <vTaskStartScheduler+0xac>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60fb      	str	r3, [r7, #12]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vTaskStartScheduler+0xaa>
}
 8007aa0:	bf00      	nop
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	0800bd8c 	.word	0x0800bd8c
 8007aac:	080080d9 	.word	0x080080d9
 8007ab0:	20000eac 	.word	0x20000eac
 8007ab4:	20000ea8 	.word	0x20000ea8
 8007ab8:	20000e94 	.word	0x20000e94
 8007abc:	20000e8c 	.word	0x20000e8c

08007ac0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ac4:	4b04      	ldr	r3, [pc, #16]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a03      	ldr	r2, [pc, #12]	; (8007ad8 <vTaskSuspendAll+0x18>)
 8007acc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	20000eb0 	.word	0x20000eb0

08007adc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aea:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <xTaskResumeAll+0x2c>
	__asm volatile
 8007af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af6:	f383 8811 	msr	BASEPRI, r3
 8007afa:	f3bf 8f6f 	isb	sy
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	603b      	str	r3, [r7, #0]
}
 8007b04:	bf00      	nop
 8007b06:	e7fe      	b.n	8007b06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b08:	f001 f914 	bl	8008d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b0c:	4b39      	ldr	r3, [pc, #228]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	4a38      	ldr	r2, [pc, #224]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <xTaskResumeAll+0x118>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d162      	bne.n	8007be4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b1e:	4b36      	ldr	r3, [pc, #216]	; (8007bf8 <xTaskResumeAll+0x11c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d05e      	beq.n	8007be4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b26:	e02f      	b.n	8007b88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3318      	adds	r3, #24
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff f871 	bl	8006c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7ff f86c 	bl	8006c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b48:	4b2d      	ldr	r3, [pc, #180]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d903      	bls.n	8007b58 <xTaskResumeAll+0x7c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	4a2a      	ldr	r2, [pc, #168]	; (8007c00 <xTaskResumeAll+0x124>)
 8007b56:	6013      	str	r3, [r2, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4a27      	ldr	r2, [pc, #156]	; (8007c04 <xTaskResumeAll+0x128>)
 8007b66:	441a      	add	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f7fe fff7 	bl	8006b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	4b23      	ldr	r3, [pc, #140]	; (8007c08 <xTaskResumeAll+0x12c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d302      	bcc.n	8007b88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007b82:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <xTaskResumeAll+0x130>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b88:	4b1c      	ldr	r3, [pc, #112]	; (8007bfc <xTaskResumeAll+0x120>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1cb      	bne.n	8007b28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b96:	f000 fb55 	bl	8008244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	; (8007c10 <xTaskResumeAll+0x134>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d010      	beq.n	8007bc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ba6:	f000 f847 	bl	8007c38 <xTaskIncrementTick>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f1      	bne.n	8007ba6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <xTaskResumeAll+0x134>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <xTaskResumeAll+0x130>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bd4:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <xTaskResumeAll+0x138>)
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007be4:	f001 f8d6 	bl	8008d94 <vPortExitCritical>

	return xAlreadyYielded;
 8007be8:	68bb      	ldr	r3, [r7, #8]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000eb0 	.word	0x20000eb0
 8007bf8:	20000e88 	.word	0x20000e88
 8007bfc:	20000e48 	.word	0x20000e48
 8007c00:	20000e90 	.word	0x20000e90
 8007c04:	200009b8 	.word	0x200009b8
 8007c08:	200009b4 	.word	0x200009b4
 8007c0c:	20000e9c 	.word	0x20000e9c
 8007c10:	20000e98 	.word	0x20000e98
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <xTaskGetTickCount+0x1c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c24:	687b      	ldr	r3, [r7, #4]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	20000e8c 	.word	0x20000e8c

08007c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c42:	4b4f      	ldr	r3, [pc, #316]	; (8007d80 <xTaskIncrementTick+0x148>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 808f 	bne.w	8007d6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c4c:	4b4d      	ldr	r3, [pc, #308]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c54:	4a4b      	ldr	r2, [pc, #300]	; (8007d84 <xTaskIncrementTick+0x14c>)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d120      	bne.n	8007ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c60:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	603b      	str	r3, [r7, #0]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xTaskIncrementTick+0x46>
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	4b41      	ldr	r3, [pc, #260]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4a3f      	ldr	r2, [pc, #252]	; (8007d8c <xTaskIncrementTick+0x154>)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6013      	str	r3, [r2, #0]
 8007c94:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <xTaskIncrementTick+0x158>)
 8007c9c:	6013      	str	r3, [r2, #0]
 8007c9e:	f000 fad1 	bl	8008244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca2:	4b3c      	ldr	r3, [pc, #240]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d349      	bcc.n	8007d40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cac:	4b36      	ldr	r3, [pc, #216]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d104      	bne.n	8007cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cbc:	601a      	str	r2, [r3, #0]
					break;
 8007cbe:	e03f      	b.n	8007d40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc0:	4b31      	ldr	r3, [pc, #196]	; (8007d88 <xTaskIncrementTick+0x150>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d203      	bcs.n	8007ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cd8:	4a2e      	ldr	r2, [pc, #184]	; (8007d94 <xTaskIncrementTick+0x15c>)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cde:	e02f      	b.n	8007d40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe ff99 	bl	8006c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3318      	adds	r3, #24
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe ff90 	bl	8006c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d903      	bls.n	8007d10 <xTaskIncrementTick+0xd8>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <xTaskIncrementTick+0x160>)
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d1e:	441a      	add	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe ff1b 	bl	8006b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d3b8      	bcc.n	8007cac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d3e:	e7b5      	b.n	8007cac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d40:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <xTaskIncrementTick+0x168>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d46:	4915      	ldr	r1, [pc, #84]	; (8007d9c <xTaskIncrementTick+0x164>)
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d901      	bls.n	8007d5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d5c:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <xTaskIncrementTick+0x16c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	e004      	b.n	8007d74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d6a:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <xTaskIncrementTick+0x170>)
 8007d72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d74:	697b      	ldr	r3, [r7, #20]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	20000eb0 	.word	0x20000eb0
 8007d84:	20000e8c 	.word	0x20000e8c
 8007d88:	20000e40 	.word	0x20000e40
 8007d8c:	20000e44 	.word	0x20000e44
 8007d90:	20000ea0 	.word	0x20000ea0
 8007d94:	20000ea8 	.word	0x20000ea8
 8007d98:	20000e90 	.word	0x20000e90
 8007d9c:	200009b8 	.word	0x200009b8
 8007da0:	200009b4 	.word	0x200009b4
 8007da4:	20000e9c 	.word	0x20000e9c
 8007da8:	20000e98 	.word	0x20000e98

08007dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <vTaskSwitchContext+0xa8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dba:	4b27      	ldr	r3, [pc, #156]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc0:	e041      	b.n	8007e46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007dc2:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	e010      	b.n	8007df2 <vTaskSwitchContext+0x46>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <vTaskSwitchContext+0x40>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	607b      	str	r3, [r7, #4]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskSwitchContext+0x3e>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	491b      	ldr	r1, [pc, #108]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0e4      	beq.n	8007dd0 <vTaskSwitchContext+0x24>
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a13      	ldr	r2, [pc, #76]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007e12:	4413      	add	r3, r2
 8007e14:	60bb      	str	r3, [r7, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	605a      	str	r2, [r3, #4]
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	3308      	adds	r3, #8
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d104      	bne.n	8007e36 <vTaskSwitchContext+0x8a>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	4a06      	ldr	r2, [pc, #24]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6013      	str	r3, [r2, #0]
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	20000eb0 	.word	0x20000eb0
 8007e58:	20000e9c 	.word	0x20000e9c
 8007e5c:	20000e90 	.word	0x20000e90
 8007e60:	200009b8 	.word	0x200009b8
 8007e64:	200009b4 	.word	0x200009b4

08007e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	60fb      	str	r3, [r7, #12]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <vTaskPlaceOnEventList+0x44>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3318      	adds	r3, #24
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fe fe87 	bl	8006baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	6838      	ldr	r0, [r7, #0]
 8007ea0:	f000 fa7c 	bl	800839c <prvAddCurrentTaskToDelayedList>
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	200009b4 	.word	0x200009b4

08007eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	617b      	str	r3, [r7, #20]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <vTaskPlaceOnEventListRestricted+0x54>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3318      	adds	r3, #24
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fe fe3e 	bl	8006b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	68b8      	ldr	r0, [r7, #8]
 8007ef6:	f000 fa51 	bl	800839c <prvAddCurrentTaskToDelayedList>
	}
 8007efa:	bf00      	nop
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200009b4 	.word	0x200009b4

08007f08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	60fb      	str	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe fe6f 	bl	8006c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <xTaskRemoveFromEventList+0xb0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11d      	bne.n	8007f82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fe66 	bl	8006c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f54:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d903      	bls.n	8007f64 <xTaskRemoveFromEventList+0x5c>
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <xTaskRemoveFromEventList+0xb4>)
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <xTaskRemoveFromEventList+0xb8>)
 8007f72:	441a      	add	r2, r3
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	3304      	adds	r3, #4
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f7fe fdf1 	bl	8006b62 <vListInsertEnd>
 8007f80:	e005      	b.n	8007f8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	3318      	adds	r3, #24
 8007f86:	4619      	mov	r1, r3
 8007f88:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <xTaskRemoveFromEventList+0xbc>)
 8007f8a:	f7fe fdea 	bl	8006b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <xTaskRemoveFromEventList+0xc0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d905      	bls.n	8007fa8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <xTaskRemoveFromEventList+0xc4>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e001      	b.n	8007fac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fac:	697b      	ldr	r3, [r7, #20]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000eb0 	.word	0x20000eb0
 8007fbc:	20000e90 	.word	0x20000e90
 8007fc0:	200009b8 	.word	0x200009b8
 8007fc4:	20000e48 	.word	0x20000e48
 8007fc8:	200009b4 	.word	0x200009b4
 8007fcc:	20000e9c 	.word	0x20000e9c

08007fd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <vTaskInternalSetTimeOutState+0x24>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <vTaskInternalSetTimeOutState+0x28>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	605a      	str	r2, [r3, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	20000ea0 	.word	0x20000ea0
 8007ff8:	20000e8c 	.word	0x20000e8c

08007ffc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	613b      	str	r3, [r7, #16]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800803e:	f000 fe79 	bl	8008d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008042:	4b1d      	ldr	r3, [pc, #116]	; (80080b8 <xTaskCheckForTimeOut+0xbc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	69ba      	ldr	r2, [r7, #24]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805a:	d102      	bne.n	8008062 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e023      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	4b15      	ldr	r3, [pc, #84]	; (80080bc <xTaskCheckForTimeOut+0xc0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d007      	beq.n	800807e <xTaskCheckForTimeOut+0x82>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	e015      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	429a      	cmp	r2, r3
 8008086:	d20b      	bcs.n	80080a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	1ad2      	subs	r2, r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff ff9b 	bl	8007fd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	e004      	b.n	80080aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080aa:	f000 fe73 	bl	8008d94 <vPortExitCritical>

	return xReturn;
 80080ae:	69fb      	ldr	r3, [r7, #28]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000e8c 	.word	0x20000e8c
 80080bc:	20000ea0 	.word	0x20000ea0

080080c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <vTaskMissedYield+0x14>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	601a      	str	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	20000e9c 	.word	0x20000e9c

080080d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080e0:	f000 f852 	bl	8008188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvIdleTask+0x28>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d9f9      	bls.n	80080e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <prvIdleTask+0x2c>)
 80080ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080fc:	e7f0      	b.n	80080e0 <prvIdleTask+0x8>
 80080fe:	bf00      	nop
 8008100:	200009b8 	.word	0x200009b8
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	e00c      	b.n	800812e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4a12      	ldr	r2, [pc, #72]	; (8008168 <prvInitialiseTaskLists+0x60>)
 8008120:	4413      	add	r3, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fcf0 	bl	8006b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3301      	adds	r3, #1
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b37      	cmp	r3, #55	; 0x37
 8008132:	d9ef      	bls.n	8008114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008134:	480d      	ldr	r0, [pc, #52]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008136:	f7fe fce7 	bl	8006b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800813a:	480d      	ldr	r0, [pc, #52]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800813c:	f7fe fce4 	bl	8006b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008140:	480c      	ldr	r0, [pc, #48]	; (8008174 <prvInitialiseTaskLists+0x6c>)
 8008142:	f7fe fce1 	bl	8006b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008146:	480c      	ldr	r0, [pc, #48]	; (8008178 <prvInitialiseTaskLists+0x70>)
 8008148:	f7fe fcde 	bl	8006b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800814c:	480b      	ldr	r0, [pc, #44]	; (800817c <prvInitialiseTaskLists+0x74>)
 800814e:	f7fe fcdb 	bl	8006b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008152:	4b0b      	ldr	r3, [pc, #44]	; (8008180 <prvInitialiseTaskLists+0x78>)
 8008154:	4a05      	ldr	r2, [pc, #20]	; (800816c <prvInitialiseTaskLists+0x64>)
 8008156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvInitialiseTaskLists+0x7c>)
 800815a:	4a05      	ldr	r2, [pc, #20]	; (8008170 <prvInitialiseTaskLists+0x68>)
 800815c:	601a      	str	r2, [r3, #0]
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200009b8 	.word	0x200009b8
 800816c:	20000e18 	.word	0x20000e18
 8008170:	20000e2c 	.word	0x20000e2c
 8008174:	20000e48 	.word	0x20000e48
 8008178:	20000e5c 	.word	0x20000e5c
 800817c:	20000e74 	.word	0x20000e74
 8008180:	20000e40 	.word	0x20000e40
 8008184:	20000e44 	.word	0x20000e44

08008188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800818e:	e019      	b.n	80081c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008190:	f000 fdd0 	bl	8008d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <prvCheckTasksWaitingTermination+0x50>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe fd3b 	bl	8006c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081a6:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <prvCheckTasksWaitingTermination+0x54>)
 80081ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081b0:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081ba:	f000 fdeb 	bl	8008d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f810 	bl	80081e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081c4:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <prvCheckTasksWaitingTermination+0x58>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e1      	bne.n	8008190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081cc:	bf00      	nop
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20000e5c 	.word	0x20000e5c
 80081dc:	20000e88 	.word	0x20000e88
 80081e0:	20000e70 	.word	0x20000e70

080081e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d108      	bne.n	8008208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 ff88 	bl	8009110 <vPortFree>
				vPortFree( pxTCB );
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 ff85 	bl	8009110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008206:	e018      	b.n	800823a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800820e:	2b01      	cmp	r3, #1
 8008210:	d103      	bne.n	800821a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 ff7c 	bl	8009110 <vPortFree>
	}
 8008218:	e00f      	b.n	800823a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008220:	2b02      	cmp	r3, #2
 8008222:	d00a      	beq.n	800823a <prvDeleteTCB+0x56>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	60fb      	str	r3, [r7, #12]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <prvDeleteTCB+0x54>
	}
 800823a:	bf00      	nop
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 8008256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800825a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800825c:	e008      	b.n	8008270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <prvResetNextTaskUnblockTime+0x38>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	4a04      	ldr	r2, [pc, #16]	; (8008280 <prvResetNextTaskUnblockTime+0x3c>)
 800826e:	6013      	str	r3, [r2, #0]
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000e40 	.word	0x20000e40
 8008280:	20000ea8 	.word	0x20000ea8

08008284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800828a:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <xTaskGetSchedulerState+0x34>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008292:	2301      	movs	r3, #1
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	e008      	b.n	80082aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008298:	4b08      	ldr	r3, [pc, #32]	; (80082bc <xTaskGetSchedulerState+0x38>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082a0:	2302      	movs	r3, #2
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e001      	b.n	80082aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082aa:	687b      	ldr	r3, [r7, #4]
	}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	20000e94 	.word	0x20000e94
 80082bc:	20000eb0 	.word	0x20000eb0

080082c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d056      	beq.n	8008384 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082d6:	4b2e      	ldr	r3, [pc, #184]	; (8008390 <xTaskPriorityDisinherit+0xd0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d00a      	beq.n	80082f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008318:	1e5a      	subs	r2, r3, #1
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008326:	429a      	cmp	r2, r3
 8008328:	d02c      	beq.n	8008384 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	2b00      	cmp	r3, #0
 8008330:	d128      	bne.n	8008384 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	3304      	adds	r3, #4
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe fc70 	bl	8006c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <xTaskPriorityDisinherit+0xd4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	429a      	cmp	r2, r3
 800835a:	d903      	bls.n	8008364 <xTaskPriorityDisinherit+0xa4>
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	4a0c      	ldr	r2, [pc, #48]	; (8008394 <xTaskPriorityDisinherit+0xd4>)
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4a09      	ldr	r2, [pc, #36]	; (8008398 <xTaskPriorityDisinherit+0xd8>)
 8008372:	441a      	add	r2, r3
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3304      	adds	r3, #4
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7fe fbf1 	bl	8006b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008380:	2301      	movs	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008384:	697b      	ldr	r3, [r7, #20]
	}
 8008386:	4618      	mov	r0, r3
 8008388:	3718      	adds	r7, #24
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	200009b4 	.word	0x200009b4
 8008394:	20000e90 	.word	0x20000e90
 8008398:	200009b8 	.word	0x200009b8

0800839c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083a6:	4b21      	ldr	r3, [pc, #132]	; (800842c <prvAddCurrentTaskToDelayedList+0x90>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ac:	4b20      	ldr	r3, [pc, #128]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fe fc32 	bl	8006c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083be:	d10a      	bne.n	80083d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d007      	beq.n	80083d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083c6:	4b1a      	ldr	r3, [pc, #104]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4819      	ldr	r0, [pc, #100]	; (8008434 <prvAddCurrentTaskToDelayedList+0x98>)
 80083d0:	f7fe fbc7 	bl	8006b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083d4:	e026      	b.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80083de:	4b14      	ldr	r3, [pc, #80]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d209      	bcs.n	8008402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	4b0f      	ldr	r3, [pc, #60]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3304      	adds	r3, #4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fbd5 	bl	8006baa <vListInsert>
}
 8008400:	e010      	b.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008402:	4b0e      	ldr	r3, [pc, #56]	; (800843c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <prvAddCurrentTaskToDelayedList+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f7fe fbcb 	bl	8006baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008414:	4b0a      	ldr	r3, [pc, #40]	; (8008440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	429a      	cmp	r2, r3
 800841c:	d202      	bcs.n	8008424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800841e:	4a08      	ldr	r2, [pc, #32]	; (8008440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6013      	str	r3, [r2, #0]
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20000e8c 	.word	0x20000e8c
 8008430:	200009b4 	.word	0x200009b4
 8008434:	20000e74 	.word	0x20000e74
 8008438:	20000e44 	.word	0x20000e44
 800843c:	20000e40 	.word	0x20000e40
 8008440:	20000ea8 	.word	0x20000ea8

08008444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800844e:	f000 fb07 	bl	8008a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <xTimerCreateTimerTask+0x80>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d021      	beq.n	800849e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800845e:	2300      	movs	r3, #0
 8008460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008462:	1d3a      	adds	r2, r7, #4
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	f107 030c 	add.w	r3, r7, #12
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fb31 	bl	8006ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	9202      	str	r2, [sp, #8]
 800847a:	9301      	str	r3, [sp, #4]
 800847c:	2302      	movs	r3, #2
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	2300      	movs	r3, #0
 8008482:	460a      	mov	r2, r1
 8008484:	4910      	ldr	r1, [pc, #64]	; (80084c8 <xTimerCreateTimerTask+0x84>)
 8008486:	4811      	ldr	r0, [pc, #68]	; (80084cc <xTimerCreateTimerTask+0x88>)
 8008488:	f7ff f8de 	bl	8007648 <xTaskCreateStatic>
 800848c:	4603      	mov	r3, r0
 800848e:	4a10      	ldr	r2, [pc, #64]	; (80084d0 <xTimerCreateTimerTask+0x8c>)
 8008490:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <xTimerCreateTimerTask+0x8c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800849a:	2301      	movs	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	613b      	str	r3, [r7, #16]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084ba:	697b      	ldr	r3, [r7, #20]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000ee4 	.word	0x20000ee4
 80084c8:	0800bd94 	.word	0x0800bd94
 80084cc:	08008609 	.word	0x08008609
 80084d0:	20000ee8 	.word	0x20000ee8

080084d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08a      	sub	sp, #40	; 0x28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <xTimerGenericCommand+0x2e>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	623b      	str	r3, [r7, #32]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008502:	4b1a      	ldr	r3, [pc, #104]	; (800856c <xTimerGenericCommand+0x98>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d02a      	beq.n	8008560 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b05      	cmp	r3, #5
 800851a:	dc18      	bgt.n	800854e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800851c:	f7ff feb2 	bl	8008284 <xTaskGetSchedulerState>
 8008520:	4603      	mov	r3, r0
 8008522:	2b02      	cmp	r3, #2
 8008524:	d109      	bne.n	800853a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008526:	4b11      	ldr	r3, [pc, #68]	; (800856c <xTimerGenericCommand+0x98>)
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f107 0110 	add.w	r1, r7, #16
 800852e:	2300      	movs	r3, #0
 8008530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008532:	f7fe fca1 	bl	8006e78 <xQueueGenericSend>
 8008536:	6278      	str	r0, [r7, #36]	; 0x24
 8008538:	e012      	b.n	8008560 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800853a:	4b0c      	ldr	r3, [pc, #48]	; (800856c <xTimerGenericCommand+0x98>)
 800853c:	6818      	ldr	r0, [r3, #0]
 800853e:	f107 0110 	add.w	r1, r7, #16
 8008542:	2300      	movs	r3, #0
 8008544:	2200      	movs	r2, #0
 8008546:	f7fe fc97 	bl	8006e78 <xQueueGenericSend>
 800854a:	6278      	str	r0, [r7, #36]	; 0x24
 800854c:	e008      	b.n	8008560 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800854e:	4b07      	ldr	r3, [pc, #28]	; (800856c <xTimerGenericCommand+0x98>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f107 0110 	add.w	r1, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	f7fe fd8b 	bl	8007074 <xQueueGenericSendFromISR>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008562:	4618      	mov	r0, r3
 8008564:	3728      	adds	r7, #40	; 0x28
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000ee4 	.word	0x20000ee4

08008570 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af02      	add	r7, sp, #8
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857a:	4b22      	ldr	r3, [pc, #136]	; (8008604 <prvProcessExpiredTimer+0x94>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	3304      	adds	r3, #4
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fb47 	bl	8006c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d022      	beq.n	80085e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	699a      	ldr	r2, [r3, #24]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	18d1      	adds	r1, r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	6978      	ldr	r0, [r7, #20]
 80085aa:	f000 f8d1 	bl	8008750 <prvInsertTimerInActiveList>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01f      	beq.n	80085f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085b4:	2300      	movs	r3, #0
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7ff ff88 	bl	80084d4 <xTimerGenericCommand>
 80085c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d113      	bne.n	80085f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e8:	f023 0301 	bic.w	r3, r3, #1
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	6978      	ldr	r0, [r7, #20]
 80085fa:	4798      	blx	r3
}
 80085fc:	bf00      	nop
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20000edc 	.word	0x20000edc

08008608 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f857 	bl	80086c8 <prvGetNextExpireTime>
 800861a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4619      	mov	r1, r3
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f803 	bl	800862c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008626:	f000 f8d5 	bl	80087d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800862a:	e7f1      	b.n	8008610 <prvTimerTask+0x8>

0800862c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008636:	f7ff fa43 	bl	8007ac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800863a:	f107 0308 	add.w	r3, r7, #8
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f866 	bl	8008710 <prvSampleTimeNow>
 8008644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d130      	bne.n	80086ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <prvProcessTimerOrBlockTask+0x3c>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	429a      	cmp	r2, r3
 8008658:	d806      	bhi.n	8008668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800865a:	f7ff fa3f 	bl	8007adc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800865e:	68f9      	ldr	r1, [r7, #12]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff ff85 	bl	8008570 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008666:	e024      	b.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d008      	beq.n	8008680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800866e:	4b13      	ldr	r3, [pc, #76]	; (80086bc <prvProcessTimerOrBlockTask+0x90>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <prvProcessTimerOrBlockTask+0x50>
 8008678:	2301      	movs	r3, #1
 800867a:	e000      	b.n	800867e <prvProcessTimerOrBlockTask+0x52>
 800867c:	2300      	movs	r3, #0
 800867e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <prvProcessTimerOrBlockTask+0x94>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4619      	mov	r1, r3
 800868e:	f7fe ffa7 	bl	80075e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008692:	f7ff fa23 	bl	8007adc <xTaskResumeAll>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10a      	bne.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <prvProcessTimerOrBlockTask+0x98>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
}
 80086ac:	e001      	b.n	80086b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086ae:	f7ff fa15 	bl	8007adc <xTaskResumeAll>
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000ee0 	.word	0x20000ee0
 80086c0:	20000ee4 	.word	0x20000ee4
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086d0:	4b0e      	ldr	r3, [pc, #56]	; (800870c <prvGetNextExpireTime+0x44>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <prvGetNextExpireTime+0x16>
 80086da:	2201      	movs	r2, #1
 80086dc:	e000      	b.n	80086e0 <prvGetNextExpireTime+0x18>
 80086de:	2200      	movs	r2, #0
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086ec:	4b07      	ldr	r3, [pc, #28]	; (800870c <prvGetNextExpireTime+0x44>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	e001      	b.n	80086fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3714      	adds	r7, #20
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20000edc 	.word	0x20000edc

08008710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008718:	f7ff fa7e 	bl	8007c18 <xTaskGetTickCount>
 800871c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800871e:	4b0b      	ldr	r3, [pc, #44]	; (800874c <prvSampleTimeNow+0x3c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	429a      	cmp	r2, r3
 8008726:	d205      	bcs.n	8008734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008728:	f000 f936 	bl	8008998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e002      	b.n	800873a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800873a:	4a04      	ldr	r2, [pc, #16]	; (800874c <prvSampleTimeNow+0x3c>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000eec 	.word	0x20000eec

08008750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d812      	bhi.n	800879c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	429a      	cmp	r2, r3
 8008782:	d302      	bcc.n	800878a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008784:	2301      	movs	r3, #1
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	e01b      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <prvInsertTimerInActiveList+0x7c>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3304      	adds	r3, #4
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f7fe fa08 	bl	8006baa <vListInsert>
 800879a:	e012      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d206      	bcs.n	80087b2 <prvInsertTimerInActiveList+0x62>
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e007      	b.n	80087c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087b2:	4b07      	ldr	r3, [pc, #28]	; (80087d0 <prvInsertTimerInActiveList+0x80>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fe f9f4 	bl	8006baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087c2:	697b      	ldr	r3, [r7, #20]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000ee0 	.word	0x20000ee0
 80087d0:	20000edc 	.word	0x20000edc

080087d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08e      	sub	sp, #56	; 0x38
 80087d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087da:	e0ca      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da18      	bge.n	8008814 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80087e2:	1d3b      	adds	r3, r7, #4
 80087e4:	3304      	adds	r3, #4
 80087e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10a      	bne.n	8008804 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	61fb      	str	r3, [r7, #28]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880a:	6850      	ldr	r0, [r2, #4]
 800880c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880e:	6892      	ldr	r2, [r2, #8]
 8008810:	4611      	mov	r1, r2
 8008812:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f2c0 80aa 	blt.w	8008970 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	3304      	adds	r3, #4
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe f9f5 	bl	8006c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008832:	463b      	mov	r3, r7
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff ff6b 	bl	8008710 <prvSampleTimeNow>
 800883a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b09      	cmp	r3, #9
 8008840:	f200 8097 	bhi.w	8008972 <prvProcessReceivedCommands+0x19e>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <prvProcessReceivedCommands+0x78>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008875 	.word	0x08008875
 8008850:	08008875 	.word	0x08008875
 8008854:	08008875 	.word	0x08008875
 8008858:	080088e9 	.word	0x080088e9
 800885c:	080088fd 	.word	0x080088fd
 8008860:	08008947 	.word	0x08008947
 8008864:	08008875 	.word	0x08008875
 8008868:	08008875 	.word	0x08008875
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088fd 	.word	0x080088fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	18d1      	adds	r1, r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008894:	f7ff ff5c 	bl	8008750 <prvInsertTimerInActiveList>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d069      	beq.n	8008972 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800889e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05e      	beq.n	8008972 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	441a      	add	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2300      	movs	r3, #0
 80088c2:	2100      	movs	r1, #0
 80088c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c6:	f7ff fe05 	bl	80084d4 <xTimerGenericCommand>
 80088ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d14f      	bne.n	8008972 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	61bb      	str	r3, [r7, #24]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80088fa:	e03a      	b.n	8008972 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	617b      	str	r3, [r7, #20]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	18d1      	adds	r1, r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008940:	f7ff ff06 	bl	8008750 <prvInsertTimerInActiveList>
					break;
 8008944:	e015      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008956:	f000 fbdb 	bl	8009110 <vPortFree>
 800895a:	e00a      	b.n	8008972 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800896e:	e000      	b.n	8008972 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008970:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008972:	4b08      	ldr	r3, [pc, #32]	; (8008994 <prvProcessReceivedCommands+0x1c0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	1d39      	adds	r1, r7, #4
 8008978:	2200      	movs	r2, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fc16 	bl	80071ac <xQueueReceive>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	f47f af2a 	bne.w	80087dc <prvProcessReceivedCommands+0x8>
	}
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	3730      	adds	r7, #48	; 0x30
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20000ee4 	.word	0x20000ee4

08008998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b088      	sub	sp, #32
 800899c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800899e:	e048      	b.n	8008a32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089a0:	4b2d      	ldr	r3, [pc, #180]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089aa:	4b2b      	ldr	r3, [pc, #172]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe f92f 	bl	8006c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d02e      	beq.n	8008a32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4413      	add	r3, r2
 80089dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d90e      	bls.n	8008a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f2:	4b19      	ldr	r3, [pc, #100]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3304      	adds	r3, #4
 80089fa:	4619      	mov	r1, r3
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7fe f8d4 	bl	8006baa <vListInsert>
 8008a02:	e016      	b.n	8008a32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a04:	2300      	movs	r3, #0
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff fd60 	bl	80084d4 <xTimerGenericCommand>
 8008a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	603b      	str	r3, [r7, #0]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1b1      	bne.n	80089a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <prvSwitchTimerLists+0xc4>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a04      	ldr	r2, [pc, #16]	; (8008a58 <prvSwitchTimerLists+0xc0>)
 8008a48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <prvSwitchTimerLists+0xc4>)
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	6013      	str	r3, [r2, #0]
}
 8008a50:	bf00      	nop
 8008a52:	3718      	adds	r7, #24
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000edc 	.word	0x20000edc
 8008a5c:	20000ee0 	.word	0x20000ee0

08008a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a66:	f000 f965 	bl	8008d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d120      	bne.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a72:	4814      	ldr	r0, [pc, #80]	; (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a74:	f7fe f848 	bl	8006b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a78:	4813      	ldr	r0, [pc, #76]	; (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a7a:	f7fe f845 	bl	8006b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <prvCheckForValidListAndQueue+0x6c>)
 8008a80:	4a10      	ldr	r2, [pc, #64]	; (8008ac4 <prvCheckForValidListAndQueue+0x64>)
 8008a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a84:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <prvCheckForValidListAndQueue+0x70>)
 8008a86:	4a10      	ldr	r2, [pc, #64]	; (8008ac8 <prvCheckForValidListAndQueue+0x68>)
 8008a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <prvCheckForValidListAndQueue+0x74>)
 8008a90:	4a11      	ldr	r2, [pc, #68]	; (8008ad8 <prvCheckForValidListAndQueue+0x78>)
 8008a92:	2110      	movs	r1, #16
 8008a94:	200a      	movs	r0, #10
 8008a96:	f7fe f953 	bl	8006d40 <xQueueGenericCreateStatic>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008a9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008aa8:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <prvCheckForValidListAndQueue+0x60>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	490b      	ldr	r1, [pc, #44]	; (8008adc <prvCheckForValidListAndQueue+0x7c>)
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fd6c 	bl	800758c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ab4:	f000 f96e 	bl	8008d94 <vPortExitCritical>
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000ee4 	.word	0x20000ee4
 8008ac4:	20000eb4 	.word	0x20000eb4
 8008ac8:	20000ec8 	.word	0x20000ec8
 8008acc:	20000edc 	.word	0x20000edc
 8008ad0:	20000ee0 	.word	0x20000ee0
 8008ad4:	20000f90 	.word	0x20000f90
 8008ad8:	20000ef0 	.word	0x20000ef0
 8008adc:	0800bd9c 	.word	0x0800bd9c

08008ae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3b04      	subs	r3, #4
 8008af0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b04      	subs	r3, #4
 8008afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0201 	bic.w	r2, r3, #1
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3b04      	subs	r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b10:	4a0c      	ldr	r2, [pc, #48]	; (8008b44 <pxPortInitialiseStack+0x64>)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b14      	subs	r3, #20
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f06f 0202 	mvn.w	r2, #2
 8008b2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3b20      	subs	r3, #32
 8008b34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b36:	68fb      	ldr	r3, [r7, #12]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	08008b49 	.word	0x08008b49

08008b48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b52:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <prvTaskExitError+0x54>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b5a:	d00a      	beq.n	8008b72 <prvTaskExitError+0x2a>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	60fb      	str	r3, [r7, #12]
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <prvTaskExitError+0x28>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60bb      	str	r3, [r7, #8]
}
 8008b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b86:	bf00      	nop
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0fc      	beq.n	8008b88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	200000f4 	.word	0x200000f4

08008ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <pxCurrentTCBConst2>)
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	6808      	ldr	r0, [r1, #0]
 8008ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008baa:	f380 8809 	msr	PSP, r0
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8811 	msr	BASEPRI, r0
 8008bba:	4770      	bx	lr
 8008bbc:	f3af 8000 	nop.w

08008bc0 <pxCurrentTCBConst2>:
 8008bc0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop

08008bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bc8:	4808      	ldr	r0, [pc, #32]	; (8008bec <prvPortStartFirstTask+0x24>)
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	6800      	ldr	r0, [r0, #0]
 8008bce:	f380 8808 	msr	MSP, r0
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8814 	msr	CONTROL, r0
 8008bda:	b662      	cpsie	i
 8008bdc:	b661      	cpsie	f
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	df00      	svc	0
 8008be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bea:	bf00      	nop
 8008bec:	e000ed08 	.word	0xe000ed08

08008bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bf6:	4b46      	ldr	r3, [pc, #280]	; (8008d10 <xPortStartScheduler+0x120>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a46      	ldr	r2, [pc, #280]	; (8008d14 <xPortStartScheduler+0x124>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d10a      	bne.n	8008c16 <xPortStartScheduler+0x26>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	613b      	str	r3, [r7, #16]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c16:	4b3e      	ldr	r3, [pc, #248]	; (8008d10 <xPortStartScheduler+0x120>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <xPortStartScheduler+0x128>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d10a      	bne.n	8008c36 <xPortStartScheduler+0x46>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	60fb      	str	r3, [r7, #12]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c36:	4b39      	ldr	r3, [pc, #228]	; (8008d1c <xPortStartScheduler+0x12c>)
 8008c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	22ff      	movs	r2, #255	; 0xff
 8008c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b31      	ldr	r3, [pc, #196]	; (8008d20 <xPortStartScheduler+0x130>)
 8008c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c5e:	4b31      	ldr	r3, [pc, #196]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c60:	2207      	movs	r2, #7
 8008c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c64:	e009      	b.n	8008c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c66:	4b2f      	ldr	r3, [pc, #188]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	4a2d      	ldr	r2, [pc, #180]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d0ef      	beq.n	8008c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c86:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <xPortStartScheduler+0x134>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f1c3 0307 	rsb	r3, r3, #7
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d00a      	beq.n	8008ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ca8:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <xPortStartScheduler+0x134>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cb2:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cba:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <xPortStartScheduler+0x134>)
 8008cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cc6:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a17      	ldr	r2, [pc, #92]	; (8008d28 <xPortStartScheduler+0x138>)
 8008ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a14      	ldr	r2, [pc, #80]	; (8008d28 <xPortStartScheduler+0x138>)
 8008cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cde:	f000 f8dd 	bl	8008e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ce2:	4b12      	ldr	r3, [pc, #72]	; (8008d2c <xPortStartScheduler+0x13c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ce8:	f000 f8fc 	bl	8008ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cec:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <xPortStartScheduler+0x140>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0f      	ldr	r2, [pc, #60]	; (8008d30 <xPortStartScheduler+0x140>)
 8008cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cf8:	f7ff ff66 	bl	8008bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cfc:	f7ff f856 	bl	8007dac <vTaskSwitchContext>
	prvTaskExitError();
 8008d00:	f7ff ff22 	bl	8008b48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	e000ed00 	.word	0xe000ed00
 8008d14:	410fc271 	.word	0x410fc271
 8008d18:	410fc270 	.word	0x410fc270
 8008d1c:	e000e400 	.word	0xe000e400
 8008d20:	20000fe0 	.word	0x20000fe0
 8008d24:	20000fe4 	.word	0x20000fe4
 8008d28:	e000ed20 	.word	0xe000ed20
 8008d2c:	200000f4 	.word	0x200000f4
 8008d30:	e000ef34 	.word	0xe000ef34

08008d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
}
 8008d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	4a0d      	ldr	r2, [pc, #52]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <vPortEnterCritical+0x58>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d10f      	bne.n	8008d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <vPortEnterCritical+0x5c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	603b      	str	r3, [r7, #0]
}
 8008d7c:	bf00      	nop
 8008d7e:	e7fe      	b.n	8008d7e <vPortEnterCritical+0x4a>
	}
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	200000f4 	.word	0x200000f4
 8008d90:	e000ed04 	.word	0xe000ed04

08008d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d9a:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <vPortExitCritical+0x50>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <vPortExitCritical+0x24>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	607b      	str	r3, [r7, #4]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <vPortExitCritical+0x50>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <vPortExitCritical+0x50>)
 8008dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <vPortExitCritical+0x50>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d105      	bne.n	8008dd6 <vPortExitCritical+0x42>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	f383 8811 	msr	BASEPRI, r3
}
 8008dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	200000f4 	.word	0x200000f4
	...

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	f01e 0f10 	tst.w	lr, #16
 8008e00:	bf08      	it	eq
 8008e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0a:	6010      	str	r0, [r2, #0]
 8008e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e14:	f380 8811 	msr	BASEPRI, r0
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f7fe ffc4 	bl	8007dac <vTaskSwitchContext>
 8008e24:	f04f 0000 	mov.w	r0, #0
 8008e28:	f380 8811 	msr	BASEPRI, r0
 8008e2c:	bc09      	pop	{r0, r3}
 8008e2e:	6819      	ldr	r1, [r3, #0]
 8008e30:	6808      	ldr	r0, [r1, #0]
 8008e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e36:	f01e 0f10 	tst.w	lr, #16
 8008e3a:	bf08      	it	eq
 8008e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e40:	f380 8809 	msr	PSP, r0
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w

08008e50 <pxCurrentTCBConst>:
 8008e50:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop

08008e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	607b      	str	r3, [r7, #4]
}
 8008e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e72:	f7fe fee1 	bl	8007c38 <xTaskIncrementTick>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <xPortSysTickHandler+0x40>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f383 8811 	msr	BASEPRI, r3
}
 8008e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <vPortSetupTimerInterrupt+0x38>)
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <vPortSetupTimerInterrupt+0x3c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <vPortSetupTimerInterrupt+0x40>)
 8008eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <vPortSetupTimerInterrupt+0x44>)
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ebe:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <vPortSetupTimerInterrupt+0x34>)
 8008ec0:	2207      	movs	r2, #7
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	e000e010 	.word	0xe000e010
 8008ed4:	e000e018 	.word	0xe000e018
 8008ed8:	20000000 	.word	0x20000000
 8008edc:	10624dd3 	.word	0x10624dd3
 8008ee0:	e000e014 	.word	0xe000e014

08008ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ef4 <vPortEnableVFP+0x10>
 8008ee8:	6801      	ldr	r1, [r0, #0]
 8008eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eee:	6001      	str	r1, [r0, #0]
 8008ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ef2:	bf00      	nop
 8008ef4:	e000ed88 	.word	0xe000ed88

08008ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008efe:	f3ef 8305 	mrs	r3, IPSR
 8008f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2b0f      	cmp	r3, #15
 8008f08:	d914      	bls.n	8008f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <vPortValidateInterruptPriority+0x70>)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f14:	4b15      	ldr	r3, [pc, #84]	; (8008f6c <vPortValidateInterruptPriority+0x74>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	7afa      	ldrb	r2, [r7, #11]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d20a      	bcs.n	8008f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	607b      	str	r3, [r7, #4]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <vPortValidateInterruptPriority+0x78>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <vPortValidateInterruptPriority+0x7c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d90a      	bls.n	8008f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	603b      	str	r3, [r7, #0]
}
 8008f56:	bf00      	nop
 8008f58:	e7fe      	b.n	8008f58 <vPortValidateInterruptPriority+0x60>
	}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	e000e3f0 	.word	0xe000e3f0
 8008f6c:	20000fe0 	.word	0x20000fe0
 8008f70:	e000ed0c 	.word	0xe000ed0c
 8008f74:	20000fe4 	.word	0x20000fe4

08008f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	; 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f84:	f7fe fd9c 	bl	8007ac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f88:	4b5b      	ldr	r3, [pc, #364]	; (80090f8 <pvPortMalloc+0x180>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f90:	f000 f920 	bl	80091d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f94:	4b59      	ldr	r3, [pc, #356]	; (80090fc <pvPortMalloc+0x184>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8093 	bne.w	80090c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d01d      	beq.n	8008fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fa8:	2208      	movs	r2, #8
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4413      	add	r3, r2
 8008fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d014      	beq.n	8008fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	617b      	str	r3, [r7, #20]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d06e      	beq.n	80090c8 <pvPortMalloc+0x150>
 8008fea:	4b45      	ldr	r3, [pc, #276]	; (8009100 <pvPortMalloc+0x188>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d869      	bhi.n	80090c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ff4:	4b43      	ldr	r3, [pc, #268]	; (8009104 <pvPortMalloc+0x18c>)
 8008ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ff8:	4b42      	ldr	r3, [pc, #264]	; (8009104 <pvPortMalloc+0x18c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ffe:	e004      	b.n	800900a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d903      	bls.n	800901c <pvPortMalloc+0xa4>
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f1      	bne.n	8009000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800901c:	4b36      	ldr	r3, [pc, #216]	; (80090f8 <pvPortMalloc+0x180>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009022:	429a      	cmp	r2, r3
 8009024:	d050      	beq.n	80090c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2208      	movs	r2, #8
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	2308      	movs	r3, #8
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	429a      	cmp	r2, r3
 8009046:	d91f      	bls.n	8009088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00a      	beq.n	8009070 <pvPortMalloc+0xf8>
	__asm volatile
 800905a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905e:	f383 8811 	msr	BASEPRI, r3
 8009062:	f3bf 8f6f 	isb	sy
 8009066:	f3bf 8f4f 	dsb	sy
 800906a:	613b      	str	r3, [r7, #16]
}
 800906c:	bf00      	nop
 800906e:	e7fe      	b.n	800906e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	1ad2      	subs	r2, r2, r3
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009082:	69b8      	ldr	r0, [r7, #24]
 8009084:	f000 f908 	bl	8009298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009088:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <pvPortMalloc+0x188>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1b      	ldr	r2, [pc, #108]	; (8009100 <pvPortMalloc+0x188>)
 8009094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009096:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <pvPortMalloc+0x188>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <pvPortMalloc+0x190>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d203      	bcs.n	80090aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090a2:	4b17      	ldr	r3, [pc, #92]	; (8009100 <pvPortMalloc+0x188>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a18      	ldr	r2, [pc, #96]	; (8009108 <pvPortMalloc+0x190>)
 80090a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <pvPortMalloc+0x184>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	431a      	orrs	r2, r3
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <pvPortMalloc+0x194>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	4a11      	ldr	r2, [pc, #68]	; (800910c <pvPortMalloc+0x194>)
 80090c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c8:	f7fe fd08 	bl	8007adc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <pvPortMalloc+0x174>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	e7fe      	b.n	80090ea <pvPortMalloc+0x172>
	return pvReturn;
 80090ec:	69fb      	ldr	r3, [r7, #28]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20001ba8 	.word	0x20001ba8
 80090fc:	20001bbc 	.word	0x20001bbc
 8009100:	20001bac 	.word	0x20001bac
 8009104:	20001ba0 	.word	0x20001ba0
 8009108:	20001bb0 	.word	0x20001bb0
 800910c:	20001bb4 	.word	0x20001bb4

08009110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d04d      	beq.n	80091be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009122:	2308      	movs	r3, #8
 8009124:	425b      	negs	r3, r3
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4413      	add	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <vPortFree+0xb8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4013      	ands	r3, r2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10a      	bne.n	8009154 <vPortFree+0x44>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	60fb      	str	r3, [r7, #12]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00a      	beq.n	8009172 <vPortFree+0x62>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60bb      	str	r3, [r7, #8]
}
 800916e:	bf00      	nop
 8009170:	e7fe      	b.n	8009170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <vPortFree+0xb8>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4013      	ands	r3, r2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01e      	beq.n	80091be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11a      	bne.n	80091be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	4b0e      	ldr	r3, [pc, #56]	; (80091c8 <vPortFree+0xb8>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	43db      	mvns	r3, r3
 8009192:	401a      	ands	r2, r3
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009198:	f7fe fc92 	bl	8007ac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <vPortFree+0xbc>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4413      	add	r3, r2
 80091a6:	4a09      	ldr	r2, [pc, #36]	; (80091cc <vPortFree+0xbc>)
 80091a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091aa:	6938      	ldr	r0, [r7, #16]
 80091ac:	f000 f874 	bl	8009298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <vPortFree+0xc0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a06      	ldr	r2, [pc, #24]	; (80091d0 <vPortFree+0xc0>)
 80091b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ba:	f7fe fc8f 	bl	8007adc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091be:	bf00      	nop
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20001bbc 	.word	0x20001bbc
 80091cc:	20001bac 	.word	0x20001bac
 80091d0:	20001bb8 	.word	0x20001bb8

080091d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80091de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091e0:	4b27      	ldr	r3, [pc, #156]	; (8009280 <prvHeapInit+0xac>)
 80091e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00c      	beq.n	8009208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3307      	adds	r3, #7
 80091f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <prvHeapInit+0xac>)
 8009204:	4413      	add	r3, r2
 8009206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800920c:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <prvHeapInit+0xb0>)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <prvHeapInit+0xb0>)
 8009214:	2200      	movs	r2, #0
 8009216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009220:	2208      	movs	r2, #8
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0307 	bic.w	r3, r3, #7
 800922e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a15      	ldr	r2, [pc, #84]	; (8009288 <prvHeapInit+0xb4>)
 8009234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <prvHeapInit+0xb4>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <prvHeapInit+0xb4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	1ad2      	subs	r2, r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009254:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvHeapInit+0xb4>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a0a      	ldr	r2, [pc, #40]	; (800928c <prvHeapInit+0xb8>)
 8009262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	4a09      	ldr	r2, [pc, #36]	; (8009290 <prvHeapInit+0xbc>)
 800926a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800926c:	4b09      	ldr	r3, [pc, #36]	; (8009294 <prvHeapInit+0xc0>)
 800926e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009272:	601a      	str	r2, [r3, #0]
}
 8009274:	bf00      	nop
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000fe8 	.word	0x20000fe8
 8009284:	20001ba0 	.word	0x20001ba0
 8009288:	20001ba8 	.word	0x20001ba8
 800928c:	20001bb0 	.word	0x20001bb0
 8009290:	20001bac 	.word	0x20001bac
 8009294:	20001bbc 	.word	0x20001bbc

08009298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092a0:	4b28      	ldr	r3, [pc, #160]	; (8009344 <prvInsertBlockIntoFreeList+0xac>)
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e002      	b.n	80092ac <prvInsertBlockIntoFreeList+0x14>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d8f7      	bhi.n	80092a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4413      	add	r3, r2
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d108      	bne.n	80092da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	441a      	add	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	441a      	add	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d118      	bne.n	8009320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b15      	ldr	r3, [pc, #84]	; (8009348 <prvInsertBlockIntoFreeList+0xb0>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d00d      	beq.n	8009316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	441a      	add	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e008      	b.n	8009328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009316:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <prvInsertBlockIntoFreeList+0xb0>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e003      	b.n	8009328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d002      	beq.n	8009336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009336:	bf00      	nop
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	20001ba0 	.word	0x20001ba0
 8009348:	20001ba8 	.word	0x20001ba8

0800934c <__errno>:
 800934c:	4b01      	ldr	r3, [pc, #4]	; (8009354 <__errno+0x8>)
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	200000f8 	.word	0x200000f8

08009358 <__libc_init_array>:
 8009358:	b570      	push	{r4, r5, r6, lr}
 800935a:	4d0d      	ldr	r5, [pc, #52]	; (8009390 <__libc_init_array+0x38>)
 800935c:	4c0d      	ldr	r4, [pc, #52]	; (8009394 <__libc_init_array+0x3c>)
 800935e:	1b64      	subs	r4, r4, r5
 8009360:	10a4      	asrs	r4, r4, #2
 8009362:	2600      	movs	r6, #0
 8009364:	42a6      	cmp	r6, r4
 8009366:	d109      	bne.n	800937c <__libc_init_array+0x24>
 8009368:	4d0b      	ldr	r5, [pc, #44]	; (8009398 <__libc_init_array+0x40>)
 800936a:	4c0c      	ldr	r4, [pc, #48]	; (800939c <__libc_init_array+0x44>)
 800936c:	f002 fcfa 	bl	800bd64 <_init>
 8009370:	1b64      	subs	r4, r4, r5
 8009372:	10a4      	asrs	r4, r4, #2
 8009374:	2600      	movs	r6, #0
 8009376:	42a6      	cmp	r6, r4
 8009378:	d105      	bne.n	8009386 <__libc_init_array+0x2e>
 800937a:	bd70      	pop	{r4, r5, r6, pc}
 800937c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009380:	4798      	blx	r3
 8009382:	3601      	adds	r6, #1
 8009384:	e7ee      	b.n	8009364 <__libc_init_array+0xc>
 8009386:	f855 3b04 	ldr.w	r3, [r5], #4
 800938a:	4798      	blx	r3
 800938c:	3601      	adds	r6, #1
 800938e:	e7f2      	b.n	8009376 <__libc_init_array+0x1e>
 8009390:	0800c1fc 	.word	0x0800c1fc
 8009394:	0800c1fc 	.word	0x0800c1fc
 8009398:	0800c1fc 	.word	0x0800c1fc
 800939c:	0800c200 	.word	0x0800c200

080093a0 <malloc>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <malloc+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f000 b871 	b.w	800948c <_malloc_r>
 80093aa:	bf00      	nop
 80093ac:	200000f8 	.word	0x200000f8

080093b0 <free>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <free+0xc>)
 80093b2:	4601      	mov	r1, r0
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f000 b819 	b.w	80093ec <_free_r>
 80093ba:	bf00      	nop
 80093bc:	200000f8 	.word	0x200000f8

080093c0 <memcpy>:
 80093c0:	440a      	add	r2, r1
 80093c2:	4291      	cmp	r1, r2
 80093c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093c8:	d100      	bne.n	80093cc <memcpy+0xc>
 80093ca:	4770      	bx	lr
 80093cc:	b510      	push	{r4, lr}
 80093ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093d6:	4291      	cmp	r1, r2
 80093d8:	d1f9      	bne.n	80093ce <memcpy+0xe>
 80093da:	bd10      	pop	{r4, pc}

080093dc <memset>:
 80093dc:	4402      	add	r2, r0
 80093de:	4603      	mov	r3, r0
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d100      	bne.n	80093e6 <memset+0xa>
 80093e4:	4770      	bx	lr
 80093e6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ea:	e7f9      	b.n	80093e0 <memset+0x4>

080093ec <_free_r>:
 80093ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ee:	2900      	cmp	r1, #0
 80093f0:	d048      	beq.n	8009484 <_free_r+0x98>
 80093f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f6:	9001      	str	r0, [sp, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f1a1 0404 	sub.w	r4, r1, #4
 80093fe:	bfb8      	it	lt
 8009400:	18e4      	addlt	r4, r4, r3
 8009402:	f001 fb95 	bl	800ab30 <__malloc_lock>
 8009406:	4a20      	ldr	r2, [pc, #128]	; (8009488 <_free_r+0x9c>)
 8009408:	9801      	ldr	r0, [sp, #4]
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	4615      	mov	r5, r2
 800940e:	b933      	cbnz	r3, 800941e <_free_r+0x32>
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	6014      	str	r4, [r2, #0]
 8009414:	b003      	add	sp, #12
 8009416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800941a:	f001 bb8f 	b.w	800ab3c <__malloc_unlock>
 800941e:	42a3      	cmp	r3, r4
 8009420:	d90b      	bls.n	800943a <_free_r+0x4e>
 8009422:	6821      	ldr	r1, [r4, #0]
 8009424:	1862      	adds	r2, r4, r1
 8009426:	4293      	cmp	r3, r2
 8009428:	bf04      	itt	eq
 800942a:	681a      	ldreq	r2, [r3, #0]
 800942c:	685b      	ldreq	r3, [r3, #4]
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	bf04      	itt	eq
 8009432:	1852      	addeq	r2, r2, r1
 8009434:	6022      	streq	r2, [r4, #0]
 8009436:	602c      	str	r4, [r5, #0]
 8009438:	e7ec      	b.n	8009414 <_free_r+0x28>
 800943a:	461a      	mov	r2, r3
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	b10b      	cbz	r3, 8009444 <_free_r+0x58>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d9fa      	bls.n	800943a <_free_r+0x4e>
 8009444:	6811      	ldr	r1, [r2, #0]
 8009446:	1855      	adds	r5, r2, r1
 8009448:	42a5      	cmp	r5, r4
 800944a:	d10b      	bne.n	8009464 <_free_r+0x78>
 800944c:	6824      	ldr	r4, [r4, #0]
 800944e:	4421      	add	r1, r4
 8009450:	1854      	adds	r4, r2, r1
 8009452:	42a3      	cmp	r3, r4
 8009454:	6011      	str	r1, [r2, #0]
 8009456:	d1dd      	bne.n	8009414 <_free_r+0x28>
 8009458:	681c      	ldr	r4, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	4421      	add	r1, r4
 8009460:	6011      	str	r1, [r2, #0]
 8009462:	e7d7      	b.n	8009414 <_free_r+0x28>
 8009464:	d902      	bls.n	800946c <_free_r+0x80>
 8009466:	230c      	movs	r3, #12
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	e7d3      	b.n	8009414 <_free_r+0x28>
 800946c:	6825      	ldr	r5, [r4, #0]
 800946e:	1961      	adds	r1, r4, r5
 8009470:	428b      	cmp	r3, r1
 8009472:	bf04      	itt	eq
 8009474:	6819      	ldreq	r1, [r3, #0]
 8009476:	685b      	ldreq	r3, [r3, #4]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	bf04      	itt	eq
 800947c:	1949      	addeq	r1, r1, r5
 800947e:	6021      	streq	r1, [r4, #0]
 8009480:	6054      	str	r4, [r2, #4]
 8009482:	e7c7      	b.n	8009414 <_free_r+0x28>
 8009484:	b003      	add	sp, #12
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	20001bc0 	.word	0x20001bc0

0800948c <_malloc_r>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	1ccd      	adds	r5, r1, #3
 8009490:	f025 0503 	bic.w	r5, r5, #3
 8009494:	3508      	adds	r5, #8
 8009496:	2d0c      	cmp	r5, #12
 8009498:	bf38      	it	cc
 800949a:	250c      	movcc	r5, #12
 800949c:	2d00      	cmp	r5, #0
 800949e:	4606      	mov	r6, r0
 80094a0:	db01      	blt.n	80094a6 <_malloc_r+0x1a>
 80094a2:	42a9      	cmp	r1, r5
 80094a4:	d903      	bls.n	80094ae <_malloc_r+0x22>
 80094a6:	230c      	movs	r3, #12
 80094a8:	6033      	str	r3, [r6, #0]
 80094aa:	2000      	movs	r0, #0
 80094ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ae:	f001 fb3f 	bl	800ab30 <__malloc_lock>
 80094b2:	4921      	ldr	r1, [pc, #132]	; (8009538 <_malloc_r+0xac>)
 80094b4:	680a      	ldr	r2, [r1, #0]
 80094b6:	4614      	mov	r4, r2
 80094b8:	b99c      	cbnz	r4, 80094e2 <_malloc_r+0x56>
 80094ba:	4f20      	ldr	r7, [pc, #128]	; (800953c <_malloc_r+0xb0>)
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	b923      	cbnz	r3, 80094ca <_malloc_r+0x3e>
 80094c0:	4621      	mov	r1, r4
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 fca6 	bl	8009e14 <_sbrk_r>
 80094c8:	6038      	str	r0, [r7, #0]
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	f000 fca1 	bl	8009e14 <_sbrk_r>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	d123      	bne.n	800951e <_malloc_r+0x92>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	4630      	mov	r0, r6
 80094dc:	f001 fb2e 	bl	800ab3c <__malloc_unlock>
 80094e0:	e7e3      	b.n	80094aa <_malloc_r+0x1e>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	1b5b      	subs	r3, r3, r5
 80094e6:	d417      	bmi.n	8009518 <_malloc_r+0x8c>
 80094e8:	2b0b      	cmp	r3, #11
 80094ea:	d903      	bls.n	80094f4 <_malloc_r+0x68>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	441c      	add	r4, r3
 80094f0:	6025      	str	r5, [r4, #0]
 80094f2:	e004      	b.n	80094fe <_malloc_r+0x72>
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	42a2      	cmp	r2, r4
 80094f8:	bf0c      	ite	eq
 80094fa:	600b      	streq	r3, [r1, #0]
 80094fc:	6053      	strne	r3, [r2, #4]
 80094fe:	4630      	mov	r0, r6
 8009500:	f001 fb1c 	bl	800ab3c <__malloc_unlock>
 8009504:	f104 000b 	add.w	r0, r4, #11
 8009508:	1d23      	adds	r3, r4, #4
 800950a:	f020 0007 	bic.w	r0, r0, #7
 800950e:	1ac2      	subs	r2, r0, r3
 8009510:	d0cc      	beq.n	80094ac <_malloc_r+0x20>
 8009512:	1a1b      	subs	r3, r3, r0
 8009514:	50a3      	str	r3, [r4, r2]
 8009516:	e7c9      	b.n	80094ac <_malloc_r+0x20>
 8009518:	4622      	mov	r2, r4
 800951a:	6864      	ldr	r4, [r4, #4]
 800951c:	e7cc      	b.n	80094b8 <_malloc_r+0x2c>
 800951e:	1cc4      	adds	r4, r0, #3
 8009520:	f024 0403 	bic.w	r4, r4, #3
 8009524:	42a0      	cmp	r0, r4
 8009526:	d0e3      	beq.n	80094f0 <_malloc_r+0x64>
 8009528:	1a21      	subs	r1, r4, r0
 800952a:	4630      	mov	r0, r6
 800952c:	f000 fc72 	bl	8009e14 <_sbrk_r>
 8009530:	3001      	adds	r0, #1
 8009532:	d1dd      	bne.n	80094f0 <_malloc_r+0x64>
 8009534:	e7cf      	b.n	80094d6 <_malloc_r+0x4a>
 8009536:	bf00      	nop
 8009538:	20001bc0 	.word	0x20001bc0
 800953c:	20001bc4 	.word	0x20001bc4

08009540 <__cvt>:
 8009540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009544:	ec55 4b10 	vmov	r4, r5, d0
 8009548:	2d00      	cmp	r5, #0
 800954a:	460e      	mov	r6, r1
 800954c:	4619      	mov	r1, r3
 800954e:	462b      	mov	r3, r5
 8009550:	bfbb      	ittet	lt
 8009552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009556:	461d      	movlt	r5, r3
 8009558:	2300      	movge	r3, #0
 800955a:	232d      	movlt	r3, #45	; 0x2d
 800955c:	700b      	strb	r3, [r1, #0]
 800955e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009560:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009564:	4691      	mov	r9, r2
 8009566:	f023 0820 	bic.w	r8, r3, #32
 800956a:	bfbc      	itt	lt
 800956c:	4622      	movlt	r2, r4
 800956e:	4614      	movlt	r4, r2
 8009570:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009574:	d005      	beq.n	8009582 <__cvt+0x42>
 8009576:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800957a:	d100      	bne.n	800957e <__cvt+0x3e>
 800957c:	3601      	adds	r6, #1
 800957e:	2102      	movs	r1, #2
 8009580:	e000      	b.n	8009584 <__cvt+0x44>
 8009582:	2103      	movs	r1, #3
 8009584:	ab03      	add	r3, sp, #12
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	ab02      	add	r3, sp, #8
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	ec45 4b10 	vmov	d0, r4, r5
 8009590:	4653      	mov	r3, sl
 8009592:	4632      	mov	r2, r6
 8009594:	f000 fcdc 	bl	8009f50 <_dtoa_r>
 8009598:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800959c:	4607      	mov	r7, r0
 800959e:	d102      	bne.n	80095a6 <__cvt+0x66>
 80095a0:	f019 0f01 	tst.w	r9, #1
 80095a4:	d022      	beq.n	80095ec <__cvt+0xac>
 80095a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095aa:	eb07 0906 	add.w	r9, r7, r6
 80095ae:	d110      	bne.n	80095d2 <__cvt+0x92>
 80095b0:	783b      	ldrb	r3, [r7, #0]
 80095b2:	2b30      	cmp	r3, #48	; 0x30
 80095b4:	d10a      	bne.n	80095cc <__cvt+0x8c>
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4620      	mov	r0, r4
 80095bc:	4629      	mov	r1, r5
 80095be:	f7f7 fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80095c2:	b918      	cbnz	r0, 80095cc <__cvt+0x8c>
 80095c4:	f1c6 0601 	rsb	r6, r6, #1
 80095c8:	f8ca 6000 	str.w	r6, [sl]
 80095cc:	f8da 3000 	ldr.w	r3, [sl]
 80095d0:	4499      	add	r9, r3
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80095de:	b108      	cbz	r0, 80095e4 <__cvt+0xa4>
 80095e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095e4:	2230      	movs	r2, #48	; 0x30
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	454b      	cmp	r3, r9
 80095ea:	d307      	bcc.n	80095fc <__cvt+0xbc>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095f0:	1bdb      	subs	r3, r3, r7
 80095f2:	4638      	mov	r0, r7
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	b004      	add	sp, #16
 80095f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fc:	1c59      	adds	r1, r3, #1
 80095fe:	9103      	str	r1, [sp, #12]
 8009600:	701a      	strb	r2, [r3, #0]
 8009602:	e7f0      	b.n	80095e6 <__cvt+0xa6>

08009604 <__exponent>:
 8009604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009606:	4603      	mov	r3, r0
 8009608:	2900      	cmp	r1, #0
 800960a:	bfb8      	it	lt
 800960c:	4249      	neglt	r1, r1
 800960e:	f803 2b02 	strb.w	r2, [r3], #2
 8009612:	bfb4      	ite	lt
 8009614:	222d      	movlt	r2, #45	; 0x2d
 8009616:	222b      	movge	r2, #43	; 0x2b
 8009618:	2909      	cmp	r1, #9
 800961a:	7042      	strb	r2, [r0, #1]
 800961c:	dd2a      	ble.n	8009674 <__exponent+0x70>
 800961e:	f10d 0407 	add.w	r4, sp, #7
 8009622:	46a4      	mov	ip, r4
 8009624:	270a      	movs	r7, #10
 8009626:	46a6      	mov	lr, r4
 8009628:	460a      	mov	r2, r1
 800962a:	fb91 f6f7 	sdiv	r6, r1, r7
 800962e:	fb07 1516 	mls	r5, r7, r6, r1
 8009632:	3530      	adds	r5, #48	; 0x30
 8009634:	2a63      	cmp	r2, #99	; 0x63
 8009636:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800963a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800963e:	4631      	mov	r1, r6
 8009640:	dcf1      	bgt.n	8009626 <__exponent+0x22>
 8009642:	3130      	adds	r1, #48	; 0x30
 8009644:	f1ae 0502 	sub.w	r5, lr, #2
 8009648:	f804 1c01 	strb.w	r1, [r4, #-1]
 800964c:	1c44      	adds	r4, r0, #1
 800964e:	4629      	mov	r1, r5
 8009650:	4561      	cmp	r1, ip
 8009652:	d30a      	bcc.n	800966a <__exponent+0x66>
 8009654:	f10d 0209 	add.w	r2, sp, #9
 8009658:	eba2 020e 	sub.w	r2, r2, lr
 800965c:	4565      	cmp	r5, ip
 800965e:	bf88      	it	hi
 8009660:	2200      	movhi	r2, #0
 8009662:	4413      	add	r3, r2
 8009664:	1a18      	subs	r0, r3, r0
 8009666:	b003      	add	sp, #12
 8009668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009672:	e7ed      	b.n	8009650 <__exponent+0x4c>
 8009674:	2330      	movs	r3, #48	; 0x30
 8009676:	3130      	adds	r1, #48	; 0x30
 8009678:	7083      	strb	r3, [r0, #2]
 800967a:	70c1      	strb	r1, [r0, #3]
 800967c:	1d03      	adds	r3, r0, #4
 800967e:	e7f1      	b.n	8009664 <__exponent+0x60>

08009680 <_printf_float>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	ed2d 8b02 	vpush	{d8}
 8009688:	b08d      	sub	sp, #52	; 0x34
 800968a:	460c      	mov	r4, r1
 800968c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009690:	4616      	mov	r6, r2
 8009692:	461f      	mov	r7, r3
 8009694:	4605      	mov	r5, r0
 8009696:	f001 fa47 	bl	800ab28 <_localeconv_r>
 800969a:	f8d0 a000 	ldr.w	sl, [r0]
 800969e:	4650      	mov	r0, sl
 80096a0:	f7f6 fd96 	bl	80001d0 <strlen>
 80096a4:	2300      	movs	r3, #0
 80096a6:	930a      	str	r3, [sp, #40]	; 0x28
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	f8d8 3000 	ldr.w	r3, [r8]
 80096b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096b4:	3307      	adds	r3, #7
 80096b6:	f023 0307 	bic.w	r3, r3, #7
 80096ba:	f103 0208 	add.w	r2, r3, #8
 80096be:	f8c8 2000 	str.w	r2, [r8]
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096d2:	9307      	str	r3, [sp, #28]
 80096d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80096d8:	ee08 0a10 	vmov	s16, r0
 80096dc:	4b9f      	ldr	r3, [pc, #636]	; (800995c <_printf_float+0x2dc>)
 80096de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096e6:	f7f7 fa21 	bl	8000b2c <__aeabi_dcmpun>
 80096ea:	bb88      	cbnz	r0, 8009750 <_printf_float+0xd0>
 80096ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096f0:	4b9a      	ldr	r3, [pc, #616]	; (800995c <_printf_float+0x2dc>)
 80096f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096f6:	f7f7 f9fb 	bl	8000af0 <__aeabi_dcmple>
 80096fa:	bb48      	cbnz	r0, 8009750 <_printf_float+0xd0>
 80096fc:	2200      	movs	r2, #0
 80096fe:	2300      	movs	r3, #0
 8009700:	4640      	mov	r0, r8
 8009702:	4649      	mov	r1, r9
 8009704:	f7f7 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8009708:	b110      	cbz	r0, 8009710 <_printf_float+0x90>
 800970a:	232d      	movs	r3, #45	; 0x2d
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009710:	4b93      	ldr	r3, [pc, #588]	; (8009960 <_printf_float+0x2e0>)
 8009712:	4894      	ldr	r0, [pc, #592]	; (8009964 <_printf_float+0x2e4>)
 8009714:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009718:	bf94      	ite	ls
 800971a:	4698      	movls	r8, r3
 800971c:	4680      	movhi	r8, r0
 800971e:	2303      	movs	r3, #3
 8009720:	6123      	str	r3, [r4, #16]
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	f023 0204 	bic.w	r2, r3, #4
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	9700      	str	r7, [sp, #0]
 8009730:	4633      	mov	r3, r6
 8009732:	aa0b      	add	r2, sp, #44	; 0x2c
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f000 f9d8 	bl	8009aec <_printf_common>
 800973c:	3001      	adds	r0, #1
 800973e:	f040 8090 	bne.w	8009862 <_printf_float+0x1e2>
 8009742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009746:	b00d      	add	sp, #52	; 0x34
 8009748:	ecbd 8b02 	vpop	{d8}
 800974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009750:	4642      	mov	r2, r8
 8009752:	464b      	mov	r3, r9
 8009754:	4640      	mov	r0, r8
 8009756:	4649      	mov	r1, r9
 8009758:	f7f7 f9e8 	bl	8000b2c <__aeabi_dcmpun>
 800975c:	b140      	cbz	r0, 8009770 <_printf_float+0xf0>
 800975e:	464b      	mov	r3, r9
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfbc      	itt	lt
 8009764:	232d      	movlt	r3, #45	; 0x2d
 8009766:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800976a:	487f      	ldr	r0, [pc, #508]	; (8009968 <_printf_float+0x2e8>)
 800976c:	4b7f      	ldr	r3, [pc, #508]	; (800996c <_printf_float+0x2ec>)
 800976e:	e7d1      	b.n	8009714 <_printf_float+0x94>
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009776:	9206      	str	r2, [sp, #24]
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	d13f      	bne.n	80097fc <_printf_float+0x17c>
 800977c:	2306      	movs	r3, #6
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	9b05      	ldr	r3, [sp, #20]
 8009782:	6861      	ldr	r1, [r4, #4]
 8009784:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009788:	2300      	movs	r3, #0
 800978a:	9303      	str	r3, [sp, #12]
 800978c:	ab0a      	add	r3, sp, #40	; 0x28
 800978e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009792:	ab09      	add	r3, sp, #36	; 0x24
 8009794:	ec49 8b10 	vmov	d0, r8, r9
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097a0:	4628      	mov	r0, r5
 80097a2:	f7ff fecd 	bl	8009540 <__cvt>
 80097a6:	9b06      	ldr	r3, [sp, #24]
 80097a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097aa:	2b47      	cmp	r3, #71	; 0x47
 80097ac:	4680      	mov	r8, r0
 80097ae:	d108      	bne.n	80097c2 <_printf_float+0x142>
 80097b0:	1cc8      	adds	r0, r1, #3
 80097b2:	db02      	blt.n	80097ba <_printf_float+0x13a>
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	4299      	cmp	r1, r3
 80097b8:	dd41      	ble.n	800983e <_printf_float+0x1be>
 80097ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80097be:	fa5f fb8b 	uxtb.w	fp, fp
 80097c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097c6:	d820      	bhi.n	800980a <_printf_float+0x18a>
 80097c8:	3901      	subs	r1, #1
 80097ca:	465a      	mov	r2, fp
 80097cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097d0:	9109      	str	r1, [sp, #36]	; 0x24
 80097d2:	f7ff ff17 	bl	8009604 <__exponent>
 80097d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d8:	1813      	adds	r3, r2, r0
 80097da:	2a01      	cmp	r2, #1
 80097dc:	4681      	mov	r9, r0
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	dc02      	bgt.n	80097e8 <_printf_float+0x168>
 80097e2:	6822      	ldr	r2, [r4, #0]
 80097e4:	07d2      	lsls	r2, r2, #31
 80097e6:	d501      	bpl.n	80097ec <_printf_float+0x16c>
 80097e8:	3301      	adds	r3, #1
 80097ea:	6123      	str	r3, [r4, #16]
 80097ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d09c      	beq.n	800972e <_printf_float+0xae>
 80097f4:	232d      	movs	r3, #45	; 0x2d
 80097f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097fa:	e798      	b.n	800972e <_printf_float+0xae>
 80097fc:	9a06      	ldr	r2, [sp, #24]
 80097fe:	2a47      	cmp	r2, #71	; 0x47
 8009800:	d1be      	bne.n	8009780 <_printf_float+0x100>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1bc      	bne.n	8009780 <_printf_float+0x100>
 8009806:	2301      	movs	r3, #1
 8009808:	e7b9      	b.n	800977e <_printf_float+0xfe>
 800980a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800980e:	d118      	bne.n	8009842 <_printf_float+0x1c2>
 8009810:	2900      	cmp	r1, #0
 8009812:	6863      	ldr	r3, [r4, #4]
 8009814:	dd0b      	ble.n	800982e <_printf_float+0x1ae>
 8009816:	6121      	str	r1, [r4, #16]
 8009818:	b913      	cbnz	r3, 8009820 <_printf_float+0x1a0>
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	07d0      	lsls	r0, r2, #31
 800981e:	d502      	bpl.n	8009826 <_printf_float+0x1a6>
 8009820:	3301      	adds	r3, #1
 8009822:	440b      	add	r3, r1
 8009824:	6123      	str	r3, [r4, #16]
 8009826:	65a1      	str	r1, [r4, #88]	; 0x58
 8009828:	f04f 0900 	mov.w	r9, #0
 800982c:	e7de      	b.n	80097ec <_printf_float+0x16c>
 800982e:	b913      	cbnz	r3, 8009836 <_printf_float+0x1b6>
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	07d2      	lsls	r2, r2, #31
 8009834:	d501      	bpl.n	800983a <_printf_float+0x1ba>
 8009836:	3302      	adds	r3, #2
 8009838:	e7f4      	b.n	8009824 <_printf_float+0x1a4>
 800983a:	2301      	movs	r3, #1
 800983c:	e7f2      	b.n	8009824 <_printf_float+0x1a4>
 800983e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009844:	4299      	cmp	r1, r3
 8009846:	db05      	blt.n	8009854 <_printf_float+0x1d4>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	6121      	str	r1, [r4, #16]
 800984c:	07d8      	lsls	r0, r3, #31
 800984e:	d5ea      	bpl.n	8009826 <_printf_float+0x1a6>
 8009850:	1c4b      	adds	r3, r1, #1
 8009852:	e7e7      	b.n	8009824 <_printf_float+0x1a4>
 8009854:	2900      	cmp	r1, #0
 8009856:	bfd4      	ite	le
 8009858:	f1c1 0202 	rsble	r2, r1, #2
 800985c:	2201      	movgt	r2, #1
 800985e:	4413      	add	r3, r2
 8009860:	e7e0      	b.n	8009824 <_printf_float+0x1a4>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	055a      	lsls	r2, r3, #21
 8009866:	d407      	bmi.n	8009878 <_printf_float+0x1f8>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	4642      	mov	r2, r8
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	d12c      	bne.n	80098d0 <_printf_float+0x250>
 8009876:	e764      	b.n	8009742 <_printf_float+0xc2>
 8009878:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800987c:	f240 80e0 	bls.w	8009a40 <_printf_float+0x3c0>
 8009880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009884:	2200      	movs	r2, #0
 8009886:	2300      	movs	r3, #0
 8009888:	f7f7 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800988c:	2800      	cmp	r0, #0
 800988e:	d034      	beq.n	80098fa <_printf_float+0x27a>
 8009890:	4a37      	ldr	r2, [pc, #220]	; (8009970 <_printf_float+0x2f0>)
 8009892:	2301      	movs	r3, #1
 8009894:	4631      	mov	r1, r6
 8009896:	4628      	mov	r0, r5
 8009898:	47b8      	blx	r7
 800989a:	3001      	adds	r0, #1
 800989c:	f43f af51 	beq.w	8009742 <_printf_float+0xc2>
 80098a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098a4:	429a      	cmp	r2, r3
 80098a6:	db02      	blt.n	80098ae <_printf_float+0x22e>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	07d8      	lsls	r0, r3, #31
 80098ac:	d510      	bpl.n	80098d0 <_printf_float+0x250>
 80098ae:	ee18 3a10 	vmov	r3, s16
 80098b2:	4652      	mov	r2, sl
 80098b4:	4631      	mov	r1, r6
 80098b6:	4628      	mov	r0, r5
 80098b8:	47b8      	blx	r7
 80098ba:	3001      	adds	r0, #1
 80098bc:	f43f af41 	beq.w	8009742 <_printf_float+0xc2>
 80098c0:	f04f 0800 	mov.w	r8, #0
 80098c4:	f104 091a 	add.w	r9, r4, #26
 80098c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ca:	3b01      	subs	r3, #1
 80098cc:	4543      	cmp	r3, r8
 80098ce:	dc09      	bgt.n	80098e4 <_printf_float+0x264>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	079b      	lsls	r3, r3, #30
 80098d4:	f100 8105 	bmi.w	8009ae2 <_printf_float+0x462>
 80098d8:	68e0      	ldr	r0, [r4, #12]
 80098da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098dc:	4298      	cmp	r0, r3
 80098de:	bfb8      	it	lt
 80098e0:	4618      	movlt	r0, r3
 80098e2:	e730      	b.n	8009746 <_printf_float+0xc6>
 80098e4:	2301      	movs	r3, #1
 80098e6:	464a      	mov	r2, r9
 80098e8:	4631      	mov	r1, r6
 80098ea:	4628      	mov	r0, r5
 80098ec:	47b8      	blx	r7
 80098ee:	3001      	adds	r0, #1
 80098f0:	f43f af27 	beq.w	8009742 <_printf_float+0xc2>
 80098f4:	f108 0801 	add.w	r8, r8, #1
 80098f8:	e7e6      	b.n	80098c8 <_printf_float+0x248>
 80098fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dc39      	bgt.n	8009974 <_printf_float+0x2f4>
 8009900:	4a1b      	ldr	r2, [pc, #108]	; (8009970 <_printf_float+0x2f0>)
 8009902:	2301      	movs	r3, #1
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f af19 	beq.w	8009742 <_printf_float+0xc2>
 8009910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009914:	4313      	orrs	r3, r2
 8009916:	d102      	bne.n	800991e <_printf_float+0x29e>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	07d9      	lsls	r1, r3, #31
 800991c:	d5d8      	bpl.n	80098d0 <_printf_float+0x250>
 800991e:	ee18 3a10 	vmov	r3, s16
 8009922:	4652      	mov	r2, sl
 8009924:	4631      	mov	r1, r6
 8009926:	4628      	mov	r0, r5
 8009928:	47b8      	blx	r7
 800992a:	3001      	adds	r0, #1
 800992c:	f43f af09 	beq.w	8009742 <_printf_float+0xc2>
 8009930:	f04f 0900 	mov.w	r9, #0
 8009934:	f104 0a1a 	add.w	sl, r4, #26
 8009938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993a:	425b      	negs	r3, r3
 800993c:	454b      	cmp	r3, r9
 800993e:	dc01      	bgt.n	8009944 <_printf_float+0x2c4>
 8009940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009942:	e792      	b.n	800986a <_printf_float+0x1ea>
 8009944:	2301      	movs	r3, #1
 8009946:	4652      	mov	r2, sl
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f aef7 	beq.w	8009742 <_printf_float+0xc2>
 8009954:	f109 0901 	add.w	r9, r9, #1
 8009958:	e7ee      	b.n	8009938 <_printf_float+0x2b8>
 800995a:	bf00      	nop
 800995c:	7fefffff 	.word	0x7fefffff
 8009960:	0800be14 	.word	0x0800be14
 8009964:	0800be18 	.word	0x0800be18
 8009968:	0800be20 	.word	0x0800be20
 800996c:	0800be1c 	.word	0x0800be1c
 8009970:	0800be24 	.word	0x0800be24
 8009974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009978:	429a      	cmp	r2, r3
 800997a:	bfa8      	it	ge
 800997c:	461a      	movge	r2, r3
 800997e:	2a00      	cmp	r2, #0
 8009980:	4691      	mov	r9, r2
 8009982:	dc37      	bgt.n	80099f4 <_printf_float+0x374>
 8009984:	f04f 0b00 	mov.w	fp, #0
 8009988:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800998c:	f104 021a 	add.w	r2, r4, #26
 8009990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	eba3 0309 	sub.w	r3, r3, r9
 8009998:	455b      	cmp	r3, fp
 800999a:	dc33      	bgt.n	8009a04 <_printf_float+0x384>
 800999c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099a0:	429a      	cmp	r2, r3
 80099a2:	db3b      	blt.n	8009a1c <_printf_float+0x39c>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	07da      	lsls	r2, r3, #31
 80099a8:	d438      	bmi.n	8009a1c <_printf_float+0x39c>
 80099aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	eba2 0901 	sub.w	r9, r2, r1
 80099b6:	4599      	cmp	r9, r3
 80099b8:	bfa8      	it	ge
 80099ba:	4699      	movge	r9, r3
 80099bc:	f1b9 0f00 	cmp.w	r9, #0
 80099c0:	dc35      	bgt.n	8009a2e <_printf_float+0x3ae>
 80099c2:	f04f 0800 	mov.w	r8, #0
 80099c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099ca:	f104 0a1a 	add.w	sl, r4, #26
 80099ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099d2:	1a9b      	subs	r3, r3, r2
 80099d4:	eba3 0309 	sub.w	r3, r3, r9
 80099d8:	4543      	cmp	r3, r8
 80099da:	f77f af79 	ble.w	80098d0 <_printf_float+0x250>
 80099de:	2301      	movs	r3, #1
 80099e0:	4652      	mov	r2, sl
 80099e2:	4631      	mov	r1, r6
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b8      	blx	r7
 80099e8:	3001      	adds	r0, #1
 80099ea:	f43f aeaa 	beq.w	8009742 <_printf_float+0xc2>
 80099ee:	f108 0801 	add.w	r8, r8, #1
 80099f2:	e7ec      	b.n	80099ce <_printf_float+0x34e>
 80099f4:	4613      	mov	r3, r2
 80099f6:	4631      	mov	r1, r6
 80099f8:	4642      	mov	r2, r8
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	d1c0      	bne.n	8009984 <_printf_float+0x304>
 8009a02:	e69e      	b.n	8009742 <_printf_float+0xc2>
 8009a04:	2301      	movs	r3, #1
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	9205      	str	r2, [sp, #20]
 8009a0c:	47b8      	blx	r7
 8009a0e:	3001      	adds	r0, #1
 8009a10:	f43f ae97 	beq.w	8009742 <_printf_float+0xc2>
 8009a14:	9a05      	ldr	r2, [sp, #20]
 8009a16:	f10b 0b01 	add.w	fp, fp, #1
 8009a1a:	e7b9      	b.n	8009990 <_printf_float+0x310>
 8009a1c:	ee18 3a10 	vmov	r3, s16
 8009a20:	4652      	mov	r2, sl
 8009a22:	4631      	mov	r1, r6
 8009a24:	4628      	mov	r0, r5
 8009a26:	47b8      	blx	r7
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d1be      	bne.n	80099aa <_printf_float+0x32a>
 8009a2c:	e689      	b.n	8009742 <_printf_float+0xc2>
 8009a2e:	9a05      	ldr	r2, [sp, #20]
 8009a30:	464b      	mov	r3, r9
 8009a32:	4442      	add	r2, r8
 8009a34:	4631      	mov	r1, r6
 8009a36:	4628      	mov	r0, r5
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d1c1      	bne.n	80099c2 <_printf_float+0x342>
 8009a3e:	e680      	b.n	8009742 <_printf_float+0xc2>
 8009a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a42:	2a01      	cmp	r2, #1
 8009a44:	dc01      	bgt.n	8009a4a <_printf_float+0x3ca>
 8009a46:	07db      	lsls	r3, r3, #31
 8009a48:	d538      	bpl.n	8009abc <_printf_float+0x43c>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4642      	mov	r2, r8
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	f43f ae74 	beq.w	8009742 <_printf_float+0xc2>
 8009a5a:	ee18 3a10 	vmov	r3, s16
 8009a5e:	4652      	mov	r2, sl
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f ae6b 	beq.w	8009742 <_printf_float+0xc2>
 8009a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	f7f7 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a78:	b9d8      	cbnz	r0, 8009ab2 <_printf_float+0x432>
 8009a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a7c:	f108 0201 	add.w	r2, r8, #1
 8009a80:	3b01      	subs	r3, #1
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	d10e      	bne.n	8009aaa <_printf_float+0x42a>
 8009a8c:	e659      	b.n	8009742 <_printf_float+0xc2>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4652      	mov	r2, sl
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f ae52 	beq.w	8009742 <_printf_float+0xc2>
 8009a9e:	f108 0801 	add.w	r8, r8, #1
 8009aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	4543      	cmp	r3, r8
 8009aa8:	dcf1      	bgt.n	8009a8e <_printf_float+0x40e>
 8009aaa:	464b      	mov	r3, r9
 8009aac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ab0:	e6dc      	b.n	800986c <_printf_float+0x1ec>
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	f104 0a1a 	add.w	sl, r4, #26
 8009aba:	e7f2      	b.n	8009aa2 <_printf_float+0x422>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4642      	mov	r2, r8
 8009ac0:	e7df      	b.n	8009a82 <_printf_float+0x402>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	464a      	mov	r2, r9
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae38 	beq.w	8009742 <_printf_float+0xc2>
 8009ad2:	f108 0801 	add.w	r8, r8, #1
 8009ad6:	68e3      	ldr	r3, [r4, #12]
 8009ad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ada:	1a5b      	subs	r3, r3, r1
 8009adc:	4543      	cmp	r3, r8
 8009ade:	dcf0      	bgt.n	8009ac2 <_printf_float+0x442>
 8009ae0:	e6fa      	b.n	80098d8 <_printf_float+0x258>
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f104 0919 	add.w	r9, r4, #25
 8009aea:	e7f4      	b.n	8009ad6 <_printf_float+0x456>

08009aec <_printf_common>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	4616      	mov	r6, r2
 8009af2:	4699      	mov	r9, r3
 8009af4:	688a      	ldr	r2, [r1, #8]
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfb8      	it	lt
 8009b00:	4613      	movlt	r3, r2
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b10a      	cbz	r2, 8009b12 <_printf_common+0x26>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	6833      	ldrmi	r3, [r6, #0]
 8009b1a:	3302      	addmi	r3, #2
 8009b1c:	6033      	strmi	r3, [r6, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	f015 0506 	ands.w	r5, r5, #6
 8009b24:	d106      	bne.n	8009b34 <_printf_common+0x48>
 8009b26:	f104 0a19 	add.w	sl, r4, #25
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	6832      	ldr	r2, [r6, #0]
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc26      	bgt.n	8009b82 <_printf_common+0x96>
 8009b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b38:	1e13      	subs	r3, r2, #0
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	bf18      	it	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	0692      	lsls	r2, r2, #26
 8009b42:	d42b      	bmi.n	8009b9c <_printf_common+0xb0>
 8009b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d01e      	beq.n	8009b90 <_printf_common+0xa4>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	68e5      	ldr	r5, [r4, #12]
 8009b56:	6832      	ldr	r2, [r6, #0]
 8009b58:	f003 0306 	and.w	r3, r3, #6
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	bf08      	it	eq
 8009b60:	1aad      	subeq	r5, r5, r2
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	2600      	movs	r6, #0
 8009b78:	341a      	adds	r4, #26
 8009b7a:	42b5      	cmp	r5, r6
 8009b7c:	d11a      	bne.n	8009bb4 <_printf_common+0xc8>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e008      	b.n	8009b94 <_printf_common+0xa8>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4652      	mov	r2, sl
 8009b86:	4649      	mov	r1, r9
 8009b88:	4638      	mov	r0, r7
 8009b8a:	47c0      	blx	r8
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_printf_common+0xac>
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b98:	3501      	adds	r5, #1
 8009b9a:	e7c6      	b.n	8009b2a <_printf_common+0x3e>
 8009b9c:	18e1      	adds	r1, r4, r3
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	2030      	movs	r0, #48	; 0x30
 8009ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba6:	4422      	add	r2, r4
 8009ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	e7c7      	b.n	8009b44 <_printf_common+0x58>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4638      	mov	r0, r7
 8009bbc:	47c0      	blx	r8
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d0e6      	beq.n	8009b90 <_printf_common+0xa4>
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7d9      	b.n	8009b7a <_printf_common+0x8e>
	...

08009bc8 <_printf_i>:
 8009bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	4691      	mov	r9, r2
 8009bd0:	7e27      	ldrb	r7, [r4, #24]
 8009bd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bd4:	2f78      	cmp	r7, #120	; 0x78
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	469a      	mov	sl, r3
 8009bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bde:	d807      	bhi.n	8009bf0 <_printf_i+0x28>
 8009be0:	2f62      	cmp	r7, #98	; 0x62
 8009be2:	d80a      	bhi.n	8009bfa <_printf_i+0x32>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	f000 80d8 	beq.w	8009d9a <_printf_i+0x1d2>
 8009bea:	2f58      	cmp	r7, #88	; 0x58
 8009bec:	f000 80a3 	beq.w	8009d36 <_printf_i+0x16e>
 8009bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bf8:	e03a      	b.n	8009c70 <_printf_i+0xa8>
 8009bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bfe:	2b15      	cmp	r3, #21
 8009c00:	d8f6      	bhi.n	8009bf0 <_printf_i+0x28>
 8009c02:	a001      	add	r0, pc, #4	; (adr r0, 8009c08 <_printf_i+0x40>)
 8009c04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c08:	08009c61 	.word	0x08009c61
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009bf1 	.word	0x08009bf1
 8009c14:	08009bf1 	.word	0x08009bf1
 8009c18:	08009bf1 	.word	0x08009bf1
 8009c1c:	08009bf1 	.word	0x08009bf1
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009bf1 	.word	0x08009bf1
 8009c28:	08009bf1 	.word	0x08009bf1
 8009c2c:	08009bf1 	.word	0x08009bf1
 8009c30:	08009bf1 	.word	0x08009bf1
 8009c34:	08009d81 	.word	0x08009d81
 8009c38:	08009ca5 	.word	0x08009ca5
 8009c3c:	08009d63 	.word	0x08009d63
 8009c40:	08009bf1 	.word	0x08009bf1
 8009c44:	08009bf1 	.word	0x08009bf1
 8009c48:	08009da3 	.word	0x08009da3
 8009c4c:	08009bf1 	.word	0x08009bf1
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009bf1 	.word	0x08009bf1
 8009c58:	08009bf1 	.word	0x08009bf1
 8009c5c:	08009d6b 	.word	0x08009d6b
 8009c60:	680b      	ldr	r3, [r1, #0]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	600a      	str	r2, [r1, #0]
 8009c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0a3      	b.n	8009dbc <_printf_i+0x1f4>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	6808      	ldr	r0, [r1, #0]
 8009c78:	062e      	lsls	r6, r5, #24
 8009c7a:	f100 0304 	add.w	r3, r0, #4
 8009c7e:	d50a      	bpl.n	8009c96 <_printf_i+0xce>
 8009c80:	6805      	ldr	r5, [r0, #0]
 8009c82:	600b      	str	r3, [r1, #0]
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	da03      	bge.n	8009c90 <_printf_i+0xc8>
 8009c88:	232d      	movs	r3, #45	; 0x2d
 8009c8a:	426d      	negs	r5, r5
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c90:	485e      	ldr	r0, [pc, #376]	; (8009e0c <_printf_i+0x244>)
 8009c92:	230a      	movs	r3, #10
 8009c94:	e019      	b.n	8009cca <_printf_i+0x102>
 8009c96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c9a:	6805      	ldr	r5, [r0, #0]
 8009c9c:	600b      	str	r3, [r1, #0]
 8009c9e:	bf18      	it	ne
 8009ca0:	b22d      	sxthne	r5, r5
 8009ca2:	e7ef      	b.n	8009c84 <_printf_i+0xbc>
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	6825      	ldr	r5, [r4, #0]
 8009ca8:	1d18      	adds	r0, r3, #4
 8009caa:	6008      	str	r0, [r1, #0]
 8009cac:	0628      	lsls	r0, r5, #24
 8009cae:	d501      	bpl.n	8009cb4 <_printf_i+0xec>
 8009cb0:	681d      	ldr	r5, [r3, #0]
 8009cb2:	e002      	b.n	8009cba <_printf_i+0xf2>
 8009cb4:	0669      	lsls	r1, r5, #25
 8009cb6:	d5fb      	bpl.n	8009cb0 <_printf_i+0xe8>
 8009cb8:	881d      	ldrh	r5, [r3, #0]
 8009cba:	4854      	ldr	r0, [pc, #336]	; (8009e0c <_printf_i+0x244>)
 8009cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2308      	moveq	r3, #8
 8009cc2:	230a      	movne	r3, #10
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cca:	6866      	ldr	r6, [r4, #4]
 8009ccc:	60a6      	str	r6, [r4, #8]
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	bfa2      	ittt	ge
 8009cd2:	6821      	ldrge	r1, [r4, #0]
 8009cd4:	f021 0104 	bicge.w	r1, r1, #4
 8009cd8:	6021      	strge	r1, [r4, #0]
 8009cda:	b90d      	cbnz	r5, 8009ce0 <_printf_i+0x118>
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	d04d      	beq.n	8009d7c <_printf_i+0x1b4>
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8009cea:	5dc7      	ldrb	r7, [r0, r7]
 8009cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cf0:	462f      	mov	r7, r5
 8009cf2:	42bb      	cmp	r3, r7
 8009cf4:	460d      	mov	r5, r1
 8009cf6:	d9f4      	bls.n	8009ce2 <_printf_i+0x11a>
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d10b      	bne.n	8009d14 <_printf_i+0x14c>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	07df      	lsls	r7, r3, #31
 8009d00:	d508      	bpl.n	8009d14 <_printf_i+0x14c>
 8009d02:	6923      	ldr	r3, [r4, #16]
 8009d04:	6861      	ldr	r1, [r4, #4]
 8009d06:	4299      	cmp	r1, r3
 8009d08:	bfde      	ittt	le
 8009d0a:	2330      	movle	r3, #48	; 0x30
 8009d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d10:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009d14:	1b92      	subs	r2, r2, r6
 8009d16:	6122      	str	r2, [r4, #16]
 8009d18:	f8cd a000 	str.w	sl, [sp]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	aa03      	add	r2, sp, #12
 8009d20:	4621      	mov	r1, r4
 8009d22:	4640      	mov	r0, r8
 8009d24:	f7ff fee2 	bl	8009aec <_printf_common>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d14c      	bne.n	8009dc6 <_printf_i+0x1fe>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d30:	b004      	add	sp, #16
 8009d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d36:	4835      	ldr	r0, [pc, #212]	; (8009e0c <_printf_i+0x244>)
 8009d38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	680e      	ldr	r6, [r1, #0]
 8009d40:	061f      	lsls	r7, r3, #24
 8009d42:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d46:	600e      	str	r6, [r1, #0]
 8009d48:	d514      	bpl.n	8009d74 <_printf_i+0x1ac>
 8009d4a:	07d9      	lsls	r1, r3, #31
 8009d4c:	bf44      	itt	mi
 8009d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d52:	6023      	strmi	r3, [r4, #0]
 8009d54:	b91d      	cbnz	r5, 8009d5e <_printf_i+0x196>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f023 0320 	bic.w	r3, r3, #32
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	2310      	movs	r3, #16
 8009d60:	e7b0      	b.n	8009cc4 <_printf_i+0xfc>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f043 0320 	orr.w	r3, r3, #32
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	2378      	movs	r3, #120	; 0x78
 8009d6c:	4828      	ldr	r0, [pc, #160]	; (8009e10 <_printf_i+0x248>)
 8009d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d72:	e7e3      	b.n	8009d3c <_printf_i+0x174>
 8009d74:	065e      	lsls	r6, r3, #25
 8009d76:	bf48      	it	mi
 8009d78:	b2ad      	uxthmi	r5, r5
 8009d7a:	e7e6      	b.n	8009d4a <_printf_i+0x182>
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	e7bb      	b.n	8009cf8 <_printf_i+0x130>
 8009d80:	680b      	ldr	r3, [r1, #0]
 8009d82:	6826      	ldr	r6, [r4, #0]
 8009d84:	6960      	ldr	r0, [r4, #20]
 8009d86:	1d1d      	adds	r5, r3, #4
 8009d88:	600d      	str	r5, [r1, #0]
 8009d8a:	0635      	lsls	r5, r6, #24
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	d501      	bpl.n	8009d94 <_printf_i+0x1cc>
 8009d90:	6018      	str	r0, [r3, #0]
 8009d92:	e002      	b.n	8009d9a <_printf_i+0x1d2>
 8009d94:	0671      	lsls	r1, r6, #25
 8009d96:	d5fb      	bpl.n	8009d90 <_printf_i+0x1c8>
 8009d98:	8018      	strh	r0, [r3, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	4616      	mov	r6, r2
 8009da0:	e7ba      	b.n	8009d18 <_printf_i+0x150>
 8009da2:	680b      	ldr	r3, [r1, #0]
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	600a      	str	r2, [r1, #0]
 8009da8:	681e      	ldr	r6, [r3, #0]
 8009daa:	6862      	ldr	r2, [r4, #4]
 8009dac:	2100      	movs	r1, #0
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7f6 fa16 	bl	80001e0 <memchr>
 8009db4:	b108      	cbz	r0, 8009dba <_printf_i+0x1f2>
 8009db6:	1b80      	subs	r0, r0, r6
 8009db8:	6060      	str	r0, [r4, #4]
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	6123      	str	r3, [r4, #16]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc4:	e7a8      	b.n	8009d18 <_printf_i+0x150>
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	47d0      	blx	sl
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d0ab      	beq.n	8009d2c <_printf_i+0x164>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	079b      	lsls	r3, r3, #30
 8009dd8:	d413      	bmi.n	8009e02 <_printf_i+0x23a>
 8009dda:	68e0      	ldr	r0, [r4, #12]
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	4298      	cmp	r0, r3
 8009de0:	bfb8      	it	lt
 8009de2:	4618      	movlt	r0, r3
 8009de4:	e7a4      	b.n	8009d30 <_printf_i+0x168>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4632      	mov	r2, r6
 8009dea:	4649      	mov	r1, r9
 8009dec:	4640      	mov	r0, r8
 8009dee:	47d0      	blx	sl
 8009df0:	3001      	adds	r0, #1
 8009df2:	d09b      	beq.n	8009d2c <_printf_i+0x164>
 8009df4:	3501      	adds	r5, #1
 8009df6:	68e3      	ldr	r3, [r4, #12]
 8009df8:	9903      	ldr	r1, [sp, #12]
 8009dfa:	1a5b      	subs	r3, r3, r1
 8009dfc:	42ab      	cmp	r3, r5
 8009dfe:	dcf2      	bgt.n	8009de6 <_printf_i+0x21e>
 8009e00:	e7eb      	b.n	8009dda <_printf_i+0x212>
 8009e02:	2500      	movs	r5, #0
 8009e04:	f104 0619 	add.w	r6, r4, #25
 8009e08:	e7f5      	b.n	8009df6 <_printf_i+0x22e>
 8009e0a:	bf00      	nop
 8009e0c:	0800be26 	.word	0x0800be26
 8009e10:	0800be37 	.word	0x0800be37

08009e14 <_sbrk_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_sbrk_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f8 f9ba 	bl	8002198 <_sbrk>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_sbrk_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_sbrk_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20001da8 	.word	0x20001da8

08009e34 <quorem>:
 8009e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e38:	6903      	ldr	r3, [r0, #16]
 8009e3a:	690c      	ldr	r4, [r1, #16]
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f2c0 8081 	blt.w	8009f46 <quorem+0x112>
 8009e44:	3c01      	subs	r4, #1
 8009e46:	f101 0814 	add.w	r8, r1, #20
 8009e4a:	f100 0514 	add.w	r5, r0, #20
 8009e4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e68:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e6c:	d331      	bcc.n	8009ed2 <quorem+0x9e>
 8009e6e:	f04f 0e00 	mov.w	lr, #0
 8009e72:	4640      	mov	r0, r8
 8009e74:	46ac      	mov	ip, r5
 8009e76:	46f2      	mov	sl, lr
 8009e78:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e7c:	b293      	uxth	r3, r2
 8009e7e:	fb06 e303 	mla	r3, r6, r3, lr
 8009e82:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ebaa 0303 	sub.w	r3, sl, r3
 8009e8c:	0c12      	lsrs	r2, r2, #16
 8009e8e:	f8dc a000 	ldr.w	sl, [ip]
 8009e92:	fb06 e202 	mla	r2, r6, r2, lr
 8009e96:	fa13 f38a 	uxtah	r3, r3, sl
 8009e9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e9e:	fa1f fa82 	uxth.w	sl, r2
 8009ea2:	f8dc 2000 	ldr.w	r2, [ip]
 8009ea6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009eaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb4:	4581      	cmp	r9, r0
 8009eb6:	f84c 3b04 	str.w	r3, [ip], #4
 8009eba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ebe:	d2db      	bcs.n	8009e78 <quorem+0x44>
 8009ec0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ec4:	b92b      	cbnz	r3, 8009ed2 <quorem+0x9e>
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	d32e      	bcc.n	8009f2e <quorem+0xfa>
 8009ed0:	613c      	str	r4, [r7, #16]
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f001 f8b6 	bl	800b044 <__mcmp>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	db24      	blt.n	8009f26 <quorem+0xf2>
 8009edc:	3601      	adds	r6, #1
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f04f 0c00 	mov.w	ip, #0
 8009ee4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ee8:	f8d0 e000 	ldr.w	lr, [r0]
 8009eec:	b293      	uxth	r3, r2
 8009eee:	ebac 0303 	sub.w	r3, ip, r3
 8009ef2:	0c12      	lsrs	r2, r2, #16
 8009ef4:	fa13 f38e 	uxtah	r3, r3, lr
 8009ef8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f06:	45c1      	cmp	r9, r8
 8009f08:	f840 3b04 	str.w	r3, [r0], #4
 8009f0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f10:	d2e8      	bcs.n	8009ee4 <quorem+0xb0>
 8009f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f1a:	b922      	cbnz	r2, 8009f26 <quorem+0xf2>
 8009f1c:	3b04      	subs	r3, #4
 8009f1e:	429d      	cmp	r5, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	d30a      	bcc.n	8009f3a <quorem+0x106>
 8009f24:	613c      	str	r4, [r7, #16]
 8009f26:	4630      	mov	r0, r6
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	3b04      	subs	r3, #4
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	d1cc      	bne.n	8009ed0 <quorem+0x9c>
 8009f36:	3c01      	subs	r4, #1
 8009f38:	e7c7      	b.n	8009eca <quorem+0x96>
 8009f3a:	6812      	ldr	r2, [r2, #0]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d1f0      	bne.n	8009f24 <quorem+0xf0>
 8009f42:	3c01      	subs	r4, #1
 8009f44:	e7eb      	b.n	8009f1e <quorem+0xea>
 8009f46:	2000      	movs	r0, #0
 8009f48:	e7ee      	b.n	8009f28 <quorem+0xf4>
 8009f4a:	0000      	movs	r0, r0
 8009f4c:	0000      	movs	r0, r0
	...

08009f50 <_dtoa_r>:
 8009f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f54:	ed2d 8b02 	vpush	{d8}
 8009f58:	ec57 6b10 	vmov	r6, r7, d0
 8009f5c:	b095      	sub	sp, #84	; 0x54
 8009f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f64:	9105      	str	r1, [sp, #20]
 8009f66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f70:	b975      	cbnz	r5, 8009f90 <_dtoa_r+0x40>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7ff fa14 	bl	80093a0 <malloc>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f7c:	b920      	cbnz	r0, 8009f88 <_dtoa_r+0x38>
 8009f7e:	4bb2      	ldr	r3, [pc, #712]	; (800a248 <_dtoa_r+0x2f8>)
 8009f80:	21ea      	movs	r1, #234	; 0xea
 8009f82:	48b2      	ldr	r0, [pc, #712]	; (800a24c <_dtoa_r+0x2fc>)
 8009f84:	f001 f96e 	bl	800b264 <__assert_func>
 8009f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f8c:	6005      	str	r5, [r0, #0]
 8009f8e:	60c5      	str	r5, [r0, #12]
 8009f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f92:	6819      	ldr	r1, [r3, #0]
 8009f94:	b151      	cbz	r1, 8009fac <_dtoa_r+0x5c>
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	604a      	str	r2, [r1, #4]
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	4093      	lsls	r3, r2
 8009f9e:	608b      	str	r3, [r1, #8]
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fe11 	bl	800abc8 <_Bfree>
 8009fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	1e3b      	subs	r3, r7, #0
 8009fae:	bfb9      	ittee	lt
 8009fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fb4:	9303      	strlt	r3, [sp, #12]
 8009fb6:	2300      	movge	r3, #0
 8009fb8:	f8c8 3000 	strge.w	r3, [r8]
 8009fbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009fc0:	4ba3      	ldr	r3, [pc, #652]	; (800a250 <_dtoa_r+0x300>)
 8009fc2:	bfbc      	itt	lt
 8009fc4:	2201      	movlt	r2, #1
 8009fc6:	f8c8 2000 	strlt.w	r2, [r8]
 8009fca:	ea33 0309 	bics.w	r3, r3, r9
 8009fce:	d11b      	bne.n	800a008 <_dtoa_r+0xb8>
 8009fd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fdc:	4333      	orrs	r3, r6
 8009fde:	f000 857a 	beq.w	800aad6 <_dtoa_r+0xb86>
 8009fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe4:	b963      	cbnz	r3, 800a000 <_dtoa_r+0xb0>
 8009fe6:	4b9b      	ldr	r3, [pc, #620]	; (800a254 <_dtoa_r+0x304>)
 8009fe8:	e024      	b.n	800a034 <_dtoa_r+0xe4>
 8009fea:	4b9b      	ldr	r3, [pc, #620]	; (800a258 <_dtoa_r+0x308>)
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	9800      	ldr	r0, [sp, #0]
 8009ff6:	b015      	add	sp, #84	; 0x54
 8009ff8:	ecbd 8b02 	vpop	{d8}
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	4b94      	ldr	r3, [pc, #592]	; (800a254 <_dtoa_r+0x304>)
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	3303      	adds	r3, #3
 800a006:	e7f3      	b.n	8009ff0 <_dtoa_r+0xa0>
 800a008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a00c:	2200      	movs	r2, #0
 800a00e:	ec51 0b17 	vmov	r0, r1, d7
 800a012:	2300      	movs	r3, #0
 800a014:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a018:	f7f6 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800a01c:	4680      	mov	r8, r0
 800a01e:	b158      	cbz	r0, 800a038 <_dtoa_r+0xe8>
 800a020:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a022:	2301      	movs	r3, #1
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 8551 	beq.w	800aad0 <_dtoa_r+0xb80>
 800a02e:	488b      	ldr	r0, [pc, #556]	; (800a25c <_dtoa_r+0x30c>)
 800a030:	6018      	str	r0, [r3, #0]
 800a032:	1e43      	subs	r3, r0, #1
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	e7dd      	b.n	8009ff4 <_dtoa_r+0xa4>
 800a038:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a03c:	aa12      	add	r2, sp, #72	; 0x48
 800a03e:	a913      	add	r1, sp, #76	; 0x4c
 800a040:	4620      	mov	r0, r4
 800a042:	f001 f8a3 	bl	800b18c <__d2b>
 800a046:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a04a:	4683      	mov	fp, r0
 800a04c:	2d00      	cmp	r5, #0
 800a04e:	d07c      	beq.n	800a14a <_dtoa_r+0x1fa>
 800a050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a052:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a05a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a05e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a06a:	4b7d      	ldr	r3, [pc, #500]	; (800a260 <_dtoa_r+0x310>)
 800a06c:	2200      	movs	r2, #0
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 f909 	bl	8000288 <__aeabi_dsub>
 800a076:	a36e      	add	r3, pc, #440	; (adr r3, 800a230 <_dtoa_r+0x2e0>)
 800a078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07c:	f7f6 fabc 	bl	80005f8 <__aeabi_dmul>
 800a080:	a36d      	add	r3, pc, #436	; (adr r3, 800a238 <_dtoa_r+0x2e8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 f901 	bl	800028c <__adddf3>
 800a08a:	4606      	mov	r6, r0
 800a08c:	4628      	mov	r0, r5
 800a08e:	460f      	mov	r7, r1
 800a090:	f7f6 fa48 	bl	8000524 <__aeabi_i2d>
 800a094:	a36a      	add	r3, pc, #424	; (adr r3, 800a240 <_dtoa_r+0x2f0>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 faad 	bl	80005f8 <__aeabi_dmul>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	f7f6 f8f1 	bl	800028c <__adddf3>
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 fd53 	bl	8000b58 <__aeabi_d2iz>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 fd0e 	bl	8000adc <__aeabi_dcmplt>
 800a0c0:	b148      	cbz	r0, 800a0d6 <_dtoa_r+0x186>
 800a0c2:	4650      	mov	r0, sl
 800a0c4:	f7f6 fa2e 	bl	8000524 <__aeabi_i2d>
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	f7f6 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d0:	b908      	cbnz	r0, 800a0d6 <_dtoa_r+0x186>
 800a0d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0d6:	f1ba 0f16 	cmp.w	sl, #22
 800a0da:	d854      	bhi.n	800a186 <_dtoa_r+0x236>
 800a0dc:	4b61      	ldr	r3, [pc, #388]	; (800a264 <_dtoa_r+0x314>)
 800a0de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0ea:	f7f6 fcf7 	bl	8000adc <__aeabi_dcmplt>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d04b      	beq.n	800a18a <_dtoa_r+0x23a>
 800a0f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a0fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a0fc:	1b5d      	subs	r5, r3, r5
 800a0fe:	1e6b      	subs	r3, r5, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	bf43      	ittte	mi
 800a104:	2300      	movmi	r3, #0
 800a106:	f1c5 0801 	rsbmi	r8, r5, #1
 800a10a:	9304      	strmi	r3, [sp, #16]
 800a10c:	f04f 0800 	movpl.w	r8, #0
 800a110:	f1ba 0f00 	cmp.w	sl, #0
 800a114:	db3b      	blt.n	800a18e <_dtoa_r+0x23e>
 800a116:	9b04      	ldr	r3, [sp, #16]
 800a118:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a11c:	4453      	add	r3, sl
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	2300      	movs	r3, #0
 800a122:	9306      	str	r3, [sp, #24]
 800a124:	9b05      	ldr	r3, [sp, #20]
 800a126:	2b09      	cmp	r3, #9
 800a128:	d869      	bhi.n	800a1fe <_dtoa_r+0x2ae>
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	bfc4      	itt	gt
 800a12e:	3b04      	subgt	r3, #4
 800a130:	9305      	strgt	r3, [sp, #20]
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	f1a3 0302 	sub.w	r3, r3, #2
 800a138:	bfcc      	ite	gt
 800a13a:	2500      	movgt	r5, #0
 800a13c:	2501      	movle	r5, #1
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d869      	bhi.n	800a216 <_dtoa_r+0x2c6>
 800a142:	e8df f003 	tbb	[pc, r3]
 800a146:	4e2c      	.short	0x4e2c
 800a148:	5a4c      	.short	0x5a4c
 800a14a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a14e:	441d      	add	r5, r3
 800a150:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a154:	2b20      	cmp	r3, #32
 800a156:	bfc1      	itttt	gt
 800a158:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a15c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a160:	fa09 f303 	lslgt.w	r3, r9, r3
 800a164:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a168:	bfda      	itte	le
 800a16a:	f1c3 0320 	rsble	r3, r3, #32
 800a16e:	fa06 f003 	lslle.w	r0, r6, r3
 800a172:	4318      	orrgt	r0, r3
 800a174:	f7f6 f9c6 	bl	8000504 <__aeabi_ui2d>
 800a178:	2301      	movs	r3, #1
 800a17a:	4606      	mov	r6, r0
 800a17c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a180:	3d01      	subs	r5, #1
 800a182:	9310      	str	r3, [sp, #64]	; 0x40
 800a184:	e771      	b.n	800a06a <_dtoa_r+0x11a>
 800a186:	2301      	movs	r3, #1
 800a188:	e7b6      	b.n	800a0f8 <_dtoa_r+0x1a8>
 800a18a:	900e      	str	r0, [sp, #56]	; 0x38
 800a18c:	e7b5      	b.n	800a0fa <_dtoa_r+0x1aa>
 800a18e:	f1ca 0300 	rsb	r3, sl, #0
 800a192:	9306      	str	r3, [sp, #24]
 800a194:	2300      	movs	r3, #0
 800a196:	eba8 080a 	sub.w	r8, r8, sl
 800a19a:	930d      	str	r3, [sp, #52]	; 0x34
 800a19c:	e7c2      	b.n	800a124 <_dtoa_r+0x1d4>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9308      	str	r3, [sp, #32]
 800a1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dc39      	bgt.n	800a21c <_dtoa_r+0x2cc>
 800a1a8:	f04f 0901 	mov.w	r9, #1
 800a1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	6042      	str	r2, [r0, #4]
 800a1bc:	2204      	movs	r2, #4
 800a1be:	f102 0614 	add.w	r6, r2, #20
 800a1c2:	429e      	cmp	r6, r3
 800a1c4:	6841      	ldr	r1, [r0, #4]
 800a1c6:	d92f      	bls.n	800a228 <_dtoa_r+0x2d8>
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	f000 fcbd 	bl	800ab48 <_Balloc>
 800a1ce:	9000      	str	r0, [sp, #0]
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d14b      	bne.n	800a26c <_dtoa_r+0x31c>
 800a1d4:	4b24      	ldr	r3, [pc, #144]	; (800a268 <_dtoa_r+0x318>)
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1dc:	e6d1      	b.n	8009f82 <_dtoa_r+0x32>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7de      	b.n	800a1a0 <_dtoa_r+0x250>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9308      	str	r3, [sp, #32]
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	eb0a 0903 	add.w	r9, sl, r3
 800a1ec:	f109 0301 	add.w	r3, r9, #1
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	9301      	str	r3, [sp, #4]
 800a1f4:	bfb8      	it	lt
 800a1f6:	2301      	movlt	r3, #1
 800a1f8:	e7dd      	b.n	800a1b6 <_dtoa_r+0x266>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e7f2      	b.n	800a1e4 <_dtoa_r+0x294>
 800a1fe:	2501      	movs	r5, #1
 800a200:	2300      	movs	r3, #0
 800a202:	9305      	str	r3, [sp, #20]
 800a204:	9508      	str	r5, [sp, #32]
 800a206:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a210:	2312      	movs	r3, #18
 800a212:	9209      	str	r2, [sp, #36]	; 0x24
 800a214:	e7cf      	b.n	800a1b6 <_dtoa_r+0x266>
 800a216:	2301      	movs	r3, #1
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	e7f4      	b.n	800a206 <_dtoa_r+0x2b6>
 800a21c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a220:	f8cd 9004 	str.w	r9, [sp, #4]
 800a224:	464b      	mov	r3, r9
 800a226:	e7c6      	b.n	800a1b6 <_dtoa_r+0x266>
 800a228:	3101      	adds	r1, #1
 800a22a:	6041      	str	r1, [r0, #4]
 800a22c:	0052      	lsls	r2, r2, #1
 800a22e:	e7c6      	b.n	800a1be <_dtoa_r+0x26e>
 800a230:	636f4361 	.word	0x636f4361
 800a234:	3fd287a7 	.word	0x3fd287a7
 800a238:	8b60c8b3 	.word	0x8b60c8b3
 800a23c:	3fc68a28 	.word	0x3fc68a28
 800a240:	509f79fb 	.word	0x509f79fb
 800a244:	3fd34413 	.word	0x3fd34413
 800a248:	0800be55 	.word	0x0800be55
 800a24c:	0800be6c 	.word	0x0800be6c
 800a250:	7ff00000 	.word	0x7ff00000
 800a254:	0800be51 	.word	0x0800be51
 800a258:	0800be48 	.word	0x0800be48
 800a25c:	0800be25 	.word	0x0800be25
 800a260:	3ff80000 	.word	0x3ff80000
 800a264:	0800bf68 	.word	0x0800bf68
 800a268:	0800becb 	.word	0x0800becb
 800a26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26e:	9a00      	ldr	r2, [sp, #0]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	2b0e      	cmp	r3, #14
 800a276:	f200 80ad 	bhi.w	800a3d4 <_dtoa_r+0x484>
 800a27a:	2d00      	cmp	r5, #0
 800a27c:	f000 80aa 	beq.w	800a3d4 <_dtoa_r+0x484>
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	dd36      	ble.n	800a2f4 <_dtoa_r+0x3a4>
 800a286:	4ac3      	ldr	r2, [pc, #780]	; (800a594 <_dtoa_r+0x644>)
 800a288:	f00a 030f 	and.w	r3, sl, #15
 800a28c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a290:	ed93 7b00 	vldr	d7, [r3]
 800a294:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a298:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a29c:	eeb0 8a47 	vmov.f32	s16, s14
 800a2a0:	eef0 8a67 	vmov.f32	s17, s15
 800a2a4:	d016      	beq.n	800a2d4 <_dtoa_r+0x384>
 800a2a6:	4bbc      	ldr	r3, [pc, #752]	; (800a598 <_dtoa_r+0x648>)
 800a2a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2b0:	f7f6 facc 	bl	800084c <__aeabi_ddiv>
 800a2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b8:	f007 070f 	and.w	r7, r7, #15
 800a2bc:	2503      	movs	r5, #3
 800a2be:	4eb6      	ldr	r6, [pc, #728]	; (800a598 <_dtoa_r+0x648>)
 800a2c0:	b957      	cbnz	r7, 800a2d8 <_dtoa_r+0x388>
 800a2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2c6:	ec53 2b18 	vmov	r2, r3, d8
 800a2ca:	f7f6 fabf 	bl	800084c <__aeabi_ddiv>
 800a2ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d2:	e029      	b.n	800a328 <_dtoa_r+0x3d8>
 800a2d4:	2502      	movs	r5, #2
 800a2d6:	e7f2      	b.n	800a2be <_dtoa_r+0x36e>
 800a2d8:	07f9      	lsls	r1, r7, #31
 800a2da:	d508      	bpl.n	800a2ee <_dtoa_r+0x39e>
 800a2dc:	ec51 0b18 	vmov	r0, r1, d8
 800a2e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2e4:	f7f6 f988 	bl	80005f8 <__aeabi_dmul>
 800a2e8:	ec41 0b18 	vmov	d8, r0, r1
 800a2ec:	3501      	adds	r5, #1
 800a2ee:	107f      	asrs	r7, r7, #1
 800a2f0:	3608      	adds	r6, #8
 800a2f2:	e7e5      	b.n	800a2c0 <_dtoa_r+0x370>
 800a2f4:	f000 80a6 	beq.w	800a444 <_dtoa_r+0x4f4>
 800a2f8:	f1ca 0600 	rsb	r6, sl, #0
 800a2fc:	4ba5      	ldr	r3, [pc, #660]	; (800a594 <_dtoa_r+0x644>)
 800a2fe:	4fa6      	ldr	r7, [pc, #664]	; (800a598 <_dtoa_r+0x648>)
 800a300:	f006 020f 	and.w	r2, r6, #15
 800a304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a318:	1136      	asrs	r6, r6, #4
 800a31a:	2300      	movs	r3, #0
 800a31c:	2502      	movs	r5, #2
 800a31e:	2e00      	cmp	r6, #0
 800a320:	f040 8085 	bne.w	800a42e <_dtoa_r+0x4de>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1d2      	bne.n	800a2ce <_dtoa_r+0x37e>
 800a328:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 808c 	beq.w	800a448 <_dtoa_r+0x4f8>
 800a330:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a334:	4b99      	ldr	r3, [pc, #612]	; (800a59c <_dtoa_r+0x64c>)
 800a336:	2200      	movs	r2, #0
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fbce 	bl	8000adc <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	f000 8081 	beq.w	800a448 <_dtoa_r+0x4f8>
 800a346:	9b01      	ldr	r3, [sp, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d07d      	beq.n	800a448 <_dtoa_r+0x4f8>
 800a34c:	f1b9 0f00 	cmp.w	r9, #0
 800a350:	dd3c      	ble.n	800a3cc <_dtoa_r+0x47c>
 800a352:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a356:	9307      	str	r3, [sp, #28]
 800a358:	2200      	movs	r2, #0
 800a35a:	4b91      	ldr	r3, [pc, #580]	; (800a5a0 <_dtoa_r+0x650>)
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7f6 f94a 	bl	80005f8 <__aeabi_dmul>
 800a364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a368:	3501      	adds	r5, #1
 800a36a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a36e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a372:	4628      	mov	r0, r5
 800a374:	f7f6 f8d6 	bl	8000524 <__aeabi_i2d>
 800a378:	4632      	mov	r2, r6
 800a37a:	463b      	mov	r3, r7
 800a37c:	f7f6 f93c 	bl	80005f8 <__aeabi_dmul>
 800a380:	4b88      	ldr	r3, [pc, #544]	; (800a5a4 <_dtoa_r+0x654>)
 800a382:	2200      	movs	r2, #0
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a394:	2b00      	cmp	r3, #0
 800a396:	d15c      	bne.n	800a452 <_dtoa_r+0x502>
 800a398:	4b83      	ldr	r3, [pc, #524]	; (800a5a8 <_dtoa_r+0x658>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	4630      	mov	r0, r6
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f7f5 ff72 	bl	8000288 <__aeabi_dsub>
 800a3a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	f7f6 fbb4 	bl	8000b18 <__aeabi_dcmpgt>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f040 8296 	bne.w	800a8e2 <_dtoa_r+0x992>
 800a3b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f6 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f040 8288 	bne.w	800a8dc <_dtoa_r+0x98c>
 800a3cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f2c0 8158 	blt.w	800a68c <_dtoa_r+0x73c>
 800a3dc:	f1ba 0f0e 	cmp.w	sl, #14
 800a3e0:	f300 8154 	bgt.w	800a68c <_dtoa_r+0x73c>
 800a3e4:	4b6b      	ldr	r3, [pc, #428]	; (800a594 <_dtoa_r+0x644>)
 800a3e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f280 80e3 	bge.w	800a5bc <_dtoa_r+0x66c>
 800a3f6:	9b01      	ldr	r3, [sp, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f300 80df 	bgt.w	800a5bc <_dtoa_r+0x66c>
 800a3fe:	f040 826d 	bne.w	800a8dc <_dtoa_r+0x98c>
 800a402:	4b69      	ldr	r3, [pc, #420]	; (800a5a8 <_dtoa_r+0x658>)
 800a404:	2200      	movs	r2, #0
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 f8f5 	bl	80005f8 <__aeabi_dmul>
 800a40e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a412:	f7f6 fb77 	bl	8000b04 <__aeabi_dcmpge>
 800a416:	9e01      	ldr	r6, [sp, #4]
 800a418:	4637      	mov	r7, r6
 800a41a:	2800      	cmp	r0, #0
 800a41c:	f040 8243 	bne.w	800a8a6 <_dtoa_r+0x956>
 800a420:	9d00      	ldr	r5, [sp, #0]
 800a422:	2331      	movs	r3, #49	; 0x31
 800a424:	f805 3b01 	strb.w	r3, [r5], #1
 800a428:	f10a 0a01 	add.w	sl, sl, #1
 800a42c:	e23f      	b.n	800a8ae <_dtoa_r+0x95e>
 800a42e:	07f2      	lsls	r2, r6, #31
 800a430:	d505      	bpl.n	800a43e <_dtoa_r+0x4ee>
 800a432:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a436:	f7f6 f8df 	bl	80005f8 <__aeabi_dmul>
 800a43a:	3501      	adds	r5, #1
 800a43c:	2301      	movs	r3, #1
 800a43e:	1076      	asrs	r6, r6, #1
 800a440:	3708      	adds	r7, #8
 800a442:	e76c      	b.n	800a31e <_dtoa_r+0x3ce>
 800a444:	2502      	movs	r5, #2
 800a446:	e76f      	b.n	800a328 <_dtoa_r+0x3d8>
 800a448:	9b01      	ldr	r3, [sp, #4]
 800a44a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a44e:	930c      	str	r3, [sp, #48]	; 0x30
 800a450:	e78d      	b.n	800a36e <_dtoa_r+0x41e>
 800a452:	9900      	ldr	r1, [sp, #0]
 800a454:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a458:	4b4e      	ldr	r3, [pc, #312]	; (800a594 <_dtoa_r+0x644>)
 800a45a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a45e:	4401      	add	r1, r0
 800a460:	9102      	str	r1, [sp, #8]
 800a462:	9908      	ldr	r1, [sp, #32]
 800a464:	eeb0 8a47 	vmov.f32	s16, s14
 800a468:	eef0 8a67 	vmov.f32	s17, s15
 800a46c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a470:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a474:	2900      	cmp	r1, #0
 800a476:	d045      	beq.n	800a504 <_dtoa_r+0x5b4>
 800a478:	494c      	ldr	r1, [pc, #304]	; (800a5ac <_dtoa_r+0x65c>)
 800a47a:	2000      	movs	r0, #0
 800a47c:	f7f6 f9e6 	bl	800084c <__aeabi_ddiv>
 800a480:	ec53 2b18 	vmov	r2, r3, d8
 800a484:	f7f5 ff00 	bl	8000288 <__aeabi_dsub>
 800a488:	9d00      	ldr	r5, [sp, #0]
 800a48a:	ec41 0b18 	vmov	d8, r0, r1
 800a48e:	4639      	mov	r1, r7
 800a490:	4630      	mov	r0, r6
 800a492:	f7f6 fb61 	bl	8000b58 <__aeabi_d2iz>
 800a496:	900c      	str	r0, [sp, #48]	; 0x30
 800a498:	f7f6 f844 	bl	8000524 <__aeabi_i2d>
 800a49c:	4602      	mov	r2, r0
 800a49e:	460b      	mov	r3, r1
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f5 fef0 	bl	8000288 <__aeabi_dsub>
 800a4a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4aa:	3330      	adds	r3, #48	; 0x30
 800a4ac:	f805 3b01 	strb.w	r3, [r5], #1
 800a4b0:	ec53 2b18 	vmov	r2, r3, d8
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	460f      	mov	r7, r1
 800a4b8:	f7f6 fb10 	bl	8000adc <__aeabi_dcmplt>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d165      	bne.n	800a58c <_dtoa_r+0x63c>
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	463b      	mov	r3, r7
 800a4c4:	4935      	ldr	r1, [pc, #212]	; (800a59c <_dtoa_r+0x64c>)
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f7f5 fede 	bl	8000288 <__aeabi_dsub>
 800a4cc:	ec53 2b18 	vmov	r2, r3, d8
 800a4d0:	f7f6 fb04 	bl	8000adc <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f040 80b9 	bne.w	800a64c <_dtoa_r+0x6fc>
 800a4da:	9b02      	ldr	r3, [sp, #8]
 800a4dc:	429d      	cmp	r5, r3
 800a4de:	f43f af75 	beq.w	800a3cc <_dtoa_r+0x47c>
 800a4e2:	4b2f      	ldr	r3, [pc, #188]	; (800a5a0 <_dtoa_r+0x650>)
 800a4e4:	ec51 0b18 	vmov	r0, r1, d8
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4b2c      	ldr	r3, [pc, #176]	; (800a5a0 <_dtoa_r+0x650>)
 800a4f0:	ec41 0b18 	vmov	d8, r0, r1
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	e7c4      	b.n	800a48e <_dtoa_r+0x53e>
 800a504:	ec51 0b17 	vmov	r0, r1, d7
 800a508:	f7f6 f876 	bl	80005f8 <__aeabi_dmul>
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	9d00      	ldr	r5, [sp, #0]
 800a510:	930c      	str	r3, [sp, #48]	; 0x30
 800a512:	ec41 0b18 	vmov	d8, r0, r1
 800a516:	4639      	mov	r1, r7
 800a518:	4630      	mov	r0, r6
 800a51a:	f7f6 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800a51e:	9011      	str	r0, [sp, #68]	; 0x44
 800a520:	f7f6 f800 	bl	8000524 <__aeabi_i2d>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f5 feac 	bl	8000288 <__aeabi_dsub>
 800a530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a532:	3330      	adds	r3, #48	; 0x30
 800a534:	f805 3b01 	strb.w	r3, [r5], #1
 800a538:	9b02      	ldr	r3, [sp, #8]
 800a53a:	429d      	cmp	r5, r3
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	d134      	bne.n	800a5b0 <_dtoa_r+0x660>
 800a546:	4b19      	ldr	r3, [pc, #100]	; (800a5ac <_dtoa_r+0x65c>)
 800a548:	ec51 0b18 	vmov	r0, r1, d8
 800a54c:	f7f5 fe9e 	bl	800028c <__adddf3>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4630      	mov	r0, r6
 800a556:	4639      	mov	r1, r7
 800a558:	f7f6 fade 	bl	8000b18 <__aeabi_dcmpgt>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d175      	bne.n	800a64c <_dtoa_r+0x6fc>
 800a560:	ec53 2b18 	vmov	r2, r3, d8
 800a564:	4911      	ldr	r1, [pc, #68]	; (800a5ac <_dtoa_r+0x65c>)
 800a566:	2000      	movs	r0, #0
 800a568:	f7f5 fe8e 	bl	8000288 <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	4630      	mov	r0, r6
 800a572:	4639      	mov	r1, r7
 800a574:	f7f6 fab2 	bl	8000adc <__aeabi_dcmplt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f43f af27 	beq.w	800a3cc <_dtoa_r+0x47c>
 800a57e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a580:	1e6b      	subs	r3, r5, #1
 800a582:	930c      	str	r3, [sp, #48]	; 0x30
 800a584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a588:	2b30      	cmp	r3, #48	; 0x30
 800a58a:	d0f8      	beq.n	800a57e <_dtoa_r+0x62e>
 800a58c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a590:	e04a      	b.n	800a628 <_dtoa_r+0x6d8>
 800a592:	bf00      	nop
 800a594:	0800bf68 	.word	0x0800bf68
 800a598:	0800bf40 	.word	0x0800bf40
 800a59c:	3ff00000 	.word	0x3ff00000
 800a5a0:	40240000 	.word	0x40240000
 800a5a4:	401c0000 	.word	0x401c0000
 800a5a8:	40140000 	.word	0x40140000
 800a5ac:	3fe00000 	.word	0x3fe00000
 800a5b0:	4baf      	ldr	r3, [pc, #700]	; (800a870 <_dtoa_r+0x920>)
 800a5b2:	f7f6 f821 	bl	80005f8 <__aeabi_dmul>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	e7ac      	b.n	800a516 <_dtoa_r+0x5c6>
 800a5bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5c0:	9d00      	ldr	r5, [sp, #0]
 800a5c2:	4642      	mov	r2, r8
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	f7f6 f93f 	bl	800084c <__aeabi_ddiv>
 800a5ce:	f7f6 fac3 	bl	8000b58 <__aeabi_d2iz>
 800a5d2:	9002      	str	r0, [sp, #8]
 800a5d4:	f7f5 ffa6 	bl	8000524 <__aeabi_i2d>
 800a5d8:	4642      	mov	r2, r8
 800a5da:	464b      	mov	r3, r9
 800a5dc:	f7f6 f80c 	bl	80005f8 <__aeabi_dmul>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fe4e 	bl	8000288 <__aeabi_dsub>
 800a5ec:	9e02      	ldr	r6, [sp, #8]
 800a5ee:	9f01      	ldr	r7, [sp, #4]
 800a5f0:	3630      	adds	r6, #48	; 0x30
 800a5f2:	f805 6b01 	strb.w	r6, [r5], #1
 800a5f6:	9e00      	ldr	r6, [sp, #0]
 800a5f8:	1bae      	subs	r6, r5, r6
 800a5fa:	42b7      	cmp	r7, r6
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	d137      	bne.n	800a672 <_dtoa_r+0x722>
 800a602:	f7f5 fe43 	bl	800028c <__adddf3>
 800a606:	4642      	mov	r2, r8
 800a608:	464b      	mov	r3, r9
 800a60a:	4606      	mov	r6, r0
 800a60c:	460f      	mov	r7, r1
 800a60e:	f7f6 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 800a612:	b9c8      	cbnz	r0, 800a648 <_dtoa_r+0x6f8>
 800a614:	4642      	mov	r2, r8
 800a616:	464b      	mov	r3, r9
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f6 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800a620:	b110      	cbz	r0, 800a628 <_dtoa_r+0x6d8>
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	d40f      	bmi.n	800a648 <_dtoa_r+0x6f8>
 800a628:	4620      	mov	r0, r4
 800a62a:	4659      	mov	r1, fp
 800a62c:	f000 facc 	bl	800abc8 <_Bfree>
 800a630:	2300      	movs	r3, #0
 800a632:	702b      	strb	r3, [r5, #0]
 800a634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a636:	f10a 0001 	add.w	r0, sl, #1
 800a63a:	6018      	str	r0, [r3, #0]
 800a63c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f43f acd8 	beq.w	8009ff4 <_dtoa_r+0xa4>
 800a644:	601d      	str	r5, [r3, #0]
 800a646:	e4d5      	b.n	8009ff4 <_dtoa_r+0xa4>
 800a648:	f8cd a01c 	str.w	sl, [sp, #28]
 800a64c:	462b      	mov	r3, r5
 800a64e:	461d      	mov	r5, r3
 800a650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a654:	2a39      	cmp	r2, #57	; 0x39
 800a656:	d108      	bne.n	800a66a <_dtoa_r+0x71a>
 800a658:	9a00      	ldr	r2, [sp, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d1f7      	bne.n	800a64e <_dtoa_r+0x6fe>
 800a65e:	9a07      	ldr	r2, [sp, #28]
 800a660:	9900      	ldr	r1, [sp, #0]
 800a662:	3201      	adds	r2, #1
 800a664:	9207      	str	r2, [sp, #28]
 800a666:	2230      	movs	r2, #48	; 0x30
 800a668:	700a      	strb	r2, [r1, #0]
 800a66a:	781a      	ldrb	r2, [r3, #0]
 800a66c:	3201      	adds	r2, #1
 800a66e:	701a      	strb	r2, [r3, #0]
 800a670:	e78c      	b.n	800a58c <_dtoa_r+0x63c>
 800a672:	4b7f      	ldr	r3, [pc, #508]	; (800a870 <_dtoa_r+0x920>)
 800a674:	2200      	movs	r2, #0
 800a676:	f7f5 ffbf 	bl	80005f8 <__aeabi_dmul>
 800a67a:	2200      	movs	r2, #0
 800a67c:	2300      	movs	r3, #0
 800a67e:	4606      	mov	r6, r0
 800a680:	460f      	mov	r7, r1
 800a682:	f7f6 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800a686:	2800      	cmp	r0, #0
 800a688:	d09b      	beq.n	800a5c2 <_dtoa_r+0x672>
 800a68a:	e7cd      	b.n	800a628 <_dtoa_r+0x6d8>
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	2a00      	cmp	r2, #0
 800a690:	f000 80c4 	beq.w	800a81c <_dtoa_r+0x8cc>
 800a694:	9a05      	ldr	r2, [sp, #20]
 800a696:	2a01      	cmp	r2, #1
 800a698:	f300 80a8 	bgt.w	800a7ec <_dtoa_r+0x89c>
 800a69c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a69e:	2a00      	cmp	r2, #0
 800a6a0:	f000 80a0 	beq.w	800a7e4 <_dtoa_r+0x894>
 800a6a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6a8:	9e06      	ldr	r6, [sp, #24]
 800a6aa:	4645      	mov	r5, r8
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	441a      	add	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4498      	add	r8, r3
 800a6b6:	9204      	str	r2, [sp, #16]
 800a6b8:	f000 fb42 	bl	800ad40 <__i2b>
 800a6bc:	4607      	mov	r7, r0
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	dd0b      	ble.n	800a6da <_dtoa_r+0x78a>
 800a6c2:	9b04      	ldr	r3, [sp, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd08      	ble.n	800a6da <_dtoa_r+0x78a>
 800a6c8:	42ab      	cmp	r3, r5
 800a6ca:	9a04      	ldr	r2, [sp, #16]
 800a6cc:	bfa8      	it	ge
 800a6ce:	462b      	movge	r3, r5
 800a6d0:	eba8 0803 	sub.w	r8, r8, r3
 800a6d4:	1aed      	subs	r5, r5, r3
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	9b06      	ldr	r3, [sp, #24]
 800a6dc:	b1fb      	cbz	r3, 800a71e <_dtoa_r+0x7ce>
 800a6de:	9b08      	ldr	r3, [sp, #32]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 809f 	beq.w	800a824 <_dtoa_r+0x8d4>
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	dd11      	ble.n	800a70e <_dtoa_r+0x7be>
 800a6ea:	4639      	mov	r1, r7
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fbe2 	bl	800aeb8 <__pow5mult>
 800a6f4:	465a      	mov	r2, fp
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fb36 	bl	800ad6c <__multiply>
 800a700:	4659      	mov	r1, fp
 800a702:	9007      	str	r0, [sp, #28]
 800a704:	4620      	mov	r0, r4
 800a706:	f000 fa5f 	bl	800abc8 <_Bfree>
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	469b      	mov	fp, r3
 800a70e:	9b06      	ldr	r3, [sp, #24]
 800a710:	1b9a      	subs	r2, r3, r6
 800a712:	d004      	beq.n	800a71e <_dtoa_r+0x7ce>
 800a714:	4659      	mov	r1, fp
 800a716:	4620      	mov	r0, r4
 800a718:	f000 fbce 	bl	800aeb8 <__pow5mult>
 800a71c:	4683      	mov	fp, r0
 800a71e:	2101      	movs	r1, #1
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fb0d 	bl	800ad40 <__i2b>
 800a726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a728:	2b00      	cmp	r3, #0
 800a72a:	4606      	mov	r6, r0
 800a72c:	dd7c      	ble.n	800a828 <_dtoa_r+0x8d8>
 800a72e:	461a      	mov	r2, r3
 800a730:	4601      	mov	r1, r0
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fbc0 	bl	800aeb8 <__pow5mult>
 800a738:	9b05      	ldr	r3, [sp, #20]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	4606      	mov	r6, r0
 800a73e:	dd76      	ble.n	800a82e <_dtoa_r+0x8de>
 800a740:	2300      	movs	r3, #0
 800a742:	9306      	str	r3, [sp, #24]
 800a744:	6933      	ldr	r3, [r6, #16]
 800a746:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a74a:	6918      	ldr	r0, [r3, #16]
 800a74c:	f000 faa8 	bl	800aca0 <__hi0bits>
 800a750:	f1c0 0020 	rsb	r0, r0, #32
 800a754:	9b04      	ldr	r3, [sp, #16]
 800a756:	4418      	add	r0, r3
 800a758:	f010 001f 	ands.w	r0, r0, #31
 800a75c:	f000 8086 	beq.w	800a86c <_dtoa_r+0x91c>
 800a760:	f1c0 0320 	rsb	r3, r0, #32
 800a764:	2b04      	cmp	r3, #4
 800a766:	dd7f      	ble.n	800a868 <_dtoa_r+0x918>
 800a768:	f1c0 001c 	rsb	r0, r0, #28
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4403      	add	r3, r0
 800a770:	4480      	add	r8, r0
 800a772:	4405      	add	r5, r0
 800a774:	9304      	str	r3, [sp, #16]
 800a776:	f1b8 0f00 	cmp.w	r8, #0
 800a77a:	dd05      	ble.n	800a788 <_dtoa_r+0x838>
 800a77c:	4659      	mov	r1, fp
 800a77e:	4642      	mov	r2, r8
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fbf3 	bl	800af6c <__lshift>
 800a786:	4683      	mov	fp, r0
 800a788:	9b04      	ldr	r3, [sp, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd05      	ble.n	800a79a <_dtoa_r+0x84a>
 800a78e:	4631      	mov	r1, r6
 800a790:	461a      	mov	r2, r3
 800a792:	4620      	mov	r0, r4
 800a794:	f000 fbea 	bl	800af6c <__lshift>
 800a798:	4606      	mov	r6, r0
 800a79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d069      	beq.n	800a874 <_dtoa_r+0x924>
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4658      	mov	r0, fp
 800a7a4:	f000 fc4e 	bl	800b044 <__mcmp>
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	da63      	bge.n	800a874 <_dtoa_r+0x924>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4659      	mov	r1, fp
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fa2a 	bl	800ac0c <__multadd>
 800a7b8:	9b08      	ldr	r3, [sp, #32]
 800a7ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a7be:	4683      	mov	fp, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 818f 	beq.w	800aae4 <_dtoa_r+0xb94>
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	220a      	movs	r2, #10
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fa1d 	bl	800ac0c <__multadd>
 800a7d2:	f1b9 0f00 	cmp.w	r9, #0
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	f300 808e 	bgt.w	800a8f8 <_dtoa_r+0x9a8>
 800a7dc:	9b05      	ldr	r3, [sp, #20]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	dc50      	bgt.n	800a884 <_dtoa_r+0x934>
 800a7e2:	e089      	b.n	800a8f8 <_dtoa_r+0x9a8>
 800a7e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7ea:	e75d      	b.n	800a6a8 <_dtoa_r+0x758>
 800a7ec:	9b01      	ldr	r3, [sp, #4]
 800a7ee:	1e5e      	subs	r6, r3, #1
 800a7f0:	9b06      	ldr	r3, [sp, #24]
 800a7f2:	42b3      	cmp	r3, r6
 800a7f4:	bfbf      	itttt	lt
 800a7f6:	9b06      	ldrlt	r3, [sp, #24]
 800a7f8:	9606      	strlt	r6, [sp, #24]
 800a7fa:	1af2      	sublt	r2, r6, r3
 800a7fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a7fe:	bfb6      	itet	lt
 800a800:	189b      	addlt	r3, r3, r2
 800a802:	1b9e      	subge	r6, r3, r6
 800a804:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	bfb8      	it	lt
 800a80a:	2600      	movlt	r6, #0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bfb5      	itete	lt
 800a810:	eba8 0503 	sublt.w	r5, r8, r3
 800a814:	9b01      	ldrge	r3, [sp, #4]
 800a816:	2300      	movlt	r3, #0
 800a818:	4645      	movge	r5, r8
 800a81a:	e747      	b.n	800a6ac <_dtoa_r+0x75c>
 800a81c:	9e06      	ldr	r6, [sp, #24]
 800a81e:	9f08      	ldr	r7, [sp, #32]
 800a820:	4645      	mov	r5, r8
 800a822:	e74c      	b.n	800a6be <_dtoa_r+0x76e>
 800a824:	9a06      	ldr	r2, [sp, #24]
 800a826:	e775      	b.n	800a714 <_dtoa_r+0x7c4>
 800a828:	9b05      	ldr	r3, [sp, #20]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	dc18      	bgt.n	800a860 <_dtoa_r+0x910>
 800a82e:	9b02      	ldr	r3, [sp, #8]
 800a830:	b9b3      	cbnz	r3, 800a860 <_dtoa_r+0x910>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a838:	b9a3      	cbnz	r3, 800a864 <_dtoa_r+0x914>
 800a83a:	9b03      	ldr	r3, [sp, #12]
 800a83c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a840:	0d1b      	lsrs	r3, r3, #20
 800a842:	051b      	lsls	r3, r3, #20
 800a844:	b12b      	cbz	r3, 800a852 <_dtoa_r+0x902>
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	3301      	adds	r3, #1
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	f108 0801 	add.w	r8, r8, #1
 800a850:	2301      	movs	r3, #1
 800a852:	9306      	str	r3, [sp, #24]
 800a854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a856:	2b00      	cmp	r3, #0
 800a858:	f47f af74 	bne.w	800a744 <_dtoa_r+0x7f4>
 800a85c:	2001      	movs	r0, #1
 800a85e:	e779      	b.n	800a754 <_dtoa_r+0x804>
 800a860:	2300      	movs	r3, #0
 800a862:	e7f6      	b.n	800a852 <_dtoa_r+0x902>
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	e7f4      	b.n	800a852 <_dtoa_r+0x902>
 800a868:	d085      	beq.n	800a776 <_dtoa_r+0x826>
 800a86a:	4618      	mov	r0, r3
 800a86c:	301c      	adds	r0, #28
 800a86e:	e77d      	b.n	800a76c <_dtoa_r+0x81c>
 800a870:	40240000 	.word	0x40240000
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	dc38      	bgt.n	800a8ec <_dtoa_r+0x99c>
 800a87a:	9b05      	ldr	r3, [sp, #20]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	dd35      	ble.n	800a8ec <_dtoa_r+0x99c>
 800a880:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a884:	f1b9 0f00 	cmp.w	r9, #0
 800a888:	d10d      	bne.n	800a8a6 <_dtoa_r+0x956>
 800a88a:	4631      	mov	r1, r6
 800a88c:	464b      	mov	r3, r9
 800a88e:	2205      	movs	r2, #5
 800a890:	4620      	mov	r0, r4
 800a892:	f000 f9bb 	bl	800ac0c <__multadd>
 800a896:	4601      	mov	r1, r0
 800a898:	4606      	mov	r6, r0
 800a89a:	4658      	mov	r0, fp
 800a89c:	f000 fbd2 	bl	800b044 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f73f adbd 	bgt.w	800a420 <_dtoa_r+0x4d0>
 800a8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a8:	9d00      	ldr	r5, [sp, #0]
 800a8aa:	ea6f 0a03 	mvn.w	sl, r3
 800a8ae:	f04f 0800 	mov.w	r8, #0
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 f987 	bl	800abc8 <_Bfree>
 800a8ba:	2f00      	cmp	r7, #0
 800a8bc:	f43f aeb4 	beq.w	800a628 <_dtoa_r+0x6d8>
 800a8c0:	f1b8 0f00 	cmp.w	r8, #0
 800a8c4:	d005      	beq.n	800a8d2 <_dtoa_r+0x982>
 800a8c6:	45b8      	cmp	r8, r7
 800a8c8:	d003      	beq.n	800a8d2 <_dtoa_r+0x982>
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 f97b 	bl	800abc8 <_Bfree>
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f000 f977 	bl	800abc8 <_Bfree>
 800a8da:	e6a5      	b.n	800a628 <_dtoa_r+0x6d8>
 800a8dc:	2600      	movs	r6, #0
 800a8de:	4637      	mov	r7, r6
 800a8e0:	e7e1      	b.n	800a8a6 <_dtoa_r+0x956>
 800a8e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a8e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8e8:	4637      	mov	r7, r6
 800a8ea:	e599      	b.n	800a420 <_dtoa_r+0x4d0>
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f000 80fd 	beq.w	800aaf2 <_dtoa_r+0xba2>
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	dd05      	ble.n	800a908 <_dtoa_r+0x9b8>
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	462a      	mov	r2, r5
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fb33 	bl	800af6c <__lshift>
 800a906:	4607      	mov	r7, r0
 800a908:	9b06      	ldr	r3, [sp, #24]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d05c      	beq.n	800a9c8 <_dtoa_r+0xa78>
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4620      	mov	r0, r4
 800a912:	f000 f919 	bl	800ab48 <_Balloc>
 800a916:	4605      	mov	r5, r0
 800a918:	b928      	cbnz	r0, 800a926 <_dtoa_r+0x9d6>
 800a91a:	4b80      	ldr	r3, [pc, #512]	; (800ab1c <_dtoa_r+0xbcc>)
 800a91c:	4602      	mov	r2, r0
 800a91e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a922:	f7ff bb2e 	b.w	8009f82 <_dtoa_r+0x32>
 800a926:	693a      	ldr	r2, [r7, #16]
 800a928:	3202      	adds	r2, #2
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	f107 010c 	add.w	r1, r7, #12
 800a930:	300c      	adds	r0, #12
 800a932:	f7fe fd45 	bl	80093c0 <memcpy>
 800a936:	2201      	movs	r2, #1
 800a938:	4629      	mov	r1, r5
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 fb16 	bl	800af6c <__lshift>
 800a940:	9b00      	ldr	r3, [sp, #0]
 800a942:	3301      	adds	r3, #1
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	9b00      	ldr	r3, [sp, #0]
 800a948:	444b      	add	r3, r9
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	9b02      	ldr	r3, [sp, #8]
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	46b8      	mov	r8, r7
 800a954:	9306      	str	r3, [sp, #24]
 800a956:	4607      	mov	r7, r0
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	4631      	mov	r1, r6
 800a95c:	3b01      	subs	r3, #1
 800a95e:	4658      	mov	r0, fp
 800a960:	9302      	str	r3, [sp, #8]
 800a962:	f7ff fa67 	bl	8009e34 <quorem>
 800a966:	4603      	mov	r3, r0
 800a968:	3330      	adds	r3, #48	; 0x30
 800a96a:	9004      	str	r0, [sp, #16]
 800a96c:	4641      	mov	r1, r8
 800a96e:	4658      	mov	r0, fp
 800a970:	9308      	str	r3, [sp, #32]
 800a972:	f000 fb67 	bl	800b044 <__mcmp>
 800a976:	463a      	mov	r2, r7
 800a978:	4681      	mov	r9, r0
 800a97a:	4631      	mov	r1, r6
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fb7d 	bl	800b07c <__mdiff>
 800a982:	68c2      	ldr	r2, [r0, #12]
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	4605      	mov	r5, r0
 800a988:	bb02      	cbnz	r2, 800a9cc <_dtoa_r+0xa7c>
 800a98a:	4601      	mov	r1, r0
 800a98c:	4658      	mov	r0, fp
 800a98e:	f000 fb59 	bl	800b044 <__mcmp>
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	4602      	mov	r2, r0
 800a996:	4629      	mov	r1, r5
 800a998:	4620      	mov	r0, r4
 800a99a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a99e:	f000 f913 	bl	800abc8 <_Bfree>
 800a9a2:	9b05      	ldr	r3, [sp, #20]
 800a9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9a6:	9d01      	ldr	r5, [sp, #4]
 800a9a8:	ea43 0102 	orr.w	r1, r3, r2
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	430b      	orrs	r3, r1
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	d10d      	bne.n	800a9d0 <_dtoa_r+0xa80>
 800a9b4:	2b39      	cmp	r3, #57	; 0x39
 800a9b6:	d029      	beq.n	800aa0c <_dtoa_r+0xabc>
 800a9b8:	f1b9 0f00 	cmp.w	r9, #0
 800a9bc:	dd01      	ble.n	800a9c2 <_dtoa_r+0xa72>
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	3331      	adds	r3, #49	; 0x31
 800a9c2:	9a02      	ldr	r2, [sp, #8]
 800a9c4:	7013      	strb	r3, [r2, #0]
 800a9c6:	e774      	b.n	800a8b2 <_dtoa_r+0x962>
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	e7b9      	b.n	800a940 <_dtoa_r+0x9f0>
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	e7e2      	b.n	800a996 <_dtoa_r+0xa46>
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	db06      	blt.n	800a9e4 <_dtoa_r+0xa94>
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	ea41 0909 	orr.w	r9, r1, r9
 800a9dc:	9906      	ldr	r1, [sp, #24]
 800a9de:	ea59 0101 	orrs.w	r1, r9, r1
 800a9e2:	d120      	bne.n	800aa26 <_dtoa_r+0xad6>
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	ddec      	ble.n	800a9c2 <_dtoa_r+0xa72>
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	f000 fabc 	bl	800af6c <__lshift>
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4683      	mov	fp, r0
 800a9f8:	f000 fb24 	bl	800b044 <__mcmp>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	dc02      	bgt.n	800aa08 <_dtoa_r+0xab8>
 800aa02:	d1de      	bne.n	800a9c2 <_dtoa_r+0xa72>
 800aa04:	07da      	lsls	r2, r3, #31
 800aa06:	d5dc      	bpl.n	800a9c2 <_dtoa_r+0xa72>
 800aa08:	2b39      	cmp	r3, #57	; 0x39
 800aa0a:	d1d8      	bne.n	800a9be <_dtoa_r+0xa6e>
 800aa0c:	9a02      	ldr	r2, [sp, #8]
 800aa0e:	2339      	movs	r3, #57	; 0x39
 800aa10:	7013      	strb	r3, [r2, #0]
 800aa12:	462b      	mov	r3, r5
 800aa14:	461d      	mov	r5, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa1c:	2a39      	cmp	r2, #57	; 0x39
 800aa1e:	d050      	beq.n	800aac2 <_dtoa_r+0xb72>
 800aa20:	3201      	adds	r2, #1
 800aa22:	701a      	strb	r2, [r3, #0]
 800aa24:	e745      	b.n	800a8b2 <_dtoa_r+0x962>
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	dd03      	ble.n	800aa32 <_dtoa_r+0xae2>
 800aa2a:	2b39      	cmp	r3, #57	; 0x39
 800aa2c:	d0ee      	beq.n	800aa0c <_dtoa_r+0xabc>
 800aa2e:	3301      	adds	r3, #1
 800aa30:	e7c7      	b.n	800a9c2 <_dtoa_r+0xa72>
 800aa32:	9a01      	ldr	r2, [sp, #4]
 800aa34:	9907      	ldr	r1, [sp, #28]
 800aa36:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa3a:	428a      	cmp	r2, r1
 800aa3c:	d02a      	beq.n	800aa94 <_dtoa_r+0xb44>
 800aa3e:	4659      	mov	r1, fp
 800aa40:	2300      	movs	r3, #0
 800aa42:	220a      	movs	r2, #10
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 f8e1 	bl	800ac0c <__multadd>
 800aa4a:	45b8      	cmp	r8, r7
 800aa4c:	4683      	mov	fp, r0
 800aa4e:	f04f 0300 	mov.w	r3, #0
 800aa52:	f04f 020a 	mov.w	r2, #10
 800aa56:	4641      	mov	r1, r8
 800aa58:	4620      	mov	r0, r4
 800aa5a:	d107      	bne.n	800aa6c <_dtoa_r+0xb1c>
 800aa5c:	f000 f8d6 	bl	800ac0c <__multadd>
 800aa60:	4680      	mov	r8, r0
 800aa62:	4607      	mov	r7, r0
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	3301      	adds	r3, #1
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	e775      	b.n	800a958 <_dtoa_r+0xa08>
 800aa6c:	f000 f8ce 	bl	800ac0c <__multadd>
 800aa70:	4639      	mov	r1, r7
 800aa72:	4680      	mov	r8, r0
 800aa74:	2300      	movs	r3, #0
 800aa76:	220a      	movs	r2, #10
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 f8c7 	bl	800ac0c <__multadd>
 800aa7e:	4607      	mov	r7, r0
 800aa80:	e7f0      	b.n	800aa64 <_dtoa_r+0xb14>
 800aa82:	f1b9 0f00 	cmp.w	r9, #0
 800aa86:	9a00      	ldr	r2, [sp, #0]
 800aa88:	bfcc      	ite	gt
 800aa8a:	464d      	movgt	r5, r9
 800aa8c:	2501      	movle	r5, #1
 800aa8e:	4415      	add	r5, r2
 800aa90:	f04f 0800 	mov.w	r8, #0
 800aa94:	4659      	mov	r1, fp
 800aa96:	2201      	movs	r2, #1
 800aa98:	4620      	mov	r0, r4
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	f000 fa66 	bl	800af6c <__lshift>
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4683      	mov	fp, r0
 800aaa4:	f000 face 	bl	800b044 <__mcmp>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	dcb2      	bgt.n	800aa12 <_dtoa_r+0xac2>
 800aaac:	d102      	bne.n	800aab4 <_dtoa_r+0xb64>
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	07db      	lsls	r3, r3, #31
 800aab2:	d4ae      	bmi.n	800aa12 <_dtoa_r+0xac2>
 800aab4:	462b      	mov	r3, r5
 800aab6:	461d      	mov	r5, r3
 800aab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aabc:	2a30      	cmp	r2, #48	; 0x30
 800aabe:	d0fa      	beq.n	800aab6 <_dtoa_r+0xb66>
 800aac0:	e6f7      	b.n	800a8b2 <_dtoa_r+0x962>
 800aac2:	9a00      	ldr	r2, [sp, #0]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d1a5      	bne.n	800aa14 <_dtoa_r+0xac4>
 800aac8:	f10a 0a01 	add.w	sl, sl, #1
 800aacc:	2331      	movs	r3, #49	; 0x31
 800aace:	e779      	b.n	800a9c4 <_dtoa_r+0xa74>
 800aad0:	4b13      	ldr	r3, [pc, #76]	; (800ab20 <_dtoa_r+0xbd0>)
 800aad2:	f7ff baaf 	b.w	800a034 <_dtoa_r+0xe4>
 800aad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f47f aa86 	bne.w	8009fea <_dtoa_r+0x9a>
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <_dtoa_r+0xbd4>)
 800aae0:	f7ff baa8 	b.w	800a034 <_dtoa_r+0xe4>
 800aae4:	f1b9 0f00 	cmp.w	r9, #0
 800aae8:	dc03      	bgt.n	800aaf2 <_dtoa_r+0xba2>
 800aaea:	9b05      	ldr	r3, [sp, #20]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	f73f aec9 	bgt.w	800a884 <_dtoa_r+0x934>
 800aaf2:	9d00      	ldr	r5, [sp, #0]
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	f7ff f99c 	bl	8009e34 <quorem>
 800aafc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab00:	f805 3b01 	strb.w	r3, [r5], #1
 800ab04:	9a00      	ldr	r2, [sp, #0]
 800ab06:	1aaa      	subs	r2, r5, r2
 800ab08:	4591      	cmp	r9, r2
 800ab0a:	ddba      	ble.n	800aa82 <_dtoa_r+0xb32>
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	2300      	movs	r3, #0
 800ab10:	220a      	movs	r2, #10
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 f87a 	bl	800ac0c <__multadd>
 800ab18:	4683      	mov	fp, r0
 800ab1a:	e7eb      	b.n	800aaf4 <_dtoa_r+0xba4>
 800ab1c:	0800becb 	.word	0x0800becb
 800ab20:	0800be24 	.word	0x0800be24
 800ab24:	0800be48 	.word	0x0800be48

0800ab28 <_localeconv_r>:
 800ab28:	4800      	ldr	r0, [pc, #0]	; (800ab2c <_localeconv_r+0x4>)
 800ab2a:	4770      	bx	lr
 800ab2c:	2000024c 	.word	0x2000024c

0800ab30 <__malloc_lock>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__malloc_lock+0x8>)
 800ab32:	f000 bbc8 	b.w	800b2c6 <__retarget_lock_acquire_recursive>
 800ab36:	bf00      	nop
 800ab38:	20001db0 	.word	0x20001db0

0800ab3c <__malloc_unlock>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	; (800ab44 <__malloc_unlock+0x8>)
 800ab3e:	f000 bbc3 	b.w	800b2c8 <__retarget_lock_release_recursive>
 800ab42:	bf00      	nop
 800ab44:	20001db0 	.word	0x20001db0

0800ab48 <_Balloc>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	b976      	cbnz	r6, 800ab70 <_Balloc+0x28>
 800ab52:	2010      	movs	r0, #16
 800ab54:	f7fe fc24 	bl	80093a0 <malloc>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab5c:	b920      	cbnz	r0, 800ab68 <_Balloc+0x20>
 800ab5e:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <_Balloc+0x78>)
 800ab60:	4818      	ldr	r0, [pc, #96]	; (800abc4 <_Balloc+0x7c>)
 800ab62:	2166      	movs	r1, #102	; 0x66
 800ab64:	f000 fb7e 	bl	800b264 <__assert_func>
 800ab68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab6c:	6006      	str	r6, [r0, #0]
 800ab6e:	60c6      	str	r6, [r0, #12]
 800ab70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab72:	68f3      	ldr	r3, [r6, #12]
 800ab74:	b183      	cbz	r3, 800ab98 <_Balloc+0x50>
 800ab76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab7e:	b9b8      	cbnz	r0, 800abb0 <_Balloc+0x68>
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f605 	lsl.w	r6, r1, r5
 800ab86:	1d72      	adds	r2, r6, #5
 800ab88:	0092      	lsls	r2, r2, #2
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f000 fb5a 	bl	800b244 <_calloc_r>
 800ab90:	b160      	cbz	r0, 800abac <_Balloc+0x64>
 800ab92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab96:	e00e      	b.n	800abb6 <_Balloc+0x6e>
 800ab98:	2221      	movs	r2, #33	; 0x21
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fb51 	bl	800b244 <_calloc_r>
 800aba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba4:	60f0      	str	r0, [r6, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e4      	bne.n	800ab76 <_Balloc+0x2e>
 800abac:	2000      	movs	r0, #0
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	6802      	ldr	r2, [r0, #0]
 800abb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abb6:	2300      	movs	r3, #0
 800abb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abbc:	e7f7      	b.n	800abae <_Balloc+0x66>
 800abbe:	bf00      	nop
 800abc0:	0800be55 	.word	0x0800be55
 800abc4:	0800bedc 	.word	0x0800bedc

0800abc8 <_Bfree>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b976      	cbnz	r6, 800abf0 <_Bfree+0x28>
 800abd2:	2010      	movs	r0, #16
 800abd4:	f7fe fbe4 	bl	80093a0 <malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	6268      	str	r0, [r5, #36]	; 0x24
 800abdc:	b920      	cbnz	r0, 800abe8 <_Bfree+0x20>
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_Bfree+0x3c>)
 800abe0:	4809      	ldr	r0, [pc, #36]	; (800ac08 <_Bfree+0x40>)
 800abe2:	218a      	movs	r1, #138	; 0x8a
 800abe4:	f000 fb3e 	bl	800b264 <__assert_func>
 800abe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abec:	6006      	str	r6, [r0, #0]
 800abee:	60c6      	str	r6, [r0, #12]
 800abf0:	b13c      	cbz	r4, 800ac02 <_Bfree+0x3a>
 800abf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abf4:	6862      	ldr	r2, [r4, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abfc:	6021      	str	r1, [r4, #0]
 800abfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	0800be55 	.word	0x0800be55
 800ac08:	0800bedc 	.word	0x0800bedc

0800ac0c <__multadd>:
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	690e      	ldr	r6, [r1, #16]
 800ac12:	4607      	mov	r7, r0
 800ac14:	4698      	mov	r8, r3
 800ac16:	460c      	mov	r4, r1
 800ac18:	f101 0014 	add.w	r0, r1, #20
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	6805      	ldr	r5, [r0, #0]
 800ac20:	b2a9      	uxth	r1, r5
 800ac22:	fb02 8101 	mla	r1, r2, r1, r8
 800ac26:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ac2a:	0c2d      	lsrs	r5, r5, #16
 800ac2c:	fb02 c505 	mla	r5, r2, r5, ip
 800ac30:	b289      	uxth	r1, r1
 800ac32:	3301      	adds	r3, #1
 800ac34:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ac38:	429e      	cmp	r6, r3
 800ac3a:	f840 1b04 	str.w	r1, [r0], #4
 800ac3e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ac42:	dcec      	bgt.n	800ac1e <__multadd+0x12>
 800ac44:	f1b8 0f00 	cmp.w	r8, #0
 800ac48:	d022      	beq.n	800ac90 <__multadd+0x84>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	42b3      	cmp	r3, r6
 800ac4e:	dc19      	bgt.n	800ac84 <__multadd+0x78>
 800ac50:	6861      	ldr	r1, [r4, #4]
 800ac52:	4638      	mov	r0, r7
 800ac54:	3101      	adds	r1, #1
 800ac56:	f7ff ff77 	bl	800ab48 <_Balloc>
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	b928      	cbnz	r0, 800ac6a <__multadd+0x5e>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <__multadd+0x8c>)
 800ac62:	480e      	ldr	r0, [pc, #56]	; (800ac9c <__multadd+0x90>)
 800ac64:	21b5      	movs	r1, #181	; 0xb5
 800ac66:	f000 fafd 	bl	800b264 <__assert_func>
 800ac6a:	6922      	ldr	r2, [r4, #16]
 800ac6c:	3202      	adds	r2, #2
 800ac6e:	f104 010c 	add.w	r1, r4, #12
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	300c      	adds	r0, #12
 800ac76:	f7fe fba3 	bl	80093c0 <memcpy>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff ffa3 	bl	800abc8 <_Bfree>
 800ac82:	462c      	mov	r4, r5
 800ac84:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac88:	3601      	adds	r6, #1
 800ac8a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac8e:	6126      	str	r6, [r4, #16]
 800ac90:	4620      	mov	r0, r4
 800ac92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac96:	bf00      	nop
 800ac98:	0800becb 	.word	0x0800becb
 800ac9c:	0800bedc 	.word	0x0800bedc

0800aca0 <__hi0bits>:
 800aca0:	0c03      	lsrs	r3, r0, #16
 800aca2:	041b      	lsls	r3, r3, #16
 800aca4:	b9d3      	cbnz	r3, 800acdc <__hi0bits+0x3c>
 800aca6:	0400      	lsls	r0, r0, #16
 800aca8:	2310      	movs	r3, #16
 800acaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acae:	bf04      	itt	eq
 800acb0:	0200      	lsleq	r0, r0, #8
 800acb2:	3308      	addeq	r3, #8
 800acb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acb8:	bf04      	itt	eq
 800acba:	0100      	lsleq	r0, r0, #4
 800acbc:	3304      	addeq	r3, #4
 800acbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acc2:	bf04      	itt	eq
 800acc4:	0080      	lsleq	r0, r0, #2
 800acc6:	3302      	addeq	r3, #2
 800acc8:	2800      	cmp	r0, #0
 800acca:	db05      	blt.n	800acd8 <__hi0bits+0x38>
 800accc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acd0:	f103 0301 	add.w	r3, r3, #1
 800acd4:	bf08      	it	eq
 800acd6:	2320      	moveq	r3, #32
 800acd8:	4618      	mov	r0, r3
 800acda:	4770      	bx	lr
 800acdc:	2300      	movs	r3, #0
 800acde:	e7e4      	b.n	800acaa <__hi0bits+0xa>

0800ace0 <__lo0bits>:
 800ace0:	6803      	ldr	r3, [r0, #0]
 800ace2:	f013 0207 	ands.w	r2, r3, #7
 800ace6:	4601      	mov	r1, r0
 800ace8:	d00b      	beq.n	800ad02 <__lo0bits+0x22>
 800acea:	07da      	lsls	r2, r3, #31
 800acec:	d424      	bmi.n	800ad38 <__lo0bits+0x58>
 800acee:	0798      	lsls	r0, r3, #30
 800acf0:	bf49      	itett	mi
 800acf2:	085b      	lsrmi	r3, r3, #1
 800acf4:	089b      	lsrpl	r3, r3, #2
 800acf6:	2001      	movmi	r0, #1
 800acf8:	600b      	strmi	r3, [r1, #0]
 800acfa:	bf5c      	itt	pl
 800acfc:	600b      	strpl	r3, [r1, #0]
 800acfe:	2002      	movpl	r0, #2
 800ad00:	4770      	bx	lr
 800ad02:	b298      	uxth	r0, r3
 800ad04:	b9b0      	cbnz	r0, 800ad34 <__lo0bits+0x54>
 800ad06:	0c1b      	lsrs	r3, r3, #16
 800ad08:	2010      	movs	r0, #16
 800ad0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad0e:	bf04      	itt	eq
 800ad10:	0a1b      	lsreq	r3, r3, #8
 800ad12:	3008      	addeq	r0, #8
 800ad14:	071a      	lsls	r2, r3, #28
 800ad16:	bf04      	itt	eq
 800ad18:	091b      	lsreq	r3, r3, #4
 800ad1a:	3004      	addeq	r0, #4
 800ad1c:	079a      	lsls	r2, r3, #30
 800ad1e:	bf04      	itt	eq
 800ad20:	089b      	lsreq	r3, r3, #2
 800ad22:	3002      	addeq	r0, #2
 800ad24:	07da      	lsls	r2, r3, #31
 800ad26:	d403      	bmi.n	800ad30 <__lo0bits+0x50>
 800ad28:	085b      	lsrs	r3, r3, #1
 800ad2a:	f100 0001 	add.w	r0, r0, #1
 800ad2e:	d005      	beq.n	800ad3c <__lo0bits+0x5c>
 800ad30:	600b      	str	r3, [r1, #0]
 800ad32:	4770      	bx	lr
 800ad34:	4610      	mov	r0, r2
 800ad36:	e7e8      	b.n	800ad0a <__lo0bits+0x2a>
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4770      	bx	lr
 800ad3c:	2020      	movs	r0, #32
 800ad3e:	4770      	bx	lr

0800ad40 <__i2b>:
 800ad40:	b510      	push	{r4, lr}
 800ad42:	460c      	mov	r4, r1
 800ad44:	2101      	movs	r1, #1
 800ad46:	f7ff feff 	bl	800ab48 <_Balloc>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	b928      	cbnz	r0, 800ad5a <__i2b+0x1a>
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <__i2b+0x24>)
 800ad50:	4805      	ldr	r0, [pc, #20]	; (800ad68 <__i2b+0x28>)
 800ad52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad56:	f000 fa85 	bl	800b264 <__assert_func>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	6144      	str	r4, [r0, #20]
 800ad5e:	6103      	str	r3, [r0, #16]
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	bf00      	nop
 800ad64:	0800becb 	.word	0x0800becb
 800ad68:	0800bedc 	.word	0x0800bedc

0800ad6c <__multiply>:
 800ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad70:	4614      	mov	r4, r2
 800ad72:	690a      	ldr	r2, [r1, #16]
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	bfb8      	it	lt
 800ad7a:	460b      	movlt	r3, r1
 800ad7c:	460d      	mov	r5, r1
 800ad7e:	bfbc      	itt	lt
 800ad80:	4625      	movlt	r5, r4
 800ad82:	461c      	movlt	r4, r3
 800ad84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad8c:	68ab      	ldr	r3, [r5, #8]
 800ad8e:	6869      	ldr	r1, [r5, #4]
 800ad90:	eb0a 0709 	add.w	r7, sl, r9
 800ad94:	42bb      	cmp	r3, r7
 800ad96:	b085      	sub	sp, #20
 800ad98:	bfb8      	it	lt
 800ad9a:	3101      	addlt	r1, #1
 800ad9c:	f7ff fed4 	bl	800ab48 <_Balloc>
 800ada0:	b930      	cbnz	r0, 800adb0 <__multiply+0x44>
 800ada2:	4602      	mov	r2, r0
 800ada4:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <__multiply+0x144>)
 800ada6:	4843      	ldr	r0, [pc, #268]	; (800aeb4 <__multiply+0x148>)
 800ada8:	f240 115d 	movw	r1, #349	; 0x15d
 800adac:	f000 fa5a 	bl	800b264 <__assert_func>
 800adb0:	f100 0614 	add.w	r6, r0, #20
 800adb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800adb8:	4633      	mov	r3, r6
 800adba:	2200      	movs	r2, #0
 800adbc:	4543      	cmp	r3, r8
 800adbe:	d31e      	bcc.n	800adfe <__multiply+0x92>
 800adc0:	f105 0c14 	add.w	ip, r5, #20
 800adc4:	f104 0314 	add.w	r3, r4, #20
 800adc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800adcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800add0:	9202      	str	r2, [sp, #8]
 800add2:	ebac 0205 	sub.w	r2, ip, r5
 800add6:	3a15      	subs	r2, #21
 800add8:	f022 0203 	bic.w	r2, r2, #3
 800addc:	3204      	adds	r2, #4
 800adde:	f105 0115 	add.w	r1, r5, #21
 800ade2:	458c      	cmp	ip, r1
 800ade4:	bf38      	it	cc
 800ade6:	2204      	movcc	r2, #4
 800ade8:	9201      	str	r2, [sp, #4]
 800adea:	9a02      	ldr	r2, [sp, #8]
 800adec:	9303      	str	r3, [sp, #12]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d808      	bhi.n	800ae04 <__multiply+0x98>
 800adf2:	2f00      	cmp	r7, #0
 800adf4:	dc55      	bgt.n	800aea2 <__multiply+0x136>
 800adf6:	6107      	str	r7, [r0, #16]
 800adf8:	b005      	add	sp, #20
 800adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfe:	f843 2b04 	str.w	r2, [r3], #4
 800ae02:	e7db      	b.n	800adbc <__multiply+0x50>
 800ae04:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae08:	f1ba 0f00 	cmp.w	sl, #0
 800ae0c:	d020      	beq.n	800ae50 <__multiply+0xe4>
 800ae0e:	f105 0e14 	add.w	lr, r5, #20
 800ae12:	46b1      	mov	r9, r6
 800ae14:	2200      	movs	r2, #0
 800ae16:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ae1a:	f8d9 b000 	ldr.w	fp, [r9]
 800ae1e:	b2a1      	uxth	r1, r4
 800ae20:	fa1f fb8b 	uxth.w	fp, fp
 800ae24:	fb0a b101 	mla	r1, sl, r1, fp
 800ae28:	4411      	add	r1, r2
 800ae2a:	f8d9 2000 	ldr.w	r2, [r9]
 800ae2e:	0c24      	lsrs	r4, r4, #16
 800ae30:	0c12      	lsrs	r2, r2, #16
 800ae32:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae3a:	b289      	uxth	r1, r1
 800ae3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae40:	45f4      	cmp	ip, lr
 800ae42:	f849 1b04 	str.w	r1, [r9], #4
 800ae46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae4a:	d8e4      	bhi.n	800ae16 <__multiply+0xaa>
 800ae4c:	9901      	ldr	r1, [sp, #4]
 800ae4e:	5072      	str	r2, [r6, r1]
 800ae50:	9a03      	ldr	r2, [sp, #12]
 800ae52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae56:	3304      	adds	r3, #4
 800ae58:	f1b9 0f00 	cmp.w	r9, #0
 800ae5c:	d01f      	beq.n	800ae9e <__multiply+0x132>
 800ae5e:	6834      	ldr	r4, [r6, #0]
 800ae60:	f105 0114 	add.w	r1, r5, #20
 800ae64:	46b6      	mov	lr, r6
 800ae66:	f04f 0a00 	mov.w	sl, #0
 800ae6a:	880a      	ldrh	r2, [r1, #0]
 800ae6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae70:	fb09 b202 	mla	r2, r9, r2, fp
 800ae74:	4492      	add	sl, r2
 800ae76:	b2a4      	uxth	r4, r4
 800ae78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae7c:	f84e 4b04 	str.w	r4, [lr], #4
 800ae80:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae84:	f8be 2000 	ldrh.w	r2, [lr]
 800ae88:	0c24      	lsrs	r4, r4, #16
 800ae8a:	fb09 2404 	mla	r4, r9, r4, r2
 800ae8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae92:	458c      	cmp	ip, r1
 800ae94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae98:	d8e7      	bhi.n	800ae6a <__multiply+0xfe>
 800ae9a:	9a01      	ldr	r2, [sp, #4]
 800ae9c:	50b4      	str	r4, [r6, r2]
 800ae9e:	3604      	adds	r6, #4
 800aea0:	e7a3      	b.n	800adea <__multiply+0x7e>
 800aea2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1a5      	bne.n	800adf6 <__multiply+0x8a>
 800aeaa:	3f01      	subs	r7, #1
 800aeac:	e7a1      	b.n	800adf2 <__multiply+0x86>
 800aeae:	bf00      	nop
 800aeb0:	0800becb 	.word	0x0800becb
 800aeb4:	0800bedc 	.word	0x0800bedc

0800aeb8 <__pow5mult>:
 800aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	4615      	mov	r5, r2
 800aebe:	f012 0203 	ands.w	r2, r2, #3
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	d007      	beq.n	800aed8 <__pow5mult+0x20>
 800aec8:	4c25      	ldr	r4, [pc, #148]	; (800af60 <__pow5mult+0xa8>)
 800aeca:	3a01      	subs	r2, #1
 800aecc:	2300      	movs	r3, #0
 800aece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aed2:	f7ff fe9b 	bl	800ac0c <__multadd>
 800aed6:	4607      	mov	r7, r0
 800aed8:	10ad      	asrs	r5, r5, #2
 800aeda:	d03d      	beq.n	800af58 <__pow5mult+0xa0>
 800aedc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aede:	b97c      	cbnz	r4, 800af00 <__pow5mult+0x48>
 800aee0:	2010      	movs	r0, #16
 800aee2:	f7fe fa5d 	bl	80093a0 <malloc>
 800aee6:	4602      	mov	r2, r0
 800aee8:	6270      	str	r0, [r6, #36]	; 0x24
 800aeea:	b928      	cbnz	r0, 800aef8 <__pow5mult+0x40>
 800aeec:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <__pow5mult+0xac>)
 800aeee:	481e      	ldr	r0, [pc, #120]	; (800af68 <__pow5mult+0xb0>)
 800aef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aef4:	f000 f9b6 	bl	800b264 <__assert_func>
 800aef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aefc:	6004      	str	r4, [r0, #0]
 800aefe:	60c4      	str	r4, [r0, #12]
 800af00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af08:	b94c      	cbnz	r4, 800af1e <__pow5mult+0x66>
 800af0a:	f240 2171 	movw	r1, #625	; 0x271
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff16 	bl	800ad40 <__i2b>
 800af14:	2300      	movs	r3, #0
 800af16:	f8c8 0008 	str.w	r0, [r8, #8]
 800af1a:	4604      	mov	r4, r0
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	07eb      	lsls	r3, r5, #31
 800af24:	d50a      	bpl.n	800af3c <__pow5mult+0x84>
 800af26:	4639      	mov	r1, r7
 800af28:	4622      	mov	r2, r4
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff1e 	bl	800ad6c <__multiply>
 800af30:	4639      	mov	r1, r7
 800af32:	4680      	mov	r8, r0
 800af34:	4630      	mov	r0, r6
 800af36:	f7ff fe47 	bl	800abc8 <_Bfree>
 800af3a:	4647      	mov	r7, r8
 800af3c:	106d      	asrs	r5, r5, #1
 800af3e:	d00b      	beq.n	800af58 <__pow5mult+0xa0>
 800af40:	6820      	ldr	r0, [r4, #0]
 800af42:	b938      	cbnz	r0, 800af54 <__pow5mult+0x9c>
 800af44:	4622      	mov	r2, r4
 800af46:	4621      	mov	r1, r4
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ff0f 	bl	800ad6c <__multiply>
 800af4e:	6020      	str	r0, [r4, #0]
 800af50:	f8c0 9000 	str.w	r9, [r0]
 800af54:	4604      	mov	r4, r0
 800af56:	e7e4      	b.n	800af22 <__pow5mult+0x6a>
 800af58:	4638      	mov	r0, r7
 800af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af5e:	bf00      	nop
 800af60:	0800c030 	.word	0x0800c030
 800af64:	0800be55 	.word	0x0800be55
 800af68:	0800bedc 	.word	0x0800bedc

0800af6c <__lshift>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	460c      	mov	r4, r1
 800af72:	6849      	ldr	r1, [r1, #4]
 800af74:	6923      	ldr	r3, [r4, #16]
 800af76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	4607      	mov	r7, r0
 800af7e:	4691      	mov	r9, r2
 800af80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af84:	f108 0601 	add.w	r6, r8, #1
 800af88:	42b3      	cmp	r3, r6
 800af8a:	db0b      	blt.n	800afa4 <__lshift+0x38>
 800af8c:	4638      	mov	r0, r7
 800af8e:	f7ff fddb 	bl	800ab48 <_Balloc>
 800af92:	4605      	mov	r5, r0
 800af94:	b948      	cbnz	r0, 800afaa <__lshift+0x3e>
 800af96:	4602      	mov	r2, r0
 800af98:	4b28      	ldr	r3, [pc, #160]	; (800b03c <__lshift+0xd0>)
 800af9a:	4829      	ldr	r0, [pc, #164]	; (800b040 <__lshift+0xd4>)
 800af9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afa0:	f000 f960 	bl	800b264 <__assert_func>
 800afa4:	3101      	adds	r1, #1
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	e7ee      	b.n	800af88 <__lshift+0x1c>
 800afaa:	2300      	movs	r3, #0
 800afac:	f100 0114 	add.w	r1, r0, #20
 800afb0:	f100 0210 	add.w	r2, r0, #16
 800afb4:	4618      	mov	r0, r3
 800afb6:	4553      	cmp	r3, sl
 800afb8:	db33      	blt.n	800b022 <__lshift+0xb6>
 800afba:	6920      	ldr	r0, [r4, #16]
 800afbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afc0:	f104 0314 	add.w	r3, r4, #20
 800afc4:	f019 091f 	ands.w	r9, r9, #31
 800afc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afd0:	d02b      	beq.n	800b02a <__lshift+0xbe>
 800afd2:	f1c9 0e20 	rsb	lr, r9, #32
 800afd6:	468a      	mov	sl, r1
 800afd8:	2200      	movs	r2, #0
 800afda:	6818      	ldr	r0, [r3, #0]
 800afdc:	fa00 f009 	lsl.w	r0, r0, r9
 800afe0:	4302      	orrs	r2, r0
 800afe2:	f84a 2b04 	str.w	r2, [sl], #4
 800afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afea:	459c      	cmp	ip, r3
 800afec:	fa22 f20e 	lsr.w	r2, r2, lr
 800aff0:	d8f3      	bhi.n	800afda <__lshift+0x6e>
 800aff2:	ebac 0304 	sub.w	r3, ip, r4
 800aff6:	3b15      	subs	r3, #21
 800aff8:	f023 0303 	bic.w	r3, r3, #3
 800affc:	3304      	adds	r3, #4
 800affe:	f104 0015 	add.w	r0, r4, #21
 800b002:	4584      	cmp	ip, r0
 800b004:	bf38      	it	cc
 800b006:	2304      	movcc	r3, #4
 800b008:	50ca      	str	r2, [r1, r3]
 800b00a:	b10a      	cbz	r2, 800b010 <__lshift+0xa4>
 800b00c:	f108 0602 	add.w	r6, r8, #2
 800b010:	3e01      	subs	r6, #1
 800b012:	4638      	mov	r0, r7
 800b014:	612e      	str	r6, [r5, #16]
 800b016:	4621      	mov	r1, r4
 800b018:	f7ff fdd6 	bl	800abc8 <_Bfree>
 800b01c:	4628      	mov	r0, r5
 800b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b022:	f842 0f04 	str.w	r0, [r2, #4]!
 800b026:	3301      	adds	r3, #1
 800b028:	e7c5      	b.n	800afb6 <__lshift+0x4a>
 800b02a:	3904      	subs	r1, #4
 800b02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b030:	f841 2f04 	str.w	r2, [r1, #4]!
 800b034:	459c      	cmp	ip, r3
 800b036:	d8f9      	bhi.n	800b02c <__lshift+0xc0>
 800b038:	e7ea      	b.n	800b010 <__lshift+0xa4>
 800b03a:	bf00      	nop
 800b03c:	0800becb 	.word	0x0800becb
 800b040:	0800bedc 	.word	0x0800bedc

0800b044 <__mcmp>:
 800b044:	b530      	push	{r4, r5, lr}
 800b046:	6902      	ldr	r2, [r0, #16]
 800b048:	690c      	ldr	r4, [r1, #16]
 800b04a:	1b12      	subs	r2, r2, r4
 800b04c:	d10e      	bne.n	800b06c <__mcmp+0x28>
 800b04e:	f100 0314 	add.w	r3, r0, #20
 800b052:	3114      	adds	r1, #20
 800b054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b064:	42a5      	cmp	r5, r4
 800b066:	d003      	beq.n	800b070 <__mcmp+0x2c>
 800b068:	d305      	bcc.n	800b076 <__mcmp+0x32>
 800b06a:	2201      	movs	r2, #1
 800b06c:	4610      	mov	r0, r2
 800b06e:	bd30      	pop	{r4, r5, pc}
 800b070:	4283      	cmp	r3, r0
 800b072:	d3f3      	bcc.n	800b05c <__mcmp+0x18>
 800b074:	e7fa      	b.n	800b06c <__mcmp+0x28>
 800b076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b07a:	e7f7      	b.n	800b06c <__mcmp+0x28>

0800b07c <__mdiff>:
 800b07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	460c      	mov	r4, r1
 800b082:	4606      	mov	r6, r0
 800b084:	4611      	mov	r1, r2
 800b086:	4620      	mov	r0, r4
 800b088:	4617      	mov	r7, r2
 800b08a:	f7ff ffdb 	bl	800b044 <__mcmp>
 800b08e:	1e05      	subs	r5, r0, #0
 800b090:	d110      	bne.n	800b0b4 <__mdiff+0x38>
 800b092:	4629      	mov	r1, r5
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff fd57 	bl	800ab48 <_Balloc>
 800b09a:	b930      	cbnz	r0, 800b0aa <__mdiff+0x2e>
 800b09c:	4b39      	ldr	r3, [pc, #228]	; (800b184 <__mdiff+0x108>)
 800b09e:	4602      	mov	r2, r0
 800b0a0:	f240 2132 	movw	r1, #562	; 0x232
 800b0a4:	4838      	ldr	r0, [pc, #224]	; (800b188 <__mdiff+0x10c>)
 800b0a6:	f000 f8dd 	bl	800b264 <__assert_func>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b4:	bfa4      	itt	ge
 800b0b6:	463b      	movge	r3, r7
 800b0b8:	4627      	movge	r7, r4
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	bfa6      	itte	ge
 800b0c0:	461c      	movge	r4, r3
 800b0c2:	2500      	movge	r5, #0
 800b0c4:	2501      	movlt	r5, #1
 800b0c6:	f7ff fd3f 	bl	800ab48 <_Balloc>
 800b0ca:	b920      	cbnz	r0, 800b0d6 <__mdiff+0x5a>
 800b0cc:	4b2d      	ldr	r3, [pc, #180]	; (800b184 <__mdiff+0x108>)
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0d4:	e7e6      	b.n	800b0a4 <__mdiff+0x28>
 800b0d6:	693e      	ldr	r6, [r7, #16]
 800b0d8:	60c5      	str	r5, [r0, #12]
 800b0da:	6925      	ldr	r5, [r4, #16]
 800b0dc:	f107 0114 	add.w	r1, r7, #20
 800b0e0:	f104 0914 	add.w	r9, r4, #20
 800b0e4:	f100 0e14 	add.w	lr, r0, #20
 800b0e8:	f107 0210 	add.w	r2, r7, #16
 800b0ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b0f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b0f4:	46f2      	mov	sl, lr
 800b0f6:	2700      	movs	r7, #0
 800b0f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b100:	fa1f f883 	uxth.w	r8, r3
 800b104:	fa17 f78b 	uxtah	r7, r7, fp
 800b108:	0c1b      	lsrs	r3, r3, #16
 800b10a:	eba7 0808 	sub.w	r8, r7, r8
 800b10e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b112:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b116:	fa1f f888 	uxth.w	r8, r8
 800b11a:	141f      	asrs	r7, r3, #16
 800b11c:	454d      	cmp	r5, r9
 800b11e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b122:	f84a 3b04 	str.w	r3, [sl], #4
 800b126:	d8e7      	bhi.n	800b0f8 <__mdiff+0x7c>
 800b128:	1b2b      	subs	r3, r5, r4
 800b12a:	3b15      	subs	r3, #21
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	3304      	adds	r3, #4
 800b132:	3415      	adds	r4, #21
 800b134:	42a5      	cmp	r5, r4
 800b136:	bf38      	it	cc
 800b138:	2304      	movcc	r3, #4
 800b13a:	4419      	add	r1, r3
 800b13c:	4473      	add	r3, lr
 800b13e:	469e      	mov	lr, r3
 800b140:	460d      	mov	r5, r1
 800b142:	4565      	cmp	r5, ip
 800b144:	d30e      	bcc.n	800b164 <__mdiff+0xe8>
 800b146:	f10c 0203 	add.w	r2, ip, #3
 800b14a:	1a52      	subs	r2, r2, r1
 800b14c:	f022 0203 	bic.w	r2, r2, #3
 800b150:	3903      	subs	r1, #3
 800b152:	458c      	cmp	ip, r1
 800b154:	bf38      	it	cc
 800b156:	2200      	movcc	r2, #0
 800b158:	441a      	add	r2, r3
 800b15a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b15e:	b17b      	cbz	r3, 800b180 <__mdiff+0x104>
 800b160:	6106      	str	r6, [r0, #16]
 800b162:	e7a5      	b.n	800b0b0 <__mdiff+0x34>
 800b164:	f855 8b04 	ldr.w	r8, [r5], #4
 800b168:	fa17 f488 	uxtah	r4, r7, r8
 800b16c:	1422      	asrs	r2, r4, #16
 800b16e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b172:	b2a4      	uxth	r4, r4
 800b174:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b178:	f84e 4b04 	str.w	r4, [lr], #4
 800b17c:	1417      	asrs	r7, r2, #16
 800b17e:	e7e0      	b.n	800b142 <__mdiff+0xc6>
 800b180:	3e01      	subs	r6, #1
 800b182:	e7ea      	b.n	800b15a <__mdiff+0xde>
 800b184:	0800becb 	.word	0x0800becb
 800b188:	0800bedc 	.word	0x0800bedc

0800b18c <__d2b>:
 800b18c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b190:	4689      	mov	r9, r1
 800b192:	2101      	movs	r1, #1
 800b194:	ec57 6b10 	vmov	r6, r7, d0
 800b198:	4690      	mov	r8, r2
 800b19a:	f7ff fcd5 	bl	800ab48 <_Balloc>
 800b19e:	4604      	mov	r4, r0
 800b1a0:	b930      	cbnz	r0, 800b1b0 <__d2b+0x24>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	4b25      	ldr	r3, [pc, #148]	; (800b23c <__d2b+0xb0>)
 800b1a6:	4826      	ldr	r0, [pc, #152]	; (800b240 <__d2b+0xb4>)
 800b1a8:	f240 310a 	movw	r1, #778	; 0x30a
 800b1ac:	f000 f85a 	bl	800b264 <__assert_func>
 800b1b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1b8:	bb35      	cbnz	r5, 800b208 <__d2b+0x7c>
 800b1ba:	2e00      	cmp	r6, #0
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	d028      	beq.n	800b212 <__d2b+0x86>
 800b1c0:	4668      	mov	r0, sp
 800b1c2:	9600      	str	r6, [sp, #0]
 800b1c4:	f7ff fd8c 	bl	800ace0 <__lo0bits>
 800b1c8:	9900      	ldr	r1, [sp, #0]
 800b1ca:	b300      	cbz	r0, 800b20e <__d2b+0x82>
 800b1cc:	9a01      	ldr	r2, [sp, #4]
 800b1ce:	f1c0 0320 	rsb	r3, r0, #32
 800b1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	40c2      	lsrs	r2, r0
 800b1da:	6163      	str	r3, [r4, #20]
 800b1dc:	9201      	str	r2, [sp, #4]
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	61a3      	str	r3, [r4, #24]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bf14      	ite	ne
 800b1e6:	2202      	movne	r2, #2
 800b1e8:	2201      	moveq	r2, #1
 800b1ea:	6122      	str	r2, [r4, #16]
 800b1ec:	b1d5      	cbz	r5, 800b224 <__d2b+0x98>
 800b1ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1f2:	4405      	add	r5, r0
 800b1f4:	f8c9 5000 	str.w	r5, [r9]
 800b1f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1fc:	f8c8 0000 	str.w	r0, [r8]
 800b200:	4620      	mov	r0, r4
 800b202:	b003      	add	sp, #12
 800b204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b20c:	e7d5      	b.n	800b1ba <__d2b+0x2e>
 800b20e:	6161      	str	r1, [r4, #20]
 800b210:	e7e5      	b.n	800b1de <__d2b+0x52>
 800b212:	a801      	add	r0, sp, #4
 800b214:	f7ff fd64 	bl	800ace0 <__lo0bits>
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	6163      	str	r3, [r4, #20]
 800b21c:	2201      	movs	r2, #1
 800b21e:	6122      	str	r2, [r4, #16]
 800b220:	3020      	adds	r0, #32
 800b222:	e7e3      	b.n	800b1ec <__d2b+0x60>
 800b224:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b228:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b22c:	f8c9 0000 	str.w	r0, [r9]
 800b230:	6918      	ldr	r0, [r3, #16]
 800b232:	f7ff fd35 	bl	800aca0 <__hi0bits>
 800b236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b23a:	e7df      	b.n	800b1fc <__d2b+0x70>
 800b23c:	0800becb 	.word	0x0800becb
 800b240:	0800bedc 	.word	0x0800bedc

0800b244 <_calloc_r>:
 800b244:	b513      	push	{r0, r1, r4, lr}
 800b246:	434a      	muls	r2, r1
 800b248:	4611      	mov	r1, r2
 800b24a:	9201      	str	r2, [sp, #4]
 800b24c:	f7fe f91e 	bl	800948c <_malloc_r>
 800b250:	4604      	mov	r4, r0
 800b252:	b118      	cbz	r0, 800b25c <_calloc_r+0x18>
 800b254:	9a01      	ldr	r2, [sp, #4]
 800b256:	2100      	movs	r1, #0
 800b258:	f7fe f8c0 	bl	80093dc <memset>
 800b25c:	4620      	mov	r0, r4
 800b25e:	b002      	add	sp, #8
 800b260:	bd10      	pop	{r4, pc}
	...

0800b264 <__assert_func>:
 800b264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b266:	4614      	mov	r4, r2
 800b268:	461a      	mov	r2, r3
 800b26a:	4b09      	ldr	r3, [pc, #36]	; (800b290 <__assert_func+0x2c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	68d8      	ldr	r0, [r3, #12]
 800b272:	b14c      	cbz	r4, 800b288 <__assert_func+0x24>
 800b274:	4b07      	ldr	r3, [pc, #28]	; (800b294 <__assert_func+0x30>)
 800b276:	9100      	str	r1, [sp, #0]
 800b278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b27c:	4906      	ldr	r1, [pc, #24]	; (800b298 <__assert_func+0x34>)
 800b27e:	462b      	mov	r3, r5
 800b280:	f000 f80e 	bl	800b2a0 <fiprintf>
 800b284:	f000 fa5a 	bl	800b73c <abort>
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <__assert_func+0x38>)
 800b28a:	461c      	mov	r4, r3
 800b28c:	e7f3      	b.n	800b276 <__assert_func+0x12>
 800b28e:	bf00      	nop
 800b290:	200000f8 	.word	0x200000f8
 800b294:	0800c03c 	.word	0x0800c03c
 800b298:	0800c049 	.word	0x0800c049
 800b29c:	0800c077 	.word	0x0800c077

0800b2a0 <fiprintf>:
 800b2a0:	b40e      	push	{r1, r2, r3}
 800b2a2:	b503      	push	{r0, r1, lr}
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	4805      	ldr	r0, [pc, #20]	; (800b2c0 <fiprintf+0x20>)
 800b2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ae:	6800      	ldr	r0, [r0, #0]
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	f000 f845 	bl	800b340 <_vfiprintf_r>
 800b2b6:	b002      	add	sp, #8
 800b2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2bc:	b003      	add	sp, #12
 800b2be:	4770      	bx	lr
 800b2c0:	200000f8 	.word	0x200000f8

0800b2c4 <__retarget_lock_init_recursive>:
 800b2c4:	4770      	bx	lr

0800b2c6 <__retarget_lock_acquire_recursive>:
 800b2c6:	4770      	bx	lr

0800b2c8 <__retarget_lock_release_recursive>:
 800b2c8:	4770      	bx	lr

0800b2ca <__ascii_mbtowc>:
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	b901      	cbnz	r1, 800b2d0 <__ascii_mbtowc+0x6>
 800b2ce:	a901      	add	r1, sp, #4
 800b2d0:	b142      	cbz	r2, 800b2e4 <__ascii_mbtowc+0x1a>
 800b2d2:	b14b      	cbz	r3, 800b2e8 <__ascii_mbtowc+0x1e>
 800b2d4:	7813      	ldrb	r3, [r2, #0]
 800b2d6:	600b      	str	r3, [r1, #0]
 800b2d8:	7812      	ldrb	r2, [r2, #0]
 800b2da:	1e10      	subs	r0, r2, #0
 800b2dc:	bf18      	it	ne
 800b2de:	2001      	movne	r0, #1
 800b2e0:	b002      	add	sp, #8
 800b2e2:	4770      	bx	lr
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	e7fb      	b.n	800b2e0 <__ascii_mbtowc+0x16>
 800b2e8:	f06f 0001 	mvn.w	r0, #1
 800b2ec:	e7f8      	b.n	800b2e0 <__ascii_mbtowc+0x16>

0800b2ee <__sfputc_r>:
 800b2ee:	6893      	ldr	r3, [r2, #8]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	b410      	push	{r4}
 800b2f6:	6093      	str	r3, [r2, #8]
 800b2f8:	da08      	bge.n	800b30c <__sfputc_r+0x1e>
 800b2fa:	6994      	ldr	r4, [r2, #24]
 800b2fc:	42a3      	cmp	r3, r4
 800b2fe:	db01      	blt.n	800b304 <__sfputc_r+0x16>
 800b300:	290a      	cmp	r1, #10
 800b302:	d103      	bne.n	800b30c <__sfputc_r+0x1e>
 800b304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b308:	f000 b94a 	b.w	800b5a0 <__swbuf_r>
 800b30c:	6813      	ldr	r3, [r2, #0]
 800b30e:	1c58      	adds	r0, r3, #1
 800b310:	6010      	str	r0, [r2, #0]
 800b312:	7019      	strb	r1, [r3, #0]
 800b314:	4608      	mov	r0, r1
 800b316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <__sfputs_r>:
 800b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31e:	4606      	mov	r6, r0
 800b320:	460f      	mov	r7, r1
 800b322:	4614      	mov	r4, r2
 800b324:	18d5      	adds	r5, r2, r3
 800b326:	42ac      	cmp	r4, r5
 800b328:	d101      	bne.n	800b32e <__sfputs_r+0x12>
 800b32a:	2000      	movs	r0, #0
 800b32c:	e007      	b.n	800b33e <__sfputs_r+0x22>
 800b32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b332:	463a      	mov	r2, r7
 800b334:	4630      	mov	r0, r6
 800b336:	f7ff ffda 	bl	800b2ee <__sfputc_r>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d1f3      	bne.n	800b326 <__sfputs_r+0xa>
 800b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b340 <_vfiprintf_r>:
 800b340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	460d      	mov	r5, r1
 800b346:	b09d      	sub	sp, #116	; 0x74
 800b348:	4614      	mov	r4, r2
 800b34a:	4698      	mov	r8, r3
 800b34c:	4606      	mov	r6, r0
 800b34e:	b118      	cbz	r0, 800b358 <_vfiprintf_r+0x18>
 800b350:	6983      	ldr	r3, [r0, #24]
 800b352:	b90b      	cbnz	r3, 800b358 <_vfiprintf_r+0x18>
 800b354:	f000 fb14 	bl	800b980 <__sinit>
 800b358:	4b89      	ldr	r3, [pc, #548]	; (800b580 <_vfiprintf_r+0x240>)
 800b35a:	429d      	cmp	r5, r3
 800b35c:	d11b      	bne.n	800b396 <_vfiprintf_r+0x56>
 800b35e:	6875      	ldr	r5, [r6, #4]
 800b360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b362:	07d9      	lsls	r1, r3, #31
 800b364:	d405      	bmi.n	800b372 <_vfiprintf_r+0x32>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	059a      	lsls	r2, r3, #22
 800b36a:	d402      	bmi.n	800b372 <_vfiprintf_r+0x32>
 800b36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36e:	f7ff ffaa 	bl	800b2c6 <__retarget_lock_acquire_recursive>
 800b372:	89ab      	ldrh	r3, [r5, #12]
 800b374:	071b      	lsls	r3, r3, #28
 800b376:	d501      	bpl.n	800b37c <_vfiprintf_r+0x3c>
 800b378:	692b      	ldr	r3, [r5, #16]
 800b37a:	b9eb      	cbnz	r3, 800b3b8 <_vfiprintf_r+0x78>
 800b37c:	4629      	mov	r1, r5
 800b37e:	4630      	mov	r0, r6
 800b380:	f000 f96e 	bl	800b660 <__swsetup_r>
 800b384:	b1c0      	cbz	r0, 800b3b8 <_vfiprintf_r+0x78>
 800b386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b388:	07dc      	lsls	r4, r3, #31
 800b38a:	d50e      	bpl.n	800b3aa <_vfiprintf_r+0x6a>
 800b38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b390:	b01d      	add	sp, #116	; 0x74
 800b392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b396:	4b7b      	ldr	r3, [pc, #492]	; (800b584 <_vfiprintf_r+0x244>)
 800b398:	429d      	cmp	r5, r3
 800b39a:	d101      	bne.n	800b3a0 <_vfiprintf_r+0x60>
 800b39c:	68b5      	ldr	r5, [r6, #8]
 800b39e:	e7df      	b.n	800b360 <_vfiprintf_r+0x20>
 800b3a0:	4b79      	ldr	r3, [pc, #484]	; (800b588 <_vfiprintf_r+0x248>)
 800b3a2:	429d      	cmp	r5, r3
 800b3a4:	bf08      	it	eq
 800b3a6:	68f5      	ldreq	r5, [r6, #12]
 800b3a8:	e7da      	b.n	800b360 <_vfiprintf_r+0x20>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	0598      	lsls	r0, r3, #22
 800b3ae:	d4ed      	bmi.n	800b38c <_vfiprintf_r+0x4c>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b2:	f7ff ff89 	bl	800b2c8 <__retarget_lock_release_recursive>
 800b3b6:	e7e9      	b.n	800b38c <_vfiprintf_r+0x4c>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	2320      	movs	r3, #32
 800b3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c6:	2330      	movs	r3, #48	; 0x30
 800b3c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b58c <_vfiprintf_r+0x24c>
 800b3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3d0:	f04f 0901 	mov.w	r9, #1
 800b3d4:	4623      	mov	r3, r4
 800b3d6:	469a      	mov	sl, r3
 800b3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3dc:	b10a      	cbz	r2, 800b3e2 <_vfiprintf_r+0xa2>
 800b3de:	2a25      	cmp	r2, #37	; 0x25
 800b3e0:	d1f9      	bne.n	800b3d6 <_vfiprintf_r+0x96>
 800b3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e6:	d00b      	beq.n	800b400 <_vfiprintf_r+0xc0>
 800b3e8:	465b      	mov	r3, fp
 800b3ea:	4622      	mov	r2, r4
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff ff94 	bl	800b31c <__sfputs_r>
 800b3f4:	3001      	adds	r0, #1
 800b3f6:	f000 80aa 	beq.w	800b54e <_vfiprintf_r+0x20e>
 800b3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3fc:	445a      	add	r2, fp
 800b3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b400:	f89a 3000 	ldrb.w	r3, [sl]
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 80a2 	beq.w	800b54e <_vfiprintf_r+0x20e>
 800b40a:	2300      	movs	r3, #0
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b414:	f10a 0a01 	add.w	sl, sl, #1
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	9307      	str	r3, [sp, #28]
 800b41c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b420:	931a      	str	r3, [sp, #104]	; 0x68
 800b422:	4654      	mov	r4, sl
 800b424:	2205      	movs	r2, #5
 800b426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42a:	4858      	ldr	r0, [pc, #352]	; (800b58c <_vfiprintf_r+0x24c>)
 800b42c:	f7f4 fed8 	bl	80001e0 <memchr>
 800b430:	9a04      	ldr	r2, [sp, #16]
 800b432:	b9d8      	cbnz	r0, 800b46c <_vfiprintf_r+0x12c>
 800b434:	06d1      	lsls	r1, r2, #27
 800b436:	bf44      	itt	mi
 800b438:	2320      	movmi	r3, #32
 800b43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43e:	0713      	lsls	r3, r2, #28
 800b440:	bf44      	itt	mi
 800b442:	232b      	movmi	r3, #43	; 0x2b
 800b444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b448:	f89a 3000 	ldrb.w	r3, [sl]
 800b44c:	2b2a      	cmp	r3, #42	; 0x2a
 800b44e:	d015      	beq.n	800b47c <_vfiprintf_r+0x13c>
 800b450:	9a07      	ldr	r2, [sp, #28]
 800b452:	4654      	mov	r4, sl
 800b454:	2000      	movs	r0, #0
 800b456:	f04f 0c0a 	mov.w	ip, #10
 800b45a:	4621      	mov	r1, r4
 800b45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b460:	3b30      	subs	r3, #48	; 0x30
 800b462:	2b09      	cmp	r3, #9
 800b464:	d94e      	bls.n	800b504 <_vfiprintf_r+0x1c4>
 800b466:	b1b0      	cbz	r0, 800b496 <_vfiprintf_r+0x156>
 800b468:	9207      	str	r2, [sp, #28]
 800b46a:	e014      	b.n	800b496 <_vfiprintf_r+0x156>
 800b46c:	eba0 0308 	sub.w	r3, r0, r8
 800b470:	fa09 f303 	lsl.w	r3, r9, r3
 800b474:	4313      	orrs	r3, r2
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	46a2      	mov	sl, r4
 800b47a:	e7d2      	b.n	800b422 <_vfiprintf_r+0xe2>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	1d19      	adds	r1, r3, #4
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	9103      	str	r1, [sp, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	bfbb      	ittet	lt
 800b488:	425b      	neglt	r3, r3
 800b48a:	f042 0202 	orrlt.w	r2, r2, #2
 800b48e:	9307      	strge	r3, [sp, #28]
 800b490:	9307      	strlt	r3, [sp, #28]
 800b492:	bfb8      	it	lt
 800b494:	9204      	strlt	r2, [sp, #16]
 800b496:	7823      	ldrb	r3, [r4, #0]
 800b498:	2b2e      	cmp	r3, #46	; 0x2e
 800b49a:	d10c      	bne.n	800b4b6 <_vfiprintf_r+0x176>
 800b49c:	7863      	ldrb	r3, [r4, #1]
 800b49e:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a0:	d135      	bne.n	800b50e <_vfiprintf_r+0x1ce>
 800b4a2:	9b03      	ldr	r3, [sp, #12]
 800b4a4:	1d1a      	adds	r2, r3, #4
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	9203      	str	r2, [sp, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bfb8      	it	lt
 800b4ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b4b2:	3402      	adds	r4, #2
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b59c <_vfiprintf_r+0x25c>
 800b4ba:	7821      	ldrb	r1, [r4, #0]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7f4 fe8e 	bl	80001e0 <memchr>
 800b4c4:	b140      	cbz	r0, 800b4d8 <_vfiprintf_r+0x198>
 800b4c6:	2340      	movs	r3, #64	; 0x40
 800b4c8:	eba0 000a 	sub.w	r0, r0, sl
 800b4cc:	fa03 f000 	lsl.w	r0, r3, r0
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	4303      	orrs	r3, r0
 800b4d4:	3401      	adds	r4, #1
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4dc:	482c      	ldr	r0, [pc, #176]	; (800b590 <_vfiprintf_r+0x250>)
 800b4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4e2:	2206      	movs	r2, #6
 800b4e4:	f7f4 fe7c 	bl	80001e0 <memchr>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d03f      	beq.n	800b56c <_vfiprintf_r+0x22c>
 800b4ec:	4b29      	ldr	r3, [pc, #164]	; (800b594 <_vfiprintf_r+0x254>)
 800b4ee:	bb1b      	cbnz	r3, 800b538 <_vfiprintf_r+0x1f8>
 800b4f0:	9b03      	ldr	r3, [sp, #12]
 800b4f2:	3307      	adds	r3, #7
 800b4f4:	f023 0307 	bic.w	r3, r3, #7
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	9303      	str	r3, [sp, #12]
 800b4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fe:	443b      	add	r3, r7
 800b500:	9309      	str	r3, [sp, #36]	; 0x24
 800b502:	e767      	b.n	800b3d4 <_vfiprintf_r+0x94>
 800b504:	fb0c 3202 	mla	r2, ip, r2, r3
 800b508:	460c      	mov	r4, r1
 800b50a:	2001      	movs	r0, #1
 800b50c:	e7a5      	b.n	800b45a <_vfiprintf_r+0x11a>
 800b50e:	2300      	movs	r3, #0
 800b510:	3401      	adds	r4, #1
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	4619      	mov	r1, r3
 800b516:	f04f 0c0a 	mov.w	ip, #10
 800b51a:	4620      	mov	r0, r4
 800b51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b520:	3a30      	subs	r2, #48	; 0x30
 800b522:	2a09      	cmp	r2, #9
 800b524:	d903      	bls.n	800b52e <_vfiprintf_r+0x1ee>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0c5      	beq.n	800b4b6 <_vfiprintf_r+0x176>
 800b52a:	9105      	str	r1, [sp, #20]
 800b52c:	e7c3      	b.n	800b4b6 <_vfiprintf_r+0x176>
 800b52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b532:	4604      	mov	r4, r0
 800b534:	2301      	movs	r3, #1
 800b536:	e7f0      	b.n	800b51a <_vfiprintf_r+0x1da>
 800b538:	ab03      	add	r3, sp, #12
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	462a      	mov	r2, r5
 800b53e:	4b16      	ldr	r3, [pc, #88]	; (800b598 <_vfiprintf_r+0x258>)
 800b540:	a904      	add	r1, sp, #16
 800b542:	4630      	mov	r0, r6
 800b544:	f7fe f89c 	bl	8009680 <_printf_float>
 800b548:	4607      	mov	r7, r0
 800b54a:	1c78      	adds	r0, r7, #1
 800b54c:	d1d6      	bne.n	800b4fc <_vfiprintf_r+0x1bc>
 800b54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b550:	07d9      	lsls	r1, r3, #31
 800b552:	d405      	bmi.n	800b560 <_vfiprintf_r+0x220>
 800b554:	89ab      	ldrh	r3, [r5, #12]
 800b556:	059a      	lsls	r2, r3, #22
 800b558:	d402      	bmi.n	800b560 <_vfiprintf_r+0x220>
 800b55a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b55c:	f7ff feb4 	bl	800b2c8 <__retarget_lock_release_recursive>
 800b560:	89ab      	ldrh	r3, [r5, #12]
 800b562:	065b      	lsls	r3, r3, #25
 800b564:	f53f af12 	bmi.w	800b38c <_vfiprintf_r+0x4c>
 800b568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b56a:	e711      	b.n	800b390 <_vfiprintf_r+0x50>
 800b56c:	ab03      	add	r3, sp, #12
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	462a      	mov	r2, r5
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_vfiprintf_r+0x258>)
 800b574:	a904      	add	r1, sp, #16
 800b576:	4630      	mov	r0, r6
 800b578:	f7fe fb26 	bl	8009bc8 <_printf_i>
 800b57c:	e7e4      	b.n	800b548 <_vfiprintf_r+0x208>
 800b57e:	bf00      	nop
 800b580:	0800c1b4 	.word	0x0800c1b4
 800b584:	0800c1d4 	.word	0x0800c1d4
 800b588:	0800c194 	.word	0x0800c194
 800b58c:	0800c082 	.word	0x0800c082
 800b590:	0800c08c 	.word	0x0800c08c
 800b594:	08009681 	.word	0x08009681
 800b598:	0800b31d 	.word	0x0800b31d
 800b59c:	0800c088 	.word	0x0800c088

0800b5a0 <__swbuf_r>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	460e      	mov	r6, r1
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	b118      	cbz	r0, 800b5b2 <__swbuf_r+0x12>
 800b5aa:	6983      	ldr	r3, [r0, #24]
 800b5ac:	b90b      	cbnz	r3, 800b5b2 <__swbuf_r+0x12>
 800b5ae:	f000 f9e7 	bl	800b980 <__sinit>
 800b5b2:	4b21      	ldr	r3, [pc, #132]	; (800b638 <__swbuf_r+0x98>)
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d12b      	bne.n	800b610 <__swbuf_r+0x70>
 800b5b8:	686c      	ldr	r4, [r5, #4]
 800b5ba:	69a3      	ldr	r3, [r4, #24]
 800b5bc:	60a3      	str	r3, [r4, #8]
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	071a      	lsls	r2, r3, #28
 800b5c2:	d52f      	bpl.n	800b624 <__swbuf_r+0x84>
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	b36b      	cbz	r3, 800b624 <__swbuf_r+0x84>
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	6820      	ldr	r0, [r4, #0]
 800b5cc:	1ac0      	subs	r0, r0, r3
 800b5ce:	6963      	ldr	r3, [r4, #20]
 800b5d0:	b2f6      	uxtb	r6, r6
 800b5d2:	4283      	cmp	r3, r0
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	dc04      	bgt.n	800b5e2 <__swbuf_r+0x42>
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f93c 	bl	800b858 <_fflush_r>
 800b5e0:	bb30      	cbnz	r0, 800b630 <__swbuf_r+0x90>
 800b5e2:	68a3      	ldr	r3, [r4, #8]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	60a3      	str	r3, [r4, #8]
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	6022      	str	r2, [r4, #0]
 800b5ee:	701e      	strb	r6, [r3, #0]
 800b5f0:	6963      	ldr	r3, [r4, #20]
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	4283      	cmp	r3, r0
 800b5f6:	d004      	beq.n	800b602 <__swbuf_r+0x62>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	07db      	lsls	r3, r3, #31
 800b5fc:	d506      	bpl.n	800b60c <__swbuf_r+0x6c>
 800b5fe:	2e0a      	cmp	r6, #10
 800b600:	d104      	bne.n	800b60c <__swbuf_r+0x6c>
 800b602:	4621      	mov	r1, r4
 800b604:	4628      	mov	r0, r5
 800b606:	f000 f927 	bl	800b858 <_fflush_r>
 800b60a:	b988      	cbnz	r0, 800b630 <__swbuf_r+0x90>
 800b60c:	4638      	mov	r0, r7
 800b60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <__swbuf_r+0x9c>)
 800b612:	429c      	cmp	r4, r3
 800b614:	d101      	bne.n	800b61a <__swbuf_r+0x7a>
 800b616:	68ac      	ldr	r4, [r5, #8]
 800b618:	e7cf      	b.n	800b5ba <__swbuf_r+0x1a>
 800b61a:	4b09      	ldr	r3, [pc, #36]	; (800b640 <__swbuf_r+0xa0>)
 800b61c:	429c      	cmp	r4, r3
 800b61e:	bf08      	it	eq
 800b620:	68ec      	ldreq	r4, [r5, #12]
 800b622:	e7ca      	b.n	800b5ba <__swbuf_r+0x1a>
 800b624:	4621      	mov	r1, r4
 800b626:	4628      	mov	r0, r5
 800b628:	f000 f81a 	bl	800b660 <__swsetup_r>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d0cb      	beq.n	800b5c8 <__swbuf_r+0x28>
 800b630:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b634:	e7ea      	b.n	800b60c <__swbuf_r+0x6c>
 800b636:	bf00      	nop
 800b638:	0800c1b4 	.word	0x0800c1b4
 800b63c:	0800c1d4 	.word	0x0800c1d4
 800b640:	0800c194 	.word	0x0800c194

0800b644 <__ascii_wctomb>:
 800b644:	b149      	cbz	r1, 800b65a <__ascii_wctomb+0x16>
 800b646:	2aff      	cmp	r2, #255	; 0xff
 800b648:	bf85      	ittet	hi
 800b64a:	238a      	movhi	r3, #138	; 0x8a
 800b64c:	6003      	strhi	r3, [r0, #0]
 800b64e:	700a      	strbls	r2, [r1, #0]
 800b650:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b654:	bf98      	it	ls
 800b656:	2001      	movls	r0, #1
 800b658:	4770      	bx	lr
 800b65a:	4608      	mov	r0, r1
 800b65c:	4770      	bx	lr
	...

0800b660 <__swsetup_r>:
 800b660:	4b32      	ldr	r3, [pc, #200]	; (800b72c <__swsetup_r+0xcc>)
 800b662:	b570      	push	{r4, r5, r6, lr}
 800b664:	681d      	ldr	r5, [r3, #0]
 800b666:	4606      	mov	r6, r0
 800b668:	460c      	mov	r4, r1
 800b66a:	b125      	cbz	r5, 800b676 <__swsetup_r+0x16>
 800b66c:	69ab      	ldr	r3, [r5, #24]
 800b66e:	b913      	cbnz	r3, 800b676 <__swsetup_r+0x16>
 800b670:	4628      	mov	r0, r5
 800b672:	f000 f985 	bl	800b980 <__sinit>
 800b676:	4b2e      	ldr	r3, [pc, #184]	; (800b730 <__swsetup_r+0xd0>)
 800b678:	429c      	cmp	r4, r3
 800b67a:	d10f      	bne.n	800b69c <__swsetup_r+0x3c>
 800b67c:	686c      	ldr	r4, [r5, #4]
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b684:	0719      	lsls	r1, r3, #28
 800b686:	d42c      	bmi.n	800b6e2 <__swsetup_r+0x82>
 800b688:	06dd      	lsls	r5, r3, #27
 800b68a:	d411      	bmi.n	800b6b0 <__swsetup_r+0x50>
 800b68c:	2309      	movs	r3, #9
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b69a:	e03e      	b.n	800b71a <__swsetup_r+0xba>
 800b69c:	4b25      	ldr	r3, [pc, #148]	; (800b734 <__swsetup_r+0xd4>)
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	d101      	bne.n	800b6a6 <__swsetup_r+0x46>
 800b6a2:	68ac      	ldr	r4, [r5, #8]
 800b6a4:	e7eb      	b.n	800b67e <__swsetup_r+0x1e>
 800b6a6:	4b24      	ldr	r3, [pc, #144]	; (800b738 <__swsetup_r+0xd8>)
 800b6a8:	429c      	cmp	r4, r3
 800b6aa:	bf08      	it	eq
 800b6ac:	68ec      	ldreq	r4, [r5, #12]
 800b6ae:	e7e6      	b.n	800b67e <__swsetup_r+0x1e>
 800b6b0:	0758      	lsls	r0, r3, #29
 800b6b2:	d512      	bpl.n	800b6da <__swsetup_r+0x7a>
 800b6b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6b6:	b141      	cbz	r1, 800b6ca <__swsetup_r+0x6a>
 800b6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6bc:	4299      	cmp	r1, r3
 800b6be:	d002      	beq.n	800b6c6 <__swsetup_r+0x66>
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7fd fe93 	bl	80093ec <_free_r>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6d0:	81a3      	strh	r3, [r4, #12]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	6063      	str	r3, [r4, #4]
 800b6d6:	6923      	ldr	r3, [r4, #16]
 800b6d8:	6023      	str	r3, [r4, #0]
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f043 0308 	orr.w	r3, r3, #8
 800b6e0:	81a3      	strh	r3, [r4, #12]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	b94b      	cbnz	r3, 800b6fa <__swsetup_r+0x9a>
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f0:	d003      	beq.n	800b6fa <__swsetup_r+0x9a>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4630      	mov	r0, r6
 800b6f6:	f000 fa05 	bl	800bb04 <__smakebuf_r>
 800b6fa:	89a0      	ldrh	r0, [r4, #12]
 800b6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b700:	f010 0301 	ands.w	r3, r0, #1
 800b704:	d00a      	beq.n	800b71c <__swsetup_r+0xbc>
 800b706:	2300      	movs	r3, #0
 800b708:	60a3      	str	r3, [r4, #8]
 800b70a:	6963      	ldr	r3, [r4, #20]
 800b70c:	425b      	negs	r3, r3
 800b70e:	61a3      	str	r3, [r4, #24]
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	b943      	cbnz	r3, 800b726 <__swsetup_r+0xc6>
 800b714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b718:	d1ba      	bne.n	800b690 <__swsetup_r+0x30>
 800b71a:	bd70      	pop	{r4, r5, r6, pc}
 800b71c:	0781      	lsls	r1, r0, #30
 800b71e:	bf58      	it	pl
 800b720:	6963      	ldrpl	r3, [r4, #20]
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	e7f4      	b.n	800b710 <__swsetup_r+0xb0>
 800b726:	2000      	movs	r0, #0
 800b728:	e7f7      	b.n	800b71a <__swsetup_r+0xba>
 800b72a:	bf00      	nop
 800b72c:	200000f8 	.word	0x200000f8
 800b730:	0800c1b4 	.word	0x0800c1b4
 800b734:	0800c1d4 	.word	0x0800c1d4
 800b738:	0800c194 	.word	0x0800c194

0800b73c <abort>:
 800b73c:	b508      	push	{r3, lr}
 800b73e:	2006      	movs	r0, #6
 800b740:	f000 fa48 	bl	800bbd4 <raise>
 800b744:	2001      	movs	r0, #1
 800b746:	f7f6 fcaf 	bl	80020a8 <_exit>
	...

0800b74c <__sflush_r>:
 800b74c:	898a      	ldrh	r2, [r1, #12]
 800b74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	4605      	mov	r5, r0
 800b754:	0710      	lsls	r0, r2, #28
 800b756:	460c      	mov	r4, r1
 800b758:	d458      	bmi.n	800b80c <__sflush_r+0xc0>
 800b75a:	684b      	ldr	r3, [r1, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dc05      	bgt.n	800b76c <__sflush_r+0x20>
 800b760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	dc02      	bgt.n	800b76c <__sflush_r+0x20>
 800b766:	2000      	movs	r0, #0
 800b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76e:	2e00      	cmp	r6, #0
 800b770:	d0f9      	beq.n	800b766 <__sflush_r+0x1a>
 800b772:	2300      	movs	r3, #0
 800b774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b778:	682f      	ldr	r7, [r5, #0]
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	d032      	beq.n	800b7e4 <__sflush_r+0x98>
 800b77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	075a      	lsls	r2, r3, #29
 800b784:	d505      	bpl.n	800b792 <__sflush_r+0x46>
 800b786:	6863      	ldr	r3, [r4, #4]
 800b788:	1ac0      	subs	r0, r0, r3
 800b78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b78c:	b10b      	cbz	r3, 800b792 <__sflush_r+0x46>
 800b78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b790:	1ac0      	subs	r0, r0, r3
 800b792:	2300      	movs	r3, #0
 800b794:	4602      	mov	r2, r0
 800b796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b0      	blx	r6
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	d106      	bne.n	800b7b2 <__sflush_r+0x66>
 800b7a4:	6829      	ldr	r1, [r5, #0]
 800b7a6:	291d      	cmp	r1, #29
 800b7a8:	d82c      	bhi.n	800b804 <__sflush_r+0xb8>
 800b7aa:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <__sflush_r+0x108>)
 800b7ac:	40ca      	lsrs	r2, r1
 800b7ae:	07d6      	lsls	r6, r2, #31
 800b7b0:	d528      	bpl.n	800b804 <__sflush_r+0xb8>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	6062      	str	r2, [r4, #4]
 800b7b6:	04d9      	lsls	r1, r3, #19
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	d504      	bpl.n	800b7c8 <__sflush_r+0x7c>
 800b7be:	1c42      	adds	r2, r0, #1
 800b7c0:	d101      	bne.n	800b7c6 <__sflush_r+0x7a>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b903      	cbnz	r3, 800b7c8 <__sflush_r+0x7c>
 800b7c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	2900      	cmp	r1, #0
 800b7ce:	d0ca      	beq.n	800b766 <__sflush_r+0x1a>
 800b7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	d002      	beq.n	800b7de <__sflush_r+0x92>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f7fd fe07 	bl	80093ec <_free_r>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7e2:	e7c1      	b.n	800b768 <__sflush_r+0x1c>
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b0      	blx	r6
 800b7ec:	1c41      	adds	r1, r0, #1
 800b7ee:	d1c7      	bne.n	800b780 <__sflush_r+0x34>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c4      	beq.n	800b780 <__sflush_r+0x34>
 800b7f6:	2b1d      	cmp	r3, #29
 800b7f8:	d001      	beq.n	800b7fe <__sflush_r+0xb2>
 800b7fa:	2b16      	cmp	r3, #22
 800b7fc:	d101      	bne.n	800b802 <__sflush_r+0xb6>
 800b7fe:	602f      	str	r7, [r5, #0]
 800b800:	e7b1      	b.n	800b766 <__sflush_r+0x1a>
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	e7ad      	b.n	800b768 <__sflush_r+0x1c>
 800b80c:	690f      	ldr	r7, [r1, #16]
 800b80e:	2f00      	cmp	r7, #0
 800b810:	d0a9      	beq.n	800b766 <__sflush_r+0x1a>
 800b812:	0793      	lsls	r3, r2, #30
 800b814:	680e      	ldr	r6, [r1, #0]
 800b816:	bf08      	it	eq
 800b818:	694b      	ldreq	r3, [r1, #20]
 800b81a:	600f      	str	r7, [r1, #0]
 800b81c:	bf18      	it	ne
 800b81e:	2300      	movne	r3, #0
 800b820:	eba6 0807 	sub.w	r8, r6, r7
 800b824:	608b      	str	r3, [r1, #8]
 800b826:	f1b8 0f00 	cmp.w	r8, #0
 800b82a:	dd9c      	ble.n	800b766 <__sflush_r+0x1a>
 800b82c:	6a21      	ldr	r1, [r4, #32]
 800b82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b830:	4643      	mov	r3, r8
 800b832:	463a      	mov	r2, r7
 800b834:	4628      	mov	r0, r5
 800b836:	47b0      	blx	r6
 800b838:	2800      	cmp	r0, #0
 800b83a:	dc06      	bgt.n	800b84a <__sflush_r+0xfe>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b848:	e78e      	b.n	800b768 <__sflush_r+0x1c>
 800b84a:	4407      	add	r7, r0
 800b84c:	eba8 0800 	sub.w	r8, r8, r0
 800b850:	e7e9      	b.n	800b826 <__sflush_r+0xda>
 800b852:	bf00      	nop
 800b854:	20400001 	.word	0x20400001

0800b858 <_fflush_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	690b      	ldr	r3, [r1, #16]
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	b913      	cbnz	r3, 800b868 <_fflush_r+0x10>
 800b862:	2500      	movs	r5, #0
 800b864:	4628      	mov	r0, r5
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	b118      	cbz	r0, 800b872 <_fflush_r+0x1a>
 800b86a:	6983      	ldr	r3, [r0, #24]
 800b86c:	b90b      	cbnz	r3, 800b872 <_fflush_r+0x1a>
 800b86e:	f000 f887 	bl	800b980 <__sinit>
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <_fflush_r+0x6c>)
 800b874:	429c      	cmp	r4, r3
 800b876:	d11b      	bne.n	800b8b0 <_fflush_r+0x58>
 800b878:	686c      	ldr	r4, [r5, #4]
 800b87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0ef      	beq.n	800b862 <_fflush_r+0xa>
 800b882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b884:	07d0      	lsls	r0, r2, #31
 800b886:	d404      	bmi.n	800b892 <_fflush_r+0x3a>
 800b888:	0599      	lsls	r1, r3, #22
 800b88a:	d402      	bmi.n	800b892 <_fflush_r+0x3a>
 800b88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88e:	f7ff fd1a 	bl	800b2c6 <__retarget_lock_acquire_recursive>
 800b892:	4628      	mov	r0, r5
 800b894:	4621      	mov	r1, r4
 800b896:	f7ff ff59 	bl	800b74c <__sflush_r>
 800b89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b89c:	07da      	lsls	r2, r3, #31
 800b89e:	4605      	mov	r5, r0
 800b8a0:	d4e0      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	059b      	lsls	r3, r3, #22
 800b8a6:	d4dd      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8aa:	f7ff fd0d 	bl	800b2c8 <__retarget_lock_release_recursive>
 800b8ae:	e7d9      	b.n	800b864 <_fflush_r+0xc>
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <_fflush_r+0x70>)
 800b8b2:	429c      	cmp	r4, r3
 800b8b4:	d101      	bne.n	800b8ba <_fflush_r+0x62>
 800b8b6:	68ac      	ldr	r4, [r5, #8]
 800b8b8:	e7df      	b.n	800b87a <_fflush_r+0x22>
 800b8ba:	4b04      	ldr	r3, [pc, #16]	; (800b8cc <_fflush_r+0x74>)
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	bf08      	it	eq
 800b8c0:	68ec      	ldreq	r4, [r5, #12]
 800b8c2:	e7da      	b.n	800b87a <_fflush_r+0x22>
 800b8c4:	0800c1b4 	.word	0x0800c1b4
 800b8c8:	0800c1d4 	.word	0x0800c1d4
 800b8cc:	0800c194 	.word	0x0800c194

0800b8d0 <std>:
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8de:	6083      	str	r3, [r0, #8]
 800b8e0:	8181      	strh	r1, [r0, #12]
 800b8e2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8e4:	81c2      	strh	r2, [r0, #14]
 800b8e6:	6183      	str	r3, [r0, #24]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	2208      	movs	r2, #8
 800b8ec:	305c      	adds	r0, #92	; 0x5c
 800b8ee:	f7fd fd75 	bl	80093dc <memset>
 800b8f2:	4b05      	ldr	r3, [pc, #20]	; (800b908 <std+0x38>)
 800b8f4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8f6:	4b05      	ldr	r3, [pc, #20]	; (800b90c <std+0x3c>)
 800b8f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8fa:	4b05      	ldr	r3, [pc, #20]	; (800b910 <std+0x40>)
 800b8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <std+0x44>)
 800b900:	6224      	str	r4, [r4, #32]
 800b902:	6323      	str	r3, [r4, #48]	; 0x30
 800b904:	bd10      	pop	{r4, pc}
 800b906:	bf00      	nop
 800b908:	0800bc0d 	.word	0x0800bc0d
 800b90c:	0800bc2f 	.word	0x0800bc2f
 800b910:	0800bc67 	.word	0x0800bc67
 800b914:	0800bc8b 	.word	0x0800bc8b

0800b918 <_cleanup_r>:
 800b918:	4901      	ldr	r1, [pc, #4]	; (800b920 <_cleanup_r+0x8>)
 800b91a:	f000 b8af 	b.w	800ba7c <_fwalk_reent>
 800b91e:	bf00      	nop
 800b920:	0800b859 	.word	0x0800b859

0800b924 <__sfmoreglue>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	1e4a      	subs	r2, r1, #1
 800b928:	2568      	movs	r5, #104	; 0x68
 800b92a:	4355      	muls	r5, r2
 800b92c:	460e      	mov	r6, r1
 800b92e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b932:	f7fd fdab 	bl	800948c <_malloc_r>
 800b936:	4604      	mov	r4, r0
 800b938:	b140      	cbz	r0, 800b94c <__sfmoreglue+0x28>
 800b93a:	2100      	movs	r1, #0
 800b93c:	e9c0 1600 	strd	r1, r6, [r0]
 800b940:	300c      	adds	r0, #12
 800b942:	60a0      	str	r0, [r4, #8]
 800b944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b948:	f7fd fd48 	bl	80093dc <memset>
 800b94c:	4620      	mov	r0, r4
 800b94e:	bd70      	pop	{r4, r5, r6, pc}

0800b950 <__sfp_lock_acquire>:
 800b950:	4801      	ldr	r0, [pc, #4]	; (800b958 <__sfp_lock_acquire+0x8>)
 800b952:	f7ff bcb8 	b.w	800b2c6 <__retarget_lock_acquire_recursive>
 800b956:	bf00      	nop
 800b958:	20001db4 	.word	0x20001db4

0800b95c <__sfp_lock_release>:
 800b95c:	4801      	ldr	r0, [pc, #4]	; (800b964 <__sfp_lock_release+0x8>)
 800b95e:	f7ff bcb3 	b.w	800b2c8 <__retarget_lock_release_recursive>
 800b962:	bf00      	nop
 800b964:	20001db4 	.word	0x20001db4

0800b968 <__sinit_lock_acquire>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__sinit_lock_acquire+0x8>)
 800b96a:	f7ff bcac 	b.w	800b2c6 <__retarget_lock_acquire_recursive>
 800b96e:	bf00      	nop
 800b970:	20001daf 	.word	0x20001daf

0800b974 <__sinit_lock_release>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__sinit_lock_release+0x8>)
 800b976:	f7ff bca7 	b.w	800b2c8 <__retarget_lock_release_recursive>
 800b97a:	bf00      	nop
 800b97c:	20001daf 	.word	0x20001daf

0800b980 <__sinit>:
 800b980:	b510      	push	{r4, lr}
 800b982:	4604      	mov	r4, r0
 800b984:	f7ff fff0 	bl	800b968 <__sinit_lock_acquire>
 800b988:	69a3      	ldr	r3, [r4, #24]
 800b98a:	b11b      	cbz	r3, 800b994 <__sinit+0x14>
 800b98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b990:	f7ff bff0 	b.w	800b974 <__sinit_lock_release>
 800b994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b998:	6523      	str	r3, [r4, #80]	; 0x50
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <__sinit+0x68>)
 800b99c:	4a13      	ldr	r2, [pc, #76]	; (800b9ec <__sinit+0x6c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9a2:	42a3      	cmp	r3, r4
 800b9a4:	bf04      	itt	eq
 800b9a6:	2301      	moveq	r3, #1
 800b9a8:	61a3      	streq	r3, [r4, #24]
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f820 	bl	800b9f0 <__sfp>
 800b9b0:	6060      	str	r0, [r4, #4]
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f81c 	bl	800b9f0 <__sfp>
 800b9b8:	60a0      	str	r0, [r4, #8]
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 f818 	bl	800b9f0 <__sfp>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	60e0      	str	r0, [r4, #12]
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	6860      	ldr	r0, [r4, #4]
 800b9c8:	f7ff ff82 	bl	800b8d0 <std>
 800b9cc:	68a0      	ldr	r0, [r4, #8]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	2109      	movs	r1, #9
 800b9d2:	f7ff ff7d 	bl	800b8d0 <std>
 800b9d6:	68e0      	ldr	r0, [r4, #12]
 800b9d8:	2202      	movs	r2, #2
 800b9da:	2112      	movs	r1, #18
 800b9dc:	f7ff ff78 	bl	800b8d0 <std>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	61a3      	str	r3, [r4, #24]
 800b9e4:	e7d2      	b.n	800b98c <__sinit+0xc>
 800b9e6:	bf00      	nop
 800b9e8:	0800be10 	.word	0x0800be10
 800b9ec:	0800b919 	.word	0x0800b919

0800b9f0 <__sfp>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	f7ff ffac 	bl	800b950 <__sfp_lock_acquire>
 800b9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <__sfp+0x84>)
 800b9fa:	681e      	ldr	r6, [r3, #0]
 800b9fc:	69b3      	ldr	r3, [r6, #24]
 800b9fe:	b913      	cbnz	r3, 800ba06 <__sfp+0x16>
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7ff ffbd 	bl	800b980 <__sinit>
 800ba06:	3648      	adds	r6, #72	; 0x48
 800ba08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	d503      	bpl.n	800ba18 <__sfp+0x28>
 800ba10:	6833      	ldr	r3, [r6, #0]
 800ba12:	b30b      	cbz	r3, 800ba58 <__sfp+0x68>
 800ba14:	6836      	ldr	r6, [r6, #0]
 800ba16:	e7f7      	b.n	800ba08 <__sfp+0x18>
 800ba18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba1c:	b9d5      	cbnz	r5, 800ba54 <__sfp+0x64>
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <__sfp+0x88>)
 800ba20:	60e3      	str	r3, [r4, #12]
 800ba22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba26:	6665      	str	r5, [r4, #100]	; 0x64
 800ba28:	f7ff fc4c 	bl	800b2c4 <__retarget_lock_init_recursive>
 800ba2c:	f7ff ff96 	bl	800b95c <__sfp_lock_release>
 800ba30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba38:	6025      	str	r5, [r4, #0]
 800ba3a:	61a5      	str	r5, [r4, #24]
 800ba3c:	2208      	movs	r2, #8
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba44:	f7fd fcca 	bl	80093dc <memset>
 800ba48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba50:	4620      	mov	r0, r4
 800ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba54:	3468      	adds	r4, #104	; 0x68
 800ba56:	e7d9      	b.n	800ba0c <__sfp+0x1c>
 800ba58:	2104      	movs	r1, #4
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	f7ff ff62 	bl	800b924 <__sfmoreglue>
 800ba60:	4604      	mov	r4, r0
 800ba62:	6030      	str	r0, [r6, #0]
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d1d5      	bne.n	800ba14 <__sfp+0x24>
 800ba68:	f7ff ff78 	bl	800b95c <__sfp_lock_release>
 800ba6c:	230c      	movs	r3, #12
 800ba6e:	603b      	str	r3, [r7, #0]
 800ba70:	e7ee      	b.n	800ba50 <__sfp+0x60>
 800ba72:	bf00      	nop
 800ba74:	0800be10 	.word	0x0800be10
 800ba78:	ffff0001 	.word	0xffff0001

0800ba7c <_fwalk_reent>:
 800ba7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba80:	4606      	mov	r6, r0
 800ba82:	4688      	mov	r8, r1
 800ba84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba88:	2700      	movs	r7, #0
 800ba8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba92:	d505      	bpl.n	800baa0 <_fwalk_reent+0x24>
 800ba94:	6824      	ldr	r4, [r4, #0]
 800ba96:	2c00      	cmp	r4, #0
 800ba98:	d1f7      	bne.n	800ba8a <_fwalk_reent+0xe>
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa0:	89ab      	ldrh	r3, [r5, #12]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d907      	bls.n	800bab6 <_fwalk_reent+0x3a>
 800baa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baaa:	3301      	adds	r3, #1
 800baac:	d003      	beq.n	800bab6 <_fwalk_reent+0x3a>
 800baae:	4629      	mov	r1, r5
 800bab0:	4630      	mov	r0, r6
 800bab2:	47c0      	blx	r8
 800bab4:	4307      	orrs	r7, r0
 800bab6:	3568      	adds	r5, #104	; 0x68
 800bab8:	e7e9      	b.n	800ba8e <_fwalk_reent+0x12>

0800baba <__swhatbuf_r>:
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	460e      	mov	r6, r1
 800babe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac2:	2900      	cmp	r1, #0
 800bac4:	b096      	sub	sp, #88	; 0x58
 800bac6:	4614      	mov	r4, r2
 800bac8:	461d      	mov	r5, r3
 800baca:	da07      	bge.n	800badc <__swhatbuf_r+0x22>
 800bacc:	2300      	movs	r3, #0
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	89b3      	ldrh	r3, [r6, #12]
 800bad2:	061a      	lsls	r2, r3, #24
 800bad4:	d410      	bmi.n	800baf8 <__swhatbuf_r+0x3e>
 800bad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bada:	e00e      	b.n	800bafa <__swhatbuf_r+0x40>
 800badc:	466a      	mov	r2, sp
 800bade:	f000 f8fb 	bl	800bcd8 <_fstat_r>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	dbf2      	blt.n	800bacc <__swhatbuf_r+0x12>
 800bae6:	9a01      	ldr	r2, [sp, #4]
 800bae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baf0:	425a      	negs	r2, r3
 800baf2:	415a      	adcs	r2, r3
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	e7ee      	b.n	800bad6 <__swhatbuf_r+0x1c>
 800baf8:	2340      	movs	r3, #64	; 0x40
 800bafa:	2000      	movs	r0, #0
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	b016      	add	sp, #88	; 0x58
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb04 <__smakebuf_r>:
 800bb04:	898b      	ldrh	r3, [r1, #12]
 800bb06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb08:	079d      	lsls	r5, r3, #30
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	d507      	bpl.n	800bb20 <__smakebuf_r+0x1c>
 800bb10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	6123      	str	r3, [r4, #16]
 800bb18:	2301      	movs	r3, #1
 800bb1a:	6163      	str	r3, [r4, #20]
 800bb1c:	b002      	add	sp, #8
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	ab01      	add	r3, sp, #4
 800bb22:	466a      	mov	r2, sp
 800bb24:	f7ff ffc9 	bl	800baba <__swhatbuf_r>
 800bb28:	9900      	ldr	r1, [sp, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7fd fcad 	bl	800948c <_malloc_r>
 800bb32:	b948      	cbnz	r0, 800bb48 <__smakebuf_r+0x44>
 800bb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb38:	059a      	lsls	r2, r3, #22
 800bb3a:	d4ef      	bmi.n	800bb1c <__smakebuf_r+0x18>
 800bb3c:	f023 0303 	bic.w	r3, r3, #3
 800bb40:	f043 0302 	orr.w	r3, r3, #2
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	e7e3      	b.n	800bb10 <__smakebuf_r+0xc>
 800bb48:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <__smakebuf_r+0x7c>)
 800bb4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	9b00      	ldr	r3, [sp, #0]
 800bb58:	6163      	str	r3, [r4, #20]
 800bb5a:	9b01      	ldr	r3, [sp, #4]
 800bb5c:	6120      	str	r0, [r4, #16]
 800bb5e:	b15b      	cbz	r3, 800bb78 <__smakebuf_r+0x74>
 800bb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f8c9 	bl	800bcfc <_isatty_r>
 800bb6a:	b128      	cbz	r0, 800bb78 <__smakebuf_r+0x74>
 800bb6c:	89a3      	ldrh	r3, [r4, #12]
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	f043 0301 	orr.w	r3, r3, #1
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	89a0      	ldrh	r0, [r4, #12]
 800bb7a:	4305      	orrs	r5, r0
 800bb7c:	81a5      	strh	r5, [r4, #12]
 800bb7e:	e7cd      	b.n	800bb1c <__smakebuf_r+0x18>
 800bb80:	0800b919 	.word	0x0800b919

0800bb84 <_raise_r>:
 800bb84:	291f      	cmp	r1, #31
 800bb86:	b538      	push	{r3, r4, r5, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	460d      	mov	r5, r1
 800bb8c:	d904      	bls.n	800bb98 <_raise_r+0x14>
 800bb8e:	2316      	movs	r3, #22
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb9a:	b112      	cbz	r2, 800bba2 <_raise_r+0x1e>
 800bb9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bba0:	b94b      	cbnz	r3, 800bbb6 <_raise_r+0x32>
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f830 	bl	800bc08 <_getpid_r>
 800bba8:	462a      	mov	r2, r5
 800bbaa:	4601      	mov	r1, r0
 800bbac:	4620      	mov	r0, r4
 800bbae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbb2:	f000 b817 	b.w	800bbe4 <_kill_r>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d00a      	beq.n	800bbd0 <_raise_r+0x4c>
 800bbba:	1c59      	adds	r1, r3, #1
 800bbbc:	d103      	bne.n	800bbc6 <_raise_r+0x42>
 800bbbe:	2316      	movs	r3, #22
 800bbc0:	6003      	str	r3, [r0, #0]
 800bbc2:	2001      	movs	r0, #1
 800bbc4:	e7e7      	b.n	800bb96 <_raise_r+0x12>
 800bbc6:	2400      	movs	r4, #0
 800bbc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbcc:	4628      	mov	r0, r5
 800bbce:	4798      	blx	r3
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	e7e0      	b.n	800bb96 <_raise_r+0x12>

0800bbd4 <raise>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <raise+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f7ff bfd3 	b.w	800bb84 <_raise_r>
 800bbde:	bf00      	nop
 800bbe0:	200000f8 	.word	0x200000f8

0800bbe4 <_kill_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	4d07      	ldr	r5, [pc, #28]	; (800bc04 <_kill_r+0x20>)
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4604      	mov	r4, r0
 800bbec:	4608      	mov	r0, r1
 800bbee:	4611      	mov	r1, r2
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	f7f6 fa49 	bl	8002088 <_kill>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d102      	bne.n	800bc00 <_kill_r+0x1c>
 800bbfa:	682b      	ldr	r3, [r5, #0]
 800bbfc:	b103      	cbz	r3, 800bc00 <_kill_r+0x1c>
 800bbfe:	6023      	str	r3, [r4, #0]
 800bc00:	bd38      	pop	{r3, r4, r5, pc}
 800bc02:	bf00      	nop
 800bc04:	20001da8 	.word	0x20001da8

0800bc08 <_getpid_r>:
 800bc08:	f7f6 ba36 	b.w	8002078 <_getpid>

0800bc0c <__sread>:
 800bc0c:	b510      	push	{r4, lr}
 800bc0e:	460c      	mov	r4, r1
 800bc10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc14:	f000 f894 	bl	800bd40 <_read_r>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	bfab      	itete	ge
 800bc1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc1e:	89a3      	ldrhlt	r3, [r4, #12]
 800bc20:	181b      	addge	r3, r3, r0
 800bc22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc26:	bfac      	ite	ge
 800bc28:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc2a:	81a3      	strhlt	r3, [r4, #12]
 800bc2c:	bd10      	pop	{r4, pc}

0800bc2e <__swrite>:
 800bc2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc32:	461f      	mov	r7, r3
 800bc34:	898b      	ldrh	r3, [r1, #12]
 800bc36:	05db      	lsls	r3, r3, #23
 800bc38:	4605      	mov	r5, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	d505      	bpl.n	800bc4c <__swrite+0x1e>
 800bc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc44:	2302      	movs	r3, #2
 800bc46:	2200      	movs	r2, #0
 800bc48:	f000 f868 	bl	800bd1c <_lseek_r>
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc56:	81a3      	strh	r3, [r4, #12]
 800bc58:	4632      	mov	r2, r6
 800bc5a:	463b      	mov	r3, r7
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc62:	f000 b817 	b.w	800bc94 <_write_r>

0800bc66 <__sseek>:
 800bc66:	b510      	push	{r4, lr}
 800bc68:	460c      	mov	r4, r1
 800bc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6e:	f000 f855 	bl	800bd1c <_lseek_r>
 800bc72:	1c43      	adds	r3, r0, #1
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	bf15      	itete	ne
 800bc78:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc82:	81a3      	strheq	r3, [r4, #12]
 800bc84:	bf18      	it	ne
 800bc86:	81a3      	strhne	r3, [r4, #12]
 800bc88:	bd10      	pop	{r4, pc}

0800bc8a <__sclose>:
 800bc8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8e:	f000 b813 	b.w	800bcb8 <_close_r>
	...

0800bc94 <_write_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4d07      	ldr	r5, [pc, #28]	; (800bcb4 <_write_r+0x20>)
 800bc98:	4604      	mov	r4, r0
 800bc9a:	4608      	mov	r0, r1
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	2200      	movs	r2, #0
 800bca0:	602a      	str	r2, [r5, #0]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f7f6 fa27 	bl	80020f6 <_write>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d102      	bne.n	800bcb2 <_write_r+0x1e>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	b103      	cbz	r3, 800bcb2 <_write_r+0x1e>
 800bcb0:	6023      	str	r3, [r4, #0]
 800bcb2:	bd38      	pop	{r3, r4, r5, pc}
 800bcb4:	20001da8 	.word	0x20001da8

0800bcb8 <_close_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4d06      	ldr	r5, [pc, #24]	; (800bcd4 <_close_r+0x1c>)
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	602b      	str	r3, [r5, #0]
 800bcc4:	f7f6 fa33 	bl	800212e <_close>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d102      	bne.n	800bcd2 <_close_r+0x1a>
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	b103      	cbz	r3, 800bcd2 <_close_r+0x1a>
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	20001da8 	.word	0x20001da8

0800bcd8 <_fstat_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	; (800bcf8 <_fstat_r+0x20>)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4604      	mov	r4, r0
 800bce0:	4608      	mov	r0, r1
 800bce2:	4611      	mov	r1, r2
 800bce4:	602b      	str	r3, [r5, #0]
 800bce6:	f7f6 fa2e 	bl	8002146 <_fstat>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d102      	bne.n	800bcf4 <_fstat_r+0x1c>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	b103      	cbz	r3, 800bcf4 <_fstat_r+0x1c>
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20001da8 	.word	0x20001da8

0800bcfc <_isatty_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4d06      	ldr	r5, [pc, #24]	; (800bd18 <_isatty_r+0x1c>)
 800bd00:	2300      	movs	r3, #0
 800bd02:	4604      	mov	r4, r0
 800bd04:	4608      	mov	r0, r1
 800bd06:	602b      	str	r3, [r5, #0]
 800bd08:	f7f6 fa2d 	bl	8002166 <_isatty>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	d102      	bne.n	800bd16 <_isatty_r+0x1a>
 800bd10:	682b      	ldr	r3, [r5, #0]
 800bd12:	b103      	cbz	r3, 800bd16 <_isatty_r+0x1a>
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	bd38      	pop	{r3, r4, r5, pc}
 800bd18:	20001da8 	.word	0x20001da8

0800bd1c <_lseek_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4d07      	ldr	r5, [pc, #28]	; (800bd3c <_lseek_r+0x20>)
 800bd20:	4604      	mov	r4, r0
 800bd22:	4608      	mov	r0, r1
 800bd24:	4611      	mov	r1, r2
 800bd26:	2200      	movs	r2, #0
 800bd28:	602a      	str	r2, [r5, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	f7f6 fa26 	bl	800217c <_lseek>
 800bd30:	1c43      	adds	r3, r0, #1
 800bd32:	d102      	bne.n	800bd3a <_lseek_r+0x1e>
 800bd34:	682b      	ldr	r3, [r5, #0]
 800bd36:	b103      	cbz	r3, 800bd3a <_lseek_r+0x1e>
 800bd38:	6023      	str	r3, [r4, #0]
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	20001da8 	.word	0x20001da8

0800bd40 <_read_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	; (800bd60 <_read_r+0x20>)
 800bd44:	4604      	mov	r4, r0
 800bd46:	4608      	mov	r0, r1
 800bd48:	4611      	mov	r1, r2
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	602a      	str	r2, [r5, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	f7f6 f9b4 	bl	80020bc <_read>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_read_r+0x1e>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_read_r+0x1e>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	20001da8 	.word	0x20001da8

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
