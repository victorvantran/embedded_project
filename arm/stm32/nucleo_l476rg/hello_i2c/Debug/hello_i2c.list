
hello_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800ba00  0800ba00  0001ba00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be94  0800be94  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be9c  0800be9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be9c  0800be9c  0001be9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bea0  0800bea0  0001bea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  200001e0  0800c084  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc0  0800c084  00021cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c1d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f01  00000000  00000000  00042e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00046d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  00048848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000066a0  00000000  00000000  0004a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3a1  00000000  00000000  00050888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101b3c  00000000  00000000  0006cc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016e765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008450  00000000  00000000  0016e7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e8 	.word	0x0800b9e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b9e8 	.word	0x0800b9e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c66:	f000 b9b9 	b.w	8000fdc <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cfc:	f000 b96e 	b.w	8000fdc <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	468c      	mov	ip, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8083 	bne.w	8000e2e <__udivmoddi4+0x116>
 8000d28:	428a      	cmp	r2, r1
 8000d2a:	4617      	mov	r7, r2
 8000d2c:	d947      	bls.n	8000dbe <__udivmoddi4+0xa6>
 8000d2e:	fab2 f282 	clz	r2, r2
 8000d32:	b142      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d34:	f1c2 0020 	rsb	r0, r2, #32
 8000d38:	fa24 f000 	lsr.w	r0, r4, r0
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	4097      	lsls	r7, r2
 8000d40:	ea40 0c01 	orr.w	ip, r0, r1
 8000d44:	4094      	lsls	r4, r2
 8000d46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d4a:	0c23      	lsrs	r3, r4, #16
 8000d4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d50:	fa1f fe87 	uxth.w	lr, r7
 8000d54:	fb08 c116 	mls	r1, r8, r6, ip
 8000d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x60>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d6a:	f080 8119 	bcs.w	8000fa0 <__udivmoddi4+0x288>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 8116 	bls.w	8000fa0 <__udivmoddi4+0x288>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x8c>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d96:	f080 8105 	bcs.w	8000fa4 <__udivmoddi4+0x28c>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f240 8102 	bls.w	8000fa4 <__udivmoddi4+0x28c>
 8000da0:	3802      	subs	r0, #2
 8000da2:	443c      	add	r4, r7
 8000da4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa0>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	b902      	cbnz	r2, 8000dc2 <__udivmoddi4+0xaa>
 8000dc0:	deff      	udf	#255	; 0xff
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	d150      	bne.n	8000e6c <__udivmoddi4+0x154>
 8000dca:	1bcb      	subs	r3, r1, r7
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	fa1f f887 	uxth.w	r8, r7
 8000dd4:	2601      	movs	r6, #1
 8000dd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dda:	0c21      	lsrs	r1, r4, #16
 8000ddc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb08 f30c 	mul.w	r3, r8, ip
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0xe4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0xe2>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	f200 80e9 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1ac9      	subs	r1, r1, r3
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x10c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x10a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80d9 	bhi.w	8000fd4 <__udivmoddi4+0x2bc>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e7bf      	b.n	8000dae <__udivmoddi4+0x96>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x12e>
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	f000 80b1 	beq.w	8000f9a <__udivmoddi4+0x282>
 8000e38:	2600      	movs	r6, #0
 8000e3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e3e:	4630      	mov	r0, r6
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	fab3 f683 	clz	r6, r3
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d14a      	bne.n	8000ee4 <__udivmoddi4+0x1cc>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d302      	bcc.n	8000e58 <__udivmoddi4+0x140>
 8000e52:	4282      	cmp	r2, r0
 8000e54:	f200 80b8 	bhi.w	8000fc8 <__udivmoddi4+0x2b0>
 8000e58:	1a84      	subs	r4, r0, r2
 8000e5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e5e:	2001      	movs	r0, #1
 8000e60:	468c      	mov	ip, r1
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d0a8      	beq.n	8000db8 <__udivmoddi4+0xa0>
 8000e66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e6a:	e7a5      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f603 	lsr.w	r6, r0, r3
 8000e74:	4097      	lsls	r7, r2
 8000e76:	fa01 f002 	lsl.w	r0, r1, r2
 8000e7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7e:	40d9      	lsrs	r1, r3
 8000e80:	4330      	orrs	r0, r6
 8000e82:	0c03      	lsrs	r3, r0, #16
 8000e84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e88:	fa1f f887 	uxth.w	r8, r7
 8000e8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e94:	fb06 f108 	mul.w	r1, r6, r8
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x19c>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ea6:	f080 808d 	bcs.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	f240 808a 	bls.w	8000fc4 <__udivmoddi4+0x2ac>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	443b      	add	r3, r7
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b281      	uxth	r1, r0
 8000eb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ebc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ec0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec4:	fb00 f308 	mul.w	r3, r0, r8
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d907      	bls.n	8000edc <__udivmoddi4+0x1c4>
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ed2:	d273      	bcs.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d971      	bls.n	8000fbc <__udivmoddi4+0x2a4>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4439      	add	r1, r7
 8000edc:	1acb      	subs	r3, r1, r3
 8000ede:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ee2:	e778      	b.n	8000dd6 <__udivmoddi4+0xbe>
 8000ee4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ee8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ef6:	fa01 f306 	lsl.w	r3, r1, r6
 8000efa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000efe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f02:	431f      	orrs	r7, r3
 8000f04:	0c3b      	lsrs	r3, r7, #16
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fa1f f884 	uxth.w	r8, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f16:	fb09 fa08 	mul.w	sl, r9, r8
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f20:	fa00 f306 	lsl.w	r3, r0, r6
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x220>
 8000f26:	1861      	adds	r1, r4, r1
 8000f28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f2c:	d248      	bcs.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f2e:	458a      	cmp	sl, r1
 8000f30:	d946      	bls.n	8000fc0 <__udivmoddi4+0x2a8>
 8000f32:	f1a9 0902 	sub.w	r9, r9, #2
 8000f36:	4421      	add	r1, r4
 8000f38:	eba1 010a 	sub.w	r1, r1, sl
 8000f3c:	b2bf      	uxth	r7, r7
 8000f3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f4a:	fb00 f808 	mul.w	r8, r0, r8
 8000f4e:	45b8      	cmp	r8, r7
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x24a>
 8000f52:	19e7      	adds	r7, r4, r7
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f58:	d22e      	bcs.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d92c      	bls.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	4427      	add	r7, r4
 8000f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f66:	eba7 0708 	sub.w	r7, r7, r8
 8000f6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f6e:	454f      	cmp	r7, r9
 8000f70:	46c6      	mov	lr, r8
 8000f72:	4649      	mov	r1, r9
 8000f74:	d31a      	bcc.n	8000fac <__udivmoddi4+0x294>
 8000f76:	d017      	beq.n	8000fa8 <__udivmoddi4+0x290>
 8000f78:	b15d      	cbz	r5, 8000f92 <__udivmoddi4+0x27a>
 8000f7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f86:	40f2      	lsrs	r2, r6
 8000f88:	ea4c 0202 	orr.w	r2, ip, r2
 8000f8c:	40f7      	lsrs	r7, r6
 8000f8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f92:	2600      	movs	r6, #0
 8000f94:	4631      	mov	r1, r6
 8000f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e70b      	b.n	8000db8 <__udivmoddi4+0xa0>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0x60>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6fd      	b.n	8000da4 <__udivmoddi4+0x8c>
 8000fa8:	4543      	cmp	r3, r8
 8000faa:	d2e5      	bcs.n	8000f78 <__udivmoddi4+0x260>
 8000fac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7df      	b.n	8000f78 <__udivmoddi4+0x260>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e7d2      	b.n	8000f62 <__udivmoddi4+0x24a>
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	e78d      	b.n	8000edc <__udivmoddi4+0x1c4>
 8000fc0:	4681      	mov	r9, r0
 8000fc2:	e7b9      	b.n	8000f38 <__udivmoddi4+0x220>
 8000fc4:	4666      	mov	r6, ip
 8000fc6:	e775      	b.n	8000eb4 <__udivmoddi4+0x19c>
 8000fc8:	4630      	mov	r0, r6
 8000fca:	e74a      	b.n	8000e62 <__udivmoddi4+0x14a>
 8000fcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd0:	4439      	add	r1, r7
 8000fd2:	e713      	b.n	8000dfc <__udivmoddi4+0xe4>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	443c      	add	r4, r7
 8000fd8:	e724      	b.n	8000e24 <__udivmoddi4+0x10c>
 8000fda:	bf00      	nop

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f001 f9ad 	bl	8002350 <null_ptr_check>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d133      	bne.n	800106a <bme280_init+0x8a>
		while (try_count) {
 8001002:	e028      	b.n	8001056 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001004:	f107 010d 	add.w	r1, r7, #13
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	20d0      	movs	r0, #208	; 0xd0
 800100e:	f000 f832 	bl	8001076 <bme280_get_regs>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d114      	bne.n	8001048 <bme280_init+0x68>
 800101e:	7b7b      	ldrb	r3, [r7, #13]
 8001020:	2b60      	cmp	r3, #96	; 0x60
 8001022:	d111      	bne.n	8001048 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8001024:	7b7a      	ldrb	r2, [r7, #13]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f978 	bl	8001320 <bme280_soft_reset>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8001034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d110      	bne.n	800105e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 fffd 	bl	800203c <get_calib_data>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8001046:	e00a      	b.n	800105e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2001      	movs	r0, #1
 800104e:	4798      	blx	r3
			--try_count;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	3b01      	subs	r3, #1
 8001054:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1d3      	bne.n	8001004 <bme280_init+0x24>
 800105c:	e000      	b.n	8001060 <bme280_init+0x80>
				break;
 800105e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8001066:	23fe      	movs	r3, #254	; 0xfe
 8001068:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001076:	b590      	push	{r4, r7, lr}
 8001078:	b087      	sub	sp, #28
 800107a:	af00      	add	r7, sp, #0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	4613      	mov	r3, r2
 8001086:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f001 f961 	bl	8002350 <null_ptr_check>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d117      	bne.n	80010ca <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d003      	beq.n	80010aa <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a8:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685c      	ldr	r4, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7858      	ldrb	r0, [r3, #1]
 80010b2:	89bb      	ldrh	r3, [r7, #12]
 80010b4:	7bf9      	ldrb	r1, [r7, #15]
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	47a0      	blx	r4
 80010ba:	4603      	mov	r3, r0
 80010bc:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 80010be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 80010c6:	23fc      	movs	r3, #252	; 0xfc
 80010c8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80010ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}

080010d6 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 80010d6:	b590      	push	{r4, r7, lr}
 80010d8:	b08d      	sub	sp, #52	; 0x34
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b0a      	cmp	r3, #10
 80010ea:	d901      	bls.n	80010f0 <bme280_set_regs+0x1a>
		len = 10;
 80010ec:	230a      	movs	r3, #10
 80010ee:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f001 f92d 	bl	8002350 <null_ptr_check>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80010fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001100:	2b00      	cmp	r3, #0
 8001102:	d156      	bne.n	80011b2 <bme280_set_regs+0xdc>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d053      	beq.n	80011b2 <bme280_set_regs+0xdc>
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d050      	beq.n	80011b2 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d049      	beq.n	80011aa <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d01a      	beq.n	800115a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001124:	2300      	movs	r3, #0
 8001126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800112a:	e011      	b.n	8001150 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800112c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	440b      	add	r3, r1
 800113e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800114a:	3301      	adds	r3, #1
 800114c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001150:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	429a      	cmp	r2, r3
 8001158:	d3e8      	bcc.n	800112c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d90d      	bls.n	800117c <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f107 0114 	add.w	r1, r7, #20
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 ffac 	bl	80020c6 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	b29b      	uxth	r3, r3
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b01      	subs	r3, #1
 8001178:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800117a:	e001      	b.n	8001180 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689c      	ldr	r4, [r3, #8]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	7858      	ldrb	r0, [r3, #1]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	7819      	ldrb	r1, [r3, #0]
 800118c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800118e:	f107 0214 	add.w	r2, r7, #20
 8001192:	47a0      	blx	r4
 8001194:	4603      	mov	r3, r0
 8001196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800119a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80011a2:	23fc      	movs	r3, #252	; 0xfc
 80011a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011a8:	e007      	b.n	80011ba <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80011aa:	23fd      	movs	r3, #253	; 0xfd
 80011ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 80011b0:	e003      	b.n	80011ba <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011b8:	e000      	b.n	80011bc <bme280_set_regs+0xe6>
		if (len != 0) {
 80011ba:	bf00      	nop
	}


	return rslt;
 80011bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3734      	adds	r7, #52	; 0x34
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}

080011c8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f001 f8bb 	bl	8002350 <null_ptr_check>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d13f      	bne.n	8001266 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80011e6:	f107 030e 	add.w	r3, r7, #14
 80011ea:	6839      	ldr	r1, [r7, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f874 	bl	80012da <bme280_get_sensor_mode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <bme280_set_sensor_settings+0x46>
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f000 fb36 	bl	8001876 <put_device_to_sleep>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d127      	bne.n	8001266 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4619      	mov	r1, r3
 800121a:	2007      	movs	r0, #7
 800121c:	f001 f87c 	bl	8002318 <are_settings_changed>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f972 	bl	800151a <set_osr_settings>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d111      	bne.n	8001266 <bme280_set_sensor_settings+0x9e>
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4619      	mov	r1, r3
 8001246:	2018      	movs	r0, #24
 8001248:	f001 f866 	bl	8002318 <are_settings_changed>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f9f9 	bl	8001654 <set_filter_standby_settings>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	6039      	str	r1, [r7, #0]
 800127c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	f001 f866 	bl	8002350 <null_ptr_check>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d11e      	bne.n	80012ce <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001290:	f107 030e 	add.w	r3, r7, #14
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f81f 	bl	80012da <bme280_get_sensor_mode>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d107      	bne.n	80012b8 <bme280_set_sensor_mode+0x46>
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d004      	beq.n	80012b8 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f000 fae1 	bl	8001876 <put_device_to_sleep>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 faa3 	bl	8001810 <write_power_mode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f001 f833 	bl	8002350 <null_ptr_check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10e      	bne.n	8001314 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	20f4      	movs	r0, #244	; 0xf4
 80012fe:	f7ff feba 	bl	8001076 <bme280_get_regs>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	b2da      	uxtb	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001328:	23e0      	movs	r3, #224	; 0xe0
 800132a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800132c:	23b6      	movs	r3, #182	; 0xb6
 800132e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f001 f80d 	bl	8002350 <null_ptr_check>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001342:	f107 010d 	add.w	r1, r7, #13
 8001346:	f107 000e 	add.w	r0, r7, #14
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f7ff fec2 	bl	80010d6 <bme280_set_regs>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2002      	movs	r0, #2
 800135c:	4798      	blx	r3
	}

	return rslt;
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b08a      	sub	sp, #40	; 0x28
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 ffdf 	bl	8002350 <null_ptr_check>
 8001392:	4603      	mov	r3, r0
 8001394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800139c:	2b00      	cmp	r3, #0
 800139e:	d124      	bne.n	80013ea <bme280_get_sensor_data+0x80>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d021      	beq.n	80013ea <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80013a6:	f107 011c 	add.w	r1, r7, #28
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2208      	movs	r2, #8
 80013ae:	20f7      	movs	r0, #247	; 0xf7
 80013b0:	f7ff fe61 	bl	8001076 <bme280_get_regs>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 80013ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f815 	bl	80013fc <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3310      	adds	r3, #16
 80013d6:	f107 0110 	add.w	r1, r7, #16
 80013da:	7bf8      	ldrb	r0, [r7, #15]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	f000 f853 	bl	8001488 <bme280_compensate_data>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80013e8:	e002      	b.n	80013f0 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013ea:	23ff      	movs	r3, #255	; 0xff
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80013f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	031b      	lsls	r3, r3, #12
 800140c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3302      	adds	r3, #2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	b2db      	uxtb	r3, r3
 8001422:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	431a      	orrs	r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3303      	adds	r3, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3304      	adds	r3, #4
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3305      	adds	r3, #5
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	b2db      	uxtb	r3, r3
 8001450:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	431a      	orrs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	431a      	orrs	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3306      	adds	r3, #6
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3307      	adds	r3, #7
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	431a      	orrs	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d033      	beq.n	800150a <bme280_compensate_data+0x82>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d030      	beq.n	800150a <bme280_compensate_data+0x82>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d02d      	beq.n	800150a <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f000 fa1f 	bl	8001910 <compensate_temperature>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	68b8      	ldr	r0, [r7, #8]
 80014e6:	f000 fa75 	bl	80019d4 <compensate_pressure>
 80014ea:	4602      	mov	r2, r0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	68b8      	ldr	r0, [r7, #8]
 80014fe:	f000 fcf1 	bl	8001ee4 <compensate_humidity>
 8001502:	4602      	mov	r2, r0
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001508:	e001      	b.n	800150e <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800150e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001528:	2301      	movs	r3, #1
 800152a:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f000 f815 	bl	8001568 <set_osr_humidity_settings>
 800153e:	4603      	mov	r3, r0
 8001540:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d007      	beq.n	800155c <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	4618      	mov	r0, r3
 8001554:	f000 f842 	bl	80015dc <set_osr_press_temp_settings>
 8001558:	4603      	mov	r3, r0
 800155a:	75fb      	strb	r3, [r7, #23]

	return rslt;
 800155c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8001572:	23f2      	movs	r3, #242	; 0xf2
 8001574:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8001582:	f107 010e 	add.w	r1, r7, #14
 8001586:	f107 000c 	add.w	r0, r7, #12
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	f7ff fda2 	bl	80010d6 <bme280_set_regs>
 8001592:	4603      	mov	r3, r0
 8001594:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800159e:	23f4      	movs	r3, #244	; 0xf4
 80015a0:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80015a2:	7b38      	ldrb	r0, [r7, #12]
 80015a4:	f107 010d 	add.w	r1, r7, #13
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f7ff fd63 	bl	8001076 <bme280_get_regs>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80015b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d109      	bne.n	80015d0 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80015bc:	f107 010d 	add.w	r1, r7, #13
 80015c0:	f107 000c 	add.w	r0, r7, #12
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f7ff fd85 	bl	80010d6 <bme280_set_regs>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015ea:	23f4      	movs	r3, #244	; 0xf4
 80015ec:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015ee:	7db8      	ldrb	r0, [r7, #22]
 80015f0:	f107 0115 	add.w	r1, r7, #21
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd3d 	bl	8001076 <bme280_get_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11f      	bne.n	8001648 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001612:	f107 0315 	add.w	r3, r7, #21
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f88e 	bl	800173a <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001628:	f107 0315 	add.w	r3, r7, #21
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f8a0 	bl	8001774 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001634:	f107 0115 	add.w	r1, r7, #21
 8001638:	f107 0016 	add.w	r0, r7, #22
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f7ff fd49 	bl	80010d6 <bme280_set_regs>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001662:	23f5      	movs	r3, #245	; 0xf5
 8001664:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001666:	7db8      	ldrb	r0, [r7, #22]
 8001668:	f107 0115 	add.w	r1, r7, #21
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f7ff fd01 	bl	8001076 <bme280_get_regs>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11f      	bne.n	80016c0 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d005      	beq.n	8001696 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800168a:	f107 0315 	add.w	r3, r7, #21
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f81b 	bl	80016cc <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80016a0:	f107 0315 	add.w	r3, r7, #21
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f82d 	bl	8001706 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80016ac:	f107 0115 	add.w	r1, r7, #21
 80016b0:	f107 0016 	add.w	r0, r7, #22
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f7ff fd0d 	bl	80010d6 <bme280_set_regs>
 80016bc:	4603      	mov	r3, r0
 80016be:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80016c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f023 031c 	bic.w	r3, r3, #28
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	78db      	ldrb	r3, [r3, #3]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	f003 031c 	and.w	r3, r3, #28
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	b25a      	sxtb	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	791b      	ldrb	r3, [r3, #4]
 8001720:	015b      	lsls	r3, r3, #5
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b25b      	sxtb	r3, r3
 800174a:	f023 031c 	bic.w	r3, r3, #28
 800174e:	b25a      	sxtb	r2, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	b25b      	sxtb	r3, r3
 8001758:	f003 031c 	and.w	r3, r3, #28
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	b25a      	sxtb	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	785b      	ldrb	r3, [r3, #1]
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	701a      	strb	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3302      	adds	r3, #2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	109b      	asrs	r3, r3, #2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3302      	adds	r3, #2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3303      	adds	r3, #3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	109b      	asrs	r3, r3, #2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3303      	adds	r3, #3
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	711a      	strb	r2, [r3, #4]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800181c:	23f4      	movs	r3, #244	; 0xf4
 800181e:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001820:	7bb8      	ldrb	r0, [r7, #14]
 8001822:	f107 010d 	add.w	r1, r7, #13
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	f7ff fc24 	bl	8001076 <bme280_get_regs>
 800182e:	4603      	mov	r3, r0
 8001830:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d117      	bne.n	800186a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	b25a      	sxtb	r2, r3
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	4313      	orrs	r3, r2
 8001850:	b25b      	sxtb	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001856:	f107 010d 	add.w	r1, r7, #13
 800185a:	f107 000e 	add.w	r0, r7, #14
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	f7ff fc38 	bl	80010d6 <bme280_set_regs>
 8001866:	4603      	mov	r3, r0
 8001868:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800187e:	f107 0110 	add.w	r1, r7, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2204      	movs	r2, #4
 8001886:	20f2      	movs	r0, #242	; 0xf2
 8001888:	f7ff fbf5 	bl	8001076 <bme280_get_regs>
 800188c:	4603      	mov	r3, r0
 800188e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d118      	bne.n	80018ca <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001898:	f107 0208 	add.w	r2, r7, #8
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff80 	bl	80017a8 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fd39 	bl	8001320 <bme280_soft_reset>
 80018ae:	4603      	mov	r3, r0
 80018b0:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80018b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 f808 	bl	80018d6 <reload_device_settings>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80018ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	201f      	movs	r0, #31
 80018e6:	f7ff fe18 	bl	800151a <set_osr_settings>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d106      	bne.n	8001904 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	201f      	movs	r0, #31
 80018fc:	f7ff feaa 	bl	8001654 <set_filter_standby_settings>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <compensate_temperature+0xc0>)
 800191c:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 800191e:	f242 1334 	movw	r3, #8500	; 0x2134
 8001922:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	8812      	ldrh	r2, [r2, #0]
 800192e:	0052      	lsls	r2, r2, #1
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800193a:	461a      	mov	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	fb03 f302 	mul.w	r3, r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	da01      	bge.n	800194a <compensate_temperature+0x3a>
 8001946:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800194a:	12db      	asrs	r3, r3, #11
 800194c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	fb03 f303 	mul.w	r3, r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	da01      	bge.n	800196a <compensate_temperature+0x5a>
 8001966:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800196a:	131b      	asrs	r3, r3, #12
 800196c:	461a      	mov	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001974:	fb03 f302 	mul.w	r3, r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	da02      	bge.n	8001982 <compensate_temperature+0x72>
 800197c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001980:	333f      	adds	r3, #63	; 0x3f
 8001982:	139b      	asrs	r3, r3, #14
 8001984:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	441a      	add	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3380      	adds	r3, #128	; 0x80
 800199c:	2b00      	cmp	r3, #0
 800199e:	da00      	bge.n	80019a2 <compensate_temperature+0x92>
 80019a0:	33ff      	adds	r3, #255	; 0xff
 80019a2:	121b      	asrs	r3, r3, #8
 80019a4:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	da02      	bge.n	80019b4 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e005      	b.n	80019c0 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dd01      	ble.n	80019c0 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	61fb      	str	r3, [r7, #28]

	return temperature;
 80019c0:	69fb      	ldr	r3, [r7, #28]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	fffff060 	.word	0xfffff060

080019d4 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80019d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d8:	b0a4      	sub	sp, #144	; 0x90
 80019da:	af00      	add	r7, sp, #0
 80019dc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80019de:	65b9      	str	r1, [r7, #88]	; 0x58
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 80019e0:	4bcf      	ldr	r3, [pc, #828]	; (8001d20 <compensate_pressure+0x34c>)
 80019e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	uint32_t pressure_max = 11000000;
 80019e6:	4bcf      	ldr	r3, [pc, #828]	; (8001d24 <compensate_pressure+0x350>)
 80019e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 80019ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	461a      	mov	r2, r3
 80019f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019f6:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80019fa:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80019fe:	e9c7 451e 	strd	r4, r5, [r7, #120]	; 0x78
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001a02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a06:	fb03 f102 	mul.w	r1, r3, r2
 8001a0a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a0e:	fb03 f302 	mul.w	r3, r3, r2
 8001a12:	18ca      	adds	r2, r1, r3
 8001a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a16:	fba3 4503 	umull	r4, r5, r3, r3
 8001a1a:	1953      	adds	r3, r2, r5
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a20:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a2a:	fb02 f005 	mul.w	r0, r2, r5
 8001a2e:	fb04 f103 	mul.w	r1, r4, r3
 8001a32:	4401      	add	r1, r0
 8001a34:	fba4 2302 	umull	r2, r3, r4, r2
 8001a38:	4419      	add	r1, r3
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001a40:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 8001a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a50:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a52:	fb03 f001 	mul.w	r0, r3, r1
 8001a56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a58:	fb02 f101 	mul.w	r1, r2, r1
 8001a5c:	4408      	add	r0, r1
 8001a5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001a60:	fba1 2302 	umull	r2, r3, r1, r2
 8001a64:	18c1      	adds	r1, r0, r3
 8001a66:	460b      	mov	r3, r1
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0459      	lsls	r1, r3, #17
 8001a72:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a76:	0450      	lsls	r0, r2, #17
 8001a78:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a7c:	eb12 0800 	adds.w	r8, r2, r0
 8001a80:	eb43 0901 	adc.w	r9, r3, r1
 8001a84:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d1      	lsls	r1, r2, #3
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001aa4:	1814      	adds	r4, r2, r0
 8001aa6:	62bc      	str	r4, [r7, #40]	; 0x28
 8001aa8:	414b      	adcs	r3, r1
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001ab0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001ab4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ab8:	fb03 f102 	mul.w	r1, r3, r2
 8001abc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac0:	fb03 f302 	mul.w	r3, r3, r2
 8001ac4:	18ca      	adds	r2, r1, r3
 8001ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ac8:	fba3 4503 	umull	r4, r5, r3, r3
 8001acc:	1953      	adds	r3, r2, r5
 8001ace:	461d      	mov	r5, r3
 8001ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ad2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001adc:	fb02 f005 	mul.w	r0, r2, r5
 8001ae0:	fb04 f103 	mul.w	r1, r4, r3
 8001ae4:	4401      	add	r1, r0
 8001ae6:	fba4 2302 	umull	r2, r3, r4, r2
 8001aea:	4419      	add	r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	f173 0100 	sbcs.w	r1, r3, #0
 8001af4:	da02      	bge.n	8001afc <compensate_pressure+0x128>
 8001af6:	32ff      	adds	r2, #255	; 0xff
 8001af8:	f143 0300 	adc.w	r3, r3, #0
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	0a10      	lsrs	r0, r2, #8
 8001b06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b0a:	1219      	asrs	r1, r3, #8
 8001b0c:	4680      	mov	r8, r0
 8001b0e:	4689      	mov	r9, r1
 8001b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b1c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b1e:	fb03 f001 	mul.w	r0, r3, r1
 8001b22:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b24:	fb02 f101 	mul.w	r1, r2, r1
 8001b28:	1844      	adds	r4, r0, r1
 8001b2a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001b2c:	fba1 0102 	umull	r0, r1, r1, r2
 8001b30:	1863      	adds	r3, r4, r1
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	030b      	lsls	r3, r1, #12
 8001b3e:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001b42:	0302      	lsls	r2, r0, #12
 8001b44:	eb18 0102 	adds.w	r1, r8, r2
 8001b48:	6239      	str	r1, [r7, #32]
 8001b4a:	eb49 0303 	adc.w	r3, r9, r3
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b54:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	var3 = ((int64_t)1) * 140737488355328;
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b60:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001b64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001b6c:	1884      	adds	r4, r0, r2
 8001b6e:	653c      	str	r4, [r7, #80]	; 0x50
 8001b70:	eb41 0303 	adc.w	r3, r1, r3
 8001b74:	657b      	str	r3, [r7, #84]	; 0x54
 8001b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b78:	88db      	ldrh	r3, [r3, #6]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001b84:	4629      	mov	r1, r5
 8001b86:	fb02 f001 	mul.w	r0, r2, r1
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	fb01 f103 	mul.w	r1, r1, r3
 8001b90:	4401      	add	r1, r0
 8001b92:	4620      	mov	r0, r4
 8001b94:	fba0 2302 	umull	r2, r3, r0, r2
 8001b98:	4419      	add	r1, r3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	f173 0100 	sbcs.w	r1, r3, #0
 8001ba2:	da03      	bge.n	8001bac <compensate_pressure+0x1d8>
 8001ba4:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8001ba8:	f143 0301 	adc.w	r3, r3, #1
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	1058      	asrs	r0, r3, #1
 8001bb6:	17d9      	asrs	r1, r3, #31
 8001bb8:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001bbc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f000 8181 	beq.w	8001ec8 <compensate_pressure+0x4f4>
		var4 = 1048576 - uncomp_data->pressure;
 8001bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001bd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	07d9      	lsls	r1, r3, #31
 8001be6:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bea:	07d0      	lsls	r0, r2, #31
 8001bec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bf0:	ebb0 0a02 	subs.w	sl, r0, r2
 8001bf4:	eb61 0b03 	sbc.w	fp, r1, r3
 8001bf8:	4652      	mov	r2, sl
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	1891      	adds	r1, r2, r2
 8001bfe:	61b9      	str	r1, [r7, #24]
 8001c00:	415b      	adcs	r3, r3
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	eb12 020a 	adds.w	r2, r2, sl
 8001c0c:	eb43 030b 	adc.w	r3, r3, fp
 8001c10:	f04f 0000 	mov.w	r0, #0
 8001c14:	f04f 0100 	mov.w	r1, #0
 8001c18:	0199      	lsls	r1, r3, #6
 8001c1a:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001c1e:	0190      	lsls	r0, r2, #6
 8001c20:	1812      	adds	r2, r2, r0
 8001c22:	eb41 0303 	adc.w	r3, r1, r3
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c34:	0090      	lsls	r0, r2, #2
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	eb12 020a 	adds.w	r2, r2, sl
 8001c3e:	eb43 030b 	adc.w	r3, r3, fp
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0099      	lsls	r1, r3, #2
 8001c4c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001c50:	0090      	lsls	r0, r2, #2
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	eb12 010a 	adds.w	r1, r2, sl
 8001c5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001c5c:	eb43 030b 	adc.w	r3, r3, fp
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c62:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001c66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001c6a:	f7fe ffed 	bl	8000c48 <__aeabi_ldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c7c:	b21c      	sxth	r4, r3
 8001c7e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001c82:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	f171 0300 	sbcs.w	r3, r1, #0
 8001c90:	da06      	bge.n	8001ca0 <compensate_pressure+0x2cc>
 8001c92:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	1880      	adds	r0, r0, r2
 8001c9c:	eb43 0101 	adc.w	r1, r3, r1
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	0b42      	lsrs	r2, r0, #13
 8001caa:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001cae:	134b      	asrs	r3, r1, #13
 8001cb0:	fb02 f005 	mul.w	r0, r2, r5
 8001cb4:	fb04 f103 	mul.w	r1, r4, r3
 8001cb8:	4401      	add	r1, r0
 8001cba:	fba4 4502 	umull	r4, r5, r4, r2
 8001cbe:	194b      	adds	r3, r1, r5
 8001cc0:	461d      	mov	r5, r3
 8001cc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f171 0300 	sbcs.w	r3, r1, #0
 8001cd0:	da06      	bge.n	8001ce0 <compensate_pressure+0x30c>
 8001cd2:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	1880      	adds	r0, r0, r2
 8001cdc:	eb43 0101 	adc.w	r1, r3, r1
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	0b42      	lsrs	r2, r0, #13
 8001cea:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001cee:	134b      	asrs	r3, r1, #13
 8001cf0:	fb02 f005 	mul.w	r0, r2, r5
 8001cf4:	fb04 f103 	mul.w	r1, r4, r3
 8001cf8:	4401      	add	r1, r0
 8001cfa:	fba4 2302 	umull	r2, r3, r4, r2
 8001cfe:	4419      	add	r1, r3
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	2800      	cmp	r0, #0
 8001d08:	f171 0300 	sbcs.w	r3, r1, #0
 8001d0c:	da0c      	bge.n	8001d28 <compensate_pressure+0x354>
 8001d0e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	1880      	adds	r0, r0, r2
 8001d18:	eb43 0101 	adc.w	r1, r3, r1
 8001d1c:	e004      	b.n	8001d28 <compensate_pressure+0x354>
 8001d1e:	bf00      	nop
 8001d20:	002dc6c0 	.word	0x002dc6c0
 8001d24:	00a7d8c0 	.word	0x00a7d8c0
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	0e42      	lsrs	r2, r0, #25
 8001d32:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d36:	164b      	asrs	r3, r1, #25
 8001d38:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d4a:	fb03 f001 	mul.w	r0, r3, r1
 8001d4e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d50:	fb02 f101 	mul.w	r1, r2, r1
 8001d54:	4408      	add	r0, r1
 8001d56:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d58:	fba1 2302 	umull	r2, r3, r1, r2
 8001d5c:	18c1      	adds	r1, r0, r3
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	2800      	cmp	r0, #0
 8001d66:	f171 0300 	sbcs.w	r3, r1, #0
 8001d6a:	da05      	bge.n	8001d78 <compensate_pressure+0x3a4>
 8001d6c:	4a5c      	ldr	r2, [pc, #368]	; (8001ee0 <compensate_pressure+0x50c>)
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	1880      	adds	r0, r0, r2
 8001d74:	eb43 0101 	adc.w	r1, r3, r1
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	0cc2      	lsrs	r2, r0, #19
 8001d82:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d86:	14cb      	asrs	r3, r1, #19
 8001d88:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001d8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d94:	1884      	adds	r4, r0, r2
 8001d96:	643c      	str	r4, [r7, #64]	; 0x40
 8001d98:	eb41 0303 	adc.w	r3, r1, r3
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001da2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001da6:	4621      	mov	r1, r4
 8001da8:	1889      	adds	r1, r1, r2
 8001daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001dac:	4629      	mov	r1, r5
 8001dae:	eb43 0101 	adc.w	r1, r3, r1
 8001db2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	f173 0100 	sbcs.w	r1, r3, #0
 8001dbe:	da02      	bge.n	8001dc6 <compensate_pressure+0x3f2>
 8001dc0:	32ff      	adds	r2, #255	; 0xff
 8001dc2:	f143 0300 	adc.w	r3, r3, #0
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	0a10      	lsrs	r0, r2, #8
 8001dd0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001dd4:	1219      	asrs	r1, r3, #8
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	460d      	mov	r5, r1
 8001dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ddc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001de0:	b218      	sxth	r0, r3
 8001de2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	010b      	lsls	r3, r1, #4
 8001df0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001df4:	0102      	lsls	r2, r0, #4
 8001df6:	18a1      	adds	r1, r4, r2
 8001df8:	6139      	str	r1, [r7, #16]
 8001dfa:	eb45 0303 	adc.w	r3, r5, r3
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e04:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001e08:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e0c:	0fd9      	lsrs	r1, r3, #31
 8001e0e:	4608      	mov	r0, r1
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	1884      	adds	r4, r0, r2
 8001e16:	60bc      	str	r4, [r7, #8]
 8001e18:	eb41 0303 	adc.w	r3, r1, r3
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	084a      	lsrs	r2, r1, #1
 8001e2e:	4629      	mov	r1, r5
 8001e30:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001e34:	4629      	mov	r1, r5
 8001e36:	104b      	asrs	r3, r1, #1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	462b      	mov	r3, r5
 8001e40:	1891      	adds	r1, r2, r2
 8001e42:	6039      	str	r1, [r7, #0]
 8001e44:	415b      	adcs	r3, r3
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e4c:	1912      	adds	r2, r2, r4
 8001e4e:	eb45 0303 	adc.w	r3, r5, r3
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e60:	0150      	lsls	r0, r2, #5
 8001e62:	1812      	adds	r2, r2, r0
 8001e64:	eb41 0303 	adc.w	r3, r1, r3
 8001e68:	1911      	adds	r1, r2, r4
 8001e6a:	6339      	str	r1, [r7, #48]	; 0x30
 8001e6c:	416b      	adcs	r3, r5
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	f173 0100 	sbcs.w	r1, r3, #0
 8001e7a:	da02      	bge.n	8001e82 <compensate_pressure+0x4ae>
 8001e7c:	327f      	adds	r2, #127	; 0x7f
 8001e7e:	f143 0300 	adc.w	r3, r3, #0
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	09d0      	lsrs	r0, r2, #7
 8001e8c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001e90:	11d9      	asrs	r1, r3, #7
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4613      	mov	r3, r2
 8001e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (pressure < pressure_min)
 8001e9c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d204      	bcs.n	8001eb2 <compensate_pressure+0x4de>
			pressure = pressure_min;
 8001ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001eb0:	e00e      	b.n	8001ed0 <compensate_pressure+0x4fc>
		else if (pressure > pressure_max)
 8001eb2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d908      	bls.n	8001ed0 <compensate_pressure+0x4fc>
			pressure = pressure_max;
 8001ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ec6:	e003      	b.n	8001ed0 <compensate_pressure+0x4fc>
	} else {
		pressure = pressure_min;
 8001ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	}

	return pressure;
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3790      	adds	r7, #144	; 0x90
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ede:	bf00      	nop
 8001ee0:	0007ffff 	.word	0x0007ffff

08001ee4 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8001eee:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001ef2:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001efc:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	039b      	lsls	r3, r3, #14
 8001f04:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f0c:	051b      	lsls	r3, r3, #20
 8001f0e:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f16:	461a      	mov	r2, r3
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	1ad2      	subs	r2, r2, r3
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da02      	bge.n	8001f38 <compensate_humidity+0x54>
 8001f32:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001f36:	337f      	adds	r3, #127	; 0x7f
 8001f38:	13db      	asrs	r3, r3, #15
 8001f3a:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f42:	461a      	mov	r2, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	fb03 f302 	mul.w	r3, r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da01      	bge.n	8001f52 <compensate_humidity+0x6e>
 8001f4e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001f52:	129b      	asrs	r3, r3, #10
 8001f54:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	7f1b      	ldrb	r3, [r3, #28]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	fb03 f302 	mul.w	r3, r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	da01      	bge.n	8001f6a <compensate_humidity+0x86>
 8001f66:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001f6a:	12db      	asrs	r3, r3, #11
 8001f6c:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da01      	bge.n	8001f82 <compensate_humidity+0x9e>
 8001f7e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001f82:	129b      	asrs	r3, r3, #10
 8001f84:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001f88:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f90:	461a      	mov	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	fb03 f302 	mul.w	r3, r3, r2
 8001f98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	da02      	bge.n	8001fa6 <compensate_humidity+0xc2>
 8001fa0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001fa4:	333f      	adds	r3, #63	; 0x3f
 8001fa6:	139b      	asrs	r3, r3, #14
 8001fa8:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da02      	bge.n	8001fc0 <compensate_humidity+0xdc>
 8001fba:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001fbe:	337f      	adds	r3, #127	; 0x7f
 8001fc0:	13db      	asrs	r3, r3, #15
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da02      	bge.n	8001fd0 <compensate_humidity+0xec>
 8001fca:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001fce:	337f      	adds	r3, #127	; 0x7f
 8001fd0:	13db      	asrs	r3, r3, #15
 8001fd2:	fb03 f302 	mul.w	r3, r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da00      	bge.n	8001fdc <compensate_humidity+0xf8>
 8001fda:	337f      	adds	r3, #127	; 0x7f
 8001fdc:	11db      	asrs	r3, r3, #7
 8001fde:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	7e1b      	ldrb	r3, [r3, #24]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fb03 f302 	mul.w	r3, r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da00      	bge.n	8001ff2 <compensate_humidity+0x10e>
 8001ff0:	330f      	adds	r3, #15
 8001ff2:	111b      	asrs	r3, r3, #4
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002004:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800200c:	bfa8      	it	ge
 800200e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002012:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da01      	bge.n	800201e <compensate_humidity+0x13a>
 800201a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800201e:	131b      	asrs	r3, r3, #12
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8002022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	429a      	cmp	r2, r3
 8002028:	d901      	bls.n	800202e <compensate_humidity+0x14a>
		humidity = humidity_max;
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002030:	4618      	mov	r0, r3
 8002032:	372c      	adds	r7, #44	; 0x2c
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002044:	2388      	movs	r3, #136	; 0x88
 8002046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002060:	f107 010c 	add.w	r1, r7, #12
 8002064:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	221a      	movs	r2, #26
 800206c:	f7ff f803 	bl	8001076 <bme280_get_regs>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8002076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800207a:	2b00      	cmp	r3, #0
 800207c:	d11d      	bne.n	80020ba <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f84a 	bl	800211e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800208a:	23e1      	movs	r3, #225	; 0xe1
 800208c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002090:	f107 010c 	add.w	r1, r7, #12
 8002094:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2207      	movs	r2, #7
 800209c:	f7fe ffeb 	bl	8001076 <bme280_get_regs>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80020a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020ae:	f107 030c 	add.w	r3, r7, #12
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f8e1 	bl	800227c <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3728      	adds	r7, #40	; 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b087      	sub	sp, #28
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020d4:	2301      	movs	r3, #1
 80020d6:	75fb      	strb	r3, [r7, #23]
 80020d8:	e016      	b.n	8002108 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	441a      	add	r2, r3
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	3b01      	subs	r3, #1
 80020e6:	68b9      	ldr	r1, [r7, #8]
 80020e8:	440b      	add	r3, r1
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	441a      	add	r2, r3
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	440b      	add	r3, r1
 80020fe:	7812      	ldrb	r2, [r2, #0]
 8002100:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	3301      	adds	r3, #1
 8002106:	75fb      	strb	r3, [r7, #23]
 8002108:	7dfa      	ldrb	r2, [r7, #23]
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3e4      	bcc.n	80020da <interleave_reg_addr+0x14>
	}
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	3310      	adds	r3, #16
 800212c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3301      	adds	r3, #1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	b21a      	sxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21b      	sxth	r3, r3
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3303      	adds	r3, #3
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	b21a      	sxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3302      	adds	r3, #2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b21b      	sxth	r3, r3
 800215a:	4313      	orrs	r3, r2
 800215c:	b21a      	sxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3305      	adds	r3, #5
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3307      	adds	r3, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3306      	adds	r3, #6
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21b      	sxth	r3, r3
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3309      	adds	r3, #9
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3308      	adds	r3, #8
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	330b      	adds	r3, #11
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	330a      	adds	r3, #10
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	330d      	adds	r3, #13
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	330c      	adds	r3, #12
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	330f      	adds	r3, #15
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	330e      	adds	r3, #14
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3311      	adds	r3, #17
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3310      	adds	r3, #16
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3313      	adds	r3, #19
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21a      	sxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3315      	adds	r3, #21
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3314      	adds	r3, #20
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21a      	sxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3317      	adds	r3, #23
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3316      	adds	r3, #22
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21a      	sxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e5a      	ldrb	r2, [r3, #25]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	761a      	strb	r2, [r3, #24]

}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	3310      	adds	r3, #16
 800228a:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	b21a      	sxth	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21a      	sxth	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	789a      	ldrb	r2, [r3, #2]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3303      	adds	r3, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3304      	adds	r3, #4
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b21b      	sxth	r3, r3
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ca:	8a7a      	ldrh	r2, [r7, #18]
 80022cc:	8a3b      	ldrh	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3305      	adds	r3, #5
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022f2:	89fa      	ldrh	r2, [r7, #14]
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3306      	adds	r3, #6
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b25a      	sxtb	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800230c:	bf00      	nop
 800230e:	371c      	adds	r7, #28
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e001      	b.n	8002342 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <null_ptr_check+0x26>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <null_ptr_check+0x26>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <null_ptr_check+0x26>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8002376:	23ff      	movs	r3, #255	; 0xff
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e001      	b.n	8002380 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002398:	1d39      	adds	r1, r7, #4
 800239a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800239e:	2201      	movs	r2, #1
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <__io_putchar+0x20>)
 80023a2:	f003 fb6d 	bl	8005a80 <HAL_UART_Transmit>
	return ch;
 80023a6:	687b      	ldr	r3, [r7, #4]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20001b9c 	.word	0x20001b9c

080023b4 <user_i2c_read>:

char line1[16];
char line2[16];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	603a      	str	r2, [r7, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
 80023c2:	460b      	mov	r3, r1
 80023c4:	71bb      	strb	r3, [r7, #6]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	b299      	uxth	r1, r3
 80023d2:	1dba      	adds	r2, r7, #6
 80023d4:	230a      	movs	r3, #10
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	4811      	ldr	r0, [pc, #68]	; (8002420 <user_i2c_read+0x6c>)
 80023dc:	f001 f890 	bl	8003500 <HAL_I2C_Master_Transmit>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <user_i2c_read+0x38>
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ea:	e014      	b.n	8002416 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	b299      	uxth	r1, r3
 80023fa:	88bb      	ldrh	r3, [r7, #4]
 80023fc:	220a      	movs	r2, #10
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <user_i2c_read+0x6c>)
 8002404:	f001 f970 	bl	80036e8 <HAL_I2C_Master_Receive>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <user_i2c_read+0x60>
 800240e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002412:	e000      	b.n	8002416 <user_i2c_read+0x62>

  return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20001b14 	.word	0x20001b14

08002424 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fd0f 	bl	8002e50 <HAL_Delay>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af02      	add	r7, sp, #8
 8002442:	603a      	str	r2, [r7, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	460b      	mov	r3, r1
 800244c:	71bb      	strb	r3, [r7, #6]
 800244e:	4613      	mov	r3, r2
 8002450:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002452:	88bb      	ldrh	r3, [r7, #4]
 8002454:	3301      	adds	r3, #1
 8002456:	4618      	mov	r0, r3
 8002458:	f006 fd5a 	bl	8008f10 <malloc>
 800245c:	4603      	mov	r3, r0
 800245e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002460:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	88ba      	ldrh	r2, [r7, #4]
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f006 fd5d 	bl	8008f30 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	b29b      	uxth	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	b299      	uxth	r1, r3
 800247e:	88bb      	ldrh	r3, [r7, #4]
 8002480:	3301      	adds	r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002488:	9200      	str	r2, [sp, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <user_i2c_write+0x74>)
 800248e:	f001 f837 	bl	8003500 <HAL_I2C_Master_Transmit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <user_i2c_write+0x62>
 8002498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249c:	e003      	b.n	80024a6 <user_i2c_write+0x6a>

  free(buf);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f006 fd3e 	bl	8008f20 <free>
  return 0;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20001b14 	.word	0x20001b14

080024b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b8:	f000 fc8a 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024bc:	f000 f852 	bl	8002564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f000 f938 	bl	8002734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024c4:	f000 f906 	bl	80026d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024c8:	f000 f8c4 	bl	8002654 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  dev.dev_id = BME280_I2C_ADDR_PRIM;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <main+0x90>)
 80024ce:	2276      	movs	r2, #118	; 0x76
 80024d0:	705a      	strb	r2, [r3, #1]
  dev.intf = BME280_I2C_INTF;
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <main+0x90>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	709a      	strb	r2, [r3, #2]
  dev.read = user_i2c_read;
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <main+0x90>)
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <main+0x94>)
 80024dc:	605a      	str	r2, [r3, #4]
  dev.write = user_i2c_write;
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <main+0x90>)
 80024e0:	4a1a      	ldr	r2, [pc, #104]	; (800254c <main+0x98>)
 80024e2:	609a      	str	r2, [r3, #8]
  dev.delay_ms = user_delay_ms;
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <main+0x90>)
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <main+0x9c>)
 80024e8:	60da      	str	r2, [r3, #12]

  rslt = bme280_init(&dev);
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <main+0x90>)
 80024ec:	f7fe fd78 	bl	8000fe0 <bme280_init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <main+0xa0>)
 80024f6:	701a      	strb	r2, [r3, #0]

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <main+0x90>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <main+0x90>)
 8002502:	2205      	movs	r2, #5
 8002504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <main+0x90>)
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  dev.settings.filter = BME280_FILTER_COEFF_16;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <main+0x90>)
 8002512:	2204      	movs	r2, #4
 8002514:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8002518:	490a      	ldr	r1, [pc, #40]	; (8002544 <main+0x90>)
 800251a:	200f      	movs	r0, #15
 800251c:	f7fe fe54 	bl	80011c8 <bme280_set_sensor_settings>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <main+0xa0>)
 8002526:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002528:	f003 ff74 	bl	8006414 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of bme280Task */
  bme280TaskHandle = osThreadNew(StartBME280Task, NULL, &bme280Task_attributes);
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <main+0xa4>)
 800252e:	2100      	movs	r1, #0
 8002530:	480a      	ldr	r0, [pc, #40]	; (800255c <main+0xa8>)
 8002532:	f003 ffb9 	bl	80064a8 <osThreadNew>
 8002536:	4603      	mov	r3, r0
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <main+0xac>)
 800253a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800253c:	f003 ff8e 	bl	800645c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002540:	e7fe      	b.n	8002540 <main+0x8c>
 8002542:	bf00      	nop
 8002544:	20001ad0 	.word	0x20001ad0
 8002548:	080023b5 	.word	0x080023b5
 800254c:	0800243d 	.word	0x0800243d
 8002550:	08002425 	.word	0x08002425
 8002554:	20001b10 	.word	0x20001b10
 8002558:	0800ba48 	.word	0x0800ba48
 800255c:	08002809 	.word	0x08002809
 8002560:	20001b88 	.word	0x20001b88

08002564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b0b8      	sub	sp, #224	; 0xe0
 8002568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	2244      	movs	r2, #68	; 0x44
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f006 fcea 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002578:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2288      	movs	r2, #136	; 0x88
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f006 fcdc 	bl	8008f4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800259a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a2:	2310      	movs	r3, #16
 80025a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80025ba:	230a      	movs	r3, #10
 80025bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80025c0:	2307      	movs	r3, #7
 80025c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fc58 	bl	8003e8c <HAL_RCC_OscConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80025e2:	f000 f9a9 	bl	8002938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	230f      	movs	r3, #15
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ec:	2303      	movs	r3, #3
 80025ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002608:	2104      	movs	r1, #4
 800260a:	4618      	mov	r0, r3
 800260c:	f002 f824 	bl	8004658 <HAL_RCC_ClockConfig>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002616:	f000 f98f 	bl	8002938 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800261a:	2342      	movs	r3, #66	; 0x42
 800261c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800261e:	2300      	movs	r3, #0
 8002620:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002622:	2300      	movs	r3, #0
 8002624:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002626:	463b      	mov	r3, r7
 8002628:	4618      	mov	r0, r3
 800262a:	f002 fa4d 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002634:	f000 f980 	bl	8002938 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002638:	f44f 7000 	mov.w	r0, #512	; 0x200
 800263c:	f001 fbd0 	bl	8003de0 <HAL_PWREx_ControlVoltageScaling>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8002646:	f000 f977 	bl	8002938 <Error_Handler>
  }
}
 800264a:	bf00      	nop
 800264c:	37e0      	adds	r7, #224	; 0xe0
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <MX_I2C1_Init+0x74>)
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <MX_I2C1_Init+0x78>)
 800265c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <MX_I2C1_Init+0x7c>)
 8002662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <MX_I2C1_Init+0x74>)
 800266c:	2201      	movs	r2, #1
 800266e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_I2C1_Init+0x74>)
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800268e:	480e      	ldr	r0, [pc, #56]	; (80026c8 <MX_I2C1_Init+0x74>)
 8002690:	f000 fea6 	bl	80033e0 <HAL_I2C_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800269a:	f000 f94d 	bl	8002938 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800269e:	2100      	movs	r1, #0
 80026a0:	4809      	ldr	r0, [pc, #36]	; (80026c8 <MX_I2C1_Init+0x74>)
 80026a2:	f001 faf7 	bl	8003c94 <HAL_I2CEx_ConfigAnalogFilter>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026ac:	f000 f944 	bl	8002938 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026b0:	2100      	movs	r1, #0
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_I2C1_Init+0x74>)
 80026b4:	f001 fb39 	bl	8003d2a <HAL_I2CEx_ConfigDigitalFilter>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026be:	f000 f93b 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20001b14 	.word	0x20001b14
 80026cc:	40005400 	.word	0x40005400
 80026d0:	10909cec 	.word	0x10909cec

080026d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026da:	4a15      	ldr	r2, [pc, #84]	; (8002730 <MX_USART2_UART_Init+0x5c>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USART2_UART_Init+0x58>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_USART2_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_USART2_UART_Init+0x58>)
 8002718:	f003 f964 	bl	80059e4 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002722:	f000 f909 	bl	8002938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20001b9c 	.word	0x20001b9c
 8002730:	40004400 	.word	0x40004400

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]
 8002748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800274a:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <MX_GPIO_Init+0xc4>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002756:	4b28      	ldr	r3, [pc, #160]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <MX_GPIO_Init+0xc4>)
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <MX_GPIO_Init+0xc4>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_GPIO_Init+0xc4>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2120      	movs	r1, #32
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b2:	f000 fdfd 	bl	80033b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <MX_GPIO_Init+0xc8>)
 80027be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4619      	mov	r1, r3
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <MX_GPIO_Init+0xcc>)
 80027cc:	f000 fc46 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027d0:	2320      	movs	r3, #32
 80027d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ea:	f000 fc37 	bl	800305c <HAL_GPIO_Init>

}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	10210000 	.word	0x10210000
 8002800:	48000800 	.word	0x48000800
 8002804:	00000000 	.word	0x00000000

08002808 <StartBME280Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBME280Task */
void StartBME280Task(void *argument)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	// BME280
	const uint8_t bme280_address = 0x76;
 8002810:	2376      	movs	r3, #118	; 0x76
 8002812:	75fb      	strb	r3, [r7, #23]


	uint8_t tData = 0xD0;
 8002814:	23d0      	movs	r3, #208	; 0xd0
 8002816:	75bb      	strb	r3, [r7, #22]
		*/




		printf("TestBeg\r\n");
 8002818:	4833      	ldr	r0, [pc, #204]	; (80028e8 <StartBME280Task+0xe0>)
 800281a:	f007 f939 	bl	8009a90 <puts>


  	rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 800281e:	4933      	ldr	r1, [pc, #204]	; (80028ec <StartBME280Task+0xe4>)
 8002820:	2001      	movs	r0, #1
 8002822:	f7fe fd26 	bl	8001272 <bme280_set_sensor_mode>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <StartBME280Task+0xe8>)
 800282c:	701a      	strb	r2, [r3, #0]
  	dev.delay_ms(40);
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <StartBME280Task+0xe4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2028      	movs	r0, #40	; 0x28
 8002834:	4798      	blx	r3
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <StartBME280Task+0xe4>)
 8002838:	492e      	ldr	r1, [pc, #184]	; (80028f4 <StartBME280Task+0xec>)
 800283a:	2007      	movs	r0, #7
 800283c:	f7fe fd95 	bl	800136a <bme280_get_sensor_data>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <StartBME280Task+0xe8>)
 8002846:	701a      	strb	r2, [r3, #0]

		if(rslt == BME280_OK)
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <StartBME280Task+0xe8>)
 800284a:	f993 3000 	ldrsb.w	r3, [r3]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d13d      	bne.n	80028ce <StartBME280Task+0xc6>
		{
			int32_t lTemperature = comp_data.temperature;
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <StartBME280Task+0xec>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	613b      	str	r3, [r7, #16]
			temperature = lTemperature / 100.0;      // °C
 8002858:	6938      	ldr	r0, [r7, #16]
 800285a:	f7fd fe63 	bl	8000524 <__aeabi_i2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <StartBME280Task+0xf0>)
 8002864:	f7fd fff2 	bl	800084c <__aeabi_ddiv>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f99a 	bl	8000ba8 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	4a21      	ldr	r2, [pc, #132]	; (80028fc <StartBME280Task+0xf4>)
 8002878:	6013      	str	r3, [r2, #0]
			humidity = comp_data.humidity / 1024.0;           // %
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <StartBME280Task+0xec>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fe40 	bl	8000504 <__aeabi_ui2d>
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <StartBME280Task+0xf8>)
 800288a:	f7fd ffdf 	bl	800084c <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f7fe f987 	bl	8000ba8 <__aeabi_d2f>
 800289a:	4603      	mov	r3, r0
 800289c:	4a19      	ldr	r2, [pc, #100]	; (8002904 <StartBME280Task+0xfc>)
 800289e:	6013      	str	r3, [r2, #0]
			pressure = comp_data.pressure / 10000.0;          // hPa
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <StartBME280Task+0xec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe2d 	bl	8000504 <__aeabi_ui2d>
 80028aa:	a30d      	add	r3, pc, #52	; (adr r3, 80028e0 <StartBME280Task+0xd8>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd ffcc 	bl	800084c <__aeabi_ddiv>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f974 	bl	8000ba8 <__aeabi_d2f>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <StartBME280Task+0x100>)
 80028c4:	6013      	str	r3, [r2, #0]

			//memset(line1, 0, sizeof(line1));
			//memset(line1, 0, sizeof(line2));
			//printf("TEMP: %03.1f\r\n", temperature);

			printf("TEMP: %d\r\n", lTemperature);
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	4810      	ldr	r0, [pc, #64]	; (800290c <StartBME280Task+0x104>)
 80028ca:	f007 f85b 	bl	8009984 <iprintf>

			//sprintf(line1, "HUMID: %03.1f ", humidity);
			//sprintf(line2, "TEMP: %03.1f ", temperature);
		}

		printf("TestEnd\r\n");
 80028ce:	4810      	ldr	r0, [pc, #64]	; (8002910 <StartBME280Task+0x108>)
 80028d0:	f007 f8de 	bl	8009a90 <puts>


    osDelay(1000);
 80028d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028d8:	f003 fe78 	bl	80065cc <osDelay>
  {
 80028dc:	e79c      	b.n	8002818 <StartBME280Task+0x10>
 80028de:	bf00      	nop
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40c38800 	.word	0x40c38800
 80028e8:	0800ba0c 	.word	0x0800ba0c
 80028ec:	20001ad0 	.word	0x20001ad0
 80028f0:	20001b10 	.word	0x20001b10
 80028f4:	20001b60 	.word	0x20001b60
 80028f8:	40590000 	.word	0x40590000
 80028fc:	20001b6c 	.word	0x20001b6c
 8002900:	40900000 	.word	0x40900000
 8002904:	20001b74 	.word	0x20001b74
 8002908:	20001b70 	.word	0x20001b70
 800290c:	0800ba18 	.word	0x0800ba18
 8002910:	0800ba24 	.word	0x0800ba24

08002914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002926:	f000 fa73 	bl	8002e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40001000 	.word	0x40001000

08002938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800293c:	b672      	cpsid	i
}
 800293e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002940:	e7fe      	b.n	8002940 <Error_Handler+0x8>
	...

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_MspInit+0x4c>)
 800294c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_MspInit+0x4c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6613      	str	r3, [r2, #96]	; 0x60
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_MspInit+0x4c>)
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_MspInit+0x4c>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_MspInit+0x4c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_MspInit+0x4c>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	210f      	movs	r1, #15
 800297e:	f06f 0001 	mvn.w	r0, #1
 8002982:	f000 fb41 	bl	8003008 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_I2C_MspInit+0x7c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d128      	bne.n	8002a08 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029e0:	2304      	movs	r3, #4
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	480b      	ldr	r0, [pc, #44]	; (8002a18 <HAL_I2C_MspInit+0x84>)
 80029ec:	f000 fb36 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029fa:	6593      	str	r3, [r2, #88]	; 0x58
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_I2C_MspInit+0x80>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40005400 	.word	0x40005400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	48000400 	.word	0x48000400

08002a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_UART_MspInit+0x7c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d128      	bne.n	8002a90 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_UART_MspInit+0x80>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a6e:	230c      	movs	r3, #12
 8002a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a7e:	2307      	movs	r3, #7
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	4619      	mov	r1, r3
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f000 fae6 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40004400 	.word	0x40004400
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	2036      	movs	r0, #54	; 0x36
 8002ab6:	f000 faa7 	bl	8003008 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002aba:	2036      	movs	r0, #54	; 0x36
 8002abc:	f000 fac0 	bl	8003040 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_InitTick+0x9c>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <HAL_InitTick+0x9c>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_InitTick+0x9c>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ad8:	f107 0210 	add.w	r2, r7, #16
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f001 ff5e 	bl	80049a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ae8:	f001 ff30 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8002aec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af0:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_InitTick+0xa0>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	3b01      	subs	r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_InitTick+0xa4>)
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_InitTick+0xa8>)
 8002b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b08:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b1c:	4809      	ldr	r0, [pc, #36]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b1e:	f002 fc8f 	bl	8005440 <HAL_TIM_Base_Init>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b28:	4806      	ldr	r0, [pc, #24]	; (8002b44 <HAL_InitTick+0xa4>)
 8002b2a:	f002 fceb 	bl	8005504 <HAL_TIM_Base_Start_IT>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	e000      	b.n	8002b34 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3730      	adds	r7, #48	; 0x30
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	20001c20 	.word	0x20001c20
 8002b48:	40001000 	.word	0x40001000

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM6_DAC_IRQHandler+0x10>)
 8002b7e:	f002 fd31 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20001c20 	.word	0x20001c20

08002b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
	return 1;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_kill>:

int _kill(int pid, int sig)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ba6:	f006 f989 	bl	8008ebc <__errno>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2216      	movs	r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
	return -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_exit>:

void _exit (int status)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe7 	bl	8002b9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bce:	e7fe      	b.n	8002bce <_exit+0x12>

08002bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00a      	b.n	8002bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002be2:	f3af 8000 	nop.w
 8002be6:	4601      	mov	r1, r0
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	b2ca      	uxtb	r2, r1
 8002bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf0      	blt.n	8002be2 <_read+0x12>
	}

return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fbb3 	bl	8002390 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	dbf1      	blt.n	8002c1c <_write+0x12>
	}
	return len;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <_close>:

int _close(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	return -1;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <_isatty>:

int _isatty(int file)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
	return 1;
 8002c82:	2301      	movs	r3, #1
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f006 f8ee 	bl	8008ebc <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20018000 	.word	0x20018000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	200001fc 	.word	0x200001fc
 8002d14:	20001cc0 	.word	0x20001cc0

08002d18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <SystemInit+0x5c>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <SystemInit+0x5c>)
 8002d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <SystemInit+0x60>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <SystemInit+0x60>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <SystemInit+0x60>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <SystemInit+0x60>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <SystemInit+0x60>)
 8002d44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <SystemInit+0x60>)
 8002d50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <SystemInit+0x60>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <SystemInit+0x60>)
 8002d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <SystemInit+0x60>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00
 8002d78:	40021000 	.word	0x40021000

08002d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d80:	f7ff ffca 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d86:	e003      	b.n	8002d90 <LoopCopyDataInit>

08002d88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d8e:	3104      	adds	r1, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d90:	480a      	ldr	r0, [pc, #40]	; (8002dbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d98:	d3f6      	bcc.n	8002d88 <CopyDataInit>
	ldr	r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d9c:	e002      	b.n	8002da4 <LoopFillZerobss>

08002d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002da0:	f842 3b04 	str.w	r3, [r2], #4

08002da4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <LoopForever+0x16>)
	cmp	r2, r3
 8002da6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002da8:	d3f9      	bcc.n	8002d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f006 f88d 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dae:	f7ff fb81 	bl	80024b4 <main>

08002db2 <LoopForever>:

LoopForever:
    b LoopForever
 8002db2:	e7fe      	b.n	8002db2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002db4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002db8:	0800bea4 	.word	0x0800bea4
	ldr	r0, =_sdata
 8002dbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002dc0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002dc4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002dc8:	20001cc0 	.word	0x20001cc0

08002dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC1_2_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_Init+0x3c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_Init+0x3c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de6:	2003      	movs	r0, #3
 8002de8:	f000 f903 	bl	8002ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7ff fe57 	bl	8002aa0 <HAL_InitTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	71fb      	strb	r3, [r7, #7]
 8002dfc:	e001      	b.n	8002e02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dfe:	f7ff fda1 	bl	8002944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e02:	79fb      	ldrb	r3, [r7, #7]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x24>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_IncTick+0x24>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000008 	.word	0x20000008
 8002e34:	20001c6c 	.word	0x20001c6c

08002e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_GetTick+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20001c6c 	.word	0x20001c6c

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff ffee 	bl	8002e38 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e68:	d005      	beq.n	8002e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_Delay+0x44>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e76:	bf00      	nop
 8002e78:	f7ff ffde 	bl	8002e38 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d8f7      	bhi.n	8002e78 <HAL_Delay+0x28>
  {
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000008 	.word	0x20000008

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	db0b      	blt.n	8002f26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	4907      	ldr	r1, [pc, #28]	; (8002f34 <__NVIC_EnableIRQ+0x38>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
         );
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff4c 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800301a:	f7ff ff61 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 800301e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	6978      	ldr	r0, [r7, #20]
 8003026:	f7ff ffb1 	bl	8002f8c <NVIC_EncodePriority>
 800302a:	4602      	mov	r2, r0
 800302c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff ff80 	bl	8002f38 <__NVIC_SetPriority>
}
 8003038:	bf00      	nop
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ff54 	bl	8002efc <__NVIC_EnableIRQ>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306a:	e17f      	b.n	800336c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8171 	beq.w	8003366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d00b      	beq.n	80030a4 <HAL_GPIO_Init+0x48>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d007      	beq.n	80030a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003098:	2b11      	cmp	r3, #17
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d130      	bne.n	8003106 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030da:	2201      	movs	r2, #1
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0201 	and.w	r2, r3, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b03      	cmp	r3, #3
 8003110:	d118      	bne.n	8003144 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003118:	2201      	movs	r2, #1
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0201 	and.w	r2, r3, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x128>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b12      	cmp	r3, #18
 8003182:	d123      	bne.n	80031cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	08da      	lsrs	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3208      	adds	r2, #8
 80031c6:	6939      	ldr	r1, [r7, #16]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80ac 	beq.w	8003366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_GPIO_Init+0x330>)
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	4a5e      	ldr	r2, [pc, #376]	; (800338c <HAL_GPIO_Init+0x330>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6613      	str	r3, [r2, #96]	; 0x60
 800321a:	4b5c      	ldr	r3, [pc, #368]	; (800338c <HAL_GPIO_Init+0x330>)
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003226:	4a5a      	ldr	r2, [pc, #360]	; (8003390 <HAL_GPIO_Init+0x334>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4013      	ands	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x242>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4f      	ldr	r2, [pc, #316]	; (8003394 <HAL_GPIO_Init+0x338>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x23e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4e      	ldr	r2, [pc, #312]	; (8003398 <HAL_GPIO_Init+0x33c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x23a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4d      	ldr	r2, [pc, #308]	; (800339c <HAL_GPIO_Init+0x340>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x236>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4c      	ldr	r2, [pc, #304]	; (80033a0 <HAL_GPIO_Init+0x344>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x232>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4b      	ldr	r2, [pc, #300]	; (80033a4 <HAL_GPIO_Init+0x348>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x22e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <HAL_GPIO_Init+0x34c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x22a>
 8003282:	2306      	movs	r3, #6
 8003284:	e00c      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003286:	2307      	movs	r3, #7
 8003288:	e00a      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800328a:	2305      	movs	r3, #5
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800328e:	2304      	movs	r3, #4
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x244>
 800329e:	2300      	movs	r3, #0
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032b0:	4937      	ldr	r1, [pc, #220]	; (8003390 <HAL_GPIO_Init+0x334>)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032be:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <HAL_GPIO_Init+0x350>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032e2:	4a32      	ldr	r2, [pc, #200]	; (80033ac <HAL_GPIO_Init+0x350>)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80032e8:	4b30      	ldr	r3, [pc, #192]	; (80033ac <HAL_GPIO_Init+0x350>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_GPIO_Init+0x350>)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003312:	4b26      	ldr	r3, [pc, #152]	; (80033ac <HAL_GPIO_Init+0x350>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003336:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_GPIO_Init+0x350>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_GPIO_Init+0x350>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003360:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_GPIO_Init+0x350>)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3301      	adds	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	f47f ae78 	bne.w	800306c <HAL_GPIO_Init+0x10>
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	40010000 	.word	0x40010000
 8003394:	48000400 	.word	0x48000400
 8003398:	48000800 	.word	0x48000800
 800339c:	48000c00 	.word	0x48000c00
 80033a0:	48001000 	.word	0x48001000
 80033a4:	48001400 	.word	0x48001400
 80033a8:	48001800 	.word	0x48001800
 80033ac:	40010400 	.word	0x40010400

080033b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	807b      	strh	r3, [r7, #2]
 80033bc:	4613      	mov	r3, r2
 80033be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e081      	b.n	80034f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff fac4 	bl	8002994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	e006      	b.n	8003468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d104      	bne.n	800347a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69d9      	ldr	r1, [r3, #28]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	461a      	mov	r2, r3
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	4613      	mov	r3, r2
 8003512:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b20      	cmp	r3, #32
 800351e:	f040 80da 	bne.w	80036d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x30>
 800352c:	2302      	movs	r3, #2
 800352e:	e0d3      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003538:	f7ff fc7e 	bl	8002e38 <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2319      	movs	r3, #25
 8003544:	2201      	movs	r2, #1
 8003546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f9e6 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e0be      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2221      	movs	r2, #33	; 0x21
 800355e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2210      	movs	r2, #16
 8003566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2bff      	cmp	r3, #255	; 0xff
 800358a:	d90e      	bls.n	80035aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	22ff      	movs	r2, #255	; 0xff
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003596:	b2da      	uxtb	r2, r3
 8003598:	8979      	ldrh	r1, [r7, #10]
 800359a:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fb48 	bl	8003c38 <I2C_TransferConfig>
 80035a8:	e06c      	b.n	8003684 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	8979      	ldrh	r1, [r7, #10]
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fb37 	bl	8003c38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80035ca:	e05b      	b.n	8003684 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	6a39      	ldr	r1, [r7, #32]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f9e3 	bl	800399c <I2C_WaitOnTXISFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e07b      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d034      	beq.n	8003684 <HAL_I2C_Master_Transmit+0x184>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361e:	2b00      	cmp	r3, #0
 8003620:	d130      	bne.n	8003684 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	2200      	movs	r2, #0
 800362a:	2180      	movs	r1, #128	; 0x80
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f975 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e04d      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d90e      	bls.n	8003664 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	b2da      	uxtb	r2, r3
 8003652:	8979      	ldrh	r1, [r7, #10]
 8003654:	2300      	movs	r3, #0
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 faeb 	bl	8003c38 <I2C_TransferConfig>
 8003662:	e00f      	b.n	8003684 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	b2da      	uxtb	r2, r3
 8003674:	8979      	ldrh	r1, [r7, #10]
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fada 	bl	8003c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d19e      	bne.n	80035cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	6a39      	ldr	r1, [r7, #32]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f9c2 	bl	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e01a      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2220      	movs	r2, #32
 80036a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80036b6:	400b      	ands	r3, r1
 80036b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	80002000 	.word	0x80002000
 80036e4:	fe00e800 	.word	0xfe00e800

080036e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
 80036f8:	4613      	mov	r3, r2
 80036fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b20      	cmp	r3, #32
 8003706:	f040 80db 	bne.w	80038c0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2C_Master_Receive+0x30>
 8003714:	2302      	movs	r3, #2
 8003716:	e0d4      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003720:	f7ff fb8a 	bl	8002e38 <HAL_GetTick>
 8003724:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2319      	movs	r3, #25
 800372c:	2201      	movs	r2, #1
 800372e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f8f2 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0bf      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	; 0x22
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2210      	movs	r2, #16
 800374e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	893a      	ldrh	r2, [r7, #8]
 8003762:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	2bff      	cmp	r3, #255	; 0xff
 8003772:	d90e      	bls.n	8003792 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	b2da      	uxtb	r2, r3
 8003780:	8979      	ldrh	r1, [r7, #10]
 8003782:	4b52      	ldr	r3, [pc, #328]	; (80038cc <HAL_I2C_Master_Receive+0x1e4>)
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fa54 	bl	8003c38 <I2C_TransferConfig>
 8003790:	e06d      	b.n	800386e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	8979      	ldrh	r1, [r7, #10]
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <HAL_I2C_Master_Receive+0x1e4>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fa43 	bl	8003c38 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80037b2:	e05c      	b.n	800386e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	6a39      	ldr	r1, [r7, #32]
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f96b 	bl	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e07c      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d034      	beq.n	800386e <HAL_I2C_Master_Receive+0x186>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d130      	bne.n	800386e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2200      	movs	r2, #0
 8003814:	2180      	movs	r1, #128	; 0x80
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f880 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e04d      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2bff      	cmp	r3, #255	; 0xff
 800382e:	d90e      	bls.n	800384e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383a:	b2da      	uxtb	r2, r3
 800383c:	8979      	ldrh	r1, [r7, #10]
 800383e:	2300      	movs	r3, #0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9f6 	bl	8003c38 <I2C_TransferConfig>
 800384c:	e00f      	b.n	800386e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	b2da      	uxtb	r2, r3
 800385e:	8979      	ldrh	r1, [r7, #10]
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f9e5 	bl	8003c38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d19d      	bne.n	80037b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	6a39      	ldr	r1, [r7, #32]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8cd 	bl	8003a1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e01a      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2220      	movs	r2, #32
 8003892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <HAL_I2C_Master_Receive+0x1e8>)
 80038a0:	400b      	ands	r3, r1
 80038a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038c0:	2302      	movs	r3, #2
  }
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	80002400 	.word	0x80002400
 80038d0:	fe00e800 	.word	0xfe00e800

080038d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d103      	bne.n	80038f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d007      	beq.n	8003910 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	619a      	str	r2, [r3, #24]
  }
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	e022      	b.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003934:	d01e      	beq.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7ff fa7f 	bl	8002e38 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d113      	bne.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	f043 0220 	orr.w	r2, r3, #32
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e00f      	b.n	8003994 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	429a      	cmp	r2, r3
 8003990:	d0cd      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039a8:	e02c      	b.n	8003a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f8dc 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e02a      	b.n	8003a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c4:	d01e      	beq.n	8003a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c6:	f7ff fa37 	bl	8002e38 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d113      	bne.n	8003a04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e007      	b.n	8003a14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d1cb      	bne.n	80039aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	e028      	b.n	8003a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f89c 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e026      	b.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7ff f9fb 	bl	8002e38 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d113      	bne.n	8003a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e007      	b.n	8003a8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d1cf      	bne.n	8003a2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa0:	e055      	b.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f860 	bl	8003b6c <I2C_IsAcknowledgeFailed>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e053      	b.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d129      	bne.n	8003b18 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d105      	bne.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e03f      	b.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003af2:	400b      	ands	r3, r1
 8003af4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e022      	b.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b18:	f7ff f98e 	bl	8002e38 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d302      	bcc.n	8003b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e007      	b.n	8003b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d1a2      	bne.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	fe00e800 	.word	0xfe00e800

08003b6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d151      	bne.n	8003c2a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b86:	e022      	b.n	8003bce <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b8e:	d01e      	beq.n	8003bce <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7ff f952 	bl	8002e38 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <I2C_IsAcknowledgeFailed+0x3a>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d113      	bne.n	8003bce <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f043 0220 	orr.w	r2, r3, #32
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02e      	b.n	8003c2c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d1d5      	bne.n	8003b88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2210      	movs	r2, #16
 8003be2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2220      	movs	r2, #32
 8003bea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fe71 	bl	80038d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <I2C_IsAcknowledgeFailed+0xc8>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0204 	orr.w	r2, r3, #4
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	fe00e800 	.word	0xfe00e800

08003c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	460b      	mov	r3, r1
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	4613      	mov	r3, r2
 8003c48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	0d5b      	lsrs	r3, r3, #21
 8003c54:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <I2C_TransferConfig+0x58>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	ea02 0103 	and.w	r1, r2, r3
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c68:	7a7b      	ldrb	r3, [r7, #9]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	03ff63ff 	.word	0x03ff63ff

08003c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d138      	bne.n	8003d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e032      	b.n	8003d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d139      	bne.n	8003db4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e033      	b.n	8003db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40007000 	.word	0x40007000

08003de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dee:	d130      	bne.n	8003e52 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df0:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d038      	beq.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e06:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2232      	movs	r2, #50	; 0x32
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	3301      	adds	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e24:	e002      	b.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e38:	d102      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f2      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	d110      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e00f      	b.n	8003e72 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d007      	beq.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e68:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e6e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40007000 	.word	0x40007000
 8003e84:	20000000 	.word	0x20000000
 8003e88:	431bde83 	.word	0x431bde83

08003e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e3d4      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9e:	4ba1      	ldr	r3, [pc, #644]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea8:	4b9e      	ldr	r3, [pc, #632]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80e4 	beq.w	8004088 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x4a>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	f040 808b 	bne.w	8003fe4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	f040 8087 	bne.w	8003fe4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ed6:	4b93      	ldr	r3, [pc, #588]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e3ac      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1a      	ldr	r2, [r3, #32]
 8003ef2:	4b8c      	ldr	r3, [pc, #560]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <HAL_RCC_OscConfig+0x7c>
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f06:	e005      	b.n	8003f14 <HAL_RCC_OscConfig+0x88>
 8003f08:	4b86      	ldr	r3, [pc, #536]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d223      	bcs.n	8003f60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fd73 	bl	8004a08 <RCC_SetFlashLatencyFromMSIRange>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e38d      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2c:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7c      	ldr	r2, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4977      	ldr	r1, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4a:	4b76      	ldr	r3, [pc, #472]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	4972      	ldr	r1, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
 8003f5e:	e025      	b.n	8003fac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f60:	4b70      	ldr	r3, [pc, #448]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6f      	ldr	r2, [pc, #444]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f66:	f043 0308 	orr.w	r3, r3, #8
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	496a      	ldr	r1, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f7e:	4b69      	ldr	r3, [pc, #420]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	4965      	ldr	r1, [pc, #404]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fd33 	bl	8004a08 <RCC_SetFlashLatencyFromMSIRange>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e34d      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fac:	f000 fc36 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	495a      	ldr	r1, [pc, #360]	; (8004128 <HAL_RCC_OscConfig+0x29c>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x2a0>)
 8003fca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fcc:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x2a4>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fe fd65 	bl	8002aa0 <HAL_InitTick>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d052      	beq.n	8004086 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	e331      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d032      	beq.n	8004052 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fec:	4b4d      	ldr	r3, [pc, #308]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4c      	ldr	r2, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	f043 0301 	orr.w	r3, r3, #1
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ff8:	f7fe ff1e 	bl	8002e38 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004000:	f7fe ff1a 	bl	8002e38 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e31a      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004012:	4b44      	ldr	r3, [pc, #272]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800401e:	4b41      	ldr	r3, [pc, #260]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a40      	ldr	r2, [pc, #256]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004024:	f043 0308 	orr.w	r3, r3, #8
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	493b      	ldr	r1, [pc, #236]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	021b      	lsls	r3, r3, #8
 800404a:	4936      	ldr	r1, [pc, #216]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	e01a      	b.n	8004088 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004052:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a33      	ldr	r2, [pc, #204]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800405e:	f7fe feeb 	bl	8002e38 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004066:	f7fe fee7 	bl	8002e38 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e2e7      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1f0      	bne.n	8004066 <HAL_RCC_OscConfig+0x1da>
 8004084:	e000      	b.n	8004088 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004086:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d074      	beq.n	800417e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b08      	cmp	r3, #8
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x21a>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b0c      	cmp	r3, #12
 800409e:	d10e      	bne.n	80040be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d10b      	bne.n	80040be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d064      	beq.n	800417c <HAL_RCC_OscConfig+0x2f0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d160      	bne.n	800417c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e2c4      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x24a>
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	e01d      	b.n	8004112 <HAL_RCC_OscConfig+0x286>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x26e>
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e00b      	b.n	8004112 <HAL_RCC_OscConfig+0x286>
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a06      	ldr	r2, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x298>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01c      	beq.n	8004154 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fe fe8d 	bl	8002e38 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004120:	e011      	b.n	8004146 <HAL_RCC_OscConfig+0x2ba>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	0800ba6c 	.word	0x0800ba6c
 800412c:	20000000 	.word	0x20000000
 8004130:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fe fe80 	bl	8002e38 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	; 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e280      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004146:	4baf      	ldr	r3, [pc, #700]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x2a8>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fe fe70 	bl	8002e38 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fe fe6c 	bl	8002e38 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	; 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e26c      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800416e:	4ba5      	ldr	r3, [pc, #660]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x2d0>
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d060      	beq.n	800424c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d005      	beq.n	800419c <HAL_RCC_OscConfig+0x310>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b0c      	cmp	r3, #12
 8004194:	d119      	bne.n	80041ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d116      	bne.n	80041ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800419c:	4b99      	ldr	r3, [pc, #612]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x328>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e249      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b4:	4b93      	ldr	r3, [pc, #588]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	4990      	ldr	r1, [pc, #576]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041c8:	e040      	b.n	800424c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d023      	beq.n	800421a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d2:	4b8c      	ldr	r3, [pc, #560]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a8b      	ldr	r2, [pc, #556]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041de:	f7fe fe2b 	bl	8002e38 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e6:	f7fe fe27 	bl	8002e38 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e227      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f8:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004204:	4b7f      	ldr	r3, [pc, #508]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	061b      	lsls	r3, r3, #24
 8004212:	497c      	ldr	r1, [pc, #496]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	e018      	b.n	800424c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421a:	4b7a      	ldr	r3, [pc, #488]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a79      	ldr	r2, [pc, #484]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fe fe07 	bl	8002e38 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800422e:	f7fe fe03 	bl	8002e38 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e203      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004240:	4b70      	ldr	r3, [pc, #448]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d03c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01c      	beq.n	800429a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004260:	4b68      	ldr	r3, [pc, #416]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004266:	4a67      	ldr	r2, [pc, #412]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fe fde2 	bl	8002e38 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004278:	f7fe fdde 	bl	8002e38 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e1de      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800428a:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCC_OscConfig+0x3ec>
 8004298:	e01b      	b.n	80042d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429a:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800429c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a0:	4a58      	ldr	r2, [pc, #352]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fe fdc5 	bl	8002e38 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b2:	f7fe fdc1 	bl	8002e38 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e1c1      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ef      	bne.n	80042b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a6 	beq.w	800442c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042e4:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	4a43      	ldr	r2, [pc, #268]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	6593      	str	r3, [r2, #88]	; 0x58
 80042fc:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004308:	2301      	movs	r3, #1
 800430a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430c:	4b3e      	ldr	r3, [pc, #248]	; (8004408 <HAL_RCC_OscConfig+0x57c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d118      	bne.n	800434a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCC_OscConfig+0x57c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3a      	ldr	r2, [pc, #232]	; (8004408 <HAL_RCC_OscConfig+0x57c>)
 800431e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004324:	f7fe fd88 	bl	8002e38 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432c:	f7fe fd84 	bl	8002e38 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e184      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800433e:	4b32      	ldr	r3, [pc, #200]	; (8004408 <HAL_RCC_OscConfig+0x57c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <HAL_RCC_OscConfig+0x4d8>
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004362:	e024      	b.n	80043ae <HAL_RCC_OscConfig+0x522>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d110      	bne.n	800438e <HAL_RCC_OscConfig+0x502>
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	4a24      	ldr	r2, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004374:	f043 0304 	orr.w	r3, r3, #4
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800437c:	4b21      	ldr	r3, [pc, #132]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	4a20      	ldr	r2, [pc, #128]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800438c:	e00f      	b.n	80043ae <HAL_RCC_OscConfig+0x522>
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800439e:	4b19      	ldr	r3, [pc, #100]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	4a17      	ldr	r2, [pc, #92]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80043a6:	f023 0304 	bic.w	r3, r3, #4
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe fd3f 	bl	8002e38 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fe fd3b 	bl	8002e38 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e139      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x578>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ed      	beq.n	80043be <HAL_RCC_OscConfig+0x532>
 80043e2:	e01a      	b.n	800441a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe fd28 	bl	8002e38 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ea:	e00f      	b.n	800440c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fe fd24 	bl	8002e38 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d906      	bls.n	800440c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e122      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800440c:	4b90      	ldr	r3, [pc, #576]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e8      	bne.n	80043ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441a:	7ffb      	ldrb	r3, [r7, #31]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b8b      	ldr	r3, [pc, #556]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4a8a      	ldr	r2, [pc, #552]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8108 	beq.w	8004646 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b02      	cmp	r3, #2
 800443c:	f040 80d0 	bne.w	80045e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004440:	4b83      	ldr	r3, [pc, #524]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 0203 	and.w	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d130      	bne.n	80044b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	3b01      	subs	r3, #1
 8004460:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d127      	bne.n	80044b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004470:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d11f      	bne.n	80044b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004480:	2a07      	cmp	r2, #7
 8004482:	bf14      	ite	ne
 8004484:	2201      	movne	r2, #1
 8004486:	2200      	moveq	r2, #0
 8004488:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d109      	bne.n	80044b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	3b01      	subs	r3, #1
 80044b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d06e      	beq.n	8004594 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d069      	beq.n	8004590 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044bc:	4b64      	ldr	r3, [pc, #400]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044c8:	4b61      	ldr	r3, [pc, #388]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b7      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044d8:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044e4:	f7fe fca8 	bl	8002e38 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fca4 	bl	8002e38 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0a4      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fe:	4b54      	ldr	r3, [pc, #336]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450a:	4b51      	ldr	r3, [pc, #324]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	4b51      	ldr	r3, [pc, #324]	; (8004654 <HAL_RCC_OscConfig+0x7c8>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800451a:	3a01      	subs	r2, #1
 800451c:	0112      	lsls	r2, r2, #4
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004524:	0212      	lsls	r2, r2, #8
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800452c:	0852      	lsrs	r2, r2, #1
 800452e:	3a01      	subs	r2, #1
 8004530:	0552      	lsls	r2, r2, #21
 8004532:	4311      	orrs	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004538:	0852      	lsrs	r2, r2, #1
 800453a:	3a01      	subs	r2, #1
 800453c:	0652      	lsls	r2, r2, #25
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004544:	0912      	lsrs	r2, r2, #4
 8004546:	0452      	lsls	r2, r2, #17
 8004548:	430a      	orrs	r2, r1
 800454a:	4941      	ldr	r1, [pc, #260]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004550:	4b3f      	ldr	r3, [pc, #252]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a3e      	ldr	r2, [pc, #248]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800455c:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004566:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004568:	f7fe fc66 	bl	8002e38 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fe fc62 	bl	8002e38 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e062      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	4b33      	ldr	r3, [pc, #204]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800458e:	e05a      	b.n	8004646 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e059      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004594:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d152      	bne.n	8004646 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045a0:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045ac:	4b28      	ldr	r3, [pc, #160]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a27      	ldr	r2, [pc, #156]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045b8:	f7fe fc3e 	bl	8002e38 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fe fc3a 	bl	8002e38 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e03a      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d2:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0x734>
 80045de:	e032      	b.n	8004646 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d02d      	beq.n	8004642 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b1a      	ldr	r3, [pc, #104]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045fe:	4b14      	ldr	r3, [pc, #80]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4a13      	ldr	r2, [pc, #76]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004604:	f023 0303 	bic.w	r3, r3, #3
 8004608:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004610:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fe fc0d 	bl	8002e38 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe fc09 	bl	8002e38 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e009      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCC_OscConfig+0x7c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x796>
 8004640:	e001      	b.n	8004646 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40021000 	.word	0x40021000
 8004654:	f99d808c 	.word	0xf99d808c

08004658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0c8      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800466c:	4b66      	ldr	r3, [pc, #408]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d910      	bls.n	800469c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b63      	ldr	r3, [pc, #396]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 0207 	bic.w	r2, r3, #7
 8004682:	4961      	ldr	r1, [pc, #388]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b5f      	ldr	r3, [pc, #380]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0b0      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d04c      	beq.n	8004742 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b0:	4b56      	ldr	r3, [pc, #344]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d121      	bne.n	8004700 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e09e      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046c8:	4b50      	ldr	r3, [pc, #320]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e092      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e0:	4b4a      	ldr	r3, [pc, #296]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e086      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f0:	4b46      	ldr	r3, [pc, #280]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e07e      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004700:	4b42      	ldr	r3, [pc, #264]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 0203 	bic.w	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	493f      	ldr	r1, [pc, #252]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004712:	f7fe fb91 	bl	8002e38 <HAL_GetTick>
 8004716:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004718:	e00a      	b.n	8004730 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471a:	f7fe fb8d 	bl	8002e38 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e066      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004730:	4b36      	ldr	r3, [pc, #216]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 020c 	and.w	r2, r3, #12
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	429a      	cmp	r2, r3
 8004740:	d1eb      	bne.n	800471a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474e:	4b2f      	ldr	r3, [pc, #188]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	492c      	ldr	r1, [pc, #176]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d210      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 0207 	bic.w	r2, r3, #7
 8004776:	4924      	ldr	r1, [pc, #144]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b22      	ldr	r3, [pc, #136]	; (8004808 <HAL_RCC_ClockConfig+0x1b0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e036      	b.n	80047fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4918      	ldr	r1, [pc, #96]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4910      	ldr	r1, [pc, #64]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ce:	f000 f825 	bl	800481c <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_RCC_ClockConfig+0x1b4>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490c      	ldr	r1, [pc, #48]	; (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	f003 031f 	and.w	r3, r3, #31
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe f954 	bl	8002aa0 <HAL_InitTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40022000 	.word	0x40022000
 800480c:	40021000 	.word	0x40021000
 8004810:	0800ba6c 	.word	0x0800ba6c
 8004814:	20000000 	.word	0x20000000
 8004818:	20000004 	.word	0x20000004

0800481c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800481c:	b480      	push	{r7}
 800481e:	b089      	sub	sp, #36	; 0x24
 8004820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482a:	4b3e      	ldr	r3, [pc, #248]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004834:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_GetSysClockFreq+0x34>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d121      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d11e      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004850:	4b34      	ldr	r3, [pc, #208]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800485c:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	e005      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800486c:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004878:	4a2b      	ldr	r2, [pc, #172]	; (8004928 <HAL_RCC_GetSysClockFreq+0x10c>)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004880:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10d      	bne.n	80048a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800488c:	e00a      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d102      	bne.n	800489a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_GetSysClockFreq+0x110>)
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e004      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b08      	cmp	r3, #8
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048a0:	4b23      	ldr	r3, [pc, #140]	; (8004930 <HAL_RCC_GetSysClockFreq+0x114>)
 80048a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d134      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d003      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0xac>
 80048c0:	e005      	b.n	80048ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048c2:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_GetSysClockFreq+0x110>)
 80048c4:	617b      	str	r3, [r7, #20]
      break;
 80048c6:	e005      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_GetSysClockFreq+0x114>)
 80048ca:	617b      	str	r3, [r7, #20]
      break;
 80048cc:	e002      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	617b      	str	r3, [r7, #20]
      break;
 80048d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	3301      	adds	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048e2:	4b10      	ldr	r3, [pc, #64]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	fb02 f203 	mul.w	r2, r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <HAL_RCC_GetSysClockFreq+0x108>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	0e5b      	lsrs	r3, r3, #25
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	3301      	adds	r3, #1
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004914:	69bb      	ldr	r3, [r7, #24]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	0800ba84 	.word	0x0800ba84
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200

08004934 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <HAL_RCC_GetHCLKFreq+0x14>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000000 	.word	0x20000000

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004950:	f7ff fff0 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000
 8004974:	0800ba7c 	.word	0x0800ba7c

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800497c:	f7ff ffda 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0adb      	lsrs	r3, r3, #11
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4904      	ldr	r1, [pc, #16]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	0800ba7c 	.word	0x0800ba7c

080049a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	220f      	movs	r2, #15
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_RCC_GetClockConfig+0x5c>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_RCC_GetClockConfig+0x60>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0207 	and.w	r2, r3, #7
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40022000 	.word	0x40022000

08004a08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a14:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a20:	f7ff f9d0 	bl	8003dc4 <HAL_PWREx_GetVoltageRange>
 8004a24:	6178      	str	r0, [r7, #20]
 8004a26:	e014      	b.n	8004a52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a28:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6593      	str	r3, [r2, #88]	; 0x58
 8004a34:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a40:	f7ff f9c0 	bl	8003dc4 <HAL_PWREx_GetVoltageRange>
 8004a44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d10b      	bne.n	8004a72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d919      	bls.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2ba0      	cmp	r3, #160	; 0xa0
 8004a64:	d902      	bls.n	8004a6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a66:	2302      	movs	r3, #2
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e013      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e010      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d902      	bls.n	8004a7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a78:	2303      	movs	r3, #3
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e00a      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b80      	cmp	r3, #128	; 0x80
 8004a82:	d102      	bne.n	8004a8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a84:	2302      	movs	r3, #2
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	e004      	b.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b70      	cmp	r3, #112	; 0x70
 8004a8e:	d101      	bne.n	8004a94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a90:	2301      	movs	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f023 0207 	bic.w	r2, r3, #7
 8004a9c:	4909      	ldr	r1, [pc, #36]	; (8004ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004aa4:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d001      	beq.n	8004ab6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40022000 	.word	0x40022000

08004ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d041      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aec:	d02a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004aee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004af2:	d824      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004af8:	d008      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004afe:	d81e      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b08:	d010      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b0a:	e018      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b0c:	4b86      	ldr	r3, [pc, #536]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4a85      	ldr	r2, [pc, #532]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b18:	e015      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fabb 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b2a:	e00c      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3320      	adds	r3, #32
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fba6 	bl	8005284 <RCCEx_PLLSAI2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b3c:	e003      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	74fb      	strb	r3, [r7, #19]
      break;
 8004b42:	e000      	b.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4c:	4b76      	ldr	r3, [pc, #472]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b5a:	4973      	ldr	r1, [pc, #460]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b62:	e001      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d041      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b7c:	d02a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b82:	d824      	bhi.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b88:	d008      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b8e:	d81e      	bhi.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b98:	d010      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b9a:	e018      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b9c:	4b62      	ldr	r3, [pc, #392]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a61      	ldr	r2, [pc, #388]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fa73 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bba:	e00c      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3320      	adds	r3, #32
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb5e 	bl	8005284 <RCCEx_PLLSAI2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bdc:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bea:	494f      	ldr	r1, [pc, #316]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bf2:	e001      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 80a0 	beq.w	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c0a:	4b47      	ldr	r3, [pc, #284]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c20:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c3c:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c48:	f7fe f8f6 	bl	8002e38 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c4e:	e009      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c50:	f7fe f8f2 	bl	8002e38 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d902      	bls.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	74fb      	strb	r3, [r7, #19]
        break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c64:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ef      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d15c      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c76:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01f      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d019      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ca0:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb0:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d016      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fe f8b1 	bl	8002e38 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd8:	e00b      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fe f8ad 	bl	8002e38 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d902      	bls.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	74fb      	strb	r3, [r7, #19]
            break;
 8004cf0:	e006      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ec      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d16:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d1e:	e009      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d34:	7c7b      	ldrb	r3, [r7, #17]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3a:	4b9e      	ldr	r3, [pc, #632]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	4a9d      	ldr	r2, [pc, #628]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d52:	4b98      	ldr	r3, [pc, #608]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d58:	f023 0203 	bic.w	r2, r3, #3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	4994      	ldr	r1, [pc, #592]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d74:	4b8f      	ldr	r3, [pc, #572]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 020c 	bic.w	r2, r3, #12
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	498c      	ldr	r1, [pc, #560]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d96:	4b87      	ldr	r3, [pc, #540]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4983      	ldr	r1, [pc, #524]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004db8:	4b7e      	ldr	r3, [pc, #504]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc6:	497b      	ldr	r1, [pc, #492]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dda:	4b76      	ldr	r3, [pc, #472]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de8:	4972      	ldr	r1, [pc, #456]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dfc:	4b6d      	ldr	r3, [pc, #436]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	496a      	ldr	r1, [pc, #424]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e1e:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	4961      	ldr	r1, [pc, #388]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e40:	4b5c      	ldr	r3, [pc, #368]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	4959      	ldr	r1, [pc, #356]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e62:	4b54      	ldr	r3, [pc, #336]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	4950      	ldr	r1, [pc, #320]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e84:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	4948      	ldr	r1, [pc, #288]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ea6:	4b43      	ldr	r3, [pc, #268]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb4:	493f      	ldr	r1, [pc, #252]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d028      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec8:	4b3a      	ldr	r3, [pc, #232]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed6:	4937      	ldr	r1, [pc, #220]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	e011      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004efe:	d10c      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	2101      	movs	r1, #1
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f8c8 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d028      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f26:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	491f      	ldr	r1, [pc, #124]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f44:	d106      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f50:	60d3      	str	r3, [r2, #12]
 8004f52:	e011      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f899 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02b      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f84:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f92:	4908      	ldr	r1, [pc, #32]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa2:	d109      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a02      	ldr	r2, [pc, #8]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
 8004fb0:	e014      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fb2:	bf00      	nop
 8004fb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f867 	bl	800509c <RCCEx_PLLSAI1_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd2:	7cfb      	ldrb	r3, [r7, #19]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d02f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fe8:	4b2b      	ldr	r3, [pc, #172]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff6:	4928      	ldr	r1, [pc, #160]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005006:	d10d      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	2102      	movs	r1, #2
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f844 	bl	800509c <RCCEx_PLLSAI1_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d014      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800501e:	7cfb      	ldrb	r3, [r7, #19]
 8005020:	74bb      	strb	r3, [r7, #18]
 8005022:	e011      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502c:	d10c      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3320      	adds	r3, #32
 8005032:	2102      	movs	r1, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f925 	bl	8005284 <RCCEx_PLLSAI2_Config>
 800503a:	4603      	mov	r3, r0
 800503c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800503e:	7cfb      	ldrb	r3, [r7, #19]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005044:	7cfb      	ldrb	r3, [r7, #19]
 8005046:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005054:	4b10      	ldr	r3, [pc, #64]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005062:	490d      	ldr	r1, [pc, #52]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005086:	4904      	ldr	r1, [pc, #16]	; (8005098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800508e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000

0800509c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050aa:	4b75      	ldr	r3, [pc, #468]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050b6:	4b72      	ldr	r3, [pc, #456]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0203 	and.w	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10d      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
       ||
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050ce:	4b6c      	ldr	r3, [pc, #432]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	091b      	lsrs	r3, r3, #4
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
       ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d047      	beq.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	e044      	b.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d018      	beq.n	8005122 <RCCEx_PLLSAI1_Config+0x86>
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d825      	bhi.n	8005140 <RCCEx_PLLSAI1_Config+0xa4>
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d002      	beq.n	80050fe <RCCEx_PLLSAI1_Config+0x62>
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d009      	beq.n	8005110 <RCCEx_PLLSAI1_Config+0x74>
 80050fc:	e020      	b.n	8005140 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050fe:	4b60      	ldr	r3, [pc, #384]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11d      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800510e:	e01a      	b.n	8005146 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005110:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005120:	e013      	b.n	800514a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005122:	4b57      	ldr	r3, [pc, #348]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800512e:	4b54      	ldr	r3, [pc, #336]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800513e:	e006      	b.n	800514e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e004      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800514e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005156:	4b4a      	ldr	r3, [pc, #296]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	430b      	orrs	r3, r1
 800516c:	4944      	ldr	r1, [pc, #272]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d17d      	bne.n	8005274 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005178:	4b41      	ldr	r3, [pc, #260]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a40      	ldr	r2, [pc, #256]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005184:	f7fd fe58 	bl	8002e38 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800518a:	e009      	b.n	80051a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800518c:	f7fd fe54 	bl	8002e38 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	73fb      	strb	r3, [r7, #15]
        break;
 800519e:	e005      	b.n	80051ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051a0:	4b37      	ldr	r3, [pc, #220]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ef      	bne.n	800518c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d160      	bne.n	8005274 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6892      	ldr	r2, [r2, #8]
 80051c8:	0211      	lsls	r1, r2, #8
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68d2      	ldr	r2, [r2, #12]
 80051ce:	0912      	lsrs	r2, r2, #4
 80051d0:	0452      	lsls	r2, r2, #17
 80051d2:	430a      	orrs	r2, r1
 80051d4:	492a      	ldr	r1, [pc, #168]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	610b      	str	r3, [r1, #16]
 80051da:	e027      	b.n	800522c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d112      	bne.n	8005208 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80051ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6892      	ldr	r2, [r2, #8]
 80051f2:	0211      	lsls	r1, r2, #8
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6912      	ldr	r2, [r2, #16]
 80051f8:	0852      	lsrs	r2, r2, #1
 80051fa:	3a01      	subs	r2, #1
 80051fc:	0552      	lsls	r2, r2, #21
 80051fe:	430a      	orrs	r2, r1
 8005200:	491f      	ldr	r1, [pc, #124]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	610b      	str	r3, [r1, #16]
 8005206:	e011      	b.n	800522c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6892      	ldr	r2, [r2, #8]
 8005218:	0211      	lsls	r1, r2, #8
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6952      	ldr	r2, [r2, #20]
 800521e:	0852      	lsrs	r2, r2, #1
 8005220:	3a01      	subs	r2, #1
 8005222:	0652      	lsls	r2, r2, #25
 8005224:	430a      	orrs	r2, r1
 8005226:	4916      	ldr	r1, [pc, #88]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a13      	ldr	r2, [pc, #76]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005238:	f7fd fdfe 	bl	8002e38 <HAL_GetTick>
 800523c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800523e:	e009      	b.n	8005254 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005240:	f7fd fdfa 	bl	8002e38 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	73fb      	strb	r3, [r7, #15]
          break;
 8005252:	e005      	b.n	8005260 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005254:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0ef      	beq.n	8005240 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	4904      	ldr	r1, [pc, #16]	; (8005280 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000

08005284 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005292:	4b6a      	ldr	r3, [pc, #424]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d018      	beq.n	80052d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800529e:	4b67      	ldr	r3, [pc, #412]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0203 	and.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d10d      	bne.n	80052ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
       ||
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052b6:	4b61      	ldr	r3, [pc, #388]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
       ||
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d047      	beq.n	800535a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
 80052ce:	e044      	b.n	800535a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d018      	beq.n	800530a <RCCEx_PLLSAI2_Config+0x86>
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d825      	bhi.n	8005328 <RCCEx_PLLSAI2_Config+0xa4>
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d002      	beq.n	80052e6 <RCCEx_PLLSAI2_Config+0x62>
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d009      	beq.n	80052f8 <RCCEx_PLLSAI2_Config+0x74>
 80052e4:	e020      	b.n	8005328 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052e6:	4b55      	ldr	r3, [pc, #340]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11d      	bne.n	800532e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f6:	e01a      	b.n	800532e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052f8:	4b50      	ldr	r3, [pc, #320]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005300:	2b00      	cmp	r3, #0
 8005302:	d116      	bne.n	8005332 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005308:	e013      	b.n	8005332 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800530a:	4b4c      	ldr	r3, [pc, #304]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005316:	4b49      	ldr	r3, [pc, #292]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005326:	e006      	b.n	8005336 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      break;
 800532c:	e004      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005336:	bf00      	nop
    }

    if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6819      	ldr	r1, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	430b      	orrs	r3, r1
 8005354:	4939      	ldr	r1, [pc, #228]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005356:	4313      	orrs	r3, r2
 8005358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d167      	bne.n	8005430 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a35      	ldr	r2, [pc, #212]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800536a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536c:	f7fd fd64 	bl	8002e38 <HAL_GetTick>
 8005370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005372:	e009      	b.n	8005388 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005374:	f7fd fd60 	bl	8002e38 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d902      	bls.n	8005388 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	73fb      	strb	r3, [r7, #15]
        break;
 8005386:	e005      	b.n	8005394 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005388:	4b2c      	ldr	r3, [pc, #176]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1ef      	bne.n	8005374 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d14a      	bne.n	8005430 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d111      	bne.n	80053c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053a0:	4b26      	ldr	r3, [pc, #152]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6892      	ldr	r2, [r2, #8]
 80053b0:	0211      	lsls	r1, r2, #8
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	0912      	lsrs	r2, r2, #4
 80053b8:	0452      	lsls	r2, r2, #17
 80053ba:	430a      	orrs	r2, r1
 80053bc:	491f      	ldr	r1, [pc, #124]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	614b      	str	r3, [r1, #20]
 80053c2:	e011      	b.n	80053e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6892      	ldr	r2, [r2, #8]
 80053d4:	0211      	lsls	r1, r2, #8
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6912      	ldr	r2, [r2, #16]
 80053da:	0852      	lsrs	r2, r2, #1
 80053dc:	3a01      	subs	r2, #1
 80053de:	0652      	lsls	r2, r2, #25
 80053e0:	430a      	orrs	r2, r1
 80053e2:	4916      	ldr	r1, [pc, #88]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fd fd20 	bl	8002e38 <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053fa:	e009      	b.n	8005410 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053fc:	f7fd fd1c 	bl	8002e38 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
          break;
 800540e:	e005      	b.n	800541c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4904      	ldr	r1, [pc, #16]	; (800543c <RCCEx_PLLSAI2_Config+0x1b8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000

08005440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e049      	b.n	80054e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f841 	bl	80054ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f000 f9f8 	bl	8005874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e04f      	b.n	80055bc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01d      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d018      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <HAL_TIM_Base_Start_IT+0xc8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00e      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIM_Base_Start_IT+0x76>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d115      	bne.n	80055a6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b17      	ldr	r3, [pc, #92]	; (80055e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005582:	4013      	ands	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b06      	cmp	r3, #6
 800558a:	d015      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005592:	d011      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	e008      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e000      	b.n	80055ba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	00010007 	.word	0x00010007

080055e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f905 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8f7 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f908 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0204 	mvn.w	r2, #4
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8db 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8cd 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8de 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8b1 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8a3 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8b4 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f887 	bl	8005836 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f879 	bl	8005822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f88a 	bl	800584a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fd f8d6 	bl	8002914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f914 	bl	80059bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d10e      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d107      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f907 	bl	80059d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d10e      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d107      	bne.n	80057ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f838 	bl	800585e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d10e      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b20      	cmp	r3, #32
 8005808:	d107      	bne.n	800581a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0220 	mvn.w	r2, #32
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f8c7 	bl	80059a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581a:	bf00      	nop
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585e:	b480      	push	{r7}
 8005860:	b083      	sub	sp, #12
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a40      	ldr	r2, [pc, #256]	; (8005988 <TIM_Base_SetConfig+0x114>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d013      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a3d      	ldr	r2, [pc, #244]	; (800598c <TIM_Base_SetConfig+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3c      	ldr	r2, [pc, #240]	; (8005990 <TIM_Base_SetConfig+0x11c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3b      	ldr	r2, [pc, #236]	; (8005994 <TIM_Base_SetConfig+0x120>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3a      	ldr	r2, [pc, #232]	; (8005998 <TIM_Base_SetConfig+0x124>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <TIM_Base_SetConfig+0x114>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01f      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d4:	d01b      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2c      	ldr	r2, [pc, #176]	; (800598c <TIM_Base_SetConfig+0x118>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d017      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	; (8005990 <TIM_Base_SetConfig+0x11c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <TIM_Base_SetConfig+0x120>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00f      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a29      	ldr	r2, [pc, #164]	; (8005998 <TIM_Base_SetConfig+0x124>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00b      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a28      	ldr	r2, [pc, #160]	; (800599c <TIM_Base_SetConfig+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a27      	ldr	r2, [pc, #156]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d003      	beq.n	800590e <TIM_Base_SetConfig+0x9a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d108      	bne.n	8005920 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a10      	ldr	r2, [pc, #64]	; (8005988 <TIM_Base_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <TIM_Base_SetConfig+0x124>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a11      	ldr	r2, [pc, #68]	; (800599c <TIM_Base_SetConfig+0x128>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a10      	ldr	r2, [pc, #64]	; (80059a0 <TIM_Base_SetConfig+0x12c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0xf8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0f      	ldr	r2, [pc, #60]	; (80059a4 <TIM_Base_SetConfig+0x130>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	615a      	str	r2, [r3, #20]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e040      	b.n	8005a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f808 	bl	8002a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f8c0 	bl	8005ba8 <UART_SetConfig>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e022      	b.n	8005a78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fb3e 	bl	80060bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fbc5 	bl	8006200 <UART_CheckIdleState>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	f040 8082 	bne.w	8005b9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_UART_Transmit+0x26>
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e07a      	b.n	8005ba0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_UART_Transmit+0x38>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e073      	b.n	8005ba0 <HAL_UART_Transmit+0x120>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2221      	movs	r2, #33	; 0x21
 8005acc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ace:	f7fd f9b3 	bl	8002e38 <HAL_GetTick>
 8005ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	88fa      	ldrh	r2, [r7, #6]
 8005ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aec:	d108      	bne.n	8005b00 <HAL_UART_Transmit+0x80>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e003      	b.n	8005b08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b10:	e02d      	b.n	8005b6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fbb8 	bl	8006292 <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e039      	b.n	8005ba0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b3e:	b292      	uxth	r2, r2
 8005b40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3302      	adds	r3, #2
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e008      	b.n	8005b5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	b292      	uxth	r2, r2
 8005b54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1cb      	bne.n	8005b12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2200      	movs	r2, #0
 8005b82:	2140      	movs	r1, #64	; 0x40
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fb84 	bl	8006292 <UART_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e005      	b.n	8005ba0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4bad      	ldr	r3, [pc, #692]	; (8005e88 <UART_SetConfig+0x2e0>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	69f9      	ldr	r1, [r7, #28]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4aa2      	ldr	r2, [pc, #648]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d004      	beq.n	8005c10 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a99      	ldr	r2, [pc, #612]	; (8005e90 <UART_SetConfig+0x2e8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d121      	bne.n	8005c72 <UART_SetConfig+0xca>
 8005c2e:	4b99      	ldr	r3, [pc, #612]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d817      	bhi.n	8005c6c <UART_SetConfig+0xc4>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <UART_SetConfig+0x9c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c5b 	.word	0x08005c5b
 8005c50:	08005c67 	.word	0x08005c67
 8005c54:	2301      	movs	r3, #1
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e0e7      	b.n	8005e2a <UART_SetConfig+0x282>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e0e4      	b.n	8005e2a <UART_SetConfig+0x282>
 8005c60:	2304      	movs	r3, #4
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e0e1      	b.n	8005e2a <UART_SetConfig+0x282>
 8005c66:	2308      	movs	r3, #8
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e0de      	b.n	8005e2a <UART_SetConfig+0x282>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	e0db      	b.n	8005e2a <UART_SetConfig+0x282>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a88      	ldr	r2, [pc, #544]	; (8005e98 <UART_SetConfig+0x2f0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d132      	bne.n	8005ce2 <UART_SetConfig+0x13a>
 8005c7c:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d828      	bhi.n	8005cdc <UART_SetConfig+0x134>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0xe8>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005cdd 	.word	0x08005cdd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005ccb 	.word	0x08005ccb
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005cd7 	.word	0x08005cd7
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e0af      	b.n	8005e2a <UART_SetConfig+0x282>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e0ac      	b.n	8005e2a <UART_SetConfig+0x282>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	76fb      	strb	r3, [r7, #27]
 8005cd4:	e0a9      	b.n	8005e2a <UART_SetConfig+0x282>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	76fb      	strb	r3, [r7, #27]
 8005cda:	e0a6      	b.n	8005e2a <UART_SetConfig+0x282>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	76fb      	strb	r3, [r7, #27]
 8005ce0:	e0a3      	b.n	8005e2a <UART_SetConfig+0x282>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6d      	ldr	r2, [pc, #436]	; (8005e9c <UART_SetConfig+0x2f4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d120      	bne.n	8005d2e <UART_SetConfig+0x186>
 8005cec:	4b69      	ldr	r3, [pc, #420]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cf6:	2b30      	cmp	r3, #48	; 0x30
 8005cf8:	d013      	beq.n	8005d22 <UART_SetConfig+0x17a>
 8005cfa:	2b30      	cmp	r3, #48	; 0x30
 8005cfc:	d814      	bhi.n	8005d28 <UART_SetConfig+0x180>
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d009      	beq.n	8005d16 <UART_SetConfig+0x16e>
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d810      	bhi.n	8005d28 <UART_SetConfig+0x180>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <UART_SetConfig+0x168>
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d006      	beq.n	8005d1c <UART_SetConfig+0x174>
 8005d0e:	e00b      	b.n	8005d28 <UART_SetConfig+0x180>
 8005d10:	2300      	movs	r3, #0
 8005d12:	76fb      	strb	r3, [r7, #27]
 8005d14:	e089      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d16:	2302      	movs	r3, #2
 8005d18:	76fb      	strb	r3, [r7, #27]
 8005d1a:	e086      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	76fb      	strb	r3, [r7, #27]
 8005d20:	e083      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d22:	2308      	movs	r3, #8
 8005d24:	76fb      	strb	r3, [r7, #27]
 8005d26:	e080      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	76fb      	strb	r3, [r7, #27]
 8005d2c:	e07d      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a5b      	ldr	r2, [pc, #364]	; (8005ea0 <UART_SetConfig+0x2f8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <UART_SetConfig+0x1d2>
 8005d38:	4b56      	ldr	r3, [pc, #344]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d42:	2bc0      	cmp	r3, #192	; 0xc0
 8005d44:	d013      	beq.n	8005d6e <UART_SetConfig+0x1c6>
 8005d46:	2bc0      	cmp	r3, #192	; 0xc0
 8005d48:	d814      	bhi.n	8005d74 <UART_SetConfig+0x1cc>
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x1ba>
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d810      	bhi.n	8005d74 <UART_SetConfig+0x1cc>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <UART_SetConfig+0x1b4>
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d006      	beq.n	8005d68 <UART_SetConfig+0x1c0>
 8005d5a:	e00b      	b.n	8005d74 <UART_SetConfig+0x1cc>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	76fb      	strb	r3, [r7, #27]
 8005d60:	e063      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d62:	2302      	movs	r3, #2
 8005d64:	76fb      	strb	r3, [r7, #27]
 8005d66:	e060      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	76fb      	strb	r3, [r7, #27]
 8005d6c:	e05d      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d6e:	2308      	movs	r3, #8
 8005d70:	76fb      	strb	r3, [r7, #27]
 8005d72:	e05a      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d74:	2310      	movs	r3, #16
 8005d76:	76fb      	strb	r3, [r7, #27]
 8005d78:	e057      	b.n	8005e2a <UART_SetConfig+0x282>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a49      	ldr	r2, [pc, #292]	; (8005ea4 <UART_SetConfig+0x2fc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d125      	bne.n	8005dd0 <UART_SetConfig+0x228>
 8005d84:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d92:	d017      	beq.n	8005dc4 <UART_SetConfig+0x21c>
 8005d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d98:	d817      	bhi.n	8005dca <UART_SetConfig+0x222>
 8005d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9e:	d00b      	beq.n	8005db8 <UART_SetConfig+0x210>
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da4:	d811      	bhi.n	8005dca <UART_SetConfig+0x222>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <UART_SetConfig+0x20a>
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dae:	d006      	beq.n	8005dbe <UART_SetConfig+0x216>
 8005db0:	e00b      	b.n	8005dca <UART_SetConfig+0x222>
 8005db2:	2300      	movs	r3, #0
 8005db4:	76fb      	strb	r3, [r7, #27]
 8005db6:	e038      	b.n	8005e2a <UART_SetConfig+0x282>
 8005db8:	2302      	movs	r3, #2
 8005dba:	76fb      	strb	r3, [r7, #27]
 8005dbc:	e035      	b.n	8005e2a <UART_SetConfig+0x282>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	76fb      	strb	r3, [r7, #27]
 8005dc2:	e032      	b.n	8005e2a <UART_SetConfig+0x282>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	76fb      	strb	r3, [r7, #27]
 8005dc8:	e02f      	b.n	8005e2a <UART_SetConfig+0x282>
 8005dca:	2310      	movs	r3, #16
 8005dcc:	76fb      	strb	r3, [r7, #27]
 8005dce:	e02c      	b.n	8005e2a <UART_SetConfig+0x282>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d125      	bne.n	8005e26 <UART_SetConfig+0x27e>
 8005dda:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <UART_SetConfig+0x2ec>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de8:	d017      	beq.n	8005e1a <UART_SetConfig+0x272>
 8005dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dee:	d817      	bhi.n	8005e20 <UART_SetConfig+0x278>
 8005df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df4:	d00b      	beq.n	8005e0e <UART_SetConfig+0x266>
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d811      	bhi.n	8005e20 <UART_SetConfig+0x278>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <UART_SetConfig+0x260>
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d006      	beq.n	8005e14 <UART_SetConfig+0x26c>
 8005e06:	e00b      	b.n	8005e20 <UART_SetConfig+0x278>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e00d      	b.n	8005e2a <UART_SetConfig+0x282>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	76fb      	strb	r3, [r7, #27]
 8005e12:	e00a      	b.n	8005e2a <UART_SetConfig+0x282>
 8005e14:	2304      	movs	r3, #4
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e007      	b.n	8005e2a <UART_SetConfig+0x282>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e004      	b.n	8005e2a <UART_SetConfig+0x282>
 8005e20:	2310      	movs	r3, #16
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	e001      	b.n	8005e2a <UART_SetConfig+0x282>
 8005e26:	2310      	movs	r3, #16
 8005e28:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <UART_SetConfig+0x2e4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	f040 8087 	bne.w	8005f44 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e36:	7efb      	ldrb	r3, [r7, #27]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d837      	bhi.n	8005eac <UART_SetConfig+0x304>
 8005e3c:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <UART_SetConfig+0x29c>)
 8005e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e42:	bf00      	nop
 8005e44:	08005e69 	.word	0x08005e69
 8005e48:	08005ead 	.word	0x08005ead
 8005e4c:	08005e71 	.word	0x08005e71
 8005e50:	08005ead 	.word	0x08005ead
 8005e54:	08005e77 	.word	0x08005e77
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005ead 	.word	0x08005ead
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005e7f 	.word	0x08005e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e68:	f7fe fd70 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8005e6c:	6178      	str	r0, [r7, #20]
        break;
 8005e6e:	e022      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <UART_SetConfig+0x300>)
 8005e72:	617b      	str	r3, [r7, #20]
        break;
 8005e74:	e01f      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fe fcd1 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8005e7a:	6178      	str	r0, [r7, #20]
        break;
 8005e7c:	e01b      	b.n	8005eb6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e82:	617b      	str	r3, [r7, #20]
        break;
 8005e84:	e017      	b.n	8005eb6 <UART_SetConfig+0x30e>
 8005e86:	bf00      	nop
 8005e88:	efff69f3 	.word	0xefff69f3
 8005e8c:	40008000 	.word	0x40008000
 8005e90:	40013800 	.word	0x40013800
 8005e94:	40021000 	.word	0x40021000
 8005e98:	40004400 	.word	0x40004400
 8005e9c:	40004800 	.word	0x40004800
 8005ea0:	40004c00 	.word	0x40004c00
 8005ea4:	40005000 	.word	0x40005000
 8005ea8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	76bb      	strb	r3, [r7, #26]
        break;
 8005eb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 80f1 	beq.w	80060a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	4413      	add	r3, r2
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d305      	bcc.n	8005eda <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d902      	bls.n	8005ee0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	76bb      	strb	r3, [r7, #26]
 8005ede:	e0df      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	020b      	lsls	r3, r1, #8
 8005ef2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ef6:	0202      	lsls	r2, r0, #8
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	6849      	ldr	r1, [r1, #4]
 8005efc:	0849      	lsrs	r1, r1, #1
 8005efe:	4608      	mov	r0, r1
 8005f00:	f04f 0100 	mov.w	r1, #0
 8005f04:	1814      	adds	r4, r2, r0
 8005f06:	eb43 0501 	adc.w	r5, r3, r1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	4620      	mov	r0, r4
 8005f16:	4629      	mov	r1, r5
 8005f18:	f7fa fee6 	bl	8000ce8 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4613      	mov	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f2a:	d308      	bcc.n	8005f3e <UART_SetConfig+0x396>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f32:	d204      	bcs.n	8005f3e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	60da      	str	r2, [r3, #12]
 8005f3c:	e0b0      	b.n	80060a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	76bb      	strb	r3, [r7, #26]
 8005f42:	e0ad      	b.n	80060a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4c:	d15c      	bne.n	8006008 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f4e:	7efb      	ldrb	r3, [r7, #27]
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d828      	bhi.n	8005fa6 <UART_SetConfig+0x3fe>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x3b4>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f81 	.word	0x08005f81
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f91 	.word	0x08005f91
 8005f68:	08005fa7 	.word	0x08005fa7
 8005f6c:	08005f97 	.word	0x08005f97
 8005f70:	08005fa7 	.word	0x08005fa7
 8005f74:	08005fa7 	.word	0x08005fa7
 8005f78:	08005fa7 	.word	0x08005fa7
 8005f7c:	08005f9f 	.word	0x08005f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f80:	f7fe fce4 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8005f84:	6178      	str	r0, [r7, #20]
        break;
 8005f86:	e013      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f88:	f7fe fcf6 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8005f8c:	6178      	str	r0, [r7, #20]
        break;
 8005f8e:	e00f      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f90:	4b49      	ldr	r3, [pc, #292]	; (80060b8 <UART_SetConfig+0x510>)
 8005f92:	617b      	str	r3, [r7, #20]
        break;
 8005f94:	e00c      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f96:	f7fe fc41 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8005f9a:	6178      	str	r0, [r7, #20]
        break;
 8005f9c:	e008      	b.n	8005fb0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa2:	617b      	str	r3, [r7, #20]
        break;
 8005fa4:	e004      	b.n	8005fb0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	76bb      	strb	r3, [r7, #26]
        break;
 8005fae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d074      	beq.n	80060a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	005a      	lsls	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	441a      	add	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d916      	bls.n	8006002 <UART_SetConfig+0x45a>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fda:	d212      	bcs.n	8006002 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f023 030f 	bic.w	r3, r3, #15
 8005fe4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	085b      	lsrs	r3, r3, #1
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	89fb      	ldrh	r3, [r7, #14]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	89fa      	ldrh	r2, [r7, #14]
 8005ffe:	60da      	str	r2, [r3, #12]
 8006000:	e04e      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	76bb      	strb	r3, [r7, #26]
 8006006:	e04b      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006008:	7efb      	ldrb	r3, [r7, #27]
 800600a:	2b08      	cmp	r3, #8
 800600c:	d827      	bhi.n	800605e <UART_SetConfig+0x4b6>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0x46c>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	0800605f 	.word	0x0800605f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800605f 	.word	0x0800605f
 800602c:	0800605f 	.word	0x0800605f
 8006030:	0800605f 	.word	0x0800605f
 8006034:	08006057 	.word	0x08006057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fe fc88 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 800603c:	6178      	str	r0, [r7, #20]
        break;
 800603e:	e013      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fe fc9a 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8006044:	6178      	str	r0, [r7, #20]
        break;
 8006046:	e00f      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <UART_SetConfig+0x510>)
 800604a:	617b      	str	r3, [r7, #20]
        break;
 800604c:	e00c      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604e:	f7fe fbe5 	bl	800481c <HAL_RCC_GetSysClockFreq>
 8006052:	6178      	str	r0, [r7, #20]
        break;
 8006054:	e008      	b.n	8006068 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605a:	617b      	str	r3, [r7, #20]
        break;
 800605c:	e004      	b.n	8006068 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	76bb      	strb	r3, [r7, #26]
        break;
 8006066:	bf00      	nop
    }

    if (pclk != 0U)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d018      	beq.n	80060a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	085a      	lsrs	r2, r3, #1
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	441a      	add	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b0f      	cmp	r3, #15
 8006088:	d908      	bls.n	800609c <UART_SetConfig+0x4f4>
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006090:	d204      	bcs.n	800609c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	e001      	b.n	80060a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bdb0      	pop	{r4, r5, r7, pc}
 80060b6:	bf00      	nop
 80060b8:	00f42400 	.word	0x00f42400

080060bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061ba:	d10a      	bne.n	80061d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af02      	add	r7, sp, #8
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006210:	f7fc fe12 	bl	8002e38 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b08      	cmp	r3, #8
 8006222:	d10e      	bne.n	8006242 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f82d 	bl	8006292 <UART_WaitOnFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e023      	b.n	800628a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d10e      	bne.n	800626e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f817 	bl	8006292 <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e00d      	b.n	800628a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a2:	e05e      	b.n	8006362 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062aa:	d05a      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ac:	f7fc fdc4 	bl	8002e38 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d302      	bcc.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11b      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e043      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d02c      	beq.n	8006362 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006316:	d124      	bne.n	8006362 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006320:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006330:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 0201 	bic.w	r2, r2, #1
 8006340:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2220      	movs	r2, #32
 8006346:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2220      	movs	r2, #32
 800634c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e00f      	b.n	8006382 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	429a      	cmp	r2, r3
 800637e:	d091      	beq.n	80062a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <__NVIC_SetPriority>:
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	6039      	str	r1, [r7, #0]
 8006396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639c:	2b00      	cmp	r3, #0
 800639e:	db0a      	blt.n	80063b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <__NVIC_SetPriority+0x4c>)
 80063a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063aa:	0112      	lsls	r2, r2, #4
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	440b      	add	r3, r1
 80063b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80063b4:	e00a      	b.n	80063cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	4908      	ldr	r1, [pc, #32]	; (80063dc <__NVIC_SetPriority+0x50>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	3b04      	subs	r3, #4
 80063c4:	0112      	lsls	r2, r2, #4
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	440b      	add	r3, r1
 80063ca:	761a      	strb	r2, [r3, #24]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000e100 	.word	0xe000e100
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <SysTick_Handler+0x1c>)
 80063e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063e8:	f001 fcfe 	bl	8007de8 <xTaskGetSchedulerState>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d001      	beq.n	80063f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063f2:	f002 fae9 	bl	80089c8 <xPortSysTickHandler>
  }
}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	e000e010 	.word	0xe000e010

08006400 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006404:	2100      	movs	r1, #0
 8006406:	f06f 0004 	mvn.w	r0, #4
 800640a:	f7ff ffbf 	bl	800638c <__NVIC_SetPriority>
#endif
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641a:	f3ef 8305 	mrs	r3, IPSR
 800641e:	603b      	str	r3, [r7, #0]
  return(result);
 8006420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006426:	f06f 0305 	mvn.w	r3, #5
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e00c      	b.n	8006448 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <osKernelInitialize+0x44>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d105      	bne.n	8006442 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006436:	4b08      	ldr	r3, [pc, #32]	; (8006458 <osKernelInitialize+0x44>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800643c:	2300      	movs	r3, #0
 800643e:	607b      	str	r3, [r7, #4]
 8006440:	e002      	b.n	8006448 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006446:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006448:	687b      	ldr	r3, [r7, #4]
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20000200 	.word	0x20000200

0800645c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006462:	f3ef 8305 	mrs	r3, IPSR
 8006466:	603b      	str	r3, [r7, #0]
  return(result);
 8006468:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <osKernelStart+0x1a>
    stat = osErrorISR;
 800646e:	f06f 0305 	mvn.w	r3, #5
 8006472:	607b      	str	r3, [r7, #4]
 8006474:	e010      	b.n	8006498 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <osKernelStart+0x48>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d109      	bne.n	8006492 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800647e:	f7ff ffbf 	bl	8006400 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006482:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <osKernelStart+0x48>)
 8006484:	2202      	movs	r2, #2
 8006486:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006488:	f001 f866 	bl	8007558 <vTaskStartScheduler>
      stat = osOK;
 800648c:	2300      	movs	r3, #0
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	e002      	b.n	8006498 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006498:	687b      	ldr	r3, [r7, #4]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000200 	.word	0x20000200

080064a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08e      	sub	sp, #56	; 0x38
 80064ac:	af04      	add	r7, sp, #16
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b8:	f3ef 8305 	mrs	r3, IPSR
 80064bc:	617b      	str	r3, [r7, #20]
  return(result);
 80064be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d17e      	bne.n	80065c2 <osThreadNew+0x11a>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d07b      	beq.n	80065c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064ce:	2318      	movs	r3, #24
 80064d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d045      	beq.n	800656e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osThreadNew+0x48>
        name = attr->name;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <osThreadNew+0x6e>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b38      	cmp	r3, #56	; 0x38
 8006508:	d805      	bhi.n	8006516 <osThreadNew+0x6e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <osThreadNew+0x72>
        return (NULL);
 8006516:	2300      	movs	r3, #0
 8006518:	e054      	b.n	80065c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	089b      	lsrs	r3, r3, #2
 8006528:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <osThreadNew+0xa8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b5b      	cmp	r3, #91	; 0x5b
 8006538:	d90a      	bls.n	8006550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800653e:	2b00      	cmp	r3, #0
 8006540:	d006      	beq.n	8006550 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <osThreadNew+0xa8>
        mem = 1;
 800654a:	2301      	movs	r3, #1
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	e010      	b.n	8006572 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10c      	bne.n	8006572 <osThreadNew+0xca>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d108      	bne.n	8006572 <osThreadNew+0xca>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <osThreadNew+0xca>
          mem = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e001      	b.n	8006572 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800656e:	2300      	movs	r3, #0
 8006570:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d110      	bne.n	800659a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006580:	9202      	str	r2, [sp, #8]
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 fe0c 	bl	80071ac <xTaskCreateStatic>
 8006594:	4603      	mov	r3, r0
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e013      	b.n	80065c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d110      	bne.n	80065c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	f107 0310 	add.w	r3, r7, #16
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 fe57 	bl	8007266 <xTaskCreate>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d001      	beq.n	80065c2 <osThreadNew+0x11a>
            hTask = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065c2:	693b      	ldr	r3, [r7, #16]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3728      	adds	r7, #40	; 0x28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80065da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <osDelay+0x1c>
    stat = osErrorISR;
 80065e0:	f06f 0305 	mvn.w	r3, #5
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e007      	b.n	80065f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 ff7c 	bl	80074f0 <vTaskDelay>
    }
  }

  return (stat);
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a07      	ldr	r2, [pc, #28]	; (8006630 <vApplicationGetIdleTaskMemory+0x2c>)
 8006614:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	4a06      	ldr	r2, [pc, #24]	; (8006634 <vApplicationGetIdleTaskMemory+0x30>)
 800661a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	601a      	str	r2, [r3, #0]
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	20000204 	.word	0x20000204
 8006634:	20000260 	.word	0x20000260

08006638 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a07      	ldr	r2, [pc, #28]	; (8006664 <vApplicationGetTimerTaskMemory+0x2c>)
 8006648:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4a06      	ldr	r2, [pc, #24]	; (8006668 <vApplicationGetTimerTaskMemory+0x30>)
 800664e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006656:	601a      	str	r2, [r3, #0]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	20000460 	.word	0x20000460
 8006668:	200004bc 	.word	0x200004bc

0800666c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f103 0208 	add.w	r2, r3, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006684:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f103 0208 	add.w	r2, r3, #8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f103 0208 	add.w	r2, r3, #8
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d103      	bne.n	800672e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e00c      	b.n	8006748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3308      	adds	r3, #8
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e002      	b.n	800673c <vListInsert+0x2e>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	d2f6      	bcs.n	8006736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6892      	ldr	r2, [r2, #8]
 8006796:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6852      	ldr	r2, [r2, #4]
 80067a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d103      	bne.n	80067b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067fe:	f002 f851 	bl	80088a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	441a      	add	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	3b01      	subs	r3, #1
 8006830:	68f9      	ldr	r1, [r7, #12]
 8006832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	441a      	add	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	22ff      	movs	r2, #255	; 0xff
 8006842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d114      	bne.n	800687e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01a      	beq.n	8006892 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3310      	adds	r3, #16
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f903 	bl	8007a6c <xTaskRemoveFromEventList>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d012      	beq.n	8006892 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <xQueueGenericReset+0xcc>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	e009      	b.n	8006892 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3310      	adds	r3, #16
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fef2 	bl	800666c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3324      	adds	r3, #36	; 0x24
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff feed 	bl	800666c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006892:	f002 f837 	bl	8008904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006896:	2301      	movs	r3, #1
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08e      	sub	sp, #56	; 0x38
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <xQueueGenericCreateStatic+0x52>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <xQueueGenericCreateStatic+0x56>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <xQueueGenericCreateStatic+0x58>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	623b      	str	r3, [r7, #32]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d102      	bne.n	8006922 <xQueueGenericCreateStatic+0x7e>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <xQueueGenericCreateStatic+0x82>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <xQueueGenericCreateStatic+0x84>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	61fb      	str	r3, [r7, #28]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006942:	2350      	movs	r3, #80	; 0x50
 8006944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d00a      	beq.n	8006962 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61bb      	str	r3, [r7, #24]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006962:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00d      	beq.n	800698a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 f805 	bl	8006994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800698c:	4618      	mov	r0, r3
 800698e:	3730      	adds	r7, #48	; 0x30
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069c2:	2101      	movs	r1, #1
 80069c4:	69b8      	ldr	r0, [r7, #24]
 80069c6:	f7ff ff05 	bl	80067d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	78fa      	ldrb	r2, [r7, #3]
 80069ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	; 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueGenericSend+0x32>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueGenericSend+0x40>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueGenericSend+0x44>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueGenericSend+0x46>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <xQueueGenericSend+0x60>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSend+0x6e>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d101      	bne.n	8006a4e <xQueueGenericSend+0x72>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <xQueueGenericSend+0x74>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xQueueGenericSend+0x8e>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a6a:	f001 f9bd 	bl	8007de8 <xTaskGetSchedulerState>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <xQueueGenericSend+0x9e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <xQueueGenericSend+0xa2>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericSend+0xa4>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueGenericSend+0xbe>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	61fb      	str	r3, [r7, #28]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a9a:	f001 ff03 	bl	80088a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <xQueueGenericSend+0xd4>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d129      	bne.n	8006b04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab6:	f000 fa0b 	bl	8006ed0 <prvCopyDataToQueue>
 8006aba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d010      	beq.n	8006ae6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	3324      	adds	r3, #36	; 0x24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ffcf 	bl	8007a6c <xTaskRemoveFromEventList>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d013      	beq.n	8006afc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b3f      	ldr	r3, [pc, #252]	; (8006bd4 <xQueueGenericSend+0x1f8>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e00a      	b.n	8006afc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006aec:	4b39      	ldr	r3, [pc, #228]	; (8006bd4 <xQueueGenericSend+0x1f8>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006afc:	f001 ff02 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e063      	b.n	8006bcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b0a:	f001 fefb 	bl	8008904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e05c      	b.n	8006bcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f809 	bl	8007b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b22:	2301      	movs	r3, #1
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b26:	f001 feed 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b2a:	f000 fd7b 	bl	8007624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2e:	f001 feb9 	bl	80088a4 <vPortEnterCritical>
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b38:	b25b      	sxtb	r3, r3
 8006b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3e:	d103      	bne.n	8006b48 <xQueueGenericSend+0x16c>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b4e:	b25b      	sxtb	r3, r3
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0x182>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b5e:	f001 fed1 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b62:	1d3a      	adds	r2, r7, #4
 8006b64:	f107 0314 	add.w	r3, r7, #20
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fff8 	bl	8007b60 <xTaskCheckForTimeOut>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d124      	bne.n	8006bc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b78:	f000 faa2 	bl	80070c0 <prvIsQueueFull>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	3310      	adds	r3, #16
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 ff1e 	bl	80079cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b92:	f000 fa2d 	bl	8006ff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b96:	f000 fd53 	bl	8007640 <xTaskResumeAll>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f47f af7c 	bne.w	8006a9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <xQueueGenericSend+0x1f8>)
 8006ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	e772      	b.n	8006a9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa1b 	bl	8006ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bba:	f000 fd41 	bl	8007640 <xTaskResumeAll>
 8006bbe:	e76c      	b.n	8006a9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bc2:	f000 fa15 	bl	8006ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bc6:	f000 fd3b 	bl	8007640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3738      	adds	r7, #56	; 0x38
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b090      	sub	sp, #64	; 0x40
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d103      	bne.n	8006c14 <xQueueGenericSendFromISR+0x3c>
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <xQueueGenericSendFromISR+0x40>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <xQueueGenericSendFromISR+0x42>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d103      	bne.n	8006c42 <xQueueGenericSendFromISR+0x6a>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <xQueueGenericSendFromISR+0x6e>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <xQueueGenericSendFromISR+0x70>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c62:	f001 ff01 	bl	8008a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c66:	f3ef 8211 	mrs	r2, BASEPRI
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	61fa      	str	r2, [r7, #28]
 8006c7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <xQueueGenericSendFromISR+0xbc>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d12f      	bne.n	8006cf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ca4:	683a      	ldr	r2, [r7, #0]
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006caa:	f000 f911 	bl	8006ed0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cb6:	d112      	bne.n	8006cde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d016      	beq.n	8006cee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	3324      	adds	r3, #36	; 0x24
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fed1 	bl	8007a6c <xTaskRemoveFromEventList>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00b      	beq.n	8006cee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e007      	b.n	8006cee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	b25a      	sxtb	r2, r3
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cf2:	e001      	b.n	8006cf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3740      	adds	r7, #64	; 0x40
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08c      	sub	sp, #48	; 0x30
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10a      	bne.n	8006d40 <xQueueReceive+0x30>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	623b      	str	r3, [r7, #32]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <xQueueReceive+0x3e>
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <xQueueReceive+0x42>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueReceive+0x44>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <xQueueReceive+0x5e>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61fb      	str	r3, [r7, #28]
}
 8006d6a:	bf00      	nop
 8006d6c:	e7fe      	b.n	8006d6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d6e:	f001 f83b 	bl	8007de8 <xTaskGetSchedulerState>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <xQueueReceive+0x6e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <xQueueReceive+0x72>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <xQueueReceive+0x74>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xQueueReceive+0x8e>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	61bb      	str	r3, [r7, #24]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d9e:	f001 fd81 	bl	80088a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01f      	beq.n	8006dee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db2:	f000 f8f7 	bl	8006fa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	1e5a      	subs	r2, r3, #1
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00f      	beq.n	8006de6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	3310      	adds	r3, #16
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fe4e 	bl	8007a6c <xTaskRemoveFromEventList>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dd6:	4b3d      	ldr	r3, [pc, #244]	; (8006ecc <xQueueReceive+0x1bc>)
 8006dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006de6:	f001 fd8d 	bl	8008904 <vPortExitCritical>
				return pdPASS;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e069      	b.n	8006ec2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d103      	bne.n	8006dfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006df4:	f001 fd86 	bl	8008904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e062      	b.n	8006ec2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e02:	f107 0310 	add.w	r3, r7, #16
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fe94 	bl	8007b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e10:	f001 fd78 	bl	8008904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e14:	f000 fc06 	bl	8007624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e18:	f001 fd44 	bl	80088a4 <vPortEnterCritical>
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e22:	b25b      	sxtb	r3, r3
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e28:	d103      	bne.n	8006e32 <xQueueReceive+0x122>
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e3e:	d103      	bne.n	8006e48 <xQueueReceive+0x138>
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e48:	f001 fd5c 	bl	8008904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e4c:	1d3a      	adds	r2, r7, #4
 8006e4e:	f107 0310 	add.w	r3, r7, #16
 8006e52:	4611      	mov	r1, r2
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fe83 	bl	8007b60 <xTaskCheckForTimeOut>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d123      	bne.n	8006ea8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e62:	f000 f917 	bl	8007094 <prvIsQueueEmpty>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	3324      	adds	r3, #36	; 0x24
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fda9 	bl	80079cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	f000 f8b8 	bl	8006ff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e80:	f000 fbde 	bl	8007640 <xTaskResumeAll>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d189      	bne.n	8006d9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <xQueueReceive+0x1bc>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	e780      	b.n	8006d9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9e:	f000 f8a7 	bl	8006ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ea2:	f000 fbcd 	bl	8007640 <xTaskResumeAll>
 8006ea6:	e77a      	b.n	8006d9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eaa:	f000 f8a1 	bl	8006ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eae:	f000 fbc7 	bl	8007640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb4:	f000 f8ee 	bl	8007094 <prvIsQueueEmpty>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f43f af6f 	beq.w	8006d9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ec0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3730      	adds	r7, #48	; 0x30
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	e000ed04 	.word	0xe000ed04

08006ed0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10d      	bne.n	8006f0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d14d      	bne.n	8006f92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 ff92 	bl	8007e24 <xTaskPriorityDisinherit>
 8006f00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	e043      	b.n	8006f92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d119      	bne.n	8006f44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6858      	ldr	r0, [r3, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	f002 f808 	bl	8008f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	441a      	add	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d32b      	bcc.n	8006f92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	e026      	b.n	8006f92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68d8      	ldr	r0, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	f001 ffee 	bl	8008f30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d207      	bcs.n	8006f80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	425b      	negs	r3, r3
 8006f7a:	441a      	add	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d105      	bne.n	8006f92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f9a:	697b      	ldr	r3, [r7, #20]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d018      	beq.n	8006fe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	441a      	add	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d303      	bcc.n	8006fd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68d9      	ldr	r1, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6838      	ldr	r0, [r7, #0]
 8006fe4:	f001 ffa4 	bl	8008f30 <memcpy>
	}
}
 8006fe8:	bf00      	nop
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ff8:	f001 fc54 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007004:	e011      	b.n	800702a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	d012      	beq.n	8007034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3324      	adds	r3, #36	; 0x24
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd2a 	bl	8007a6c <xTaskRemoveFromEventList>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800701e:	f000 fe01 	bl	8007c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	3b01      	subs	r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800702a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dce9      	bgt.n	8007006 <prvUnlockQueue+0x16>
 8007032:	e000      	b.n	8007036 <prvUnlockQueue+0x46>
					break;
 8007034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800703e:	f001 fc61 	bl	8008904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007042:	f001 fc2f 	bl	80088a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800704c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800704e:	e011      	b.n	8007074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d012      	beq.n	800707e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3310      	adds	r3, #16
 800705c:	4618      	mov	r0, r3
 800705e:	f000 fd05 	bl	8007a6c <xTaskRemoveFromEventList>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007068:	f000 fddc 	bl	8007c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	3b01      	subs	r3, #1
 8007070:	b2db      	uxtb	r3, r3
 8007072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dce9      	bgt.n	8007050 <prvUnlockQueue+0x60>
 800707c:	e000      	b.n	8007080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800707e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	22ff      	movs	r2, #255	; 0xff
 8007084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007088:	f001 fc3c 	bl	8008904 <vPortExitCritical>
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800709c:	f001 fc02 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	e001      	b.n	80070b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070b2:	f001 fc27 	bl	8008904 <vPortExitCritical>

	return xReturn;
 80070b6:	68fb      	ldr	r3, [r7, #12]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070c8:	f001 fbec 	bl	80088a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d102      	bne.n	80070de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070d8:	2301      	movs	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e001      	b.n	80070e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070e2:	f001 fc0f 	bl	8008904 <vPortExitCritical>

	return xReturn;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e014      	b.n	800712a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007100:	4a0f      	ldr	r2, [pc, #60]	; (8007140 <vQueueAddToRegistry+0x50>)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10b      	bne.n	8007124 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800710c:	490c      	ldr	r1, [pc, #48]	; (8007140 <vQueueAddToRegistry+0x50>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007116:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <vQueueAddToRegistry+0x50>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007122:	e006      	b.n	8007132 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b07      	cmp	r3, #7
 800712e:	d9e7      	bls.n	8007100 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20001c70 	.word	0x20001c70

08007144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007154:	f001 fba6 	bl	80088a4 <vPortEnterCritical>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800715e:	b25b      	sxtb	r3, r3
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007164:	d103      	bne.n	800716e <vQueueWaitForMessageRestricted+0x2a>
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	b25b      	sxtb	r3, r3
 8007176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717a:	d103      	bne.n	8007184 <vQueueWaitForMessageRestricted+0x40>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007184:	f001 fbbe 	bl	8008904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3324      	adds	r3, #36	; 0x24
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fc3b 	bl	8007a14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800719e:	6978      	ldr	r0, [r7, #20]
 80071a0:	f7ff ff26 	bl	8006ff0 <prvUnlockQueue>
	}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08e      	sub	sp, #56	; 0x38
 80071b0:	af04      	add	r7, sp, #16
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	623b      	str	r3, [r7, #32]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61fb      	str	r3, [r7, #28]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071f2:	235c      	movs	r3, #92	; 0x5c
 80071f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b5c      	cmp	r3, #92	; 0x5c
 80071fa:	d00a      	beq.n	8007212 <xTaskCreateStatic+0x66>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61bb      	str	r3, [r7, #24]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007212:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01e      	beq.n	8007258 <xTaskCreateStatic+0xac>
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01b      	beq.n	8007258 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007228:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007232:	2300      	movs	r3, #0
 8007234:	9303      	str	r3, [sp, #12]
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	9302      	str	r3, [sp, #8]
 800723a:	f107 0314 	add.w	r3, r7, #20
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f850 	bl	80072f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007252:	f000 f8dd 	bl	8007410 <prvAddNewTaskToReadyList>
 8007256:	e001      	b.n	800725c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800725c:	697b      	ldr	r3, [r7, #20]
	}
 800725e:	4618      	mov	r0, r3
 8007260:	3728      	adds	r7, #40	; 0x28
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007266:	b580      	push	{r7, lr}
 8007268:	b08c      	sub	sp, #48	; 0x30
 800726a:	af04      	add	r7, sp, #16
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4618      	mov	r0, r3
 800727c:	f001 fc34 	bl	8008ae8 <pvPortMalloc>
 8007280:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007288:	205c      	movs	r0, #92	; 0x5c
 800728a:	f001 fc2d 	bl	8008ae8 <pvPortMalloc>
 800728e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
 800729c:	e005      	b.n	80072aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	f001 fcee 	bl	8008c80 <vPortFree>
 80072a4:	e001      	b.n	80072aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d017      	beq.n	80072e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	2300      	movs	r3, #0
 80072bc:	9303      	str	r3, [sp, #12]
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	9302      	str	r3, [sp, #8]
 80072c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68b9      	ldr	r1, [r7, #8]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f80e 	bl	80072f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d4:	69f8      	ldr	r0, [r7, #28]
 80072d6:	f000 f89b 	bl	8007410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e002      	b.n	80072e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072e6:	69bb      	ldr	r3, [r7, #24]
	}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	461a      	mov	r2, r3
 8007308:	21a5      	movs	r1, #165	; 0xa5
 800730a:	f001 fe1f 	bl	8008f4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007318:	3b01      	subs	r3, #1
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f023 0307 	bic.w	r3, r3, #7
 8007326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00a      	beq.n	8007348 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	617b      	str	r3, [r7, #20]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d01f      	beq.n	800738e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	e012      	b.n	800737a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	7819      	ldrb	r1, [r3, #0]
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	3334      	adds	r3, #52	; 0x34
 8007364:	460a      	mov	r2, r1
 8007366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d006      	beq.n	8007382 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b0f      	cmp	r3, #15
 800737e:	d9e9      	bls.n	8007354 <prvInitialiseNewTask+0x64>
 8007380:	e000      	b.n	8007384 <prvInitialiseNewTask+0x94>
			{
				break;
 8007382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800738c:	e003      	b.n	8007396 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b37      	cmp	r3, #55	; 0x37
 800739a:	d901      	bls.n	80073a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800739c:	2337      	movs	r3, #55	; 0x37
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2200      	movs	r2, #0
 80073b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff f978 	bl	80066ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	3318      	adds	r3, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff f973 	bl	80066ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2200      	movs	r2, #0
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	69b8      	ldr	r0, [r7, #24]
 80073f0:	f001 f928 	bl	8008644 <pxPortInitialiseStack>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007418:	f001 fa44 	bl	80088a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800741c:	4b2d      	ldr	r3, [pc, #180]	; (80074d4 <prvAddNewTaskToReadyList+0xc4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a2c      	ldr	r2, [pc, #176]	; (80074d4 <prvAddNewTaskToReadyList+0xc4>)
 8007424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007426:	4b2c      	ldr	r3, [pc, #176]	; (80074d8 <prvAddNewTaskToReadyList+0xc8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <prvAddNewTaskToReadyList+0xc8>)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007434:	4b27      	ldr	r3, [pc, #156]	; (80074d4 <prvAddNewTaskToReadyList+0xc4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d110      	bne.n	800745e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800743c:	f000 fc16 	bl	8007c6c <prvInitialiseTaskLists>
 8007440:	e00d      	b.n	800745e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007442:	4b26      	ldr	r3, [pc, #152]	; (80074dc <prvAddNewTaskToReadyList+0xcc>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800744a:	4b23      	ldr	r3, [pc, #140]	; (80074d8 <prvAddNewTaskToReadyList+0xc8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	429a      	cmp	r2, r3
 8007456:	d802      	bhi.n	800745e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007458:	4a1f      	ldr	r2, [pc, #124]	; (80074d8 <prvAddNewTaskToReadyList+0xc8>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800745e:	4b20      	ldr	r3, [pc, #128]	; (80074e0 <prvAddNewTaskToReadyList+0xd0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <prvAddNewTaskToReadyList+0xd0>)
 8007466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <prvAddNewTaskToReadyList+0xd0>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007474:	4b1b      	ldr	r3, [pc, #108]	; (80074e4 <prvAddNewTaskToReadyList+0xd4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	429a      	cmp	r2, r3
 800747a:	d903      	bls.n	8007484 <prvAddNewTaskToReadyList+0x74>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <prvAddNewTaskToReadyList+0xd4>)
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <prvAddNewTaskToReadyList+0xd8>)
 8007492:	441a      	add	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f7ff f913 	bl	80066c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074a0:	f001 fa30 	bl	8008904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <prvAddNewTaskToReadyList+0xcc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00e      	beq.n	80074ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <prvAddNewTaskToReadyList+0xc8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d207      	bcs.n	80074ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074ba:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <prvAddNewTaskToReadyList+0xdc>)
 80074bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000d90 	.word	0x20000d90
 80074d8:	200008bc 	.word	0x200008bc
 80074dc:	20000d9c 	.word	0x20000d9c
 80074e0:	20000dac 	.word	0x20000dac
 80074e4:	20000d98 	.word	0x20000d98
 80074e8:	200008c0 	.word	0x200008c0
 80074ec:	e000ed04 	.word	0xe000ed04

080074f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d017      	beq.n	8007532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <vTaskDelay+0x60>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <vTaskDelay+0x30>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	60bb      	str	r3, [r7, #8]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007520:	f000 f880 	bl	8007624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fcea 	bl	8007f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800752c:	f000 f888 	bl	8007640 <xTaskResumeAll>
 8007530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <vTaskDelay+0x64>)
 800753a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000db8 	.word	0x20000db8
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007566:	463a      	mov	r2, r7
 8007568:	1d39      	adds	r1, r7, #4
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff f848 	bl	8006604 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	9202      	str	r2, [sp, #8]
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	2300      	movs	r3, #0
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	2300      	movs	r3, #0
 8007584:	460a      	mov	r2, r1
 8007586:	4921      	ldr	r1, [pc, #132]	; (800760c <vTaskStartScheduler+0xb4>)
 8007588:	4821      	ldr	r0, [pc, #132]	; (8007610 <vTaskStartScheduler+0xb8>)
 800758a:	f7ff fe0f 	bl	80071ac <xTaskCreateStatic>
 800758e:	4603      	mov	r3, r0
 8007590:	4a20      	ldr	r2, [pc, #128]	; (8007614 <vTaskStartScheduler+0xbc>)
 8007592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007594:	4b1f      	ldr	r3, [pc, #124]	; (8007614 <vTaskStartScheduler+0xbc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800759c:	2301      	movs	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e001      	b.n	80075a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d102      	bne.n	80075b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075ac:	f000 fcfc 	bl	8007fa8 <xTimerCreateTimerTask>
 80075b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d116      	bne.n	80075e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	613b      	str	r3, [r7, #16]
}
 80075ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075cc:	4b12      	ldr	r3, [pc, #72]	; (8007618 <vTaskStartScheduler+0xc0>)
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075d4:	4b11      	ldr	r3, [pc, #68]	; (800761c <vTaskStartScheduler+0xc4>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075da:	4b11      	ldr	r3, [pc, #68]	; (8007620 <vTaskStartScheduler+0xc8>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075e0:	f001 f8be 	bl	8008760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075e4:	e00e      	b.n	8007604 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ec:	d10a      	bne.n	8007604 <vTaskStartScheduler+0xac>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	60fb      	str	r3, [r7, #12]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <vTaskStartScheduler+0xaa>
}
 8007604:	bf00      	nop
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	0800ba30 	.word	0x0800ba30
 8007610:	08007c3d 	.word	0x08007c3d
 8007614:	20000db4 	.word	0x20000db4
 8007618:	20000db0 	.word	0x20000db0
 800761c:	20000d9c 	.word	0x20000d9c
 8007620:	20000d94 	.word	0x20000d94

08007624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <vTaskSuspendAll+0x18>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	4a03      	ldr	r2, [pc, #12]	; (800763c <vTaskSuspendAll+0x18>)
 8007630:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007632:	bf00      	nop
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000db8 	.word	0x20000db8

08007640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800764e:	4b42      	ldr	r3, [pc, #264]	; (8007758 <xTaskResumeAll+0x118>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <xTaskResumeAll+0x2c>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	603b      	str	r3, [r7, #0]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800766c:	f001 f91a 	bl	80088a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007670:	4b39      	ldr	r3, [pc, #228]	; (8007758 <xTaskResumeAll+0x118>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3b01      	subs	r3, #1
 8007676:	4a38      	ldr	r2, [pc, #224]	; (8007758 <xTaskResumeAll+0x118>)
 8007678:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800767a:	4b37      	ldr	r3, [pc, #220]	; (8007758 <xTaskResumeAll+0x118>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d162      	bne.n	8007748 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007682:	4b36      	ldr	r3, [pc, #216]	; (800775c <xTaskResumeAll+0x11c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d05e      	beq.n	8007748 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800768a:	e02f      	b.n	80076ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768c:	4b34      	ldr	r3, [pc, #208]	; (8007760 <xTaskResumeAll+0x120>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3318      	adds	r3, #24
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff f871 	bl	8006780 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff f86c 	bl	8006780 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <xTaskResumeAll+0x124>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d903      	bls.n	80076bc <xTaskResumeAll+0x7c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <xTaskResumeAll+0x124>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4613      	mov	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4a27      	ldr	r2, [pc, #156]	; (8007768 <xTaskResumeAll+0x128>)
 80076ca:	441a      	add	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4610      	mov	r0, r2
 80076d4:	f7fe fff7 	bl	80066c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4b23      	ldr	r3, [pc, #140]	; (800776c <xTaskResumeAll+0x12c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076e6:	4b22      	ldr	r3, [pc, #136]	; (8007770 <xTaskResumeAll+0x130>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ec:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <xTaskResumeAll+0x120>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1cb      	bne.n	800768c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076fa:	f000 fb55 	bl	8007da8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076fe:	4b1d      	ldr	r3, [pc, #116]	; (8007774 <xTaskResumeAll+0x134>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d010      	beq.n	800772c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800770a:	f000 f847 	bl	800779c <xTaskIncrementTick>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007714:	4b16      	ldr	r3, [pc, #88]	; (8007770 <xTaskResumeAll+0x130>)
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3b01      	subs	r3, #1
 800771e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f1      	bne.n	800770a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <xTaskResumeAll+0x134>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800772c:	4b10      	ldr	r3, [pc, #64]	; (8007770 <xTaskResumeAll+0x130>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <xTaskResumeAll+0x138>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007748:	f001 f8dc 	bl	8008904 <vPortExitCritical>

	return xAlreadyYielded;
 800774c:	68bb      	ldr	r3, [r7, #8]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000db8 	.word	0x20000db8
 800775c:	20000d90 	.word	0x20000d90
 8007760:	20000d50 	.word	0x20000d50
 8007764:	20000d98 	.word	0x20000d98
 8007768:	200008c0 	.word	0x200008c0
 800776c:	200008bc 	.word	0x200008bc
 8007770:	20000da4 	.word	0x20000da4
 8007774:	20000da0 	.word	0x20000da0
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <xTaskGetTickCount+0x1c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007788:	687b      	ldr	r3, [r7, #4]
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000d94 	.word	0x20000d94

0800779c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a6:	4b4f      	ldr	r3, [pc, #316]	; (80078e4 <xTaskIncrementTick+0x148>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 808f 	bne.w	80078ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077b0:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <xTaskIncrementTick+0x14c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077b8:	4a4b      	ldr	r2, [pc, #300]	; (80078e8 <xTaskIncrementTick+0x14c>)
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d120      	bne.n	8007806 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077c4:	4b49      	ldr	r3, [pc, #292]	; (80078ec <xTaskIncrementTick+0x150>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	603b      	str	r3, [r7, #0]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <xTaskIncrementTick+0x46>
 80077e4:	4b41      	ldr	r3, [pc, #260]	; (80078ec <xTaskIncrementTick+0x150>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	4b41      	ldr	r3, [pc, #260]	; (80078f0 <xTaskIncrementTick+0x154>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a3f      	ldr	r2, [pc, #252]	; (80078ec <xTaskIncrementTick+0x150>)
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4a3f      	ldr	r2, [pc, #252]	; (80078f0 <xTaskIncrementTick+0x154>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4b3e      	ldr	r3, [pc, #248]	; (80078f4 <xTaskIncrementTick+0x158>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	4a3d      	ldr	r2, [pc, #244]	; (80078f4 <xTaskIncrementTick+0x158>)
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	f000 fad1 	bl	8007da8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007806:	4b3c      	ldr	r3, [pc, #240]	; (80078f8 <xTaskIncrementTick+0x15c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	429a      	cmp	r2, r3
 800780e:	d349      	bcc.n	80078a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007810:	4b36      	ldr	r3, [pc, #216]	; (80078ec <xTaskIncrementTick+0x150>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d104      	bne.n	8007824 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800781a:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <xTaskIncrementTick+0x15c>)
 800781c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007820:	601a      	str	r2, [r3, #0]
					break;
 8007822:	e03f      	b.n	80078a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007824:	4b31      	ldr	r3, [pc, #196]	; (80078ec <xTaskIncrementTick+0x150>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d203      	bcs.n	8007844 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800783c:	4a2e      	ldr	r2, [pc, #184]	; (80078f8 <xTaskIncrementTick+0x15c>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007842:	e02f      	b.n	80078a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe ff99 	bl	8006780 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3318      	adds	r3, #24
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe ff90 	bl	8006780 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	4b25      	ldr	r3, [pc, #148]	; (80078fc <xTaskIncrementTick+0x160>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d903      	bls.n	8007874 <xTaskIncrementTick+0xd8>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	4a22      	ldr	r2, [pc, #136]	; (80078fc <xTaskIncrementTick+0x160>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4a1f      	ldr	r2, [pc, #124]	; (8007900 <xTaskIncrementTick+0x164>)
 8007882:	441a      	add	r2, r3
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	4610      	mov	r0, r2
 800788c:	f7fe ff1b 	bl	80066c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <xTaskIncrementTick+0x168>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	429a      	cmp	r2, r3
 800789c:	d3b8      	bcc.n	8007810 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800789e:	2301      	movs	r3, #1
 80078a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	e7b5      	b.n	8007810 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <xTaskIncrementTick+0x168>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4915      	ldr	r1, [pc, #84]	; (8007900 <xTaskIncrementTick+0x164>)
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	440b      	add	r3, r1
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d901      	bls.n	80078c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <xTaskIncrementTick+0x16c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078c8:	2301      	movs	r3, #1
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e004      	b.n	80078d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078ce:	4b0f      	ldr	r3, [pc, #60]	; (800790c <xTaskIncrementTick+0x170>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a0d      	ldr	r2, [pc, #52]	; (800790c <xTaskIncrementTick+0x170>)
 80078d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078d8:	697b      	ldr	r3, [r7, #20]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000db8 	.word	0x20000db8
 80078e8:	20000d94 	.word	0x20000d94
 80078ec:	20000d48 	.word	0x20000d48
 80078f0:	20000d4c 	.word	0x20000d4c
 80078f4:	20000da8 	.word	0x20000da8
 80078f8:	20000db0 	.word	0x20000db0
 80078fc:	20000d98 	.word	0x20000d98
 8007900:	200008c0 	.word	0x200008c0
 8007904:	200008bc 	.word	0x200008bc
 8007908:	20000da4 	.word	0x20000da4
 800790c:	20000da0 	.word	0x20000da0

08007910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007916:	4b28      	ldr	r3, [pc, #160]	; (80079b8 <vTaskSwitchContext+0xa8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d003      	beq.n	8007926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800791e:	4b27      	ldr	r3, [pc, #156]	; (80079bc <vTaskSwitchContext+0xac>)
 8007920:	2201      	movs	r2, #1
 8007922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007924:	e041      	b.n	80079aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007926:	4b25      	ldr	r3, [pc, #148]	; (80079bc <vTaskSwitchContext+0xac>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792c:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <vTaskSwitchContext+0xb0>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	e010      	b.n	8007956 <vTaskSwitchContext+0x46>
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10a      	bne.n	8007950 <vTaskSwitchContext+0x40>
	__asm volatile
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	607b      	str	r3, [r7, #4]
}
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <vTaskSwitchContext+0x3e>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b01      	subs	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	491b      	ldr	r1, [pc, #108]	; (80079c4 <vTaskSwitchContext+0xb4>)
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0e4      	beq.n	8007934 <vTaskSwitchContext+0x24>
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <vTaskSwitchContext+0xb4>)
 8007976:	4413      	add	r3, r2
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3308      	adds	r3, #8
 800798c:	429a      	cmp	r2, r3
 800798e:	d104      	bne.n	800799a <vTaskSwitchContext+0x8a>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <vTaskSwitchContext+0xb8>)
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4a06      	ldr	r2, [pc, #24]	; (80079c0 <vTaskSwitchContext+0xb0>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6013      	str	r3, [r2, #0]
}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000db8 	.word	0x20000db8
 80079bc:	20000da4 	.word	0x20000da4
 80079c0:	20000d98 	.word	0x20000d98
 80079c4:	200008c0 	.word	0x200008c0
 80079c8:	200008bc 	.word	0x200008bc

080079cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079f2:	4b07      	ldr	r3, [pc, #28]	; (8007a10 <vTaskPlaceOnEventList+0x44>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3318      	adds	r3, #24
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7fe fe87 	bl	800670e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a00:	2101      	movs	r1, #1
 8007a02:	6838      	ldr	r0, [r7, #0]
 8007a04:	f000 fa7c 	bl	8007f00 <prvAddCurrentTaskToDelayedList>
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200008bc 	.word	0x200008bc

08007a14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10a      	bne.n	8007a3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	617b      	str	r3, [r7, #20]
}
 8007a38:	bf00      	nop
 8007a3a:	e7fe      	b.n	8007a3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4619      	mov	r1, r3
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7fe fe3e 	bl	80066c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	68b8      	ldr	r0, [r7, #8]
 8007a5a:	f000 fa51 	bl	8007f00 <prvAddCurrentTaskToDelayedList>
	}
 8007a5e:	bf00      	nop
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	200008bc 	.word	0x200008bc

08007a6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60fb      	str	r3, [r7, #12]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3318      	adds	r3, #24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fe6f 	bl	8006780 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aa2:	4b1e      	ldr	r3, [pc, #120]	; (8007b1c <xTaskRemoveFromEventList+0xb0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d11d      	bne.n	8007ae6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe fe66 	bl	8006780 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <xTaskRemoveFromEventList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d903      	bls.n	8007ac8 <xTaskRemoveFromEventList+0x5c>
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <xTaskRemoveFromEventList+0xb4>)
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4a13      	ldr	r2, [pc, #76]	; (8007b24 <xTaskRemoveFromEventList+0xb8>)
 8007ad6:	441a      	add	r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7fe fdf1 	bl	80066c6 <vListInsertEnd>
 8007ae4:	e005      	b.n	8007af2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4619      	mov	r1, r3
 8007aec:	480e      	ldr	r0, [pc, #56]	; (8007b28 <xTaskRemoveFromEventList+0xbc>)
 8007aee:	f7fe fdea 	bl	80066c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <xTaskRemoveFromEventList+0xc0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d905      	bls.n	8007b0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <xTaskRemoveFromEventList+0xc4>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e001      	b.n	8007b10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b10:	697b      	ldr	r3, [r7, #20]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000db8 	.word	0x20000db8
 8007b20:	20000d98 	.word	0x20000d98
 8007b24:	200008c0 	.word	0x200008c0
 8007b28:	20000d50 	.word	0x20000d50
 8007b2c:	200008bc 	.word	0x200008bc
 8007b30:	20000da4 	.word	0x20000da4

08007b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <vTaskInternalSetTimeOutState+0x24>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <vTaskInternalSetTimeOutState+0x28>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	605a      	str	r2, [r3, #4]
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000da8 	.word	0x20000da8
 8007b5c:	20000d94 	.word	0x20000d94

08007b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	613b      	str	r3, [r7, #16]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	60fb      	str	r3, [r7, #12]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ba2:	f000 fe7f 	bl	80088a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ba6:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <xTaskCheckForTimeOut+0xbc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bbe:	d102      	bne.n	8007bc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]
 8007bc4:	e023      	b.n	8007c0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <xTaskCheckForTimeOut+0xc0>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d007      	beq.n	8007be2 <xTaskCheckForTimeOut+0x82>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d302      	bcc.n	8007be2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	61fb      	str	r3, [r7, #28]
 8007be0:	e015      	b.n	8007c0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d20b      	bcs.n	8007c04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	1ad2      	subs	r2, r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff9b 	bl	8007b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	e004      	b.n	8007c0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c0e:	f000 fe79 	bl	8008904 <vPortExitCritical>

	return xReturn;
 8007c12:	69fb      	ldr	r3, [r7, #28]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3720      	adds	r7, #32
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000d94 	.word	0x20000d94
 8007c20:	20000da8 	.word	0x20000da8

08007c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c28:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <vTaskMissedYield+0x14>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	601a      	str	r2, [r3, #0]
}
 8007c2e:	bf00      	nop
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	20000da4 	.word	0x20000da4

08007c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c44:	f000 f852 	bl	8007cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <prvIdleTask+0x28>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d9f9      	bls.n	8007c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <prvIdleTask+0x2c>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c60:	e7f0      	b.n	8007c44 <prvIdleTask+0x8>
 8007c62:	bf00      	nop
 8007c64:	200008c0 	.word	0x200008c0
 8007c68:	e000ed04 	.word	0xe000ed04

08007c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c72:	2300      	movs	r3, #0
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	e00c      	b.n	8007c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4a12      	ldr	r2, [pc, #72]	; (8007ccc <prvInitialiseTaskLists+0x60>)
 8007c84:	4413      	add	r3, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fcf0 	bl	800666c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b37      	cmp	r3, #55	; 0x37
 8007c96:	d9ef      	bls.n	8007c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c98:	480d      	ldr	r0, [pc, #52]	; (8007cd0 <prvInitialiseTaskLists+0x64>)
 8007c9a:	f7fe fce7 	bl	800666c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c9e:	480d      	ldr	r0, [pc, #52]	; (8007cd4 <prvInitialiseTaskLists+0x68>)
 8007ca0:	f7fe fce4 	bl	800666c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ca4:	480c      	ldr	r0, [pc, #48]	; (8007cd8 <prvInitialiseTaskLists+0x6c>)
 8007ca6:	f7fe fce1 	bl	800666c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007caa:	480c      	ldr	r0, [pc, #48]	; (8007cdc <prvInitialiseTaskLists+0x70>)
 8007cac:	f7fe fcde 	bl	800666c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007cb0:	480b      	ldr	r0, [pc, #44]	; (8007ce0 <prvInitialiseTaskLists+0x74>)
 8007cb2:	f7fe fcdb 	bl	800666c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <prvInitialiseTaskLists+0x78>)
 8007cb8:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <prvInitialiseTaskLists+0x64>)
 8007cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <prvInitialiseTaskLists+0x7c>)
 8007cbe:	4a05      	ldr	r2, [pc, #20]	; (8007cd4 <prvInitialiseTaskLists+0x68>)
 8007cc0:	601a      	str	r2, [r3, #0]
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	200008c0 	.word	0x200008c0
 8007cd0:	20000d20 	.word	0x20000d20
 8007cd4:	20000d34 	.word	0x20000d34
 8007cd8:	20000d50 	.word	0x20000d50
 8007cdc:	20000d64 	.word	0x20000d64
 8007ce0:	20000d7c 	.word	0x20000d7c
 8007ce4:	20000d48 	.word	0x20000d48
 8007ce8:	20000d4c 	.word	0x20000d4c

08007cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cf2:	e019      	b.n	8007d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cf4:	f000 fdd6 	bl	80088a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf8:	4b10      	ldr	r3, [pc, #64]	; (8007d3c <prvCheckTasksWaitingTermination+0x50>)
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe fd3b 	bl	8006780 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <prvCheckTasksWaitingTermination+0x54>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	4a0b      	ldr	r2, [pc, #44]	; (8007d40 <prvCheckTasksWaitingTermination+0x54>)
 8007d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d14:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <prvCheckTasksWaitingTermination+0x58>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <prvCheckTasksWaitingTermination+0x58>)
 8007d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d1e:	f000 fdf1 	bl	8008904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f810 	bl	8007d48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d28:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <prvCheckTasksWaitingTermination+0x58>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e1      	bne.n	8007cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000d64 	.word	0x20000d64
 8007d40:	20000d90 	.word	0x20000d90
 8007d44:	20000d78 	.word	0x20000d78

08007d48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d108      	bne.n	8007d6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ff8e 	bl	8008c80 <vPortFree>
				vPortFree( pxTCB );
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 ff8b 	bl	8008c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d6a:	e018      	b.n	8007d9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d103      	bne.n	8007d7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 ff82 	bl	8008c80 <vPortFree>
	}
 8007d7c:	e00f      	b.n	8007d9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d00a      	beq.n	8007d9e <prvDeleteTCB+0x56>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	60fb      	str	r3, [r7, #12]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <prvDeleteTCB+0x54>
	}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <prvResetNextTaskUnblockTime+0x38>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d104      	bne.n	8007dc2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <prvResetNextTaskUnblockTime+0x3c>)
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dbe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dc0:	e008      	b.n	8007dd4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc2:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <prvResetNextTaskUnblockTime+0x38>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <prvResetNextTaskUnblockTime+0x3c>)
 8007dd2:	6013      	str	r3, [r2, #0]
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	20000d48 	.word	0x20000d48
 8007de4:	20000db0 	.word	0x20000db0

08007de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dee:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <xTaskGetSchedulerState+0x34>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007df6:	2301      	movs	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	e008      	b.n	8007e0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfc:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <xTaskGetSchedulerState+0x38>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e04:	2302      	movs	r3, #2
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	e001      	b.n	8007e0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e0e:	687b      	ldr	r3, [r7, #4]
	}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000d9c 	.word	0x20000d9c
 8007e20:	20000db8 	.word	0x20000db8

08007e24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d056      	beq.n	8007ee8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e3a:	4b2e      	ldr	r3, [pc, #184]	; (8007ef4 <xTaskPriorityDisinherit+0xd0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d00a      	beq.n	8007e5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	60fb      	str	r3, [r7, #12]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60bb      	str	r3, [r7, #8]
}
 8007e74:	bf00      	nop
 8007e76:	e7fe      	b.n	8007e76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7c:	1e5a      	subs	r2, r3, #1
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d02c      	beq.n	8007ee8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d128      	bne.n	8007ee8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fc70 	bl	8006780 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <xTaskPriorityDisinherit+0xd4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d903      	bls.n	8007ec8 <xTaskPriorityDisinherit+0xa4>
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	4a0c      	ldr	r2, [pc, #48]	; (8007ef8 <xTaskPriorityDisinherit+0xd4>)
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <xTaskPriorityDisinherit+0xd8>)
 8007ed6:	441a      	add	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fbf1 	bl	80066c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ee8:	697b      	ldr	r3, [r7, #20]
	}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200008bc 	.word	0x200008bc
 8007ef8:	20000d98 	.word	0x20000d98
 8007efc:	200008c0 	.word	0x200008c0

08007f00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f0a:	4b21      	ldr	r3, [pc, #132]	; (8007f90 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f10:	4b20      	ldr	r3, [pc, #128]	; (8007f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fe fc32 	bl	8006780 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f22:	d10a      	bne.n	8007f3a <prvAddCurrentTaskToDelayedList+0x3a>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4819      	ldr	r0, [pc, #100]	; (8007f98 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f34:	f7fe fbc7 	bl	80066c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f38:	e026      	b.n	8007f88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d209      	bcs.n	8007f66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4610      	mov	r0, r2
 8007f60:	f7fe fbd5 	bl	800670e <vListInsert>
}
 8007f64:	e010      	b.n	8007f88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f66:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fe fbcb 	bl	800670e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d202      	bcs.n	8007f88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f82:	4a08      	ldr	r2, [pc, #32]	; (8007fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	6013      	str	r3, [r2, #0]
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000d94 	.word	0x20000d94
 8007f94:	200008bc 	.word	0x200008bc
 8007f98:	20000d7c 	.word	0x20000d7c
 8007f9c:	20000d4c 	.word	0x20000d4c
 8007fa0:	20000d48 	.word	0x20000d48
 8007fa4:	20000db0 	.word	0x20000db0

08007fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fb2:	f000 fb07 	bl	80085c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	; (8008028 <xTimerCreateTimerTask+0x80>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d021      	beq.n	8008002 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fc6:	1d3a      	adds	r2, r7, #4
 8007fc8:	f107 0108 	add.w	r1, r7, #8
 8007fcc:	f107 030c 	add.w	r3, r7, #12
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fb31 	bl	8006638 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	9202      	str	r2, [sp, #8]
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	4910      	ldr	r1, [pc, #64]	; (800802c <xTimerCreateTimerTask+0x84>)
 8007fea:	4811      	ldr	r0, [pc, #68]	; (8008030 <xTimerCreateTimerTask+0x88>)
 8007fec:	f7ff f8de 	bl	80071ac <xTaskCreateStatic>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4a10      	ldr	r2, [pc, #64]	; (8008034 <xTimerCreateTimerTask+0x8c>)
 8007ff4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <xTimerCreateTimerTask+0x8c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ffe:	2301      	movs	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	613b      	str	r3, [r7, #16]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800801e:	697b      	ldr	r3, [r7, #20]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000dec 	.word	0x20000dec
 800802c:	0800ba38 	.word	0x0800ba38
 8008030:	0800816d 	.word	0x0800816d
 8008034:	20000df0 	.word	0x20000df0

08008038 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	; 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	623b      	str	r3, [r7, #32]
}
 8008062:	bf00      	nop
 8008064:	e7fe      	b.n	8008064 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008066:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <xTimerGenericCommand+0x98>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d02a      	beq.n	80080c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b05      	cmp	r3, #5
 800807e:	dc18      	bgt.n	80080b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008080:	f7ff feb2 	bl	8007de8 <xTaskGetSchedulerState>
 8008084:	4603      	mov	r3, r0
 8008086:	2b02      	cmp	r3, #2
 8008088:	d109      	bne.n	800809e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800808a:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <xTimerGenericCommand+0x98>)
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f107 0110 	add.w	r1, r7, #16
 8008092:	2300      	movs	r3, #0
 8008094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008096:	f7fe fca1 	bl	80069dc <xQueueGenericSend>
 800809a:	6278      	str	r0, [r7, #36]	; 0x24
 800809c:	e012      	b.n	80080c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <xTimerGenericCommand+0x98>)
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	f107 0110 	add.w	r1, r7, #16
 80080a6:	2300      	movs	r3, #0
 80080a8:	2200      	movs	r2, #0
 80080aa:	f7fe fc97 	bl	80069dc <xQueueGenericSend>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24
 80080b0:	e008      	b.n	80080c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080b2:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <xTimerGenericCommand+0x98>)
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	f107 0110 	add.w	r1, r7, #16
 80080ba:	2300      	movs	r3, #0
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	f7fe fd8b 	bl	8006bd8 <xQueueGenericSendFromISR>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	; 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000dec 	.word	0x20000dec

080080d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080de:	4b22      	ldr	r3, [pc, #136]	; (8008168 <prvProcessExpiredTimer+0x94>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fe fb47 	bl	8006780 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d022      	beq.n	8008146 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	18d1      	adds	r1, r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	6978      	ldr	r0, [r7, #20]
 800810e:	f000 f8d1 	bl	80082b4 <prvInsertTimerInActiveList>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d01f      	beq.n	8008158 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008118:	2300      	movs	r3, #0
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2300      	movs	r3, #0
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	2100      	movs	r1, #0
 8008122:	6978      	ldr	r0, [r7, #20]
 8008124:	f7ff ff88 	bl	8008038 <xTimerGenericCommand>
 8008128:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d113      	bne.n	8008158 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	60fb      	str	r3, [r7, #12]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	b2da      	uxtb	r2, r3
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	6978      	ldr	r0, [r7, #20]
 800815e:	4798      	blx	r3
}
 8008160:	bf00      	nop
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000de4 	.word	0x20000de4

0800816c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008174:	f107 0308 	add.w	r3, r7, #8
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f857 	bl	800822c <prvGetNextExpireTime>
 800817e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4619      	mov	r1, r3
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f803 	bl	8008190 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800818a:	f000 f8d5 	bl	8008338 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800818e:	e7f1      	b.n	8008174 <prvTimerTask+0x8>

08008190 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800819a:	f7ff fa43 	bl	8007624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 f866 	bl	8008274 <prvSampleTimeNow>
 80081a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d130      	bne.n	8008212 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <prvProcessTimerOrBlockTask+0x3c>
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d806      	bhi.n	80081cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081be:	f7ff fa3f 	bl	8007640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ff85 	bl	80080d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081ca:	e024      	b.n	8008216 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081d2:	4b13      	ldr	r3, [pc, #76]	; (8008220 <prvProcessTimerOrBlockTask+0x90>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <prvProcessTimerOrBlockTask+0x50>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <prvProcessTimerOrBlockTask+0x52>
 80081e0:	2300      	movs	r3, #0
 80081e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <prvProcessTimerOrBlockTask+0x94>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4619      	mov	r1, r3
 80081f2:	f7fe ffa7 	bl	8007144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081f6:	f7ff fa23 	bl	8007640 <xTaskResumeAll>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <prvProcessTimerOrBlockTask+0x98>)
 8008202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	f3bf 8f6f 	isb	sy
}
 8008210:	e001      	b.n	8008216 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008212:	f7ff fa15 	bl	8007640 <xTaskResumeAll>
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	20000de8 	.word	0x20000de8
 8008224:	20000dec 	.word	0x20000dec
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008234:	4b0e      	ldr	r3, [pc, #56]	; (8008270 <prvGetNextExpireTime+0x44>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <prvGetNextExpireTime+0x16>
 800823e:	2201      	movs	r2, #1
 8008240:	e000      	b.n	8008244 <prvGetNextExpireTime+0x18>
 8008242:	2200      	movs	r2, #0
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d105      	bne.n	800825c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <prvGetNextExpireTime+0x44>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	e001      	b.n	8008260 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008260:	68fb      	ldr	r3, [r7, #12]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000de4 	.word	0x20000de4

08008274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800827c:	f7ff fa7e 	bl	800777c <xTaskGetTickCount>
 8008280:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008282:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <prvSampleTimeNow+0x3c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	429a      	cmp	r2, r3
 800828a:	d205      	bcs.n	8008298 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800828c:	f000 f936 	bl	80084fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	e002      	b.n	800829e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800829e:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <prvSampleTimeNow+0x3c>)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000df4 	.word	0x20000df4

080082b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d812      	bhi.n	8008300 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	1ad2      	subs	r2, r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e01b      	b.n	8008326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082ee:	4b10      	ldr	r3, [pc, #64]	; (8008330 <prvInsertTimerInActiveList+0x7c>)
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7fe fa08 	bl	800670e <vListInsert>
 80082fe:	e012      	b.n	8008326 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d206      	bcs.n	8008316 <prvInsertTimerInActiveList+0x62>
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d302      	bcc.n	8008316 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008310:	2301      	movs	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	e007      	b.n	8008326 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008316:	4b07      	ldr	r3, [pc, #28]	; (8008334 <prvInsertTimerInActiveList+0x80>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3304      	adds	r3, #4
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe f9f4 	bl	800670e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008326:	697b      	ldr	r3, [r7, #20]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000de8 	.word	0x20000de8
 8008334:	20000de4 	.word	0x20000de4

08008338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08e      	sub	sp, #56	; 0x38
 800833c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800833e:	e0ca      	b.n	80084d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	da18      	bge.n	8008378 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	3304      	adds	r3, #4
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008356:	f383 8811 	msr	BASEPRI, r3
 800835a:	f3bf 8f6f 	isb	sy
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	61fb      	str	r3, [r7, #28]
}
 8008364:	bf00      	nop
 8008366:	e7fe      	b.n	8008366 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800836e:	6850      	ldr	r0, [r2, #4]
 8008370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008372:	6892      	ldr	r2, [r2, #8]
 8008374:	4611      	mov	r1, r2
 8008376:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f2c0 80aa 	blt.w	80084d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe f9f5 	bl	8006780 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008396:	463b      	mov	r3, r7
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff ff6b 	bl	8008274 <prvSampleTimeNow>
 800839e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	f200 8097 	bhi.w	80084d6 <prvProcessReceivedCommands+0x19e>
 80083a8:	a201      	add	r2, pc, #4	; (adr r2, 80083b0 <prvProcessReceivedCommands+0x78>)
 80083aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ae:	bf00      	nop
 80083b0:	080083d9 	.word	0x080083d9
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083d9 	.word	0x080083d9
 80083bc:	0800844d 	.word	0x0800844d
 80083c0:	08008461 	.word	0x08008461
 80083c4:	080084ab 	.word	0x080084ab
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083d9 	.word	0x080083d9
 80083d0:	0800844d 	.word	0x0800844d
 80083d4:	08008461 	.word	0x08008461
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083de:	f043 0301 	orr.w	r3, r3, #1
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	18d1      	adds	r1, r2, r3
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f8:	f7ff ff5c 	bl	80082b4 <prvInsertTimerInActiveList>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d069      	beq.n	80084d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008408:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800840a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d05e      	beq.n	80084d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	441a      	add	r2, r3
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	2100      	movs	r1, #0
 8008428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842a:	f7ff fe05 	bl	8008038 <xTimerGenericCommand>
 800842e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d14f      	bne.n	80084d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	61bb      	str	r3, [r7, #24]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	b2da      	uxtb	r2, r3
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800845e:	e03a      	b.n	80084d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008466:	f043 0301 	orr.w	r3, r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	617b      	str	r3, [r7, #20]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	18d1      	adds	r1, r2, r3
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084a4:	f7ff ff06 	bl	80082b4 <prvInsertTimerInActiveList>
					break;
 80084a8:	e015      	b.n	80084d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	f000 fbe1 	bl	8008c80 <vPortFree>
 80084be:	e00a      	b.n	80084d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084d2:	e000      	b.n	80084d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084d6:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <prvProcessReceivedCommands+0x1c0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	1d39      	adds	r1, r7, #4
 80084dc:	2200      	movs	r2, #0
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe fc16 	bl	8006d10 <xQueueReceive>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f47f af2a 	bne.w	8008340 <prvProcessReceivedCommands+0x8>
	}
}
 80084ec:	bf00      	nop
 80084ee:	bf00      	nop
 80084f0:	3730      	adds	r7, #48	; 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000dec 	.word	0x20000dec

080084fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008502:	e048      	b.n	8008596 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008504:	4b2d      	ldr	r3, [pc, #180]	; (80085bc <prvSwitchTimerLists+0xc0>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800850e:	4b2b      	ldr	r3, [pc, #172]	; (80085bc <prvSwitchTimerLists+0xc0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3304      	adds	r3, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe f92f 	bl	8006780 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d02e      	beq.n	8008596 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	4413      	add	r3, r2
 8008540:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	429a      	cmp	r2, r3
 8008548:	d90e      	bls.n	8008568 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008556:	4b19      	ldr	r3, [pc, #100]	; (80085bc <prvSwitchTimerLists+0xc0>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7fe f8d4 	bl	800670e <vListInsert>
 8008566:	e016      	b.n	8008596 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f7ff fd60 	bl	8008038 <xTimerGenericCommand>
 8008578:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10a      	bne.n	8008596 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008584:	f383 8811 	msr	BASEPRI, r3
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	f3bf 8f4f 	dsb	sy
 8008590:	603b      	str	r3, [r7, #0]
}
 8008592:	bf00      	nop
 8008594:	e7fe      	b.n	8008594 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008596:	4b09      	ldr	r3, [pc, #36]	; (80085bc <prvSwitchTimerLists+0xc0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1b1      	bne.n	8008504 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <prvSwitchTimerLists+0xc0>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <prvSwitchTimerLists+0xc4>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a04      	ldr	r2, [pc, #16]	; (80085bc <prvSwitchTimerLists+0xc0>)
 80085ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085ae:	4a04      	ldr	r2, [pc, #16]	; (80085c0 <prvSwitchTimerLists+0xc4>)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	6013      	str	r3, [r2, #0]
}
 80085b4:	bf00      	nop
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20000de4 	.word	0x20000de4
 80085c0:	20000de8 	.word	0x20000de8

080085c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085ca:	f000 f96b 	bl	80088a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085ce:	4b15      	ldr	r3, [pc, #84]	; (8008624 <prvCheckForValidListAndQueue+0x60>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d120      	bne.n	8008618 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085d6:	4814      	ldr	r0, [pc, #80]	; (8008628 <prvCheckForValidListAndQueue+0x64>)
 80085d8:	f7fe f848 	bl	800666c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085dc:	4813      	ldr	r0, [pc, #76]	; (800862c <prvCheckForValidListAndQueue+0x68>)
 80085de:	f7fe f845 	bl	800666c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085e2:	4b13      	ldr	r3, [pc, #76]	; (8008630 <prvCheckForValidListAndQueue+0x6c>)
 80085e4:	4a10      	ldr	r2, [pc, #64]	; (8008628 <prvCheckForValidListAndQueue+0x64>)
 80085e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085e8:	4b12      	ldr	r3, [pc, #72]	; (8008634 <prvCheckForValidListAndQueue+0x70>)
 80085ea:	4a10      	ldr	r2, [pc, #64]	; (800862c <prvCheckForValidListAndQueue+0x68>)
 80085ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085ee:	2300      	movs	r3, #0
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <prvCheckForValidListAndQueue+0x74>)
 80085f4:	4a11      	ldr	r2, [pc, #68]	; (800863c <prvCheckForValidListAndQueue+0x78>)
 80085f6:	2110      	movs	r1, #16
 80085f8:	200a      	movs	r0, #10
 80085fa:	f7fe f953 	bl	80068a4 <xQueueGenericCreateStatic>
 80085fe:	4603      	mov	r3, r0
 8008600:	4a08      	ldr	r2, [pc, #32]	; (8008624 <prvCheckForValidListAndQueue+0x60>)
 8008602:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008604:	4b07      	ldr	r3, [pc, #28]	; (8008624 <prvCheckForValidListAndQueue+0x60>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <prvCheckForValidListAndQueue+0x60>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	490b      	ldr	r1, [pc, #44]	; (8008640 <prvCheckForValidListAndQueue+0x7c>)
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fd6c 	bl	80070f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008618:	f000 f974 	bl	8008904 <vPortExitCritical>
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000dec 	.word	0x20000dec
 8008628:	20000dbc 	.word	0x20000dbc
 800862c:	20000dd0 	.word	0x20000dd0
 8008630:	20000de4 	.word	0x20000de4
 8008634:	20000de8 	.word	0x20000de8
 8008638:	20000e98 	.word	0x20000e98
 800863c:	20000df8 	.word	0x20000df8
 8008640:	0800ba40 	.word	0x0800ba40

08008644 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	3b04      	subs	r3, #4
 8008654:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800865c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3b04      	subs	r3, #4
 8008662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f023 0201 	bic.w	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3b04      	subs	r3, #4
 8008672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008674:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <pxPortInitialiseStack+0x64>)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3b14      	subs	r3, #20
 800867e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3b04      	subs	r3, #4
 800868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f06f 0202 	mvn.w	r2, #2
 8008692:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3b20      	subs	r3, #32
 8008698:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800869a:	68fb      	ldr	r3, [r7, #12]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	080086ad 	.word	0x080086ad

080086ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086b6:	4b12      	ldr	r3, [pc, #72]	; (8008700 <prvTaskExitError+0x54>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086be:	d00a      	beq.n	80086d6 <prvTaskExitError+0x2a>
	__asm volatile
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
}
 80086d2:	bf00      	nop
 80086d4:	e7fe      	b.n	80086d4 <prvTaskExitError+0x28>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60bb      	str	r3, [r7, #8]
}
 80086e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086ea:	bf00      	nop
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0fc      	beq.n	80086ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr
 8008700:	2000000c 	.word	0x2000000c
	...

08008710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <pxCurrentTCBConst2>)
 8008712:	6819      	ldr	r1, [r3, #0]
 8008714:	6808      	ldr	r0, [r1, #0]
 8008716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871a:	f380 8809 	msr	PSP, r0
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f04f 0000 	mov.w	r0, #0
 8008726:	f380 8811 	msr	BASEPRI, r0
 800872a:	4770      	bx	lr
 800872c:	f3af 8000 	nop.w

08008730 <pxCurrentTCBConst2>:
 8008730:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop

08008738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008738:	4808      	ldr	r0, [pc, #32]	; (800875c <prvPortStartFirstTask+0x24>)
 800873a:	6800      	ldr	r0, [r0, #0]
 800873c:	6800      	ldr	r0, [r0, #0]
 800873e:	f380 8808 	msr	MSP, r0
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8814 	msr	CONTROL, r0
 800874a:	b662      	cpsie	i
 800874c:	b661      	cpsie	f
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	df00      	svc	0
 8008758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800875a:	bf00      	nop
 800875c:	e000ed08 	.word	0xe000ed08

08008760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008766:	4b46      	ldr	r3, [pc, #280]	; (8008880 <xPortStartScheduler+0x120>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <xPortStartScheduler+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d10a      	bne.n	8008786 <xPortStartScheduler+0x26>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008786:	4b3e      	ldr	r3, [pc, #248]	; (8008880 <xPortStartScheduler+0x120>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a3f      	ldr	r2, [pc, #252]	; (8008888 <xPortStartScheduler+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10a      	bne.n	80087a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	60fb      	str	r3, [r7, #12]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087a6:	4b39      	ldr	r3, [pc, #228]	; (800888c <xPortStartScheduler+0x12c>)
 80087a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	22ff      	movs	r2, #255	; 0xff
 80087b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4b31      	ldr	r3, [pc, #196]	; (8008890 <xPortStartScheduler+0x130>)
 80087cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ce:	4b31      	ldr	r3, [pc, #196]	; (8008894 <xPortStartScheduler+0x134>)
 80087d0:	2207      	movs	r2, #7
 80087d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087d4:	e009      	b.n	80087ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087d6:	4b2f      	ldr	r3, [pc, #188]	; (8008894 <xPortStartScheduler+0x134>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3b01      	subs	r3, #1
 80087dc:	4a2d      	ldr	r2, [pc, #180]	; (8008894 <xPortStartScheduler+0x134>)
 80087de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087ea:	78fb      	ldrb	r3, [r7, #3]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f2:	2b80      	cmp	r3, #128	; 0x80
 80087f4:	d0ef      	beq.n	80087d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087f6:	4b27      	ldr	r3, [pc, #156]	; (8008894 <xPortStartScheduler+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f1c3 0307 	rsb	r3, r3, #7
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d00a      	beq.n	8008818 <xPortStartScheduler+0xb8>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60bb      	str	r3, [r7, #8]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008818:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <xPortStartScheduler+0x134>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <xPortStartScheduler+0x134>)
 8008820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <xPortStartScheduler+0x134>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800882a:	4a1a      	ldr	r2, [pc, #104]	; (8008894 <xPortStartScheduler+0x134>)
 800882c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	b2da      	uxtb	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008836:	4b18      	ldr	r3, [pc, #96]	; (8008898 <xPortStartScheduler+0x138>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a17      	ldr	r2, [pc, #92]	; (8008898 <xPortStartScheduler+0x138>)
 800883c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <xPortStartScheduler+0x138>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a14      	ldr	r2, [pc, #80]	; (8008898 <xPortStartScheduler+0x138>)
 8008848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800884c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800884e:	f000 f8dd 	bl	8008a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <xPortStartScheduler+0x13c>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008858:	f000 f8fc 	bl	8008a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800885c:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <xPortStartScheduler+0x140>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0f      	ldr	r2, [pc, #60]	; (80088a0 <xPortStartScheduler+0x140>)
 8008862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008868:	f7ff ff66 	bl	8008738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800886c:	f7ff f850 	bl	8007910 <vTaskSwitchContext>
	prvTaskExitError();
 8008870:	f7ff ff1c 	bl	80086ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	e000ed00 	.word	0xe000ed00
 8008884:	410fc271 	.word	0x410fc271
 8008888:	410fc270 	.word	0x410fc270
 800888c:	e000e400 	.word	0xe000e400
 8008890:	20000ee8 	.word	0x20000ee8
 8008894:	20000eec 	.word	0x20000eec
 8008898:	e000ed20 	.word	0xe000ed20
 800889c:	2000000c 	.word	0x2000000c
 80088a0:	e000ef34 	.word	0xe000ef34

080088a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	607b      	str	r3, [r7, #4]
}
 80088bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <vPortEnterCritical+0x58>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	4a0d      	ldr	r2, [pc, #52]	; (80088fc <vPortEnterCritical+0x58>)
 80088c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <vPortEnterCritical+0x58>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10f      	bne.n	80088f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <vPortEnterCritical+0x5c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vPortEnterCritical+0x4a>
	}
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	2000000c 	.word	0x2000000c
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800890a:	4b12      	ldr	r3, [pc, #72]	; (8008954 <vPortExitCritical+0x50>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <vPortExitCritical+0x24>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	607b      	str	r3, [r7, #4]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <vPortExitCritical+0x50>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3b01      	subs	r3, #1
 800892e:	4a09      	ldr	r2, [pc, #36]	; (8008954 <vPortExitCritical+0x50>)
 8008930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008932:	4b08      	ldr	r3, [pc, #32]	; (8008954 <vPortExitCritical+0x50>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <vPortExitCritical+0x42>
 800893a:	2300      	movs	r3, #0
 800893c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f383 8811 	msr	BASEPRI, r3
}
 8008944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	2000000c 	.word	0x2000000c
	...

08008960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008960:	f3ef 8009 	mrs	r0, PSP
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4b15      	ldr	r3, [pc, #84]	; (80089c0 <pxCurrentTCBConst>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	f01e 0f10 	tst.w	lr, #16
 8008970:	bf08      	it	eq
 8008972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	6010      	str	r0, [r2, #0]
 800897c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008984:	f380 8811 	msr	BASEPRI, r0
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f7fe ffbe 	bl	8007910 <vTaskSwitchContext>
 8008994:	f04f 0000 	mov.w	r0, #0
 8008998:	f380 8811 	msr	BASEPRI, r0
 800899c:	bc09      	pop	{r0, r3}
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	6808      	ldr	r0, [r1, #0]
 80089a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a6:	f01e 0f10 	tst.w	lr, #16
 80089aa:	bf08      	it	eq
 80089ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089b0:	f380 8809 	msr	PSP, r0
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	f3af 8000 	nop.w

080089c0 <pxCurrentTCBConst>:
 80089c0:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop

080089c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	607b      	str	r3, [r7, #4]
}
 80089e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089e2:	f7fe fedb 	bl	800779c <xTaskIncrementTick>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <xPortSysTickHandler+0x40>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	2300      	movs	r3, #0
 80089f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	f383 8811 	msr	BASEPRI, r3
}
 80089fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <vPortSetupTimerInterrupt+0x38>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a1c:	4b0a      	ldr	r3, [pc, #40]	; (8008a48 <vPortSetupTimerInterrupt+0x3c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <vPortSetupTimerInterrupt+0x40>)
 8008a22:	fba2 2303 	umull	r2, r3, r2, r3
 8008a26:	099b      	lsrs	r3, r3, #6
 8008a28:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <vPortSetupTimerInterrupt+0x44>)
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <vPortSetupTimerInterrupt+0x34>)
 8008a30:	2207      	movs	r2, #7
 8008a32:	601a      	str	r2, [r3, #0]
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	e000e010 	.word	0xe000e010
 8008a44:	e000e018 	.word	0xe000e018
 8008a48:	20000000 	.word	0x20000000
 8008a4c:	10624dd3 	.word	0x10624dd3
 8008a50:	e000e014 	.word	0xe000e014

08008a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a64 <vPortEnableVFP+0x10>
 8008a58:	6801      	ldr	r1, [r0, #0]
 8008a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a5e:	6001      	str	r1, [r0, #0]
 8008a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a62:	bf00      	nop
 8008a64:	e000ed88 	.word	0xe000ed88

08008a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b0f      	cmp	r3, #15
 8008a78:	d914      	bls.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <vPortValidateInterruptPriority+0x70>)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a84:	4b15      	ldr	r3, [pc, #84]	; (8008adc <vPortValidateInterruptPriority+0x74>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	7afa      	ldrb	r2, [r7, #11]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d20a      	bcs.n	8008aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
 8008aa2:	e7fe      	b.n	8008aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <vPortValidateInterruptPriority+0x78>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <vPortValidateInterruptPriority+0x7c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d90a      	bls.n	8008aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	603b      	str	r3, [r7, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <vPortValidateInterruptPriority+0x60>
	}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000e3f0 	.word	0xe000e3f0
 8008adc:	20000ee8 	.word	0x20000ee8
 8008ae0:	e000ed0c 	.word	0xe000ed0c
 8008ae4:	20000eec 	.word	0x20000eec

08008ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008af4:	f7fe fd96 	bl	8007624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008af8:	4b5b      	ldr	r3, [pc, #364]	; (8008c68 <pvPortMalloc+0x180>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b00:	f000 f920 	bl	8008d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b04:	4b59      	ldr	r3, [pc, #356]	; (8008c6c <pvPortMalloc+0x184>)
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 8093 	bne.w	8008c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b18:	2208      	movs	r2, #8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d014      	beq.n	8008b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	3308      	adds	r3, #8
 8008b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <pvPortMalloc+0x6c>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	617b      	str	r3, [r7, #20]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d06e      	beq.n	8008c38 <pvPortMalloc+0x150>
 8008b5a:	4b45      	ldr	r3, [pc, #276]	; (8008c70 <pvPortMalloc+0x188>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d869      	bhi.n	8008c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b64:	4b43      	ldr	r3, [pc, #268]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b68:	4b42      	ldr	r3, [pc, #264]	; (8008c74 <pvPortMalloc+0x18c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b6e:	e004      	b.n	8008b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d903      	bls.n	8008b8c <pvPortMalloc+0xa4>
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f1      	bne.n	8008b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b8c:	4b36      	ldr	r3, [pc, #216]	; (8008c68 <pvPortMalloc+0x180>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d050      	beq.n	8008c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	4413      	add	r3, r2
 8008b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	6a3b      	ldr	r3, [r7, #32]
 8008ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	1ad2      	subs	r2, r2, r3
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d91f      	bls.n	8008bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <pvPortMalloc+0xf8>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	613b      	str	r3, [r7, #16]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bf2:	69b8      	ldr	r0, [r7, #24]
 8008bf4:	f000 f908 	bl	8008e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <pvPortMalloc+0x188>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <pvPortMalloc+0x188>)
 8008c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <pvPortMalloc+0x188>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <pvPortMalloc+0x190>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d203      	bcs.n	8008c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c12:	4b17      	ldr	r3, [pc, #92]	; (8008c70 <pvPortMalloc+0x188>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <pvPortMalloc+0x190>)
 8008c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	4b13      	ldr	r3, [pc, #76]	; (8008c6c <pvPortMalloc+0x184>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	431a      	orrs	r2, r3
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c2e:	4b13      	ldr	r3, [pc, #76]	; (8008c7c <pvPortMalloc+0x194>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <pvPortMalloc+0x194>)
 8008c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c38:	f7fe fd02 	bl	8007640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <pvPortMalloc+0x174>
	__asm volatile
 8008c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	60fb      	str	r3, [r7, #12]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <pvPortMalloc+0x172>
	return pvReturn;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20001ab0 	.word	0x20001ab0
 8008c6c:	20001ac4 	.word	0x20001ac4
 8008c70:	20001ab4 	.word	0x20001ab4
 8008c74:	20001aa8 	.word	0x20001aa8
 8008c78:	20001ab8 	.word	0x20001ab8
 8008c7c:	20001abc 	.word	0x20001abc

08008c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d04d      	beq.n	8008d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c92:	2308      	movs	r3, #8
 8008c94:	425b      	negs	r3, r3
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4413      	add	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	4b24      	ldr	r3, [pc, #144]	; (8008d38 <vPortFree+0xb8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10a      	bne.n	8008cc4 <vPortFree+0x44>
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	60fb      	str	r3, [r7, #12]
}
 8008cc0:	bf00      	nop
 8008cc2:	e7fe      	b.n	8008cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <vPortFree+0x62>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60bb      	str	r3, [r7, #8]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <vPortFree+0xb8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01e      	beq.n	8008d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d11a      	bne.n	8008d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b0e      	ldr	r3, [pc, #56]	; (8008d38 <vPortFree+0xb8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	401a      	ands	r2, r3
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d08:	f7fe fc8c 	bl	8007624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <vPortFree+0xbc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4413      	add	r3, r2
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <vPortFree+0xbc>)
 8008d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f000 f874 	bl	8008e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d20:	4b07      	ldr	r3, [pc, #28]	; (8008d40 <vPortFree+0xc0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	4a06      	ldr	r2, [pc, #24]	; (8008d40 <vPortFree+0xc0>)
 8008d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d2a:	f7fe fc89 	bl	8007640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20001ac4 	.word	0x20001ac4
 8008d3c:	20001ab4 	.word	0x20001ab4
 8008d40:	20001ac0 	.word	0x20001ac0

08008d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d50:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <prvHeapInit+0xac>)
 8008d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00c      	beq.n	8008d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3307      	adds	r3, #7
 8008d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <prvHeapInit+0xac>)
 8008d74:	4413      	add	r3, r2
 8008d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d7c:	4a1d      	ldr	r2, [pc, #116]	; (8008df4 <prvHeapInit+0xb0>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d82:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <prvHeapInit+0xb0>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d90:	2208      	movs	r2, #8
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0307 	bic.w	r3, r3, #7
 8008d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4a15      	ldr	r2, [pc, #84]	; (8008df8 <prvHeapInit+0xb4>)
 8008da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <prvHeapInit+0xb4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <prvHeapInit+0xb4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <prvHeapInit+0xb4>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	; (8008dfc <prvHeapInit+0xb8>)
 8008dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <prvHeapInit+0xbc>)
 8008dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <prvHeapInit+0xc0>)
 8008dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008de2:	601a      	str	r2, [r3, #0]
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	20000ef0 	.word	0x20000ef0
 8008df4:	20001aa8 	.word	0x20001aa8
 8008df8:	20001ab0 	.word	0x20001ab0
 8008dfc:	20001ab8 	.word	0x20001ab8
 8008e00:	20001ab4 	.word	0x20001ab4
 8008e04:	20001ac4 	.word	0x20001ac4

08008e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e10:	4b28      	ldr	r3, [pc, #160]	; (8008eb4 <prvInsertBlockIntoFreeList+0xac>)
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e002      	b.n	8008e1c <prvInsertBlockIntoFreeList+0x14>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d8f7      	bhi.n	8008e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d108      	bne.n	8008e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	441a      	add	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	441a      	add	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d118      	bne.n	8008e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d00d      	beq.n	8008e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	441a      	add	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	e008      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e86:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	e003      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d002      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20001aa8 	.word	0x20001aa8
 8008eb8:	20001ab0 	.word	0x20001ab0

08008ebc <__errno>:
 8008ebc:	4b01      	ldr	r3, [pc, #4]	; (8008ec4 <__errno+0x8>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000010 	.word	0x20000010

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	; (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	; (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	; (8008f0c <__libc_init_array+0x44>)
 8008edc:	f002 fd84 	bl	800b9e8 <_init>
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	0800be9c 	.word	0x0800be9c
 8008f04:	0800be9c 	.word	0x0800be9c
 8008f08:	0800be9c 	.word	0x0800be9c
 8008f0c:	0800bea0 	.word	0x0800bea0

08008f10 <malloc>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <malloc+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f000 b871 	b.w	8008ffc <_malloc_r>
 8008f1a:	bf00      	nop
 8008f1c:	20000010 	.word	0x20000010

08008f20 <free>:
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <free+0xc>)
 8008f22:	4601      	mov	r1, r0
 8008f24:	6818      	ldr	r0, [r3, #0]
 8008f26:	f000 b819 	b.w	8008f5c <_free_r>
 8008f2a:	bf00      	nop
 8008f2c:	20000010 	.word	0x20000010

08008f30 <memcpy>:
 8008f30:	440a      	add	r2, r1
 8008f32:	4291      	cmp	r1, r2
 8008f34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f38:	d100      	bne.n	8008f3c <memcpy+0xc>
 8008f3a:	4770      	bx	lr
 8008f3c:	b510      	push	{r4, lr}
 8008f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f46:	4291      	cmp	r1, r2
 8008f48:	d1f9      	bne.n	8008f3e <memcpy+0xe>
 8008f4a:	bd10      	pop	{r4, pc}

08008f4c <memset>:
 8008f4c:	4402      	add	r2, r0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <_free_r>:
 8008f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d048      	beq.n	8008ff4 <_free_r+0x98>
 8008f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f6e:	bfb8      	it	lt
 8008f70:	18e4      	addlt	r4, r4, r3
 8008f72:	f001 ff01 	bl	800ad78 <__malloc_lock>
 8008f76:	4a20      	ldr	r2, [pc, #128]	; (8008ff8 <_free_r+0x9c>)
 8008f78:	9801      	ldr	r0, [sp, #4]
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	4615      	mov	r5, r2
 8008f7e:	b933      	cbnz	r3, 8008f8e <_free_r+0x32>
 8008f80:	6063      	str	r3, [r4, #4]
 8008f82:	6014      	str	r4, [r2, #0]
 8008f84:	b003      	add	sp, #12
 8008f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f8a:	f001 befb 	b.w	800ad84 <__malloc_unlock>
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	d90b      	bls.n	8008faa <_free_r+0x4e>
 8008f92:	6821      	ldr	r1, [r4, #0]
 8008f94:	1862      	adds	r2, r4, r1
 8008f96:	4293      	cmp	r3, r2
 8008f98:	bf04      	itt	eq
 8008f9a:	681a      	ldreq	r2, [r3, #0]
 8008f9c:	685b      	ldreq	r3, [r3, #4]
 8008f9e:	6063      	str	r3, [r4, #4]
 8008fa0:	bf04      	itt	eq
 8008fa2:	1852      	addeq	r2, r2, r1
 8008fa4:	6022      	streq	r2, [r4, #0]
 8008fa6:	602c      	str	r4, [r5, #0]
 8008fa8:	e7ec      	b.n	8008f84 <_free_r+0x28>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x58>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x4e>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1855      	adds	r5, r2, r1
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x78>
 8008fbc:	6824      	ldr	r4, [r4, #0]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	1854      	adds	r4, r2, r1
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1dd      	bne.n	8008f84 <_free_r+0x28>
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	4421      	add	r1, r4
 8008fd0:	6011      	str	r1, [r2, #0]
 8008fd2:	e7d7      	b.n	8008f84 <_free_r+0x28>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x80>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7d3      	b.n	8008f84 <_free_r+0x28>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7c7      	b.n	8008f84 <_free_r+0x28>
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	20001ac8 	.word	0x20001ac8

08008ffc <_malloc_r>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	1ccd      	adds	r5, r1, #3
 8009000:	f025 0503 	bic.w	r5, r5, #3
 8009004:	3508      	adds	r5, #8
 8009006:	2d0c      	cmp	r5, #12
 8009008:	bf38      	it	cc
 800900a:	250c      	movcc	r5, #12
 800900c:	2d00      	cmp	r5, #0
 800900e:	4606      	mov	r6, r0
 8009010:	db01      	blt.n	8009016 <_malloc_r+0x1a>
 8009012:	42a9      	cmp	r1, r5
 8009014:	d903      	bls.n	800901e <_malloc_r+0x22>
 8009016:	230c      	movs	r3, #12
 8009018:	6033      	str	r3, [r6, #0]
 800901a:	2000      	movs	r0, #0
 800901c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901e:	f001 feab 	bl	800ad78 <__malloc_lock>
 8009022:	4921      	ldr	r1, [pc, #132]	; (80090a8 <_malloc_r+0xac>)
 8009024:	680a      	ldr	r2, [r1, #0]
 8009026:	4614      	mov	r4, r2
 8009028:	b99c      	cbnz	r4, 8009052 <_malloc_r+0x56>
 800902a:	4f20      	ldr	r7, [pc, #128]	; (80090ac <_malloc_r+0xb0>)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	b923      	cbnz	r3, 800903a <_malloc_r+0x3e>
 8009030:	4621      	mov	r1, r4
 8009032:	4630      	mov	r0, r6
 8009034:	f000 fd34 	bl	8009aa0 <_sbrk_r>
 8009038:	6038      	str	r0, [r7, #0]
 800903a:	4629      	mov	r1, r5
 800903c:	4630      	mov	r0, r6
 800903e:	f000 fd2f 	bl	8009aa0 <_sbrk_r>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d123      	bne.n	800908e <_malloc_r+0x92>
 8009046:	230c      	movs	r3, #12
 8009048:	6033      	str	r3, [r6, #0]
 800904a:	4630      	mov	r0, r6
 800904c:	f001 fe9a 	bl	800ad84 <__malloc_unlock>
 8009050:	e7e3      	b.n	800901a <_malloc_r+0x1e>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	1b5b      	subs	r3, r3, r5
 8009056:	d417      	bmi.n	8009088 <_malloc_r+0x8c>
 8009058:	2b0b      	cmp	r3, #11
 800905a:	d903      	bls.n	8009064 <_malloc_r+0x68>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	441c      	add	r4, r3
 8009060:	6025      	str	r5, [r4, #0]
 8009062:	e004      	b.n	800906e <_malloc_r+0x72>
 8009064:	6863      	ldr	r3, [r4, #4]
 8009066:	42a2      	cmp	r2, r4
 8009068:	bf0c      	ite	eq
 800906a:	600b      	streq	r3, [r1, #0]
 800906c:	6053      	strne	r3, [r2, #4]
 800906e:	4630      	mov	r0, r6
 8009070:	f001 fe88 	bl	800ad84 <__malloc_unlock>
 8009074:	f104 000b 	add.w	r0, r4, #11
 8009078:	1d23      	adds	r3, r4, #4
 800907a:	f020 0007 	bic.w	r0, r0, #7
 800907e:	1ac2      	subs	r2, r0, r3
 8009080:	d0cc      	beq.n	800901c <_malloc_r+0x20>
 8009082:	1a1b      	subs	r3, r3, r0
 8009084:	50a3      	str	r3, [r4, r2]
 8009086:	e7c9      	b.n	800901c <_malloc_r+0x20>
 8009088:	4622      	mov	r2, r4
 800908a:	6864      	ldr	r4, [r4, #4]
 800908c:	e7cc      	b.n	8009028 <_malloc_r+0x2c>
 800908e:	1cc4      	adds	r4, r0, #3
 8009090:	f024 0403 	bic.w	r4, r4, #3
 8009094:	42a0      	cmp	r0, r4
 8009096:	d0e3      	beq.n	8009060 <_malloc_r+0x64>
 8009098:	1a21      	subs	r1, r4, r0
 800909a:	4630      	mov	r0, r6
 800909c:	f000 fd00 	bl	8009aa0 <_sbrk_r>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d1dd      	bne.n	8009060 <_malloc_r+0x64>
 80090a4:	e7cf      	b.n	8009046 <_malloc_r+0x4a>
 80090a6:	bf00      	nop
 80090a8:	20001ac8 	.word	0x20001ac8
 80090ac:	20001acc 	.word	0x20001acc

080090b0 <__cvt>:
 80090b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090b4:	ec55 4b10 	vmov	r4, r5, d0
 80090b8:	2d00      	cmp	r5, #0
 80090ba:	460e      	mov	r6, r1
 80090bc:	4619      	mov	r1, r3
 80090be:	462b      	mov	r3, r5
 80090c0:	bfbb      	ittet	lt
 80090c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090c6:	461d      	movlt	r5, r3
 80090c8:	2300      	movge	r3, #0
 80090ca:	232d      	movlt	r3, #45	; 0x2d
 80090cc:	700b      	strb	r3, [r1, #0]
 80090ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090d4:	4691      	mov	r9, r2
 80090d6:	f023 0820 	bic.w	r8, r3, #32
 80090da:	bfbc      	itt	lt
 80090dc:	4622      	movlt	r2, r4
 80090de:	4614      	movlt	r4, r2
 80090e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090e4:	d005      	beq.n	80090f2 <__cvt+0x42>
 80090e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090ea:	d100      	bne.n	80090ee <__cvt+0x3e>
 80090ec:	3601      	adds	r6, #1
 80090ee:	2102      	movs	r1, #2
 80090f0:	e000      	b.n	80090f4 <__cvt+0x44>
 80090f2:	2103      	movs	r1, #3
 80090f4:	ab03      	add	r3, sp, #12
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	ab02      	add	r3, sp, #8
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	ec45 4b10 	vmov	d0, r4, r5
 8009100:	4653      	mov	r3, sl
 8009102:	4632      	mov	r2, r6
 8009104:	f000 fe28 	bl	8009d58 <_dtoa_r>
 8009108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800910c:	4607      	mov	r7, r0
 800910e:	d102      	bne.n	8009116 <__cvt+0x66>
 8009110:	f019 0f01 	tst.w	r9, #1
 8009114:	d022      	beq.n	800915c <__cvt+0xac>
 8009116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800911a:	eb07 0906 	add.w	r9, r7, r6
 800911e:	d110      	bne.n	8009142 <__cvt+0x92>
 8009120:	783b      	ldrb	r3, [r7, #0]
 8009122:	2b30      	cmp	r3, #48	; 0x30
 8009124:	d10a      	bne.n	800913c <__cvt+0x8c>
 8009126:	2200      	movs	r2, #0
 8009128:	2300      	movs	r3, #0
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009132:	b918      	cbnz	r0, 800913c <__cvt+0x8c>
 8009134:	f1c6 0601 	rsb	r6, r6, #1
 8009138:	f8ca 6000 	str.w	r6, [sl]
 800913c:	f8da 3000 	ldr.w	r3, [sl]
 8009140:	4499      	add	r9, r3
 8009142:	2200      	movs	r2, #0
 8009144:	2300      	movs	r3, #0
 8009146:	4620      	mov	r0, r4
 8009148:	4629      	mov	r1, r5
 800914a:	f7f7 fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800914e:	b108      	cbz	r0, 8009154 <__cvt+0xa4>
 8009150:	f8cd 900c 	str.w	r9, [sp, #12]
 8009154:	2230      	movs	r2, #48	; 0x30
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	454b      	cmp	r3, r9
 800915a:	d307      	bcc.n	800916c <__cvt+0xbc>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009160:	1bdb      	subs	r3, r3, r7
 8009162:	4638      	mov	r0, r7
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	b004      	add	sp, #16
 8009168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916c:	1c59      	adds	r1, r3, #1
 800916e:	9103      	str	r1, [sp, #12]
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	e7f0      	b.n	8009156 <__cvt+0xa6>

08009174 <__exponent>:
 8009174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009176:	4603      	mov	r3, r0
 8009178:	2900      	cmp	r1, #0
 800917a:	bfb8      	it	lt
 800917c:	4249      	neglt	r1, r1
 800917e:	f803 2b02 	strb.w	r2, [r3], #2
 8009182:	bfb4      	ite	lt
 8009184:	222d      	movlt	r2, #45	; 0x2d
 8009186:	222b      	movge	r2, #43	; 0x2b
 8009188:	2909      	cmp	r1, #9
 800918a:	7042      	strb	r2, [r0, #1]
 800918c:	dd2a      	ble.n	80091e4 <__exponent+0x70>
 800918e:	f10d 0407 	add.w	r4, sp, #7
 8009192:	46a4      	mov	ip, r4
 8009194:	270a      	movs	r7, #10
 8009196:	46a6      	mov	lr, r4
 8009198:	460a      	mov	r2, r1
 800919a:	fb91 f6f7 	sdiv	r6, r1, r7
 800919e:	fb07 1516 	mls	r5, r7, r6, r1
 80091a2:	3530      	adds	r5, #48	; 0x30
 80091a4:	2a63      	cmp	r2, #99	; 0x63
 80091a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80091aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091ae:	4631      	mov	r1, r6
 80091b0:	dcf1      	bgt.n	8009196 <__exponent+0x22>
 80091b2:	3130      	adds	r1, #48	; 0x30
 80091b4:	f1ae 0502 	sub.w	r5, lr, #2
 80091b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091bc:	1c44      	adds	r4, r0, #1
 80091be:	4629      	mov	r1, r5
 80091c0:	4561      	cmp	r1, ip
 80091c2:	d30a      	bcc.n	80091da <__exponent+0x66>
 80091c4:	f10d 0209 	add.w	r2, sp, #9
 80091c8:	eba2 020e 	sub.w	r2, r2, lr
 80091cc:	4565      	cmp	r5, ip
 80091ce:	bf88      	it	hi
 80091d0:	2200      	movhi	r2, #0
 80091d2:	4413      	add	r3, r2
 80091d4:	1a18      	subs	r0, r3, r0
 80091d6:	b003      	add	sp, #12
 80091d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091e2:	e7ed      	b.n	80091c0 <__exponent+0x4c>
 80091e4:	2330      	movs	r3, #48	; 0x30
 80091e6:	3130      	adds	r1, #48	; 0x30
 80091e8:	7083      	strb	r3, [r0, #2]
 80091ea:	70c1      	strb	r1, [r0, #3]
 80091ec:	1d03      	adds	r3, r0, #4
 80091ee:	e7f1      	b.n	80091d4 <__exponent+0x60>

080091f0 <_printf_float>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	ed2d 8b02 	vpush	{d8}
 80091f8:	b08d      	sub	sp, #52	; 0x34
 80091fa:	460c      	mov	r4, r1
 80091fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009200:	4616      	mov	r6, r2
 8009202:	461f      	mov	r7, r3
 8009204:	4605      	mov	r5, r0
 8009206:	f001 fd4b 	bl	800aca0 <_localeconv_r>
 800920a:	f8d0 a000 	ldr.w	sl, [r0]
 800920e:	4650      	mov	r0, sl
 8009210:	f7f6 ffde 	bl	80001d0 <strlen>
 8009214:	2300      	movs	r3, #0
 8009216:	930a      	str	r3, [sp, #40]	; 0x28
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	f8d8 3000 	ldr.w	r3, [r8]
 8009220:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009224:	3307      	adds	r3, #7
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	f103 0208 	add.w	r2, r3, #8
 800922e:	f8c8 2000 	str.w	r2, [r8]
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800923a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800923e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009242:	9307      	str	r3, [sp, #28]
 8009244:	f8cd 8018 	str.w	r8, [sp, #24]
 8009248:	ee08 0a10 	vmov	s16, r0
 800924c:	4b9f      	ldr	r3, [pc, #636]	; (80094cc <_printf_float+0x2dc>)
 800924e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009256:	f7f7 fc69 	bl	8000b2c <__aeabi_dcmpun>
 800925a:	bb88      	cbnz	r0, 80092c0 <_printf_float+0xd0>
 800925c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009260:	4b9a      	ldr	r3, [pc, #616]	; (80094cc <_printf_float+0x2dc>)
 8009262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009266:	f7f7 fc43 	bl	8000af0 <__aeabi_dcmple>
 800926a:	bb48      	cbnz	r0, 80092c0 <_printf_float+0xd0>
 800926c:	2200      	movs	r2, #0
 800926e:	2300      	movs	r3, #0
 8009270:	4640      	mov	r0, r8
 8009272:	4649      	mov	r1, r9
 8009274:	f7f7 fc32 	bl	8000adc <__aeabi_dcmplt>
 8009278:	b110      	cbz	r0, 8009280 <_printf_float+0x90>
 800927a:	232d      	movs	r3, #45	; 0x2d
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	4b93      	ldr	r3, [pc, #588]	; (80094d0 <_printf_float+0x2e0>)
 8009282:	4894      	ldr	r0, [pc, #592]	; (80094d4 <_printf_float+0x2e4>)
 8009284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009288:	bf94      	ite	ls
 800928a:	4698      	movls	r8, r3
 800928c:	4680      	movhi	r8, r0
 800928e:	2303      	movs	r3, #3
 8009290:	6123      	str	r3, [r4, #16]
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	f023 0204 	bic.w	r2, r3, #4
 8009298:	6022      	str	r2, [r4, #0]
 800929a:	f04f 0900 	mov.w	r9, #0
 800929e:	9700      	str	r7, [sp, #0]
 80092a0:	4633      	mov	r3, r6
 80092a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 f9d8 	bl	800965c <_printf_common>
 80092ac:	3001      	adds	r0, #1
 80092ae:	f040 8090 	bne.w	80093d2 <_printf_float+0x1e2>
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b6:	b00d      	add	sp, #52	; 0x34
 80092b8:	ecbd 8b02 	vpop	{d8}
 80092bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f7 fc30 	bl	8000b2c <__aeabi_dcmpun>
 80092cc:	b140      	cbz	r0, 80092e0 <_printf_float+0xf0>
 80092ce:	464b      	mov	r3, r9
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bfbc      	itt	lt
 80092d4:	232d      	movlt	r3, #45	; 0x2d
 80092d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092da:	487f      	ldr	r0, [pc, #508]	; (80094d8 <_printf_float+0x2e8>)
 80092dc:	4b7f      	ldr	r3, [pc, #508]	; (80094dc <_printf_float+0x2ec>)
 80092de:	e7d1      	b.n	8009284 <_printf_float+0x94>
 80092e0:	6863      	ldr	r3, [r4, #4]
 80092e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80092e6:	9206      	str	r2, [sp, #24]
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	d13f      	bne.n	800936c <_printf_float+0x17c>
 80092ec:	2306      	movs	r3, #6
 80092ee:	6063      	str	r3, [r4, #4]
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	6861      	ldr	r1, [r4, #4]
 80092f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80092f8:	2300      	movs	r3, #0
 80092fa:	9303      	str	r3, [sp, #12]
 80092fc:	ab0a      	add	r3, sp, #40	; 0x28
 80092fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009302:	ab09      	add	r3, sp, #36	; 0x24
 8009304:	ec49 8b10 	vmov	d0, r8, r9
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009310:	4628      	mov	r0, r5
 8009312:	f7ff fecd 	bl	80090b0 <__cvt>
 8009316:	9b06      	ldr	r3, [sp, #24]
 8009318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800931a:	2b47      	cmp	r3, #71	; 0x47
 800931c:	4680      	mov	r8, r0
 800931e:	d108      	bne.n	8009332 <_printf_float+0x142>
 8009320:	1cc8      	adds	r0, r1, #3
 8009322:	db02      	blt.n	800932a <_printf_float+0x13a>
 8009324:	6863      	ldr	r3, [r4, #4]
 8009326:	4299      	cmp	r1, r3
 8009328:	dd41      	ble.n	80093ae <_printf_float+0x1be>
 800932a:	f1ab 0b02 	sub.w	fp, fp, #2
 800932e:	fa5f fb8b 	uxtb.w	fp, fp
 8009332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009336:	d820      	bhi.n	800937a <_printf_float+0x18a>
 8009338:	3901      	subs	r1, #1
 800933a:	465a      	mov	r2, fp
 800933c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009340:	9109      	str	r1, [sp, #36]	; 0x24
 8009342:	f7ff ff17 	bl	8009174 <__exponent>
 8009346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009348:	1813      	adds	r3, r2, r0
 800934a:	2a01      	cmp	r2, #1
 800934c:	4681      	mov	r9, r0
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	dc02      	bgt.n	8009358 <_printf_float+0x168>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	07d2      	lsls	r2, r2, #31
 8009356:	d501      	bpl.n	800935c <_printf_float+0x16c>
 8009358:	3301      	adds	r3, #1
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009360:	2b00      	cmp	r3, #0
 8009362:	d09c      	beq.n	800929e <_printf_float+0xae>
 8009364:	232d      	movs	r3, #45	; 0x2d
 8009366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800936a:	e798      	b.n	800929e <_printf_float+0xae>
 800936c:	9a06      	ldr	r2, [sp, #24]
 800936e:	2a47      	cmp	r2, #71	; 0x47
 8009370:	d1be      	bne.n	80092f0 <_printf_float+0x100>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1bc      	bne.n	80092f0 <_printf_float+0x100>
 8009376:	2301      	movs	r3, #1
 8009378:	e7b9      	b.n	80092ee <_printf_float+0xfe>
 800937a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800937e:	d118      	bne.n	80093b2 <_printf_float+0x1c2>
 8009380:	2900      	cmp	r1, #0
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	dd0b      	ble.n	800939e <_printf_float+0x1ae>
 8009386:	6121      	str	r1, [r4, #16]
 8009388:	b913      	cbnz	r3, 8009390 <_printf_float+0x1a0>
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	07d0      	lsls	r0, r2, #31
 800938e:	d502      	bpl.n	8009396 <_printf_float+0x1a6>
 8009390:	3301      	adds	r3, #1
 8009392:	440b      	add	r3, r1
 8009394:	6123      	str	r3, [r4, #16]
 8009396:	65a1      	str	r1, [r4, #88]	; 0x58
 8009398:	f04f 0900 	mov.w	r9, #0
 800939c:	e7de      	b.n	800935c <_printf_float+0x16c>
 800939e:	b913      	cbnz	r3, 80093a6 <_printf_float+0x1b6>
 80093a0:	6822      	ldr	r2, [r4, #0]
 80093a2:	07d2      	lsls	r2, r2, #31
 80093a4:	d501      	bpl.n	80093aa <_printf_float+0x1ba>
 80093a6:	3302      	adds	r3, #2
 80093a8:	e7f4      	b.n	8009394 <_printf_float+0x1a4>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e7f2      	b.n	8009394 <_printf_float+0x1a4>
 80093ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b4:	4299      	cmp	r1, r3
 80093b6:	db05      	blt.n	80093c4 <_printf_float+0x1d4>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	6121      	str	r1, [r4, #16]
 80093bc:	07d8      	lsls	r0, r3, #31
 80093be:	d5ea      	bpl.n	8009396 <_printf_float+0x1a6>
 80093c0:	1c4b      	adds	r3, r1, #1
 80093c2:	e7e7      	b.n	8009394 <_printf_float+0x1a4>
 80093c4:	2900      	cmp	r1, #0
 80093c6:	bfd4      	ite	le
 80093c8:	f1c1 0202 	rsble	r2, r1, #2
 80093cc:	2201      	movgt	r2, #1
 80093ce:	4413      	add	r3, r2
 80093d0:	e7e0      	b.n	8009394 <_printf_float+0x1a4>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	055a      	lsls	r2, r3, #21
 80093d6:	d407      	bmi.n	80093e8 <_printf_float+0x1f8>
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	4642      	mov	r2, r8
 80093dc:	4631      	mov	r1, r6
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	d12c      	bne.n	8009440 <_printf_float+0x250>
 80093e6:	e764      	b.n	80092b2 <_printf_float+0xc2>
 80093e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093ec:	f240 80e0 	bls.w	80095b0 <_printf_float+0x3c0>
 80093f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f7f7 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d034      	beq.n	800946a <_printf_float+0x27a>
 8009400:	4a37      	ldr	r2, [pc, #220]	; (80094e0 <_printf_float+0x2f0>)
 8009402:	2301      	movs	r3, #1
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	47b8      	blx	r7
 800940a:	3001      	adds	r0, #1
 800940c:	f43f af51 	beq.w	80092b2 <_printf_float+0xc2>
 8009410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009414:	429a      	cmp	r2, r3
 8009416:	db02      	blt.n	800941e <_printf_float+0x22e>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	07d8      	lsls	r0, r3, #31
 800941c:	d510      	bpl.n	8009440 <_printf_float+0x250>
 800941e:	ee18 3a10 	vmov	r3, s16
 8009422:	4652      	mov	r2, sl
 8009424:	4631      	mov	r1, r6
 8009426:	4628      	mov	r0, r5
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f af41 	beq.w	80092b2 <_printf_float+0xc2>
 8009430:	f04f 0800 	mov.w	r8, #0
 8009434:	f104 091a 	add.w	r9, r4, #26
 8009438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943a:	3b01      	subs	r3, #1
 800943c:	4543      	cmp	r3, r8
 800943e:	dc09      	bgt.n	8009454 <_printf_float+0x264>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	079b      	lsls	r3, r3, #30
 8009444:	f100 8105 	bmi.w	8009652 <_printf_float+0x462>
 8009448:	68e0      	ldr	r0, [r4, #12]
 800944a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944c:	4298      	cmp	r0, r3
 800944e:	bfb8      	it	lt
 8009450:	4618      	movlt	r0, r3
 8009452:	e730      	b.n	80092b6 <_printf_float+0xc6>
 8009454:	2301      	movs	r3, #1
 8009456:	464a      	mov	r2, r9
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	f43f af27 	beq.w	80092b2 <_printf_float+0xc2>
 8009464:	f108 0801 	add.w	r8, r8, #1
 8009468:	e7e6      	b.n	8009438 <_printf_float+0x248>
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	dc39      	bgt.n	80094e4 <_printf_float+0x2f4>
 8009470:	4a1b      	ldr	r2, [pc, #108]	; (80094e0 <_printf_float+0x2f0>)
 8009472:	2301      	movs	r3, #1
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af19 	beq.w	80092b2 <_printf_float+0xc2>
 8009480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009484:	4313      	orrs	r3, r2
 8009486:	d102      	bne.n	800948e <_printf_float+0x29e>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d5d8      	bpl.n	8009440 <_printf_float+0x250>
 800948e:	ee18 3a10 	vmov	r3, s16
 8009492:	4652      	mov	r2, sl
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af09 	beq.w	80092b2 <_printf_float+0xc2>
 80094a0:	f04f 0900 	mov.w	r9, #0
 80094a4:	f104 0a1a 	add.w	sl, r4, #26
 80094a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094aa:	425b      	negs	r3, r3
 80094ac:	454b      	cmp	r3, r9
 80094ae:	dc01      	bgt.n	80094b4 <_printf_float+0x2c4>
 80094b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b2:	e792      	b.n	80093da <_printf_float+0x1ea>
 80094b4:	2301      	movs	r3, #1
 80094b6:	4652      	mov	r2, sl
 80094b8:	4631      	mov	r1, r6
 80094ba:	4628      	mov	r0, r5
 80094bc:	47b8      	blx	r7
 80094be:	3001      	adds	r0, #1
 80094c0:	f43f aef7 	beq.w	80092b2 <_printf_float+0xc2>
 80094c4:	f109 0901 	add.w	r9, r9, #1
 80094c8:	e7ee      	b.n	80094a8 <_printf_float+0x2b8>
 80094ca:	bf00      	nop
 80094cc:	7fefffff 	.word	0x7fefffff
 80094d0:	0800bab8 	.word	0x0800bab8
 80094d4:	0800babc 	.word	0x0800babc
 80094d8:	0800bac4 	.word	0x0800bac4
 80094dc:	0800bac0 	.word	0x0800bac0
 80094e0:	0800bac8 	.word	0x0800bac8
 80094e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bfa8      	it	ge
 80094ec:	461a      	movge	r2, r3
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	4691      	mov	r9, r2
 80094f2:	dc37      	bgt.n	8009564 <_printf_float+0x374>
 80094f4:	f04f 0b00 	mov.w	fp, #0
 80094f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094fc:	f104 021a 	add.w	r2, r4, #26
 8009500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	eba3 0309 	sub.w	r3, r3, r9
 8009508:	455b      	cmp	r3, fp
 800950a:	dc33      	bgt.n	8009574 <_printf_float+0x384>
 800950c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009510:	429a      	cmp	r2, r3
 8009512:	db3b      	blt.n	800958c <_printf_float+0x39c>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	07da      	lsls	r2, r3, #31
 8009518:	d438      	bmi.n	800958c <_printf_float+0x39c>
 800951a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951c:	9b05      	ldr	r3, [sp, #20]
 800951e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	eba2 0901 	sub.w	r9, r2, r1
 8009526:	4599      	cmp	r9, r3
 8009528:	bfa8      	it	ge
 800952a:	4699      	movge	r9, r3
 800952c:	f1b9 0f00 	cmp.w	r9, #0
 8009530:	dc35      	bgt.n	800959e <_printf_float+0x3ae>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800953a:	f104 0a1a 	add.w	sl, r4, #26
 800953e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	eba3 0309 	sub.w	r3, r3, r9
 8009548:	4543      	cmp	r3, r8
 800954a:	f77f af79 	ble.w	8009440 <_printf_float+0x250>
 800954e:	2301      	movs	r3, #1
 8009550:	4652      	mov	r2, sl
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f aeaa 	beq.w	80092b2 <_printf_float+0xc2>
 800955e:	f108 0801 	add.w	r8, r8, #1
 8009562:	e7ec      	b.n	800953e <_printf_float+0x34e>
 8009564:	4613      	mov	r3, r2
 8009566:	4631      	mov	r1, r6
 8009568:	4642      	mov	r2, r8
 800956a:	4628      	mov	r0, r5
 800956c:	47b8      	blx	r7
 800956e:	3001      	adds	r0, #1
 8009570:	d1c0      	bne.n	80094f4 <_printf_float+0x304>
 8009572:	e69e      	b.n	80092b2 <_printf_float+0xc2>
 8009574:	2301      	movs	r3, #1
 8009576:	4631      	mov	r1, r6
 8009578:	4628      	mov	r0, r5
 800957a:	9205      	str	r2, [sp, #20]
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f ae97 	beq.w	80092b2 <_printf_float+0xc2>
 8009584:	9a05      	ldr	r2, [sp, #20]
 8009586:	f10b 0b01 	add.w	fp, fp, #1
 800958a:	e7b9      	b.n	8009500 <_printf_float+0x310>
 800958c:	ee18 3a10 	vmov	r3, s16
 8009590:	4652      	mov	r2, sl
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	47b8      	blx	r7
 8009598:	3001      	adds	r0, #1
 800959a:	d1be      	bne.n	800951a <_printf_float+0x32a>
 800959c:	e689      	b.n	80092b2 <_printf_float+0xc2>
 800959e:	9a05      	ldr	r2, [sp, #20]
 80095a0:	464b      	mov	r3, r9
 80095a2:	4442      	add	r2, r8
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	d1c1      	bne.n	8009532 <_printf_float+0x342>
 80095ae:	e680      	b.n	80092b2 <_printf_float+0xc2>
 80095b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b2:	2a01      	cmp	r2, #1
 80095b4:	dc01      	bgt.n	80095ba <_printf_float+0x3ca>
 80095b6:	07db      	lsls	r3, r3, #31
 80095b8:	d538      	bpl.n	800962c <_printf_float+0x43c>
 80095ba:	2301      	movs	r3, #1
 80095bc:	4642      	mov	r2, r8
 80095be:	4631      	mov	r1, r6
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b8      	blx	r7
 80095c4:	3001      	adds	r0, #1
 80095c6:	f43f ae74 	beq.w	80092b2 <_printf_float+0xc2>
 80095ca:	ee18 3a10 	vmov	r3, s16
 80095ce:	4652      	mov	r2, sl
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f ae6b 	beq.w	80092b2 <_printf_float+0xc2>
 80095dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095e0:	2200      	movs	r2, #0
 80095e2:	2300      	movs	r3, #0
 80095e4:	f7f7 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80095e8:	b9d8      	cbnz	r0, 8009622 <_printf_float+0x432>
 80095ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ec:	f108 0201 	add.w	r2, r8, #1
 80095f0:	3b01      	subs	r3, #1
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	d10e      	bne.n	800961a <_printf_float+0x42a>
 80095fc:	e659      	b.n	80092b2 <_printf_float+0xc2>
 80095fe:	2301      	movs	r3, #1
 8009600:	4652      	mov	r2, sl
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f ae52 	beq.w	80092b2 <_printf_float+0xc2>
 800960e:	f108 0801 	add.w	r8, r8, #1
 8009612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009614:	3b01      	subs	r3, #1
 8009616:	4543      	cmp	r3, r8
 8009618:	dcf1      	bgt.n	80095fe <_printf_float+0x40e>
 800961a:	464b      	mov	r3, r9
 800961c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009620:	e6dc      	b.n	80093dc <_printf_float+0x1ec>
 8009622:	f04f 0800 	mov.w	r8, #0
 8009626:	f104 0a1a 	add.w	sl, r4, #26
 800962a:	e7f2      	b.n	8009612 <_printf_float+0x422>
 800962c:	2301      	movs	r3, #1
 800962e:	4642      	mov	r2, r8
 8009630:	e7df      	b.n	80095f2 <_printf_float+0x402>
 8009632:	2301      	movs	r3, #1
 8009634:	464a      	mov	r2, r9
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	f43f ae38 	beq.w	80092b2 <_printf_float+0xc2>
 8009642:	f108 0801 	add.w	r8, r8, #1
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800964a:	1a5b      	subs	r3, r3, r1
 800964c:	4543      	cmp	r3, r8
 800964e:	dcf0      	bgt.n	8009632 <_printf_float+0x442>
 8009650:	e6fa      	b.n	8009448 <_printf_float+0x258>
 8009652:	f04f 0800 	mov.w	r8, #0
 8009656:	f104 0919 	add.w	r9, r4, #25
 800965a:	e7f4      	b.n	8009646 <_printf_float+0x456>

0800965c <_printf_common>:
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009660:	4616      	mov	r6, r2
 8009662:	4699      	mov	r9, r3
 8009664:	688a      	ldr	r2, [r1, #8]
 8009666:	690b      	ldr	r3, [r1, #16]
 8009668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800966c:	4293      	cmp	r3, r2
 800966e:	bfb8      	it	lt
 8009670:	4613      	movlt	r3, r2
 8009672:	6033      	str	r3, [r6, #0]
 8009674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009678:	4607      	mov	r7, r0
 800967a:	460c      	mov	r4, r1
 800967c:	b10a      	cbz	r2, 8009682 <_printf_common+0x26>
 800967e:	3301      	adds	r3, #1
 8009680:	6033      	str	r3, [r6, #0]
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	0699      	lsls	r1, r3, #26
 8009686:	bf42      	ittt	mi
 8009688:	6833      	ldrmi	r3, [r6, #0]
 800968a:	3302      	addmi	r3, #2
 800968c:	6033      	strmi	r3, [r6, #0]
 800968e:	6825      	ldr	r5, [r4, #0]
 8009690:	f015 0506 	ands.w	r5, r5, #6
 8009694:	d106      	bne.n	80096a4 <_printf_common+0x48>
 8009696:	f104 0a19 	add.w	sl, r4, #25
 800969a:	68e3      	ldr	r3, [r4, #12]
 800969c:	6832      	ldr	r2, [r6, #0]
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dc26      	bgt.n	80096f2 <_printf_common+0x96>
 80096a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096a8:	1e13      	subs	r3, r2, #0
 80096aa:	6822      	ldr	r2, [r4, #0]
 80096ac:	bf18      	it	ne
 80096ae:	2301      	movne	r3, #1
 80096b0:	0692      	lsls	r2, r2, #26
 80096b2:	d42b      	bmi.n	800970c <_printf_common+0xb0>
 80096b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096b8:	4649      	mov	r1, r9
 80096ba:	4638      	mov	r0, r7
 80096bc:	47c0      	blx	r8
 80096be:	3001      	adds	r0, #1
 80096c0:	d01e      	beq.n	8009700 <_printf_common+0xa4>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	68e5      	ldr	r5, [r4, #12]
 80096c6:	6832      	ldr	r2, [r6, #0]
 80096c8:	f003 0306 	and.w	r3, r3, #6
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	bf08      	it	eq
 80096d0:	1aad      	subeq	r5, r5, r2
 80096d2:	68a3      	ldr	r3, [r4, #8]
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	bf0c      	ite	eq
 80096d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096dc:	2500      	movne	r5, #0
 80096de:	4293      	cmp	r3, r2
 80096e0:	bfc4      	itt	gt
 80096e2:	1a9b      	subgt	r3, r3, r2
 80096e4:	18ed      	addgt	r5, r5, r3
 80096e6:	2600      	movs	r6, #0
 80096e8:	341a      	adds	r4, #26
 80096ea:	42b5      	cmp	r5, r6
 80096ec:	d11a      	bne.n	8009724 <_printf_common+0xc8>
 80096ee:	2000      	movs	r0, #0
 80096f0:	e008      	b.n	8009704 <_printf_common+0xa8>
 80096f2:	2301      	movs	r3, #1
 80096f4:	4652      	mov	r2, sl
 80096f6:	4649      	mov	r1, r9
 80096f8:	4638      	mov	r0, r7
 80096fa:	47c0      	blx	r8
 80096fc:	3001      	adds	r0, #1
 80096fe:	d103      	bne.n	8009708 <_printf_common+0xac>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009708:	3501      	adds	r5, #1
 800970a:	e7c6      	b.n	800969a <_printf_common+0x3e>
 800970c:	18e1      	adds	r1, r4, r3
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	2030      	movs	r0, #48	; 0x30
 8009712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009716:	4422      	add	r2, r4
 8009718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800971c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009720:	3302      	adds	r3, #2
 8009722:	e7c7      	b.n	80096b4 <_printf_common+0x58>
 8009724:	2301      	movs	r3, #1
 8009726:	4622      	mov	r2, r4
 8009728:	4649      	mov	r1, r9
 800972a:	4638      	mov	r0, r7
 800972c:	47c0      	blx	r8
 800972e:	3001      	adds	r0, #1
 8009730:	d0e6      	beq.n	8009700 <_printf_common+0xa4>
 8009732:	3601      	adds	r6, #1
 8009734:	e7d9      	b.n	80096ea <_printf_common+0x8e>
	...

08009738 <_printf_i>:
 8009738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800973c:	460c      	mov	r4, r1
 800973e:	4691      	mov	r9, r2
 8009740:	7e27      	ldrb	r7, [r4, #24]
 8009742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009744:	2f78      	cmp	r7, #120	; 0x78
 8009746:	4680      	mov	r8, r0
 8009748:	469a      	mov	sl, r3
 800974a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800974e:	d807      	bhi.n	8009760 <_printf_i+0x28>
 8009750:	2f62      	cmp	r7, #98	; 0x62
 8009752:	d80a      	bhi.n	800976a <_printf_i+0x32>
 8009754:	2f00      	cmp	r7, #0
 8009756:	f000 80d8 	beq.w	800990a <_printf_i+0x1d2>
 800975a:	2f58      	cmp	r7, #88	; 0x58
 800975c:	f000 80a3 	beq.w	80098a6 <_printf_i+0x16e>
 8009760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009768:	e03a      	b.n	80097e0 <_printf_i+0xa8>
 800976a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800976e:	2b15      	cmp	r3, #21
 8009770:	d8f6      	bhi.n	8009760 <_printf_i+0x28>
 8009772:	a001      	add	r0, pc, #4	; (adr r0, 8009778 <_printf_i+0x40>)
 8009774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009778:	080097d1 	.word	0x080097d1
 800977c:	080097e5 	.word	0x080097e5
 8009780:	08009761 	.word	0x08009761
 8009784:	08009761 	.word	0x08009761
 8009788:	08009761 	.word	0x08009761
 800978c:	08009761 	.word	0x08009761
 8009790:	080097e5 	.word	0x080097e5
 8009794:	08009761 	.word	0x08009761
 8009798:	08009761 	.word	0x08009761
 800979c:	08009761 	.word	0x08009761
 80097a0:	08009761 	.word	0x08009761
 80097a4:	080098f1 	.word	0x080098f1
 80097a8:	08009815 	.word	0x08009815
 80097ac:	080098d3 	.word	0x080098d3
 80097b0:	08009761 	.word	0x08009761
 80097b4:	08009761 	.word	0x08009761
 80097b8:	08009913 	.word	0x08009913
 80097bc:	08009761 	.word	0x08009761
 80097c0:	08009815 	.word	0x08009815
 80097c4:	08009761 	.word	0x08009761
 80097c8:	08009761 	.word	0x08009761
 80097cc:	080098db 	.word	0x080098db
 80097d0:	680b      	ldr	r3, [r1, #0]
 80097d2:	1d1a      	adds	r2, r3, #4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	600a      	str	r2, [r1, #0]
 80097d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0a3      	b.n	800992c <_printf_i+0x1f4>
 80097e4:	6825      	ldr	r5, [r4, #0]
 80097e6:	6808      	ldr	r0, [r1, #0]
 80097e8:	062e      	lsls	r6, r5, #24
 80097ea:	f100 0304 	add.w	r3, r0, #4
 80097ee:	d50a      	bpl.n	8009806 <_printf_i+0xce>
 80097f0:	6805      	ldr	r5, [r0, #0]
 80097f2:	600b      	str	r3, [r1, #0]
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	da03      	bge.n	8009800 <_printf_i+0xc8>
 80097f8:	232d      	movs	r3, #45	; 0x2d
 80097fa:	426d      	negs	r5, r5
 80097fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009800:	485e      	ldr	r0, [pc, #376]	; (800997c <_printf_i+0x244>)
 8009802:	230a      	movs	r3, #10
 8009804:	e019      	b.n	800983a <_printf_i+0x102>
 8009806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800980a:	6805      	ldr	r5, [r0, #0]
 800980c:	600b      	str	r3, [r1, #0]
 800980e:	bf18      	it	ne
 8009810:	b22d      	sxthne	r5, r5
 8009812:	e7ef      	b.n	80097f4 <_printf_i+0xbc>
 8009814:	680b      	ldr	r3, [r1, #0]
 8009816:	6825      	ldr	r5, [r4, #0]
 8009818:	1d18      	adds	r0, r3, #4
 800981a:	6008      	str	r0, [r1, #0]
 800981c:	0628      	lsls	r0, r5, #24
 800981e:	d501      	bpl.n	8009824 <_printf_i+0xec>
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	e002      	b.n	800982a <_printf_i+0xf2>
 8009824:	0669      	lsls	r1, r5, #25
 8009826:	d5fb      	bpl.n	8009820 <_printf_i+0xe8>
 8009828:	881d      	ldrh	r5, [r3, #0]
 800982a:	4854      	ldr	r0, [pc, #336]	; (800997c <_printf_i+0x244>)
 800982c:	2f6f      	cmp	r7, #111	; 0x6f
 800982e:	bf0c      	ite	eq
 8009830:	2308      	moveq	r3, #8
 8009832:	230a      	movne	r3, #10
 8009834:	2100      	movs	r1, #0
 8009836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800983a:	6866      	ldr	r6, [r4, #4]
 800983c:	60a6      	str	r6, [r4, #8]
 800983e:	2e00      	cmp	r6, #0
 8009840:	bfa2      	ittt	ge
 8009842:	6821      	ldrge	r1, [r4, #0]
 8009844:	f021 0104 	bicge.w	r1, r1, #4
 8009848:	6021      	strge	r1, [r4, #0]
 800984a:	b90d      	cbnz	r5, 8009850 <_printf_i+0x118>
 800984c:	2e00      	cmp	r6, #0
 800984e:	d04d      	beq.n	80098ec <_printf_i+0x1b4>
 8009850:	4616      	mov	r6, r2
 8009852:	fbb5 f1f3 	udiv	r1, r5, r3
 8009856:	fb03 5711 	mls	r7, r3, r1, r5
 800985a:	5dc7      	ldrb	r7, [r0, r7]
 800985c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009860:	462f      	mov	r7, r5
 8009862:	42bb      	cmp	r3, r7
 8009864:	460d      	mov	r5, r1
 8009866:	d9f4      	bls.n	8009852 <_printf_i+0x11a>
 8009868:	2b08      	cmp	r3, #8
 800986a:	d10b      	bne.n	8009884 <_printf_i+0x14c>
 800986c:	6823      	ldr	r3, [r4, #0]
 800986e:	07df      	lsls	r7, r3, #31
 8009870:	d508      	bpl.n	8009884 <_printf_i+0x14c>
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	6861      	ldr	r1, [r4, #4]
 8009876:	4299      	cmp	r1, r3
 8009878:	bfde      	ittt	le
 800987a:	2330      	movle	r3, #48	; 0x30
 800987c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009880:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009884:	1b92      	subs	r2, r2, r6
 8009886:	6122      	str	r2, [r4, #16]
 8009888:	f8cd a000 	str.w	sl, [sp]
 800988c:	464b      	mov	r3, r9
 800988e:	aa03      	add	r2, sp, #12
 8009890:	4621      	mov	r1, r4
 8009892:	4640      	mov	r0, r8
 8009894:	f7ff fee2 	bl	800965c <_printf_common>
 8009898:	3001      	adds	r0, #1
 800989a:	d14c      	bne.n	8009936 <_printf_i+0x1fe>
 800989c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098a0:	b004      	add	sp, #16
 80098a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a6:	4835      	ldr	r0, [pc, #212]	; (800997c <_printf_i+0x244>)
 80098a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	680e      	ldr	r6, [r1, #0]
 80098b0:	061f      	lsls	r7, r3, #24
 80098b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80098b6:	600e      	str	r6, [r1, #0]
 80098b8:	d514      	bpl.n	80098e4 <_printf_i+0x1ac>
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	bf44      	itt	mi
 80098be:	f043 0320 	orrmi.w	r3, r3, #32
 80098c2:	6023      	strmi	r3, [r4, #0]
 80098c4:	b91d      	cbnz	r5, 80098ce <_printf_i+0x196>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	f023 0320 	bic.w	r3, r3, #32
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	2310      	movs	r3, #16
 80098d0:	e7b0      	b.n	8009834 <_printf_i+0xfc>
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	f043 0320 	orr.w	r3, r3, #32
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	2378      	movs	r3, #120	; 0x78
 80098dc:	4828      	ldr	r0, [pc, #160]	; (8009980 <_printf_i+0x248>)
 80098de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098e2:	e7e3      	b.n	80098ac <_printf_i+0x174>
 80098e4:	065e      	lsls	r6, r3, #25
 80098e6:	bf48      	it	mi
 80098e8:	b2ad      	uxthmi	r5, r5
 80098ea:	e7e6      	b.n	80098ba <_printf_i+0x182>
 80098ec:	4616      	mov	r6, r2
 80098ee:	e7bb      	b.n	8009868 <_printf_i+0x130>
 80098f0:	680b      	ldr	r3, [r1, #0]
 80098f2:	6826      	ldr	r6, [r4, #0]
 80098f4:	6960      	ldr	r0, [r4, #20]
 80098f6:	1d1d      	adds	r5, r3, #4
 80098f8:	600d      	str	r5, [r1, #0]
 80098fa:	0635      	lsls	r5, r6, #24
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	d501      	bpl.n	8009904 <_printf_i+0x1cc>
 8009900:	6018      	str	r0, [r3, #0]
 8009902:	e002      	b.n	800990a <_printf_i+0x1d2>
 8009904:	0671      	lsls	r1, r6, #25
 8009906:	d5fb      	bpl.n	8009900 <_printf_i+0x1c8>
 8009908:	8018      	strh	r0, [r3, #0]
 800990a:	2300      	movs	r3, #0
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	4616      	mov	r6, r2
 8009910:	e7ba      	b.n	8009888 <_printf_i+0x150>
 8009912:	680b      	ldr	r3, [r1, #0]
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	600a      	str	r2, [r1, #0]
 8009918:	681e      	ldr	r6, [r3, #0]
 800991a:	6862      	ldr	r2, [r4, #4]
 800991c:	2100      	movs	r1, #0
 800991e:	4630      	mov	r0, r6
 8009920:	f7f6 fc5e 	bl	80001e0 <memchr>
 8009924:	b108      	cbz	r0, 800992a <_printf_i+0x1f2>
 8009926:	1b80      	subs	r0, r0, r6
 8009928:	6060      	str	r0, [r4, #4]
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	2300      	movs	r3, #0
 8009930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009934:	e7a8      	b.n	8009888 <_printf_i+0x150>
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	4632      	mov	r2, r6
 800993a:	4649      	mov	r1, r9
 800993c:	4640      	mov	r0, r8
 800993e:	47d0      	blx	sl
 8009940:	3001      	adds	r0, #1
 8009942:	d0ab      	beq.n	800989c <_printf_i+0x164>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	079b      	lsls	r3, r3, #30
 8009948:	d413      	bmi.n	8009972 <_printf_i+0x23a>
 800994a:	68e0      	ldr	r0, [r4, #12]
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	4298      	cmp	r0, r3
 8009950:	bfb8      	it	lt
 8009952:	4618      	movlt	r0, r3
 8009954:	e7a4      	b.n	80098a0 <_printf_i+0x168>
 8009956:	2301      	movs	r3, #1
 8009958:	4632      	mov	r2, r6
 800995a:	4649      	mov	r1, r9
 800995c:	4640      	mov	r0, r8
 800995e:	47d0      	blx	sl
 8009960:	3001      	adds	r0, #1
 8009962:	d09b      	beq.n	800989c <_printf_i+0x164>
 8009964:	3501      	adds	r5, #1
 8009966:	68e3      	ldr	r3, [r4, #12]
 8009968:	9903      	ldr	r1, [sp, #12]
 800996a:	1a5b      	subs	r3, r3, r1
 800996c:	42ab      	cmp	r3, r5
 800996e:	dcf2      	bgt.n	8009956 <_printf_i+0x21e>
 8009970:	e7eb      	b.n	800994a <_printf_i+0x212>
 8009972:	2500      	movs	r5, #0
 8009974:	f104 0619 	add.w	r6, r4, #25
 8009978:	e7f5      	b.n	8009966 <_printf_i+0x22e>
 800997a:	bf00      	nop
 800997c:	0800baca 	.word	0x0800baca
 8009980:	0800badb 	.word	0x0800badb

08009984 <iprintf>:
 8009984:	b40f      	push	{r0, r1, r2, r3}
 8009986:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <iprintf+0x2c>)
 8009988:	b513      	push	{r0, r1, r4, lr}
 800998a:	681c      	ldr	r4, [r3, #0]
 800998c:	b124      	cbz	r4, 8009998 <iprintf+0x14>
 800998e:	69a3      	ldr	r3, [r4, #24]
 8009990:	b913      	cbnz	r3, 8009998 <iprintf+0x14>
 8009992:	4620      	mov	r0, r4
 8009994:	f001 f8e6 	bl	800ab64 <__sinit>
 8009998:	ab05      	add	r3, sp, #20
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	68a1      	ldr	r1, [r4, #8]
 800999e:	9301      	str	r3, [sp, #4]
 80099a0:	4620      	mov	r0, r4
 80099a2:	f001 fdab 	bl	800b4fc <_vfiprintf_r>
 80099a6:	b002      	add	sp, #8
 80099a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ac:	b004      	add	sp, #16
 80099ae:	4770      	bx	lr
 80099b0:	20000010 	.word	0x20000010

080099b4 <_puts_r>:
 80099b4:	b570      	push	{r4, r5, r6, lr}
 80099b6:	460e      	mov	r6, r1
 80099b8:	4605      	mov	r5, r0
 80099ba:	b118      	cbz	r0, 80099c4 <_puts_r+0x10>
 80099bc:	6983      	ldr	r3, [r0, #24]
 80099be:	b90b      	cbnz	r3, 80099c4 <_puts_r+0x10>
 80099c0:	f001 f8d0 	bl	800ab64 <__sinit>
 80099c4:	69ab      	ldr	r3, [r5, #24]
 80099c6:	68ac      	ldr	r4, [r5, #8]
 80099c8:	b913      	cbnz	r3, 80099d0 <_puts_r+0x1c>
 80099ca:	4628      	mov	r0, r5
 80099cc:	f001 f8ca 	bl	800ab64 <__sinit>
 80099d0:	4b2c      	ldr	r3, [pc, #176]	; (8009a84 <_puts_r+0xd0>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d120      	bne.n	8009a18 <_puts_r+0x64>
 80099d6:	686c      	ldr	r4, [r5, #4]
 80099d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099da:	07db      	lsls	r3, r3, #31
 80099dc:	d405      	bmi.n	80099ea <_puts_r+0x36>
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	0598      	lsls	r0, r3, #22
 80099e2:	d402      	bmi.n	80099ea <_puts_r+0x36>
 80099e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e6:	f001 f960 	bl	800acaa <__retarget_lock_acquire_recursive>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	0719      	lsls	r1, r3, #28
 80099ee:	d51d      	bpl.n	8009a2c <_puts_r+0x78>
 80099f0:	6923      	ldr	r3, [r4, #16]
 80099f2:	b1db      	cbz	r3, 8009a2c <_puts_r+0x78>
 80099f4:	3e01      	subs	r6, #1
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099fc:	3b01      	subs	r3, #1
 80099fe:	60a3      	str	r3, [r4, #8]
 8009a00:	bb39      	cbnz	r1, 8009a52 <_puts_r+0x9e>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	da38      	bge.n	8009a78 <_puts_r+0xc4>
 8009a06:	4622      	mov	r2, r4
 8009a08:	210a      	movs	r1, #10
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f858 	bl	8009ac0 <__swbuf_r>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d011      	beq.n	8009a38 <_puts_r+0x84>
 8009a14:	250a      	movs	r5, #10
 8009a16:	e011      	b.n	8009a3c <_puts_r+0x88>
 8009a18:	4b1b      	ldr	r3, [pc, #108]	; (8009a88 <_puts_r+0xd4>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d101      	bne.n	8009a22 <_puts_r+0x6e>
 8009a1e:	68ac      	ldr	r4, [r5, #8]
 8009a20:	e7da      	b.n	80099d8 <_puts_r+0x24>
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <_puts_r+0xd8>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	bf08      	it	eq
 8009a28:	68ec      	ldreq	r4, [r5, #12]
 8009a2a:	e7d5      	b.n	80099d8 <_puts_r+0x24>
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f898 	bl	8009b64 <__swsetup_r>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d0dd      	beq.n	80099f4 <_puts_r+0x40>
 8009a38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a3e:	07da      	lsls	r2, r3, #31
 8009a40:	d405      	bmi.n	8009a4e <_puts_r+0x9a>
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	059b      	lsls	r3, r3, #22
 8009a46:	d402      	bmi.n	8009a4e <_puts_r+0x9a>
 8009a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4a:	f001 f92f 	bl	800acac <__retarget_lock_release_recursive>
 8009a4e:	4628      	mov	r0, r5
 8009a50:	bd70      	pop	{r4, r5, r6, pc}
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da04      	bge.n	8009a60 <_puts_r+0xac>
 8009a56:	69a2      	ldr	r2, [r4, #24]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	dc06      	bgt.n	8009a6a <_puts_r+0xb6>
 8009a5c:	290a      	cmp	r1, #10
 8009a5e:	d004      	beq.n	8009a6a <_puts_r+0xb6>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	6022      	str	r2, [r4, #0]
 8009a66:	7019      	strb	r1, [r3, #0]
 8009a68:	e7c5      	b.n	80099f6 <_puts_r+0x42>
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f000 f827 	bl	8009ac0 <__swbuf_r>
 8009a72:	3001      	adds	r0, #1
 8009a74:	d1bf      	bne.n	80099f6 <_puts_r+0x42>
 8009a76:	e7df      	b.n	8009a38 <_puts_r+0x84>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	250a      	movs	r5, #10
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	6022      	str	r2, [r4, #0]
 8009a80:	701d      	strb	r5, [r3, #0]
 8009a82:	e7db      	b.n	8009a3c <_puts_r+0x88>
 8009a84:	0800bba0 	.word	0x0800bba0
 8009a88:	0800bbc0 	.word	0x0800bbc0
 8009a8c:	0800bb80 	.word	0x0800bb80

08009a90 <puts>:
 8009a90:	4b02      	ldr	r3, [pc, #8]	; (8009a9c <puts+0xc>)
 8009a92:	4601      	mov	r1, r0
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f7ff bf8d 	b.w	80099b4 <_puts_r>
 8009a9a:	bf00      	nop
 8009a9c:	20000010 	.word	0x20000010

08009aa0 <_sbrk_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	; (8009abc <_sbrk_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f9 f8fe 	bl	8002cac <_sbrk>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_sbrk_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_sbrk_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20001cbc 	.word	0x20001cbc

08009ac0 <__swbuf_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	4614      	mov	r4, r2
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b118      	cbz	r0, 8009ad2 <__swbuf_r+0x12>
 8009aca:	6983      	ldr	r3, [r0, #24]
 8009acc:	b90b      	cbnz	r3, 8009ad2 <__swbuf_r+0x12>
 8009ace:	f001 f849 	bl	800ab64 <__sinit>
 8009ad2:	4b21      	ldr	r3, [pc, #132]	; (8009b58 <__swbuf_r+0x98>)
 8009ad4:	429c      	cmp	r4, r3
 8009ad6:	d12b      	bne.n	8009b30 <__swbuf_r+0x70>
 8009ad8:	686c      	ldr	r4, [r5, #4]
 8009ada:	69a3      	ldr	r3, [r4, #24]
 8009adc:	60a3      	str	r3, [r4, #8]
 8009ade:	89a3      	ldrh	r3, [r4, #12]
 8009ae0:	071a      	lsls	r2, r3, #28
 8009ae2:	d52f      	bpl.n	8009b44 <__swbuf_r+0x84>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	b36b      	cbz	r3, 8009b44 <__swbuf_r+0x84>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	6820      	ldr	r0, [r4, #0]
 8009aec:	1ac0      	subs	r0, r0, r3
 8009aee:	6963      	ldr	r3, [r4, #20]
 8009af0:	b2f6      	uxtb	r6, r6
 8009af2:	4283      	cmp	r3, r0
 8009af4:	4637      	mov	r7, r6
 8009af6:	dc04      	bgt.n	8009b02 <__swbuf_r+0x42>
 8009af8:	4621      	mov	r1, r4
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 ff9e 	bl	800aa3c <_fflush_r>
 8009b00:	bb30      	cbnz	r0, 8009b50 <__swbuf_r+0x90>
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	3b01      	subs	r3, #1
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	6022      	str	r2, [r4, #0]
 8009b0e:	701e      	strb	r6, [r3, #0]
 8009b10:	6963      	ldr	r3, [r4, #20]
 8009b12:	3001      	adds	r0, #1
 8009b14:	4283      	cmp	r3, r0
 8009b16:	d004      	beq.n	8009b22 <__swbuf_r+0x62>
 8009b18:	89a3      	ldrh	r3, [r4, #12]
 8009b1a:	07db      	lsls	r3, r3, #31
 8009b1c:	d506      	bpl.n	8009b2c <__swbuf_r+0x6c>
 8009b1e:	2e0a      	cmp	r6, #10
 8009b20:	d104      	bne.n	8009b2c <__swbuf_r+0x6c>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	f000 ff89 	bl	800aa3c <_fflush_r>
 8009b2a:	b988      	cbnz	r0, 8009b50 <__swbuf_r+0x90>
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b30:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <__swbuf_r+0x9c>)
 8009b32:	429c      	cmp	r4, r3
 8009b34:	d101      	bne.n	8009b3a <__swbuf_r+0x7a>
 8009b36:	68ac      	ldr	r4, [r5, #8]
 8009b38:	e7cf      	b.n	8009ada <__swbuf_r+0x1a>
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <__swbuf_r+0xa0>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	bf08      	it	eq
 8009b40:	68ec      	ldreq	r4, [r5, #12]
 8009b42:	e7ca      	b.n	8009ada <__swbuf_r+0x1a>
 8009b44:	4621      	mov	r1, r4
 8009b46:	4628      	mov	r0, r5
 8009b48:	f000 f80c 	bl	8009b64 <__swsetup_r>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d0cb      	beq.n	8009ae8 <__swbuf_r+0x28>
 8009b50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009b54:	e7ea      	b.n	8009b2c <__swbuf_r+0x6c>
 8009b56:	bf00      	nop
 8009b58:	0800bba0 	.word	0x0800bba0
 8009b5c:	0800bbc0 	.word	0x0800bbc0
 8009b60:	0800bb80 	.word	0x0800bb80

08009b64 <__swsetup_r>:
 8009b64:	4b32      	ldr	r3, [pc, #200]	; (8009c30 <__swsetup_r+0xcc>)
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	681d      	ldr	r5, [r3, #0]
 8009b6a:	4606      	mov	r6, r0
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	b125      	cbz	r5, 8009b7a <__swsetup_r+0x16>
 8009b70:	69ab      	ldr	r3, [r5, #24]
 8009b72:	b913      	cbnz	r3, 8009b7a <__swsetup_r+0x16>
 8009b74:	4628      	mov	r0, r5
 8009b76:	f000 fff5 	bl	800ab64 <__sinit>
 8009b7a:	4b2e      	ldr	r3, [pc, #184]	; (8009c34 <__swsetup_r+0xd0>)
 8009b7c:	429c      	cmp	r4, r3
 8009b7e:	d10f      	bne.n	8009ba0 <__swsetup_r+0x3c>
 8009b80:	686c      	ldr	r4, [r5, #4]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b88:	0719      	lsls	r1, r3, #28
 8009b8a:	d42c      	bmi.n	8009be6 <__swsetup_r+0x82>
 8009b8c:	06dd      	lsls	r5, r3, #27
 8009b8e:	d411      	bmi.n	8009bb4 <__swsetup_r+0x50>
 8009b90:	2309      	movs	r3, #9
 8009b92:	6033      	str	r3, [r6, #0]
 8009b94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b9e:	e03e      	b.n	8009c1e <__swsetup_r+0xba>
 8009ba0:	4b25      	ldr	r3, [pc, #148]	; (8009c38 <__swsetup_r+0xd4>)
 8009ba2:	429c      	cmp	r4, r3
 8009ba4:	d101      	bne.n	8009baa <__swsetup_r+0x46>
 8009ba6:	68ac      	ldr	r4, [r5, #8]
 8009ba8:	e7eb      	b.n	8009b82 <__swsetup_r+0x1e>
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <__swsetup_r+0xd8>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	bf08      	it	eq
 8009bb0:	68ec      	ldreq	r4, [r5, #12]
 8009bb2:	e7e6      	b.n	8009b82 <__swsetup_r+0x1e>
 8009bb4:	0758      	lsls	r0, r3, #29
 8009bb6:	d512      	bpl.n	8009bde <__swsetup_r+0x7a>
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	b141      	cbz	r1, 8009bce <__swsetup_r+0x6a>
 8009bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc0:	4299      	cmp	r1, r3
 8009bc2:	d002      	beq.n	8009bca <__swsetup_r+0x66>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff f9c9 	bl	8008f5c <_free_r>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bd4:	81a3      	strh	r3, [r4, #12]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	6023      	str	r3, [r4, #0]
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	f043 0308 	orr.w	r3, r3, #8
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	b94b      	cbnz	r3, 8009bfe <__swsetup_r+0x9a>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf4:	d003      	beq.n	8009bfe <__swsetup_r+0x9a>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f001 f87d 	bl	800acf8 <__smakebuf_r>
 8009bfe:	89a0      	ldrh	r0, [r4, #12]
 8009c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c04:	f010 0301 	ands.w	r3, r0, #1
 8009c08:	d00a      	beq.n	8009c20 <__swsetup_r+0xbc>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	6963      	ldr	r3, [r4, #20]
 8009c10:	425b      	negs	r3, r3
 8009c12:	61a3      	str	r3, [r4, #24]
 8009c14:	6923      	ldr	r3, [r4, #16]
 8009c16:	b943      	cbnz	r3, 8009c2a <__swsetup_r+0xc6>
 8009c18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c1c:	d1ba      	bne.n	8009b94 <__swsetup_r+0x30>
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	0781      	lsls	r1, r0, #30
 8009c22:	bf58      	it	pl
 8009c24:	6963      	ldrpl	r3, [r4, #20]
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	e7f4      	b.n	8009c14 <__swsetup_r+0xb0>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7f7      	b.n	8009c1e <__swsetup_r+0xba>
 8009c2e:	bf00      	nop
 8009c30:	20000010 	.word	0x20000010
 8009c34:	0800bba0 	.word	0x0800bba0
 8009c38:	0800bbc0 	.word	0x0800bbc0
 8009c3c:	0800bb80 	.word	0x0800bb80

08009c40 <quorem>:
 8009c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	6903      	ldr	r3, [r0, #16]
 8009c46:	690c      	ldr	r4, [r1, #16]
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	4607      	mov	r7, r0
 8009c4c:	f2c0 8081 	blt.w	8009d52 <quorem+0x112>
 8009c50:	3c01      	subs	r4, #1
 8009c52:	f101 0814 	add.w	r8, r1, #20
 8009c56:	f100 0514 	add.w	r5, r0, #20
 8009c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c5e:	9301      	str	r3, [sp, #4]
 8009c60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c74:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c78:	d331      	bcc.n	8009cde <quorem+0x9e>
 8009c7a:	f04f 0e00 	mov.w	lr, #0
 8009c7e:	4640      	mov	r0, r8
 8009c80:	46ac      	mov	ip, r5
 8009c82:	46f2      	mov	sl, lr
 8009c84:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c88:	b293      	uxth	r3, r2
 8009c8a:	fb06 e303 	mla	r3, r6, r3, lr
 8009c8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	ebaa 0303 	sub.w	r3, sl, r3
 8009c98:	0c12      	lsrs	r2, r2, #16
 8009c9a:	f8dc a000 	ldr.w	sl, [ip]
 8009c9e:	fb06 e202 	mla	r2, r6, r2, lr
 8009ca2:	fa13 f38a 	uxtah	r3, r3, sl
 8009ca6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009caa:	fa1f fa82 	uxth.w	sl, r2
 8009cae:	f8dc 2000 	ldr.w	r2, [ip]
 8009cb2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009cb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cc0:	4581      	cmp	r9, r0
 8009cc2:	f84c 3b04 	str.w	r3, [ip], #4
 8009cc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cca:	d2db      	bcs.n	8009c84 <quorem+0x44>
 8009ccc:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cd0:	b92b      	cbnz	r3, 8009cde <quorem+0x9e>
 8009cd2:	9b01      	ldr	r3, [sp, #4]
 8009cd4:	3b04      	subs	r3, #4
 8009cd6:	429d      	cmp	r5, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	d32e      	bcc.n	8009d3a <quorem+0xfa>
 8009cdc:	613c      	str	r4, [r7, #16]
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f001 fad4 	bl	800b28c <__mcmp>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	db24      	blt.n	8009d32 <quorem+0xf2>
 8009ce8:	3601      	adds	r6, #1
 8009cea:	4628      	mov	r0, r5
 8009cec:	f04f 0c00 	mov.w	ip, #0
 8009cf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cf4:	f8d0 e000 	ldr.w	lr, [r0]
 8009cf8:	b293      	uxth	r3, r2
 8009cfa:	ebac 0303 	sub.w	r3, ip, r3
 8009cfe:	0c12      	lsrs	r2, r2, #16
 8009d00:	fa13 f38e 	uxtah	r3, r3, lr
 8009d04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d12:	45c1      	cmp	r9, r8
 8009d14:	f840 3b04 	str.w	r3, [r0], #4
 8009d18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d1c:	d2e8      	bcs.n	8009cf0 <quorem+0xb0>
 8009d1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d26:	b922      	cbnz	r2, 8009d32 <quorem+0xf2>
 8009d28:	3b04      	subs	r3, #4
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	d30a      	bcc.n	8009d46 <quorem+0x106>
 8009d30:	613c      	str	r4, [r7, #16]
 8009d32:	4630      	mov	r0, r6
 8009d34:	b003      	add	sp, #12
 8009d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	2a00      	cmp	r2, #0
 8009d40:	d1cc      	bne.n	8009cdc <quorem+0x9c>
 8009d42:	3c01      	subs	r4, #1
 8009d44:	e7c7      	b.n	8009cd6 <quorem+0x96>
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	3b04      	subs	r3, #4
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d1f0      	bne.n	8009d30 <quorem+0xf0>
 8009d4e:	3c01      	subs	r4, #1
 8009d50:	e7eb      	b.n	8009d2a <quorem+0xea>
 8009d52:	2000      	movs	r0, #0
 8009d54:	e7ee      	b.n	8009d34 <quorem+0xf4>
	...

08009d58 <_dtoa_r>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	ed2d 8b02 	vpush	{d8}
 8009d60:	ec57 6b10 	vmov	r6, r7, d0
 8009d64:	b095      	sub	sp, #84	; 0x54
 8009d66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d6c:	9105      	str	r1, [sp, #20]
 8009d6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d72:	4604      	mov	r4, r0
 8009d74:	9209      	str	r2, [sp, #36]	; 0x24
 8009d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d78:	b975      	cbnz	r5, 8009d98 <_dtoa_r+0x40>
 8009d7a:	2010      	movs	r0, #16
 8009d7c:	f7ff f8c8 	bl	8008f10 <malloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6260      	str	r0, [r4, #36]	; 0x24
 8009d84:	b920      	cbnz	r0, 8009d90 <_dtoa_r+0x38>
 8009d86:	4bb2      	ldr	r3, [pc, #712]	; (800a050 <_dtoa_r+0x2f8>)
 8009d88:	21ea      	movs	r1, #234	; 0xea
 8009d8a:	48b2      	ldr	r0, [pc, #712]	; (800a054 <_dtoa_r+0x2fc>)
 8009d8c:	f001 fd3c 	bl	800b808 <__assert_func>
 8009d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d94:	6005      	str	r5, [r0, #0]
 8009d96:	60c5      	str	r5, [r0, #12]
 8009d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d9a:	6819      	ldr	r1, [r3, #0]
 8009d9c:	b151      	cbz	r1, 8009db4 <_dtoa_r+0x5c>
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	604a      	str	r2, [r1, #4]
 8009da2:	2301      	movs	r3, #1
 8009da4:	4093      	lsls	r3, r2
 8009da6:	608b      	str	r3, [r1, #8]
 8009da8:	4620      	mov	r0, r4
 8009daa:	f001 f831 	bl	800ae10 <_Bfree>
 8009dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	1e3b      	subs	r3, r7, #0
 8009db6:	bfb9      	ittee	lt
 8009db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009dbc:	9303      	strlt	r3, [sp, #12]
 8009dbe:	2300      	movge	r3, #0
 8009dc0:	f8c8 3000 	strge.w	r3, [r8]
 8009dc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009dc8:	4ba3      	ldr	r3, [pc, #652]	; (800a058 <_dtoa_r+0x300>)
 8009dca:	bfbc      	itt	lt
 8009dcc:	2201      	movlt	r2, #1
 8009dce:	f8c8 2000 	strlt.w	r2, [r8]
 8009dd2:	ea33 0309 	bics.w	r3, r3, r9
 8009dd6:	d11b      	bne.n	8009e10 <_dtoa_r+0xb8>
 8009dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009de4:	4333      	orrs	r3, r6
 8009de6:	f000 857a 	beq.w	800a8de <_dtoa_r+0xb86>
 8009dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dec:	b963      	cbnz	r3, 8009e08 <_dtoa_r+0xb0>
 8009dee:	4b9b      	ldr	r3, [pc, #620]	; (800a05c <_dtoa_r+0x304>)
 8009df0:	e024      	b.n	8009e3c <_dtoa_r+0xe4>
 8009df2:	4b9b      	ldr	r3, [pc, #620]	; (800a060 <_dtoa_r+0x308>)
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009dfa:	6013      	str	r3, [r2, #0]
 8009dfc:	9800      	ldr	r0, [sp, #0]
 8009dfe:	b015      	add	sp, #84	; 0x54
 8009e00:	ecbd 8b02 	vpop	{d8}
 8009e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e08:	4b94      	ldr	r3, [pc, #592]	; (800a05c <_dtoa_r+0x304>)
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	3303      	adds	r3, #3
 8009e0e:	e7f3      	b.n	8009df8 <_dtoa_r+0xa0>
 8009e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e14:	2200      	movs	r2, #0
 8009e16:	ec51 0b17 	vmov	r0, r1, d7
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009e20:	f7f6 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e24:	4680      	mov	r8, r0
 8009e26:	b158      	cbz	r0, 8009e40 <_dtoa_r+0xe8>
 8009e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 8551 	beq.w	800a8d8 <_dtoa_r+0xb80>
 8009e36:	488b      	ldr	r0, [pc, #556]	; (800a064 <_dtoa_r+0x30c>)
 8009e38:	6018      	str	r0, [r3, #0]
 8009e3a:	1e43      	subs	r3, r0, #1
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	e7dd      	b.n	8009dfc <_dtoa_r+0xa4>
 8009e40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009e44:	aa12      	add	r2, sp, #72	; 0x48
 8009e46:	a913      	add	r1, sp, #76	; 0x4c
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f001 fac3 	bl	800b3d4 <__d2b>
 8009e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009e52:	4683      	mov	fp, r0
 8009e54:	2d00      	cmp	r5, #0
 8009e56:	d07c      	beq.n	8009f52 <_dtoa_r+0x1fa>
 8009e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009e66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e72:	4b7d      	ldr	r3, [pc, #500]	; (800a068 <_dtoa_r+0x310>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	4630      	mov	r0, r6
 8009e78:	4639      	mov	r1, r7
 8009e7a:	f7f6 fa05 	bl	8000288 <__aeabi_dsub>
 8009e7e:	a36e      	add	r3, pc, #440	; (adr r3, 800a038 <_dtoa_r+0x2e0>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	a36d      	add	r3, pc, #436	; (adr r3, 800a040 <_dtoa_r+0x2e8>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 f9fd 	bl	800028c <__adddf3>
 8009e92:	4606      	mov	r6, r0
 8009e94:	4628      	mov	r0, r5
 8009e96:	460f      	mov	r7, r1
 8009e98:	f7f6 fb44 	bl	8000524 <__aeabi_i2d>
 8009e9c:	a36a      	add	r3, pc, #424	; (adr r3, 800a048 <_dtoa_r+0x2f0>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fba9 	bl	80005f8 <__aeabi_dmul>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4630      	mov	r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	f7f6 f9ed 	bl	800028c <__adddf3>
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f7f6 fe4f 	bl	8000b58 <__aeabi_d2iz>
 8009eba:	2200      	movs	r2, #0
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8009ec8:	b148      	cbz	r0, 8009ede <_dtoa_r+0x186>
 8009eca:	4650      	mov	r0, sl
 8009ecc:	f7f6 fb2a 	bl	8000524 <__aeabi_i2d>
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	f7f6 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ed8:	b908      	cbnz	r0, 8009ede <_dtoa_r+0x186>
 8009eda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ede:	f1ba 0f16 	cmp.w	sl, #22
 8009ee2:	d854      	bhi.n	8009f8e <_dtoa_r+0x236>
 8009ee4:	4b61      	ldr	r3, [pc, #388]	; (800a06c <_dtoa_r+0x314>)
 8009ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ef2:	f7f6 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d04b      	beq.n	8009f92 <_dtoa_r+0x23a>
 8009efa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009efe:	2300      	movs	r3, #0
 8009f00:	930e      	str	r3, [sp, #56]	; 0x38
 8009f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f04:	1b5d      	subs	r5, r3, r5
 8009f06:	1e6b      	subs	r3, r5, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	bf43      	ittte	mi
 8009f0c:	2300      	movmi	r3, #0
 8009f0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009f12:	9304      	strmi	r3, [sp, #16]
 8009f14:	f04f 0800 	movpl.w	r8, #0
 8009f18:	f1ba 0f00 	cmp.w	sl, #0
 8009f1c:	db3b      	blt.n	8009f96 <_dtoa_r+0x23e>
 8009f1e:	9b04      	ldr	r3, [sp, #16]
 8009f20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009f24:	4453      	add	r3, sl
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9306      	str	r3, [sp, #24]
 8009f2c:	9b05      	ldr	r3, [sp, #20]
 8009f2e:	2b09      	cmp	r3, #9
 8009f30:	d869      	bhi.n	800a006 <_dtoa_r+0x2ae>
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	bfc4      	itt	gt
 8009f36:	3b04      	subgt	r3, #4
 8009f38:	9305      	strgt	r3, [sp, #20]
 8009f3a:	9b05      	ldr	r3, [sp, #20]
 8009f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8009f40:	bfcc      	ite	gt
 8009f42:	2500      	movgt	r5, #0
 8009f44:	2501      	movle	r5, #1
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d869      	bhi.n	800a01e <_dtoa_r+0x2c6>
 8009f4a:	e8df f003 	tbb	[pc, r3]
 8009f4e:	4e2c      	.short	0x4e2c
 8009f50:	5a4c      	.short	0x5a4c
 8009f52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009f56:	441d      	add	r5, r3
 8009f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f5c:	2b20      	cmp	r3, #32
 8009f5e:	bfc1      	itttt	gt
 8009f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f68:	fa09 f303 	lslgt.w	r3, r9, r3
 8009f6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f70:	bfda      	itte	le
 8009f72:	f1c3 0320 	rsble	r3, r3, #32
 8009f76:	fa06 f003 	lslle.w	r0, r6, r3
 8009f7a:	4318      	orrgt	r0, r3
 8009f7c:	f7f6 fac2 	bl	8000504 <__aeabi_ui2d>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4606      	mov	r6, r0
 8009f84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f88:	3d01      	subs	r5, #1
 8009f8a:	9310      	str	r3, [sp, #64]	; 0x40
 8009f8c:	e771      	b.n	8009e72 <_dtoa_r+0x11a>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7b6      	b.n	8009f00 <_dtoa_r+0x1a8>
 8009f92:	900e      	str	r0, [sp, #56]	; 0x38
 8009f94:	e7b5      	b.n	8009f02 <_dtoa_r+0x1aa>
 8009f96:	f1ca 0300 	rsb	r3, sl, #0
 8009f9a:	9306      	str	r3, [sp, #24]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	eba8 080a 	sub.w	r8, r8, sl
 8009fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fa4:	e7c2      	b.n	8009f2c <_dtoa_r+0x1d4>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9308      	str	r3, [sp, #32]
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dc39      	bgt.n	800a024 <_dtoa_r+0x2cc>
 8009fb0:	f04f 0901 	mov.w	r9, #1
 8009fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fb8:	464b      	mov	r3, r9
 8009fba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	6042      	str	r2, [r0, #4]
 8009fc4:	2204      	movs	r2, #4
 8009fc6:	f102 0614 	add.w	r6, r2, #20
 8009fca:	429e      	cmp	r6, r3
 8009fcc:	6841      	ldr	r1, [r0, #4]
 8009fce:	d92f      	bls.n	800a030 <_dtoa_r+0x2d8>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 fedd 	bl	800ad90 <_Balloc>
 8009fd6:	9000      	str	r0, [sp, #0]
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	d14b      	bne.n	800a074 <_dtoa_r+0x31c>
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <_dtoa_r+0x318>)
 8009fde:	4602      	mov	r2, r0
 8009fe0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fe4:	e6d1      	b.n	8009d8a <_dtoa_r+0x32>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e7de      	b.n	8009fa8 <_dtoa_r+0x250>
 8009fea:	2300      	movs	r3, #0
 8009fec:	9308      	str	r3, [sp, #32]
 8009fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff0:	eb0a 0903 	add.w	r9, sl, r3
 8009ff4:	f109 0301 	add.w	r3, r9, #1
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	bfb8      	it	lt
 8009ffe:	2301      	movlt	r3, #1
 800a000:	e7dd      	b.n	8009fbe <_dtoa_r+0x266>
 800a002:	2301      	movs	r3, #1
 800a004:	e7f2      	b.n	8009fec <_dtoa_r+0x294>
 800a006:	2501      	movs	r5, #1
 800a008:	2300      	movs	r3, #0
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	9508      	str	r5, [sp, #32]
 800a00e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a012:	2200      	movs	r2, #0
 800a014:	f8cd 9004 	str.w	r9, [sp, #4]
 800a018:	2312      	movs	r3, #18
 800a01a:	9209      	str	r2, [sp, #36]	; 0x24
 800a01c:	e7cf      	b.n	8009fbe <_dtoa_r+0x266>
 800a01e:	2301      	movs	r3, #1
 800a020:	9308      	str	r3, [sp, #32]
 800a022:	e7f4      	b.n	800a00e <_dtoa_r+0x2b6>
 800a024:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a028:	f8cd 9004 	str.w	r9, [sp, #4]
 800a02c:	464b      	mov	r3, r9
 800a02e:	e7c6      	b.n	8009fbe <_dtoa_r+0x266>
 800a030:	3101      	adds	r1, #1
 800a032:	6041      	str	r1, [r0, #4]
 800a034:	0052      	lsls	r2, r2, #1
 800a036:	e7c6      	b.n	8009fc6 <_dtoa_r+0x26e>
 800a038:	636f4361 	.word	0x636f4361
 800a03c:	3fd287a7 	.word	0x3fd287a7
 800a040:	8b60c8b3 	.word	0x8b60c8b3
 800a044:	3fc68a28 	.word	0x3fc68a28
 800a048:	509f79fb 	.word	0x509f79fb
 800a04c:	3fd34413 	.word	0x3fd34413
 800a050:	0800baf9 	.word	0x0800baf9
 800a054:	0800bb10 	.word	0x0800bb10
 800a058:	7ff00000 	.word	0x7ff00000
 800a05c:	0800baf5 	.word	0x0800baf5
 800a060:	0800baec 	.word	0x0800baec
 800a064:	0800bac9 	.word	0x0800bac9
 800a068:	3ff80000 	.word	0x3ff80000
 800a06c:	0800bc68 	.word	0x0800bc68
 800a070:	0800bb6f 	.word	0x0800bb6f
 800a074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a076:	9a00      	ldr	r2, [sp, #0]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	2b0e      	cmp	r3, #14
 800a07e:	f200 80ad 	bhi.w	800a1dc <_dtoa_r+0x484>
 800a082:	2d00      	cmp	r5, #0
 800a084:	f000 80aa 	beq.w	800a1dc <_dtoa_r+0x484>
 800a088:	f1ba 0f00 	cmp.w	sl, #0
 800a08c:	dd36      	ble.n	800a0fc <_dtoa_r+0x3a4>
 800a08e:	4ac3      	ldr	r2, [pc, #780]	; (800a39c <_dtoa_r+0x644>)
 800a090:	f00a 030f 	and.w	r3, sl, #15
 800a094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a098:	ed93 7b00 	vldr	d7, [r3]
 800a09c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a0a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a0a4:	eeb0 8a47 	vmov.f32	s16, s14
 800a0a8:	eef0 8a67 	vmov.f32	s17, s15
 800a0ac:	d016      	beq.n	800a0dc <_dtoa_r+0x384>
 800a0ae:	4bbc      	ldr	r3, [pc, #752]	; (800a3a0 <_dtoa_r+0x648>)
 800a0b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0b8:	f7f6 fbc8 	bl	800084c <__aeabi_ddiv>
 800a0bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0c0:	f007 070f 	and.w	r7, r7, #15
 800a0c4:	2503      	movs	r5, #3
 800a0c6:	4eb6      	ldr	r6, [pc, #728]	; (800a3a0 <_dtoa_r+0x648>)
 800a0c8:	b957      	cbnz	r7, 800a0e0 <_dtoa_r+0x388>
 800a0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ce:	ec53 2b18 	vmov	r2, r3, d8
 800a0d2:	f7f6 fbbb 	bl	800084c <__aeabi_ddiv>
 800a0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0da:	e029      	b.n	800a130 <_dtoa_r+0x3d8>
 800a0dc:	2502      	movs	r5, #2
 800a0de:	e7f2      	b.n	800a0c6 <_dtoa_r+0x36e>
 800a0e0:	07f9      	lsls	r1, r7, #31
 800a0e2:	d508      	bpl.n	800a0f6 <_dtoa_r+0x39e>
 800a0e4:	ec51 0b18 	vmov	r0, r1, d8
 800a0e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0ec:	f7f6 fa84 	bl	80005f8 <__aeabi_dmul>
 800a0f0:	ec41 0b18 	vmov	d8, r0, r1
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	107f      	asrs	r7, r7, #1
 800a0f8:	3608      	adds	r6, #8
 800a0fa:	e7e5      	b.n	800a0c8 <_dtoa_r+0x370>
 800a0fc:	f000 80a6 	beq.w	800a24c <_dtoa_r+0x4f4>
 800a100:	f1ca 0600 	rsb	r6, sl, #0
 800a104:	4ba5      	ldr	r3, [pc, #660]	; (800a39c <_dtoa_r+0x644>)
 800a106:	4fa6      	ldr	r7, [pc, #664]	; (800a3a0 <_dtoa_r+0x648>)
 800a108:	f006 020f 	and.w	r2, r6, #15
 800a10c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a118:	f7f6 fa6e 	bl	80005f8 <__aeabi_dmul>
 800a11c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a120:	1136      	asrs	r6, r6, #4
 800a122:	2300      	movs	r3, #0
 800a124:	2502      	movs	r5, #2
 800a126:	2e00      	cmp	r6, #0
 800a128:	f040 8085 	bne.w	800a236 <_dtoa_r+0x4de>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1d2      	bne.n	800a0d6 <_dtoa_r+0x37e>
 800a130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 808c 	beq.w	800a250 <_dtoa_r+0x4f8>
 800a138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a13c:	4b99      	ldr	r3, [pc, #612]	; (800a3a4 <_dtoa_r+0x64c>)
 800a13e:	2200      	movs	r2, #0
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fcca 	bl	8000adc <__aeabi_dcmplt>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f000 8081 	beq.w	800a250 <_dtoa_r+0x4f8>
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d07d      	beq.n	800a250 <_dtoa_r+0x4f8>
 800a154:	f1b9 0f00 	cmp.w	r9, #0
 800a158:	dd3c      	ble.n	800a1d4 <_dtoa_r+0x47c>
 800a15a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a15e:	9307      	str	r3, [sp, #28]
 800a160:	2200      	movs	r2, #0
 800a162:	4b91      	ldr	r3, [pc, #580]	; (800a3a8 <_dtoa_r+0x650>)
 800a164:	4630      	mov	r0, r6
 800a166:	4639      	mov	r1, r7
 800a168:	f7f6 fa46 	bl	80005f8 <__aeabi_dmul>
 800a16c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a170:	3501      	adds	r5, #1
 800a172:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a17a:	4628      	mov	r0, r5
 800a17c:	f7f6 f9d2 	bl	8000524 <__aeabi_i2d>
 800a180:	4632      	mov	r2, r6
 800a182:	463b      	mov	r3, r7
 800a184:	f7f6 fa38 	bl	80005f8 <__aeabi_dmul>
 800a188:	4b88      	ldr	r3, [pc, #544]	; (800a3ac <_dtoa_r+0x654>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	f7f6 f87e 	bl	800028c <__adddf3>
 800a190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a198:	9303      	str	r3, [sp, #12]
 800a19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d15c      	bne.n	800a25a <_dtoa_r+0x502>
 800a1a0:	4b83      	ldr	r3, [pc, #524]	; (800a3b0 <_dtoa_r+0x658>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	4639      	mov	r1, r7
 800a1a8:	f7f6 f86e 	bl	8000288 <__aeabi_dsub>
 800a1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	f7f6 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	f040 8296 	bne.w	800a6ea <_dtoa_r+0x992>
 800a1be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 fc87 	bl	8000adc <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 8288 	bne.w	800a6e4 <_dtoa_r+0x98c>
 800a1d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f2c0 8158 	blt.w	800a494 <_dtoa_r+0x73c>
 800a1e4:	f1ba 0f0e 	cmp.w	sl, #14
 800a1e8:	f300 8154 	bgt.w	800a494 <_dtoa_r+0x73c>
 800a1ec:	4b6b      	ldr	r3, [pc, #428]	; (800a39c <_dtoa_r+0x644>)
 800a1ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f280 80e3 	bge.w	800a3c4 <_dtoa_r+0x66c>
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	f300 80df 	bgt.w	800a3c4 <_dtoa_r+0x66c>
 800a206:	f040 826d 	bne.w	800a6e4 <_dtoa_r+0x98c>
 800a20a:	4b69      	ldr	r3, [pc, #420]	; (800a3b0 <_dtoa_r+0x658>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	4640      	mov	r0, r8
 800a210:	4649      	mov	r1, r9
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a21a:	f7f6 fc73 	bl	8000b04 <__aeabi_dcmpge>
 800a21e:	9e01      	ldr	r6, [sp, #4]
 800a220:	4637      	mov	r7, r6
 800a222:	2800      	cmp	r0, #0
 800a224:	f040 8243 	bne.w	800a6ae <_dtoa_r+0x956>
 800a228:	9d00      	ldr	r5, [sp, #0]
 800a22a:	2331      	movs	r3, #49	; 0x31
 800a22c:	f805 3b01 	strb.w	r3, [r5], #1
 800a230:	f10a 0a01 	add.w	sl, sl, #1
 800a234:	e23f      	b.n	800a6b6 <_dtoa_r+0x95e>
 800a236:	07f2      	lsls	r2, r6, #31
 800a238:	d505      	bpl.n	800a246 <_dtoa_r+0x4ee>
 800a23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a23e:	f7f6 f9db 	bl	80005f8 <__aeabi_dmul>
 800a242:	3501      	adds	r5, #1
 800a244:	2301      	movs	r3, #1
 800a246:	1076      	asrs	r6, r6, #1
 800a248:	3708      	adds	r7, #8
 800a24a:	e76c      	b.n	800a126 <_dtoa_r+0x3ce>
 800a24c:	2502      	movs	r5, #2
 800a24e:	e76f      	b.n	800a130 <_dtoa_r+0x3d8>
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	f8cd a01c 	str.w	sl, [sp, #28]
 800a256:	930c      	str	r3, [sp, #48]	; 0x30
 800a258:	e78d      	b.n	800a176 <_dtoa_r+0x41e>
 800a25a:	9900      	ldr	r1, [sp, #0]
 800a25c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a25e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a260:	4b4e      	ldr	r3, [pc, #312]	; (800a39c <_dtoa_r+0x644>)
 800a262:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a266:	4401      	add	r1, r0
 800a268:	9102      	str	r1, [sp, #8]
 800a26a:	9908      	ldr	r1, [sp, #32]
 800a26c:	eeb0 8a47 	vmov.f32	s16, s14
 800a270:	eef0 8a67 	vmov.f32	s17, s15
 800a274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d045      	beq.n	800a30c <_dtoa_r+0x5b4>
 800a280:	494c      	ldr	r1, [pc, #304]	; (800a3b4 <_dtoa_r+0x65c>)
 800a282:	2000      	movs	r0, #0
 800a284:	f7f6 fae2 	bl	800084c <__aeabi_ddiv>
 800a288:	ec53 2b18 	vmov	r2, r3, d8
 800a28c:	f7f5 fffc 	bl	8000288 <__aeabi_dsub>
 800a290:	9d00      	ldr	r5, [sp, #0]
 800a292:	ec41 0b18 	vmov	d8, r0, r1
 800a296:	4639      	mov	r1, r7
 800a298:	4630      	mov	r0, r6
 800a29a:	f7f6 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800a29e:	900c      	str	r0, [sp, #48]	; 0x30
 800a2a0:	f7f6 f940 	bl	8000524 <__aeabi_i2d>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f5 ffec 	bl	8000288 <__aeabi_dsub>
 800a2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b2:	3330      	adds	r3, #48	; 0x30
 800a2b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a2b8:	ec53 2b18 	vmov	r2, r3, d8
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	f7f6 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d165      	bne.n	800a394 <_dtoa_r+0x63c>
 800a2c8:	4632      	mov	r2, r6
 800a2ca:	463b      	mov	r3, r7
 800a2cc:	4935      	ldr	r1, [pc, #212]	; (800a3a4 <_dtoa_r+0x64c>)
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	f7f5 ffda 	bl	8000288 <__aeabi_dsub>
 800a2d4:	ec53 2b18 	vmov	r2, r3, d8
 800a2d8:	f7f6 fc00 	bl	8000adc <__aeabi_dcmplt>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	f040 80b9 	bne.w	800a454 <_dtoa_r+0x6fc>
 800a2e2:	9b02      	ldr	r3, [sp, #8]
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	f43f af75 	beq.w	800a1d4 <_dtoa_r+0x47c>
 800a2ea:	4b2f      	ldr	r3, [pc, #188]	; (800a3a8 <_dtoa_r+0x650>)
 800a2ec:	ec51 0b18 	vmov	r0, r1, d8
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f7f6 f981 	bl	80005f8 <__aeabi_dmul>
 800a2f6:	4b2c      	ldr	r3, [pc, #176]	; (800a3a8 <_dtoa_r+0x650>)
 800a2f8:	ec41 0b18 	vmov	d8, r0, r1
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f6 f979 	bl	80005f8 <__aeabi_dmul>
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	e7c4      	b.n	800a296 <_dtoa_r+0x53e>
 800a30c:	ec51 0b17 	vmov	r0, r1, d7
 800a310:	f7f6 f972 	bl	80005f8 <__aeabi_dmul>
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	9d00      	ldr	r5, [sp, #0]
 800a318:	930c      	str	r3, [sp, #48]	; 0x30
 800a31a:	ec41 0b18 	vmov	d8, r0, r1
 800a31e:	4639      	mov	r1, r7
 800a320:	4630      	mov	r0, r6
 800a322:	f7f6 fc19 	bl	8000b58 <__aeabi_d2iz>
 800a326:	9011      	str	r0, [sp, #68]	; 0x44
 800a328:	f7f6 f8fc 	bl	8000524 <__aeabi_i2d>
 800a32c:	4602      	mov	r2, r0
 800a32e:	460b      	mov	r3, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ffa8 	bl	8000288 <__aeabi_dsub>
 800a338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a33a:	3330      	adds	r3, #48	; 0x30
 800a33c:	f805 3b01 	strb.w	r3, [r5], #1
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	429d      	cmp	r5, r3
 800a344:	4606      	mov	r6, r0
 800a346:	460f      	mov	r7, r1
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	d134      	bne.n	800a3b8 <_dtoa_r+0x660>
 800a34e:	4b19      	ldr	r3, [pc, #100]	; (800a3b4 <_dtoa_r+0x65c>)
 800a350:	ec51 0b18 	vmov	r0, r1, d8
 800a354:	f7f5 ff9a 	bl	800028c <__adddf3>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4630      	mov	r0, r6
 800a35e:	4639      	mov	r1, r7
 800a360:	f7f6 fbda 	bl	8000b18 <__aeabi_dcmpgt>
 800a364:	2800      	cmp	r0, #0
 800a366:	d175      	bne.n	800a454 <_dtoa_r+0x6fc>
 800a368:	ec53 2b18 	vmov	r2, r3, d8
 800a36c:	4911      	ldr	r1, [pc, #68]	; (800a3b4 <_dtoa_r+0x65c>)
 800a36e:	2000      	movs	r0, #0
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f6 fbae 	bl	8000adc <__aeabi_dcmplt>
 800a380:	2800      	cmp	r0, #0
 800a382:	f43f af27 	beq.w	800a1d4 <_dtoa_r+0x47c>
 800a386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a388:	1e6b      	subs	r3, r5, #1
 800a38a:	930c      	str	r3, [sp, #48]	; 0x30
 800a38c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a390:	2b30      	cmp	r3, #48	; 0x30
 800a392:	d0f8      	beq.n	800a386 <_dtoa_r+0x62e>
 800a394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a398:	e04a      	b.n	800a430 <_dtoa_r+0x6d8>
 800a39a:	bf00      	nop
 800a39c:	0800bc68 	.word	0x0800bc68
 800a3a0:	0800bc40 	.word	0x0800bc40
 800a3a4:	3ff00000 	.word	0x3ff00000
 800a3a8:	40240000 	.word	0x40240000
 800a3ac:	401c0000 	.word	0x401c0000
 800a3b0:	40140000 	.word	0x40140000
 800a3b4:	3fe00000 	.word	0x3fe00000
 800a3b8:	4baf      	ldr	r3, [pc, #700]	; (800a678 <_dtoa_r+0x920>)
 800a3ba:	f7f6 f91d 	bl	80005f8 <__aeabi_dmul>
 800a3be:	4606      	mov	r6, r0
 800a3c0:	460f      	mov	r7, r1
 800a3c2:	e7ac      	b.n	800a31e <_dtoa_r+0x5c6>
 800a3c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3c8:	9d00      	ldr	r5, [sp, #0]
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f6 fa3b 	bl	800084c <__aeabi_ddiv>
 800a3d6:	f7f6 fbbf 	bl	8000b58 <__aeabi_d2iz>
 800a3da:	9002      	str	r0, [sp, #8]
 800a3dc:	f7f6 f8a2 	bl	8000524 <__aeabi_i2d>
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	464b      	mov	r3, r9
 800a3e4:	f7f6 f908 	bl	80005f8 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	f7f5 ff4a 	bl	8000288 <__aeabi_dsub>
 800a3f4:	9e02      	ldr	r6, [sp, #8]
 800a3f6:	9f01      	ldr	r7, [sp, #4]
 800a3f8:	3630      	adds	r6, #48	; 0x30
 800a3fa:	f805 6b01 	strb.w	r6, [r5], #1
 800a3fe:	9e00      	ldr	r6, [sp, #0]
 800a400:	1bae      	subs	r6, r5, r6
 800a402:	42b7      	cmp	r7, r6
 800a404:	4602      	mov	r2, r0
 800a406:	460b      	mov	r3, r1
 800a408:	d137      	bne.n	800a47a <_dtoa_r+0x722>
 800a40a:	f7f5 ff3f 	bl	800028c <__adddf3>
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	4606      	mov	r6, r0
 800a414:	460f      	mov	r7, r1
 800a416:	f7f6 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800a41a:	b9c8      	cbnz	r0, 800a450 <_dtoa_r+0x6f8>
 800a41c:	4642      	mov	r2, r8
 800a41e:	464b      	mov	r3, r9
 800a420:	4630      	mov	r0, r6
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 800a428:	b110      	cbz	r0, 800a430 <_dtoa_r+0x6d8>
 800a42a:	9b02      	ldr	r3, [sp, #8]
 800a42c:	07d9      	lsls	r1, r3, #31
 800a42e:	d40f      	bmi.n	800a450 <_dtoa_r+0x6f8>
 800a430:	4620      	mov	r0, r4
 800a432:	4659      	mov	r1, fp
 800a434:	f000 fcec 	bl	800ae10 <_Bfree>
 800a438:	2300      	movs	r3, #0
 800a43a:	702b      	strb	r3, [r5, #0]
 800a43c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a43e:	f10a 0001 	add.w	r0, sl, #1
 800a442:	6018      	str	r0, [r3, #0]
 800a444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a446:	2b00      	cmp	r3, #0
 800a448:	f43f acd8 	beq.w	8009dfc <_dtoa_r+0xa4>
 800a44c:	601d      	str	r5, [r3, #0]
 800a44e:	e4d5      	b.n	8009dfc <_dtoa_r+0xa4>
 800a450:	f8cd a01c 	str.w	sl, [sp, #28]
 800a454:	462b      	mov	r3, r5
 800a456:	461d      	mov	r5, r3
 800a458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a45c:	2a39      	cmp	r2, #57	; 0x39
 800a45e:	d108      	bne.n	800a472 <_dtoa_r+0x71a>
 800a460:	9a00      	ldr	r2, [sp, #0]
 800a462:	429a      	cmp	r2, r3
 800a464:	d1f7      	bne.n	800a456 <_dtoa_r+0x6fe>
 800a466:	9a07      	ldr	r2, [sp, #28]
 800a468:	9900      	ldr	r1, [sp, #0]
 800a46a:	3201      	adds	r2, #1
 800a46c:	9207      	str	r2, [sp, #28]
 800a46e:	2230      	movs	r2, #48	; 0x30
 800a470:	700a      	strb	r2, [r1, #0]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	3201      	adds	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]
 800a478:	e78c      	b.n	800a394 <_dtoa_r+0x63c>
 800a47a:	4b7f      	ldr	r3, [pc, #508]	; (800a678 <_dtoa_r+0x920>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	2200      	movs	r2, #0
 800a484:	2300      	movs	r3, #0
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	f7f6 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d09b      	beq.n	800a3ca <_dtoa_r+0x672>
 800a492:	e7cd      	b.n	800a430 <_dtoa_r+0x6d8>
 800a494:	9a08      	ldr	r2, [sp, #32]
 800a496:	2a00      	cmp	r2, #0
 800a498:	f000 80c4 	beq.w	800a624 <_dtoa_r+0x8cc>
 800a49c:	9a05      	ldr	r2, [sp, #20]
 800a49e:	2a01      	cmp	r2, #1
 800a4a0:	f300 80a8 	bgt.w	800a5f4 <_dtoa_r+0x89c>
 800a4a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	f000 80a0 	beq.w	800a5ec <_dtoa_r+0x894>
 800a4ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4b0:	9e06      	ldr	r6, [sp, #24]
 800a4b2:	4645      	mov	r5, r8
 800a4b4:	9a04      	ldr	r2, [sp, #16]
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	441a      	add	r2, r3
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	4498      	add	r8, r3
 800a4be:	9204      	str	r2, [sp, #16]
 800a4c0:	f000 fd62 	bl	800af88 <__i2b>
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	dd0b      	ble.n	800a4e2 <_dtoa_r+0x78a>
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	dd08      	ble.n	800a4e2 <_dtoa_r+0x78a>
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	9a04      	ldr	r2, [sp, #16]
 800a4d4:	bfa8      	it	ge
 800a4d6:	462b      	movge	r3, r5
 800a4d8:	eba8 0803 	sub.w	r8, r8, r3
 800a4dc:	1aed      	subs	r5, r5, r3
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	9b06      	ldr	r3, [sp, #24]
 800a4e4:	b1fb      	cbz	r3, 800a526 <_dtoa_r+0x7ce>
 800a4e6:	9b08      	ldr	r3, [sp, #32]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 809f 	beq.w	800a62c <_dtoa_r+0x8d4>
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	dd11      	ble.n	800a516 <_dtoa_r+0x7be>
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fe02 	bl	800b100 <__pow5mult>
 800a4fc:	465a      	mov	r2, fp
 800a4fe:	4601      	mov	r1, r0
 800a500:	4607      	mov	r7, r0
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fd56 	bl	800afb4 <__multiply>
 800a508:	4659      	mov	r1, fp
 800a50a:	9007      	str	r0, [sp, #28]
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fc7f 	bl	800ae10 <_Bfree>
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	469b      	mov	fp, r3
 800a516:	9b06      	ldr	r3, [sp, #24]
 800a518:	1b9a      	subs	r2, r3, r6
 800a51a:	d004      	beq.n	800a526 <_dtoa_r+0x7ce>
 800a51c:	4659      	mov	r1, fp
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 fdee 	bl	800b100 <__pow5mult>
 800a524:	4683      	mov	fp, r0
 800a526:	2101      	movs	r1, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fd2d 	bl	800af88 <__i2b>
 800a52e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a530:	2b00      	cmp	r3, #0
 800a532:	4606      	mov	r6, r0
 800a534:	dd7c      	ble.n	800a630 <_dtoa_r+0x8d8>
 800a536:	461a      	mov	r2, r3
 800a538:	4601      	mov	r1, r0
 800a53a:	4620      	mov	r0, r4
 800a53c:	f000 fde0 	bl	800b100 <__pow5mult>
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	2b01      	cmp	r3, #1
 800a544:	4606      	mov	r6, r0
 800a546:	dd76      	ble.n	800a636 <_dtoa_r+0x8de>
 800a548:	2300      	movs	r3, #0
 800a54a:	9306      	str	r3, [sp, #24]
 800a54c:	6933      	ldr	r3, [r6, #16]
 800a54e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a552:	6918      	ldr	r0, [r3, #16]
 800a554:	f000 fcc8 	bl	800aee8 <__hi0bits>
 800a558:	f1c0 0020 	rsb	r0, r0, #32
 800a55c:	9b04      	ldr	r3, [sp, #16]
 800a55e:	4418      	add	r0, r3
 800a560:	f010 001f 	ands.w	r0, r0, #31
 800a564:	f000 8086 	beq.w	800a674 <_dtoa_r+0x91c>
 800a568:	f1c0 0320 	rsb	r3, r0, #32
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	dd7f      	ble.n	800a670 <_dtoa_r+0x918>
 800a570:	f1c0 001c 	rsb	r0, r0, #28
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	4403      	add	r3, r0
 800a578:	4480      	add	r8, r0
 800a57a:	4405      	add	r5, r0
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	f1b8 0f00 	cmp.w	r8, #0
 800a582:	dd05      	ble.n	800a590 <_dtoa_r+0x838>
 800a584:	4659      	mov	r1, fp
 800a586:	4642      	mov	r2, r8
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fe13 	bl	800b1b4 <__lshift>
 800a58e:	4683      	mov	fp, r0
 800a590:	9b04      	ldr	r3, [sp, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	dd05      	ble.n	800a5a2 <_dtoa_r+0x84a>
 800a596:	4631      	mov	r1, r6
 800a598:	461a      	mov	r2, r3
 800a59a:	4620      	mov	r0, r4
 800a59c:	f000 fe0a 	bl	800b1b4 <__lshift>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d069      	beq.n	800a67c <_dtoa_r+0x924>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	f000 fe6e 	bl	800b28c <__mcmp>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	da63      	bge.n	800a67c <_dtoa_r+0x924>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4659      	mov	r1, fp
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fc4a 	bl	800ae54 <__multadd>
 800a5c0:	9b08      	ldr	r3, [sp, #32]
 800a5c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a5c6:	4683      	mov	fp, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 818f 	beq.w	800a8ec <_dtoa_r+0xb94>
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fc3d 	bl	800ae54 <__multadd>
 800a5da:	f1b9 0f00 	cmp.w	r9, #0
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f300 808e 	bgt.w	800a700 <_dtoa_r+0x9a8>
 800a5e4:	9b05      	ldr	r3, [sp, #20]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	dc50      	bgt.n	800a68c <_dtoa_r+0x934>
 800a5ea:	e089      	b.n	800a700 <_dtoa_r+0x9a8>
 800a5ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5f2:	e75d      	b.n	800a4b0 <_dtoa_r+0x758>
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	1e5e      	subs	r6, r3, #1
 800a5f8:	9b06      	ldr	r3, [sp, #24]
 800a5fa:	42b3      	cmp	r3, r6
 800a5fc:	bfbf      	itttt	lt
 800a5fe:	9b06      	ldrlt	r3, [sp, #24]
 800a600:	9606      	strlt	r6, [sp, #24]
 800a602:	1af2      	sublt	r2, r6, r3
 800a604:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a606:	bfb6      	itet	lt
 800a608:	189b      	addlt	r3, r3, r2
 800a60a:	1b9e      	subge	r6, r3, r6
 800a60c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	bfb8      	it	lt
 800a612:	2600      	movlt	r6, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	bfb5      	itete	lt
 800a618:	eba8 0503 	sublt.w	r5, r8, r3
 800a61c:	9b01      	ldrge	r3, [sp, #4]
 800a61e:	2300      	movlt	r3, #0
 800a620:	4645      	movge	r5, r8
 800a622:	e747      	b.n	800a4b4 <_dtoa_r+0x75c>
 800a624:	9e06      	ldr	r6, [sp, #24]
 800a626:	9f08      	ldr	r7, [sp, #32]
 800a628:	4645      	mov	r5, r8
 800a62a:	e74c      	b.n	800a4c6 <_dtoa_r+0x76e>
 800a62c:	9a06      	ldr	r2, [sp, #24]
 800a62e:	e775      	b.n	800a51c <_dtoa_r+0x7c4>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	2b01      	cmp	r3, #1
 800a634:	dc18      	bgt.n	800a668 <_dtoa_r+0x910>
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	b9b3      	cbnz	r3, 800a668 <_dtoa_r+0x910>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a640:	b9a3      	cbnz	r3, 800a66c <_dtoa_r+0x914>
 800a642:	9b03      	ldr	r3, [sp, #12]
 800a644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a648:	0d1b      	lsrs	r3, r3, #20
 800a64a:	051b      	lsls	r3, r3, #20
 800a64c:	b12b      	cbz	r3, 800a65a <_dtoa_r+0x902>
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	3301      	adds	r3, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	f108 0801 	add.w	r8, r8, #1
 800a658:	2301      	movs	r3, #1
 800a65a:	9306      	str	r3, [sp, #24]
 800a65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f47f af74 	bne.w	800a54c <_dtoa_r+0x7f4>
 800a664:	2001      	movs	r0, #1
 800a666:	e779      	b.n	800a55c <_dtoa_r+0x804>
 800a668:	2300      	movs	r3, #0
 800a66a:	e7f6      	b.n	800a65a <_dtoa_r+0x902>
 800a66c:	9b02      	ldr	r3, [sp, #8]
 800a66e:	e7f4      	b.n	800a65a <_dtoa_r+0x902>
 800a670:	d085      	beq.n	800a57e <_dtoa_r+0x826>
 800a672:	4618      	mov	r0, r3
 800a674:	301c      	adds	r0, #28
 800a676:	e77d      	b.n	800a574 <_dtoa_r+0x81c>
 800a678:	40240000 	.word	0x40240000
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	dc38      	bgt.n	800a6f4 <_dtoa_r+0x99c>
 800a682:	9b05      	ldr	r3, [sp, #20]
 800a684:	2b02      	cmp	r3, #2
 800a686:	dd35      	ble.n	800a6f4 <_dtoa_r+0x99c>
 800a688:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a68c:	f1b9 0f00 	cmp.w	r9, #0
 800a690:	d10d      	bne.n	800a6ae <_dtoa_r+0x956>
 800a692:	4631      	mov	r1, r6
 800a694:	464b      	mov	r3, r9
 800a696:	2205      	movs	r2, #5
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fbdb 	bl	800ae54 <__multadd>
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f000 fdf2 	bl	800b28c <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f73f adbd 	bgt.w	800a228 <_dtoa_r+0x4d0>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	9d00      	ldr	r5, [sp, #0]
 800a6b2:	ea6f 0a03 	mvn.w	sl, r3
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 fba7 	bl	800ae10 <_Bfree>
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	f43f aeb4 	beq.w	800a430 <_dtoa_r+0x6d8>
 800a6c8:	f1b8 0f00 	cmp.w	r8, #0
 800a6cc:	d005      	beq.n	800a6da <_dtoa_r+0x982>
 800a6ce:	45b8      	cmp	r8, r7
 800a6d0:	d003      	beq.n	800a6da <_dtoa_r+0x982>
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 fb9b 	bl	800ae10 <_Bfree>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 fb97 	bl	800ae10 <_Bfree>
 800a6e2:	e6a5      	b.n	800a430 <_dtoa_r+0x6d8>
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	4637      	mov	r7, r6
 800a6e8:	e7e1      	b.n	800a6ae <_dtoa_r+0x956>
 800a6ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a6ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a6f0:	4637      	mov	r7, r6
 800a6f2:	e599      	b.n	800a228 <_dtoa_r+0x4d0>
 800a6f4:	9b08      	ldr	r3, [sp, #32]
 800a6f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80fd 	beq.w	800a8fa <_dtoa_r+0xba2>
 800a700:	2d00      	cmp	r5, #0
 800a702:	dd05      	ble.n	800a710 <_dtoa_r+0x9b8>
 800a704:	4639      	mov	r1, r7
 800a706:	462a      	mov	r2, r5
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 fd53 	bl	800b1b4 <__lshift>
 800a70e:	4607      	mov	r7, r0
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d05c      	beq.n	800a7d0 <_dtoa_r+0xa78>
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fb39 	bl	800ad90 <_Balloc>
 800a71e:	4605      	mov	r5, r0
 800a720:	b928      	cbnz	r0, 800a72e <_dtoa_r+0x9d6>
 800a722:	4b80      	ldr	r3, [pc, #512]	; (800a924 <_dtoa_r+0xbcc>)
 800a724:	4602      	mov	r2, r0
 800a726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a72a:	f7ff bb2e 	b.w	8009d8a <_dtoa_r+0x32>
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	3202      	adds	r2, #2
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	f107 010c 	add.w	r1, r7, #12
 800a738:	300c      	adds	r0, #12
 800a73a:	f7fe fbf9 	bl	8008f30 <memcpy>
 800a73e:	2201      	movs	r2, #1
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f000 fd36 	bl	800b1b4 <__lshift>
 800a748:	9b00      	ldr	r3, [sp, #0]
 800a74a:	3301      	adds	r3, #1
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	444b      	add	r3, r9
 800a752:	9307      	str	r3, [sp, #28]
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	46b8      	mov	r8, r7
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	4607      	mov	r7, r0
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	4631      	mov	r1, r6
 800a764:	3b01      	subs	r3, #1
 800a766:	4658      	mov	r0, fp
 800a768:	9302      	str	r3, [sp, #8]
 800a76a:	f7ff fa69 	bl	8009c40 <quorem>
 800a76e:	4603      	mov	r3, r0
 800a770:	3330      	adds	r3, #48	; 0x30
 800a772:	9004      	str	r0, [sp, #16]
 800a774:	4641      	mov	r1, r8
 800a776:	4658      	mov	r0, fp
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	f000 fd87 	bl	800b28c <__mcmp>
 800a77e:	463a      	mov	r2, r7
 800a780:	4681      	mov	r9, r0
 800a782:	4631      	mov	r1, r6
 800a784:	4620      	mov	r0, r4
 800a786:	f000 fd9d 	bl	800b2c4 <__mdiff>
 800a78a:	68c2      	ldr	r2, [r0, #12]
 800a78c:	9b08      	ldr	r3, [sp, #32]
 800a78e:	4605      	mov	r5, r0
 800a790:	bb02      	cbnz	r2, 800a7d4 <_dtoa_r+0xa7c>
 800a792:	4601      	mov	r1, r0
 800a794:	4658      	mov	r0, fp
 800a796:	f000 fd79 	bl	800b28c <__mcmp>
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	4602      	mov	r2, r0
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a7a6:	f000 fb33 	bl	800ae10 <_Bfree>
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ae:	9d01      	ldr	r5, [sp, #4]
 800a7b0:	ea43 0102 	orr.w	r1, r3, r2
 800a7b4:	9b06      	ldr	r3, [sp, #24]
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	9b08      	ldr	r3, [sp, #32]
 800a7ba:	d10d      	bne.n	800a7d8 <_dtoa_r+0xa80>
 800a7bc:	2b39      	cmp	r3, #57	; 0x39
 800a7be:	d029      	beq.n	800a814 <_dtoa_r+0xabc>
 800a7c0:	f1b9 0f00 	cmp.w	r9, #0
 800a7c4:	dd01      	ble.n	800a7ca <_dtoa_r+0xa72>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	3331      	adds	r3, #49	; 0x31
 800a7ca:	9a02      	ldr	r2, [sp, #8]
 800a7cc:	7013      	strb	r3, [r2, #0]
 800a7ce:	e774      	b.n	800a6ba <_dtoa_r+0x962>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	e7b9      	b.n	800a748 <_dtoa_r+0x9f0>
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	e7e2      	b.n	800a79e <_dtoa_r+0xa46>
 800a7d8:	f1b9 0f00 	cmp.w	r9, #0
 800a7dc:	db06      	blt.n	800a7ec <_dtoa_r+0xa94>
 800a7de:	9905      	ldr	r1, [sp, #20]
 800a7e0:	ea41 0909 	orr.w	r9, r1, r9
 800a7e4:	9906      	ldr	r1, [sp, #24]
 800a7e6:	ea59 0101 	orrs.w	r1, r9, r1
 800a7ea:	d120      	bne.n	800a82e <_dtoa_r+0xad6>
 800a7ec:	2a00      	cmp	r2, #0
 800a7ee:	ddec      	ble.n	800a7ca <_dtoa_r+0xa72>
 800a7f0:	4659      	mov	r1, fp
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	f000 fcdc 	bl	800b1b4 <__lshift>
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4683      	mov	fp, r0
 800a800:	f000 fd44 	bl	800b28c <__mcmp>
 800a804:	2800      	cmp	r0, #0
 800a806:	9b01      	ldr	r3, [sp, #4]
 800a808:	dc02      	bgt.n	800a810 <_dtoa_r+0xab8>
 800a80a:	d1de      	bne.n	800a7ca <_dtoa_r+0xa72>
 800a80c:	07da      	lsls	r2, r3, #31
 800a80e:	d5dc      	bpl.n	800a7ca <_dtoa_r+0xa72>
 800a810:	2b39      	cmp	r3, #57	; 0x39
 800a812:	d1d8      	bne.n	800a7c6 <_dtoa_r+0xa6e>
 800a814:	9a02      	ldr	r2, [sp, #8]
 800a816:	2339      	movs	r3, #57	; 0x39
 800a818:	7013      	strb	r3, [r2, #0]
 800a81a:	462b      	mov	r3, r5
 800a81c:	461d      	mov	r5, r3
 800a81e:	3b01      	subs	r3, #1
 800a820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a824:	2a39      	cmp	r2, #57	; 0x39
 800a826:	d050      	beq.n	800a8ca <_dtoa_r+0xb72>
 800a828:	3201      	adds	r2, #1
 800a82a:	701a      	strb	r2, [r3, #0]
 800a82c:	e745      	b.n	800a6ba <_dtoa_r+0x962>
 800a82e:	2a00      	cmp	r2, #0
 800a830:	dd03      	ble.n	800a83a <_dtoa_r+0xae2>
 800a832:	2b39      	cmp	r3, #57	; 0x39
 800a834:	d0ee      	beq.n	800a814 <_dtoa_r+0xabc>
 800a836:	3301      	adds	r3, #1
 800a838:	e7c7      	b.n	800a7ca <_dtoa_r+0xa72>
 800a83a:	9a01      	ldr	r2, [sp, #4]
 800a83c:	9907      	ldr	r1, [sp, #28]
 800a83e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a842:	428a      	cmp	r2, r1
 800a844:	d02a      	beq.n	800a89c <_dtoa_r+0xb44>
 800a846:	4659      	mov	r1, fp
 800a848:	2300      	movs	r3, #0
 800a84a:	220a      	movs	r2, #10
 800a84c:	4620      	mov	r0, r4
 800a84e:	f000 fb01 	bl	800ae54 <__multadd>
 800a852:	45b8      	cmp	r8, r7
 800a854:	4683      	mov	fp, r0
 800a856:	f04f 0300 	mov.w	r3, #0
 800a85a:	f04f 020a 	mov.w	r2, #10
 800a85e:	4641      	mov	r1, r8
 800a860:	4620      	mov	r0, r4
 800a862:	d107      	bne.n	800a874 <_dtoa_r+0xb1c>
 800a864:	f000 faf6 	bl	800ae54 <__multadd>
 800a868:	4680      	mov	r8, r0
 800a86a:	4607      	mov	r7, r0
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	3301      	adds	r3, #1
 800a870:	9301      	str	r3, [sp, #4]
 800a872:	e775      	b.n	800a760 <_dtoa_r+0xa08>
 800a874:	f000 faee 	bl	800ae54 <__multadd>
 800a878:	4639      	mov	r1, r7
 800a87a:	4680      	mov	r8, r0
 800a87c:	2300      	movs	r3, #0
 800a87e:	220a      	movs	r2, #10
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fae7 	bl	800ae54 <__multadd>
 800a886:	4607      	mov	r7, r0
 800a888:	e7f0      	b.n	800a86c <_dtoa_r+0xb14>
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	9a00      	ldr	r2, [sp, #0]
 800a890:	bfcc      	ite	gt
 800a892:	464d      	movgt	r5, r9
 800a894:	2501      	movle	r5, #1
 800a896:	4415      	add	r5, r2
 800a898:	f04f 0800 	mov.w	r8, #0
 800a89c:	4659      	mov	r1, fp
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	f000 fc86 	bl	800b1b4 <__lshift>
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4683      	mov	fp, r0
 800a8ac:	f000 fcee 	bl	800b28c <__mcmp>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	dcb2      	bgt.n	800a81a <_dtoa_r+0xac2>
 800a8b4:	d102      	bne.n	800a8bc <_dtoa_r+0xb64>
 800a8b6:	9b01      	ldr	r3, [sp, #4]
 800a8b8:	07db      	lsls	r3, r3, #31
 800a8ba:	d4ae      	bmi.n	800a81a <_dtoa_r+0xac2>
 800a8bc:	462b      	mov	r3, r5
 800a8be:	461d      	mov	r5, r3
 800a8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8c4:	2a30      	cmp	r2, #48	; 0x30
 800a8c6:	d0fa      	beq.n	800a8be <_dtoa_r+0xb66>
 800a8c8:	e6f7      	b.n	800a6ba <_dtoa_r+0x962>
 800a8ca:	9a00      	ldr	r2, [sp, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d1a5      	bne.n	800a81c <_dtoa_r+0xac4>
 800a8d0:	f10a 0a01 	add.w	sl, sl, #1
 800a8d4:	2331      	movs	r3, #49	; 0x31
 800a8d6:	e779      	b.n	800a7cc <_dtoa_r+0xa74>
 800a8d8:	4b13      	ldr	r3, [pc, #76]	; (800a928 <_dtoa_r+0xbd0>)
 800a8da:	f7ff baaf 	b.w	8009e3c <_dtoa_r+0xe4>
 800a8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f47f aa86 	bne.w	8009df2 <_dtoa_r+0x9a>
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <_dtoa_r+0xbd4>)
 800a8e8:	f7ff baa8 	b.w	8009e3c <_dtoa_r+0xe4>
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	dc03      	bgt.n	800a8fa <_dtoa_r+0xba2>
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	f73f aec9 	bgt.w	800a68c <_dtoa_r+0x934>
 800a8fa:	9d00      	ldr	r5, [sp, #0]
 800a8fc:	4631      	mov	r1, r6
 800a8fe:	4658      	mov	r0, fp
 800a900:	f7ff f99e 	bl	8009c40 <quorem>
 800a904:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a908:	f805 3b01 	strb.w	r3, [r5], #1
 800a90c:	9a00      	ldr	r2, [sp, #0]
 800a90e:	1aaa      	subs	r2, r5, r2
 800a910:	4591      	cmp	r9, r2
 800a912:	ddba      	ble.n	800a88a <_dtoa_r+0xb32>
 800a914:	4659      	mov	r1, fp
 800a916:	2300      	movs	r3, #0
 800a918:	220a      	movs	r2, #10
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fa9a 	bl	800ae54 <__multadd>
 800a920:	4683      	mov	fp, r0
 800a922:	e7eb      	b.n	800a8fc <_dtoa_r+0xba4>
 800a924:	0800bb6f 	.word	0x0800bb6f
 800a928:	0800bac8 	.word	0x0800bac8
 800a92c:	0800baec 	.word	0x0800baec

0800a930 <__sflush_r>:
 800a930:	898a      	ldrh	r2, [r1, #12]
 800a932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a936:	4605      	mov	r5, r0
 800a938:	0710      	lsls	r0, r2, #28
 800a93a:	460c      	mov	r4, r1
 800a93c:	d458      	bmi.n	800a9f0 <__sflush_r+0xc0>
 800a93e:	684b      	ldr	r3, [r1, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dc05      	bgt.n	800a950 <__sflush_r+0x20>
 800a944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a946:	2b00      	cmp	r3, #0
 800a948:	dc02      	bgt.n	800a950 <__sflush_r+0x20>
 800a94a:	2000      	movs	r0, #0
 800a94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a952:	2e00      	cmp	r6, #0
 800a954:	d0f9      	beq.n	800a94a <__sflush_r+0x1a>
 800a956:	2300      	movs	r3, #0
 800a958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a95c:	682f      	ldr	r7, [r5, #0]
 800a95e:	602b      	str	r3, [r5, #0]
 800a960:	d032      	beq.n	800a9c8 <__sflush_r+0x98>
 800a962:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	075a      	lsls	r2, r3, #29
 800a968:	d505      	bpl.n	800a976 <__sflush_r+0x46>
 800a96a:	6863      	ldr	r3, [r4, #4]
 800a96c:	1ac0      	subs	r0, r0, r3
 800a96e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a970:	b10b      	cbz	r3, 800a976 <__sflush_r+0x46>
 800a972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a974:	1ac0      	subs	r0, r0, r3
 800a976:	2300      	movs	r3, #0
 800a978:	4602      	mov	r2, r0
 800a97a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a97c:	6a21      	ldr	r1, [r4, #32]
 800a97e:	4628      	mov	r0, r5
 800a980:	47b0      	blx	r6
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	d106      	bne.n	800a996 <__sflush_r+0x66>
 800a988:	6829      	ldr	r1, [r5, #0]
 800a98a:	291d      	cmp	r1, #29
 800a98c:	d82c      	bhi.n	800a9e8 <__sflush_r+0xb8>
 800a98e:	4a2a      	ldr	r2, [pc, #168]	; (800aa38 <__sflush_r+0x108>)
 800a990:	40ca      	lsrs	r2, r1
 800a992:	07d6      	lsls	r6, r2, #31
 800a994:	d528      	bpl.n	800a9e8 <__sflush_r+0xb8>
 800a996:	2200      	movs	r2, #0
 800a998:	6062      	str	r2, [r4, #4]
 800a99a:	04d9      	lsls	r1, r3, #19
 800a99c:	6922      	ldr	r2, [r4, #16]
 800a99e:	6022      	str	r2, [r4, #0]
 800a9a0:	d504      	bpl.n	800a9ac <__sflush_r+0x7c>
 800a9a2:	1c42      	adds	r2, r0, #1
 800a9a4:	d101      	bne.n	800a9aa <__sflush_r+0x7a>
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	b903      	cbnz	r3, 800a9ac <__sflush_r+0x7c>
 800a9aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a9ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ae:	602f      	str	r7, [r5, #0]
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	d0ca      	beq.n	800a94a <__sflush_r+0x1a>
 800a9b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9b8:	4299      	cmp	r1, r3
 800a9ba:	d002      	beq.n	800a9c2 <__sflush_r+0x92>
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f7fe facd 	bl	8008f5c <_free_r>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a9c6:	e7c1      	b.n	800a94c <__sflush_r+0x1c>
 800a9c8:	6a21      	ldr	r1, [r4, #32]
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	47b0      	blx	r6
 800a9d0:	1c41      	adds	r1, r0, #1
 800a9d2:	d1c7      	bne.n	800a964 <__sflush_r+0x34>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0c4      	beq.n	800a964 <__sflush_r+0x34>
 800a9da:	2b1d      	cmp	r3, #29
 800a9dc:	d001      	beq.n	800a9e2 <__sflush_r+0xb2>
 800a9de:	2b16      	cmp	r3, #22
 800a9e0:	d101      	bne.n	800a9e6 <__sflush_r+0xb6>
 800a9e2:	602f      	str	r7, [r5, #0]
 800a9e4:	e7b1      	b.n	800a94a <__sflush_r+0x1a>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	e7ad      	b.n	800a94c <__sflush_r+0x1c>
 800a9f0:	690f      	ldr	r7, [r1, #16]
 800a9f2:	2f00      	cmp	r7, #0
 800a9f4:	d0a9      	beq.n	800a94a <__sflush_r+0x1a>
 800a9f6:	0793      	lsls	r3, r2, #30
 800a9f8:	680e      	ldr	r6, [r1, #0]
 800a9fa:	bf08      	it	eq
 800a9fc:	694b      	ldreq	r3, [r1, #20]
 800a9fe:	600f      	str	r7, [r1, #0]
 800aa00:	bf18      	it	ne
 800aa02:	2300      	movne	r3, #0
 800aa04:	eba6 0807 	sub.w	r8, r6, r7
 800aa08:	608b      	str	r3, [r1, #8]
 800aa0a:	f1b8 0f00 	cmp.w	r8, #0
 800aa0e:	dd9c      	ble.n	800a94a <__sflush_r+0x1a>
 800aa10:	6a21      	ldr	r1, [r4, #32]
 800aa12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa14:	4643      	mov	r3, r8
 800aa16:	463a      	mov	r2, r7
 800aa18:	4628      	mov	r0, r5
 800aa1a:	47b0      	blx	r6
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	dc06      	bgt.n	800aa2e <__sflush_r+0xfe>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa2c:	e78e      	b.n	800a94c <__sflush_r+0x1c>
 800aa2e:	4407      	add	r7, r0
 800aa30:	eba8 0800 	sub.w	r8, r8, r0
 800aa34:	e7e9      	b.n	800aa0a <__sflush_r+0xda>
 800aa36:	bf00      	nop
 800aa38:	20400001 	.word	0x20400001

0800aa3c <_fflush_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	690b      	ldr	r3, [r1, #16]
 800aa40:	4605      	mov	r5, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	b913      	cbnz	r3, 800aa4c <_fflush_r+0x10>
 800aa46:	2500      	movs	r5, #0
 800aa48:	4628      	mov	r0, r5
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}
 800aa4c:	b118      	cbz	r0, 800aa56 <_fflush_r+0x1a>
 800aa4e:	6983      	ldr	r3, [r0, #24]
 800aa50:	b90b      	cbnz	r3, 800aa56 <_fflush_r+0x1a>
 800aa52:	f000 f887 	bl	800ab64 <__sinit>
 800aa56:	4b14      	ldr	r3, [pc, #80]	; (800aaa8 <_fflush_r+0x6c>)
 800aa58:	429c      	cmp	r4, r3
 800aa5a:	d11b      	bne.n	800aa94 <_fflush_r+0x58>
 800aa5c:	686c      	ldr	r4, [r5, #4]
 800aa5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0ef      	beq.n	800aa46 <_fflush_r+0xa>
 800aa66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa68:	07d0      	lsls	r0, r2, #31
 800aa6a:	d404      	bmi.n	800aa76 <_fflush_r+0x3a>
 800aa6c:	0599      	lsls	r1, r3, #22
 800aa6e:	d402      	bmi.n	800aa76 <_fflush_r+0x3a>
 800aa70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa72:	f000 f91a 	bl	800acaa <__retarget_lock_acquire_recursive>
 800aa76:	4628      	mov	r0, r5
 800aa78:	4621      	mov	r1, r4
 800aa7a:	f7ff ff59 	bl	800a930 <__sflush_r>
 800aa7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa80:	07da      	lsls	r2, r3, #31
 800aa82:	4605      	mov	r5, r0
 800aa84:	d4e0      	bmi.n	800aa48 <_fflush_r+0xc>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	059b      	lsls	r3, r3, #22
 800aa8a:	d4dd      	bmi.n	800aa48 <_fflush_r+0xc>
 800aa8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa8e:	f000 f90d 	bl	800acac <__retarget_lock_release_recursive>
 800aa92:	e7d9      	b.n	800aa48 <_fflush_r+0xc>
 800aa94:	4b05      	ldr	r3, [pc, #20]	; (800aaac <_fflush_r+0x70>)
 800aa96:	429c      	cmp	r4, r3
 800aa98:	d101      	bne.n	800aa9e <_fflush_r+0x62>
 800aa9a:	68ac      	ldr	r4, [r5, #8]
 800aa9c:	e7df      	b.n	800aa5e <_fflush_r+0x22>
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <_fflush_r+0x74>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	bf08      	it	eq
 800aaa4:	68ec      	ldreq	r4, [r5, #12]
 800aaa6:	e7da      	b.n	800aa5e <_fflush_r+0x22>
 800aaa8:	0800bba0 	.word	0x0800bba0
 800aaac:	0800bbc0 	.word	0x0800bbc0
 800aab0:	0800bb80 	.word	0x0800bb80

0800aab4 <std>:
 800aab4:	2300      	movs	r3, #0
 800aab6:	b510      	push	{r4, lr}
 800aab8:	4604      	mov	r4, r0
 800aaba:	e9c0 3300 	strd	r3, r3, [r0]
 800aabe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aac2:	6083      	str	r3, [r0, #8]
 800aac4:	8181      	strh	r1, [r0, #12]
 800aac6:	6643      	str	r3, [r0, #100]	; 0x64
 800aac8:	81c2      	strh	r2, [r0, #14]
 800aaca:	6183      	str	r3, [r0, #24]
 800aacc:	4619      	mov	r1, r3
 800aace:	2208      	movs	r2, #8
 800aad0:	305c      	adds	r0, #92	; 0x5c
 800aad2:	f7fe fa3b 	bl	8008f4c <memset>
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <std+0x38>)
 800aad8:	6263      	str	r3, [r4, #36]	; 0x24
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <std+0x3c>)
 800aadc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <std+0x40>)
 800aae0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aae2:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <std+0x44>)
 800aae4:	6224      	str	r4, [r4, #32]
 800aae6:	6323      	str	r3, [r4, #48]	; 0x30
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	bf00      	nop
 800aaec:	0800b75d 	.word	0x0800b75d
 800aaf0:	0800b77f 	.word	0x0800b77f
 800aaf4:	0800b7b7 	.word	0x0800b7b7
 800aaf8:	0800b7db 	.word	0x0800b7db

0800aafc <_cleanup_r>:
 800aafc:	4901      	ldr	r1, [pc, #4]	; (800ab04 <_cleanup_r+0x8>)
 800aafe:	f000 b8af 	b.w	800ac60 <_fwalk_reent>
 800ab02:	bf00      	nop
 800ab04:	0800aa3d 	.word	0x0800aa3d

0800ab08 <__sfmoreglue>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	1e4a      	subs	r2, r1, #1
 800ab0c:	2568      	movs	r5, #104	; 0x68
 800ab0e:	4355      	muls	r5, r2
 800ab10:	460e      	mov	r6, r1
 800ab12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab16:	f7fe fa71 	bl	8008ffc <_malloc_r>
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	b140      	cbz	r0, 800ab30 <__sfmoreglue+0x28>
 800ab1e:	2100      	movs	r1, #0
 800ab20:	e9c0 1600 	strd	r1, r6, [r0]
 800ab24:	300c      	adds	r0, #12
 800ab26:	60a0      	str	r0, [r4, #8]
 800ab28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab2c:	f7fe fa0e 	bl	8008f4c <memset>
 800ab30:	4620      	mov	r0, r4
 800ab32:	bd70      	pop	{r4, r5, r6, pc}

0800ab34 <__sfp_lock_acquire>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__sfp_lock_acquire+0x8>)
 800ab36:	f000 b8b8 	b.w	800acaa <__retarget_lock_acquire_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	20001cb8 	.word	0x20001cb8

0800ab40 <__sfp_lock_release>:
 800ab40:	4801      	ldr	r0, [pc, #4]	; (800ab48 <__sfp_lock_release+0x8>)
 800ab42:	f000 b8b3 	b.w	800acac <__retarget_lock_release_recursive>
 800ab46:	bf00      	nop
 800ab48:	20001cb8 	.word	0x20001cb8

0800ab4c <__sinit_lock_acquire>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__sinit_lock_acquire+0x8>)
 800ab4e:	f000 b8ac 	b.w	800acaa <__retarget_lock_acquire_recursive>
 800ab52:	bf00      	nop
 800ab54:	20001cb3 	.word	0x20001cb3

0800ab58 <__sinit_lock_release>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__sinit_lock_release+0x8>)
 800ab5a:	f000 b8a7 	b.w	800acac <__retarget_lock_release_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20001cb3 	.word	0x20001cb3

0800ab64 <__sinit>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	f7ff fff0 	bl	800ab4c <__sinit_lock_acquire>
 800ab6c:	69a3      	ldr	r3, [r4, #24]
 800ab6e:	b11b      	cbz	r3, 800ab78 <__sinit+0x14>
 800ab70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab74:	f7ff bff0 	b.w	800ab58 <__sinit_lock_release>
 800ab78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab7e:	4b13      	ldr	r3, [pc, #76]	; (800abcc <__sinit+0x68>)
 800ab80:	4a13      	ldr	r2, [pc, #76]	; (800abd0 <__sinit+0x6c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab86:	42a3      	cmp	r3, r4
 800ab88:	bf04      	itt	eq
 800ab8a:	2301      	moveq	r3, #1
 800ab8c:	61a3      	streq	r3, [r4, #24]
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f820 	bl	800abd4 <__sfp>
 800ab94:	6060      	str	r0, [r4, #4]
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 f81c 	bl	800abd4 <__sfp>
 800ab9c:	60a0      	str	r0, [r4, #8]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f818 	bl	800abd4 <__sfp>
 800aba4:	2200      	movs	r2, #0
 800aba6:	60e0      	str	r0, [r4, #12]
 800aba8:	2104      	movs	r1, #4
 800abaa:	6860      	ldr	r0, [r4, #4]
 800abac:	f7ff ff82 	bl	800aab4 <std>
 800abb0:	68a0      	ldr	r0, [r4, #8]
 800abb2:	2201      	movs	r2, #1
 800abb4:	2109      	movs	r1, #9
 800abb6:	f7ff ff7d 	bl	800aab4 <std>
 800abba:	68e0      	ldr	r0, [r4, #12]
 800abbc:	2202      	movs	r2, #2
 800abbe:	2112      	movs	r1, #18
 800abc0:	f7ff ff78 	bl	800aab4 <std>
 800abc4:	2301      	movs	r3, #1
 800abc6:	61a3      	str	r3, [r4, #24]
 800abc8:	e7d2      	b.n	800ab70 <__sinit+0xc>
 800abca:	bf00      	nop
 800abcc:	0800bab4 	.word	0x0800bab4
 800abd0:	0800aafd 	.word	0x0800aafd

0800abd4 <__sfp>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	4607      	mov	r7, r0
 800abd8:	f7ff ffac 	bl	800ab34 <__sfp_lock_acquire>
 800abdc:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <__sfp+0x84>)
 800abde:	681e      	ldr	r6, [r3, #0]
 800abe0:	69b3      	ldr	r3, [r6, #24]
 800abe2:	b913      	cbnz	r3, 800abea <__sfp+0x16>
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff ffbd 	bl	800ab64 <__sinit>
 800abea:	3648      	adds	r6, #72	; 0x48
 800abec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	d503      	bpl.n	800abfc <__sfp+0x28>
 800abf4:	6833      	ldr	r3, [r6, #0]
 800abf6:	b30b      	cbz	r3, 800ac3c <__sfp+0x68>
 800abf8:	6836      	ldr	r6, [r6, #0]
 800abfa:	e7f7      	b.n	800abec <__sfp+0x18>
 800abfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac00:	b9d5      	cbnz	r5, 800ac38 <__sfp+0x64>
 800ac02:	4b16      	ldr	r3, [pc, #88]	; (800ac5c <__sfp+0x88>)
 800ac04:	60e3      	str	r3, [r4, #12]
 800ac06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac0a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac0c:	f000 f84c 	bl	800aca8 <__retarget_lock_init_recursive>
 800ac10:	f7ff ff96 	bl	800ab40 <__sfp_lock_release>
 800ac14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac1c:	6025      	str	r5, [r4, #0]
 800ac1e:	61a5      	str	r5, [r4, #24]
 800ac20:	2208      	movs	r2, #8
 800ac22:	4629      	mov	r1, r5
 800ac24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac28:	f7fe f990 	bl	8008f4c <memset>
 800ac2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac34:	4620      	mov	r0, r4
 800ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac38:	3468      	adds	r4, #104	; 0x68
 800ac3a:	e7d9      	b.n	800abf0 <__sfp+0x1c>
 800ac3c:	2104      	movs	r1, #4
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f7ff ff62 	bl	800ab08 <__sfmoreglue>
 800ac44:	4604      	mov	r4, r0
 800ac46:	6030      	str	r0, [r6, #0]
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d1d5      	bne.n	800abf8 <__sfp+0x24>
 800ac4c:	f7ff ff78 	bl	800ab40 <__sfp_lock_release>
 800ac50:	230c      	movs	r3, #12
 800ac52:	603b      	str	r3, [r7, #0]
 800ac54:	e7ee      	b.n	800ac34 <__sfp+0x60>
 800ac56:	bf00      	nop
 800ac58:	0800bab4 	.word	0x0800bab4
 800ac5c:	ffff0001 	.word	0xffff0001

0800ac60 <_fwalk_reent>:
 800ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	4606      	mov	r6, r0
 800ac66:	4688      	mov	r8, r1
 800ac68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac6c:	2700      	movs	r7, #0
 800ac6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac72:	f1b9 0901 	subs.w	r9, r9, #1
 800ac76:	d505      	bpl.n	800ac84 <_fwalk_reent+0x24>
 800ac78:	6824      	ldr	r4, [r4, #0]
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	d1f7      	bne.n	800ac6e <_fwalk_reent+0xe>
 800ac7e:	4638      	mov	r0, r7
 800ac80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac84:	89ab      	ldrh	r3, [r5, #12]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d907      	bls.n	800ac9a <_fwalk_reent+0x3a>
 800ac8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	d003      	beq.n	800ac9a <_fwalk_reent+0x3a>
 800ac92:	4629      	mov	r1, r5
 800ac94:	4630      	mov	r0, r6
 800ac96:	47c0      	blx	r8
 800ac98:	4307      	orrs	r7, r0
 800ac9a:	3568      	adds	r5, #104	; 0x68
 800ac9c:	e7e9      	b.n	800ac72 <_fwalk_reent+0x12>
	...

0800aca0 <_localeconv_r>:
 800aca0:	4800      	ldr	r0, [pc, #0]	; (800aca4 <_localeconv_r+0x4>)
 800aca2:	4770      	bx	lr
 800aca4:	20000164 	.word	0x20000164

0800aca8 <__retarget_lock_init_recursive>:
 800aca8:	4770      	bx	lr

0800acaa <__retarget_lock_acquire_recursive>:
 800acaa:	4770      	bx	lr

0800acac <__retarget_lock_release_recursive>:
 800acac:	4770      	bx	lr

0800acae <__swhatbuf_r>:
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	460e      	mov	r6, r1
 800acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb6:	2900      	cmp	r1, #0
 800acb8:	b096      	sub	sp, #88	; 0x58
 800acba:	4614      	mov	r4, r2
 800acbc:	461d      	mov	r5, r3
 800acbe:	da07      	bge.n	800acd0 <__swhatbuf_r+0x22>
 800acc0:	2300      	movs	r3, #0
 800acc2:	602b      	str	r3, [r5, #0]
 800acc4:	89b3      	ldrh	r3, [r6, #12]
 800acc6:	061a      	lsls	r2, r3, #24
 800acc8:	d410      	bmi.n	800acec <__swhatbuf_r+0x3e>
 800acca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acce:	e00e      	b.n	800acee <__swhatbuf_r+0x40>
 800acd0:	466a      	mov	r2, sp
 800acd2:	f000 fdd9 	bl	800b888 <_fstat_r>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	dbf2      	blt.n	800acc0 <__swhatbuf_r+0x12>
 800acda:	9a01      	ldr	r2, [sp, #4]
 800acdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ace0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace4:	425a      	negs	r2, r3
 800ace6:	415a      	adcs	r2, r3
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	e7ee      	b.n	800acca <__swhatbuf_r+0x1c>
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	2000      	movs	r0, #0
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	b016      	add	sp, #88	; 0x58
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acf8 <__smakebuf_r>:
 800acf8:	898b      	ldrh	r3, [r1, #12]
 800acfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acfc:	079d      	lsls	r5, r3, #30
 800acfe:	4606      	mov	r6, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	d507      	bpl.n	800ad14 <__smakebuf_r+0x1c>
 800ad04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	6163      	str	r3, [r4, #20]
 800ad10:	b002      	add	sp, #8
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	ab01      	add	r3, sp, #4
 800ad16:	466a      	mov	r2, sp
 800ad18:	f7ff ffc9 	bl	800acae <__swhatbuf_r>
 800ad1c:	9900      	ldr	r1, [sp, #0]
 800ad1e:	4605      	mov	r5, r0
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7fe f96b 	bl	8008ffc <_malloc_r>
 800ad26:	b948      	cbnz	r0, 800ad3c <__smakebuf_r+0x44>
 800ad28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2c:	059a      	lsls	r2, r3, #22
 800ad2e:	d4ef      	bmi.n	800ad10 <__smakebuf_r+0x18>
 800ad30:	f023 0303 	bic.w	r3, r3, #3
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	e7e3      	b.n	800ad04 <__smakebuf_r+0xc>
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <__smakebuf_r+0x7c>)
 800ad3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad48:	81a3      	strh	r3, [r4, #12]
 800ad4a:	9b00      	ldr	r3, [sp, #0]
 800ad4c:	6163      	str	r3, [r4, #20]
 800ad4e:	9b01      	ldr	r3, [sp, #4]
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	b15b      	cbz	r3, 800ad6c <__smakebuf_r+0x74>
 800ad54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f000 fda7 	bl	800b8ac <_isatty_r>
 800ad5e:	b128      	cbz	r0, 800ad6c <__smakebuf_r+0x74>
 800ad60:	89a3      	ldrh	r3, [r4, #12]
 800ad62:	f023 0303 	bic.w	r3, r3, #3
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	89a0      	ldrh	r0, [r4, #12]
 800ad6e:	4305      	orrs	r5, r0
 800ad70:	81a5      	strh	r5, [r4, #12]
 800ad72:	e7cd      	b.n	800ad10 <__smakebuf_r+0x18>
 800ad74:	0800aafd 	.word	0x0800aafd

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f7ff bf96 	b.w	800acaa <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	20001cb4 	.word	0x20001cb4

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f7ff bf91 	b.w	800acac <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	20001cb4 	.word	0x20001cb4

0800ad90 <_Balloc>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad94:	4604      	mov	r4, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	b976      	cbnz	r6, 800adb8 <_Balloc+0x28>
 800ad9a:	2010      	movs	r0, #16
 800ad9c:	f7fe f8b8 	bl	8008f10 <malloc>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6260      	str	r0, [r4, #36]	; 0x24
 800ada4:	b920      	cbnz	r0, 800adb0 <_Balloc+0x20>
 800ada6:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <_Balloc+0x78>)
 800ada8:	4818      	ldr	r0, [pc, #96]	; (800ae0c <_Balloc+0x7c>)
 800adaa:	2166      	movs	r1, #102	; 0x66
 800adac:	f000 fd2c 	bl	800b808 <__assert_func>
 800adb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb4:	6006      	str	r6, [r0, #0]
 800adb6:	60c6      	str	r6, [r0, #12]
 800adb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adba:	68f3      	ldr	r3, [r6, #12]
 800adbc:	b183      	cbz	r3, 800ade0 <_Balloc+0x50>
 800adbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adc6:	b9b8      	cbnz	r0, 800adf8 <_Balloc+0x68>
 800adc8:	2101      	movs	r1, #1
 800adca:	fa01 f605 	lsl.w	r6, r1, r5
 800adce:	1d72      	adds	r2, r6, #5
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	4620      	mov	r0, r4
 800add4:	f000 fb5a 	bl	800b48c <_calloc_r>
 800add8:	b160      	cbz	r0, 800adf4 <_Balloc+0x64>
 800adda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adde:	e00e      	b.n	800adfe <_Balloc+0x6e>
 800ade0:	2221      	movs	r2, #33	; 0x21
 800ade2:	2104      	movs	r1, #4
 800ade4:	4620      	mov	r0, r4
 800ade6:	f000 fb51 	bl	800b48c <_calloc_r>
 800adea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adec:	60f0      	str	r0, [r6, #12]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e4      	bne.n	800adbe <_Balloc+0x2e>
 800adf4:	2000      	movs	r0, #0
 800adf6:	bd70      	pop	{r4, r5, r6, pc}
 800adf8:	6802      	ldr	r2, [r0, #0]
 800adfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adfe:	2300      	movs	r3, #0
 800ae00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae04:	e7f7      	b.n	800adf6 <_Balloc+0x66>
 800ae06:	bf00      	nop
 800ae08:	0800baf9 	.word	0x0800baf9
 800ae0c:	0800bbe0 	.word	0x0800bbe0

0800ae10 <_Bfree>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae14:	4605      	mov	r5, r0
 800ae16:	460c      	mov	r4, r1
 800ae18:	b976      	cbnz	r6, 800ae38 <_Bfree+0x28>
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	f7fe f878 	bl	8008f10 <malloc>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6268      	str	r0, [r5, #36]	; 0x24
 800ae24:	b920      	cbnz	r0, 800ae30 <_Bfree+0x20>
 800ae26:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <_Bfree+0x3c>)
 800ae28:	4809      	ldr	r0, [pc, #36]	; (800ae50 <_Bfree+0x40>)
 800ae2a:	218a      	movs	r1, #138	; 0x8a
 800ae2c:	f000 fcec 	bl	800b808 <__assert_func>
 800ae30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae34:	6006      	str	r6, [r0, #0]
 800ae36:	60c6      	str	r6, [r0, #12]
 800ae38:	b13c      	cbz	r4, 800ae4a <_Bfree+0x3a>
 800ae3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae3c:	6862      	ldr	r2, [r4, #4]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae44:	6021      	str	r1, [r4, #0]
 800ae46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae4a:	bd70      	pop	{r4, r5, r6, pc}
 800ae4c:	0800baf9 	.word	0x0800baf9
 800ae50:	0800bbe0 	.word	0x0800bbe0

0800ae54 <__multadd>:
 800ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	690e      	ldr	r6, [r1, #16]
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	4698      	mov	r8, r3
 800ae5e:	460c      	mov	r4, r1
 800ae60:	f101 0014 	add.w	r0, r1, #20
 800ae64:	2300      	movs	r3, #0
 800ae66:	6805      	ldr	r5, [r0, #0]
 800ae68:	b2a9      	uxth	r1, r5
 800ae6a:	fb02 8101 	mla	r1, r2, r1, r8
 800ae6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ae72:	0c2d      	lsrs	r5, r5, #16
 800ae74:	fb02 c505 	mla	r5, r2, r5, ip
 800ae78:	b289      	uxth	r1, r1
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ae80:	429e      	cmp	r6, r3
 800ae82:	f840 1b04 	str.w	r1, [r0], #4
 800ae86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ae8a:	dcec      	bgt.n	800ae66 <__multadd+0x12>
 800ae8c:	f1b8 0f00 	cmp.w	r8, #0
 800ae90:	d022      	beq.n	800aed8 <__multadd+0x84>
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	42b3      	cmp	r3, r6
 800ae96:	dc19      	bgt.n	800aecc <__multadd+0x78>
 800ae98:	6861      	ldr	r1, [r4, #4]
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	3101      	adds	r1, #1
 800ae9e:	f7ff ff77 	bl	800ad90 <_Balloc>
 800aea2:	4605      	mov	r5, r0
 800aea4:	b928      	cbnz	r0, 800aeb2 <__multadd+0x5e>
 800aea6:	4602      	mov	r2, r0
 800aea8:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <__multadd+0x8c>)
 800aeaa:	480e      	ldr	r0, [pc, #56]	; (800aee4 <__multadd+0x90>)
 800aeac:	21b5      	movs	r1, #181	; 0xb5
 800aeae:	f000 fcab 	bl	800b808 <__assert_func>
 800aeb2:	6922      	ldr	r2, [r4, #16]
 800aeb4:	3202      	adds	r2, #2
 800aeb6:	f104 010c 	add.w	r1, r4, #12
 800aeba:	0092      	lsls	r2, r2, #2
 800aebc:	300c      	adds	r0, #12
 800aebe:	f7fe f837 	bl	8008f30 <memcpy>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4638      	mov	r0, r7
 800aec6:	f7ff ffa3 	bl	800ae10 <_Bfree>
 800aeca:	462c      	mov	r4, r5
 800aecc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aed0:	3601      	adds	r6, #1
 800aed2:	f8c3 8014 	str.w	r8, [r3, #20]
 800aed6:	6126      	str	r6, [r4, #16]
 800aed8:	4620      	mov	r0, r4
 800aeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aede:	bf00      	nop
 800aee0:	0800bb6f 	.word	0x0800bb6f
 800aee4:	0800bbe0 	.word	0x0800bbe0

0800aee8 <__hi0bits>:
 800aee8:	0c03      	lsrs	r3, r0, #16
 800aeea:	041b      	lsls	r3, r3, #16
 800aeec:	b9d3      	cbnz	r3, 800af24 <__hi0bits+0x3c>
 800aeee:	0400      	lsls	r0, r0, #16
 800aef0:	2310      	movs	r3, #16
 800aef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aef6:	bf04      	itt	eq
 800aef8:	0200      	lsleq	r0, r0, #8
 800aefa:	3308      	addeq	r3, #8
 800aefc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af00:	bf04      	itt	eq
 800af02:	0100      	lsleq	r0, r0, #4
 800af04:	3304      	addeq	r3, #4
 800af06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af0a:	bf04      	itt	eq
 800af0c:	0080      	lsleq	r0, r0, #2
 800af0e:	3302      	addeq	r3, #2
 800af10:	2800      	cmp	r0, #0
 800af12:	db05      	blt.n	800af20 <__hi0bits+0x38>
 800af14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af18:	f103 0301 	add.w	r3, r3, #1
 800af1c:	bf08      	it	eq
 800af1e:	2320      	moveq	r3, #32
 800af20:	4618      	mov	r0, r3
 800af22:	4770      	bx	lr
 800af24:	2300      	movs	r3, #0
 800af26:	e7e4      	b.n	800aef2 <__hi0bits+0xa>

0800af28 <__lo0bits>:
 800af28:	6803      	ldr	r3, [r0, #0]
 800af2a:	f013 0207 	ands.w	r2, r3, #7
 800af2e:	4601      	mov	r1, r0
 800af30:	d00b      	beq.n	800af4a <__lo0bits+0x22>
 800af32:	07da      	lsls	r2, r3, #31
 800af34:	d424      	bmi.n	800af80 <__lo0bits+0x58>
 800af36:	0798      	lsls	r0, r3, #30
 800af38:	bf49      	itett	mi
 800af3a:	085b      	lsrmi	r3, r3, #1
 800af3c:	089b      	lsrpl	r3, r3, #2
 800af3e:	2001      	movmi	r0, #1
 800af40:	600b      	strmi	r3, [r1, #0]
 800af42:	bf5c      	itt	pl
 800af44:	600b      	strpl	r3, [r1, #0]
 800af46:	2002      	movpl	r0, #2
 800af48:	4770      	bx	lr
 800af4a:	b298      	uxth	r0, r3
 800af4c:	b9b0      	cbnz	r0, 800af7c <__lo0bits+0x54>
 800af4e:	0c1b      	lsrs	r3, r3, #16
 800af50:	2010      	movs	r0, #16
 800af52:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af56:	bf04      	itt	eq
 800af58:	0a1b      	lsreq	r3, r3, #8
 800af5a:	3008      	addeq	r0, #8
 800af5c:	071a      	lsls	r2, r3, #28
 800af5e:	bf04      	itt	eq
 800af60:	091b      	lsreq	r3, r3, #4
 800af62:	3004      	addeq	r0, #4
 800af64:	079a      	lsls	r2, r3, #30
 800af66:	bf04      	itt	eq
 800af68:	089b      	lsreq	r3, r3, #2
 800af6a:	3002      	addeq	r0, #2
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	d403      	bmi.n	800af78 <__lo0bits+0x50>
 800af70:	085b      	lsrs	r3, r3, #1
 800af72:	f100 0001 	add.w	r0, r0, #1
 800af76:	d005      	beq.n	800af84 <__lo0bits+0x5c>
 800af78:	600b      	str	r3, [r1, #0]
 800af7a:	4770      	bx	lr
 800af7c:	4610      	mov	r0, r2
 800af7e:	e7e8      	b.n	800af52 <__lo0bits+0x2a>
 800af80:	2000      	movs	r0, #0
 800af82:	4770      	bx	lr
 800af84:	2020      	movs	r0, #32
 800af86:	4770      	bx	lr

0800af88 <__i2b>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	2101      	movs	r1, #1
 800af8e:	f7ff feff 	bl	800ad90 <_Balloc>
 800af92:	4602      	mov	r2, r0
 800af94:	b928      	cbnz	r0, 800afa2 <__i2b+0x1a>
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <__i2b+0x24>)
 800af98:	4805      	ldr	r0, [pc, #20]	; (800afb0 <__i2b+0x28>)
 800af9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af9e:	f000 fc33 	bl	800b808 <__assert_func>
 800afa2:	2301      	movs	r3, #1
 800afa4:	6144      	str	r4, [r0, #20]
 800afa6:	6103      	str	r3, [r0, #16]
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	bf00      	nop
 800afac:	0800bb6f 	.word	0x0800bb6f
 800afb0:	0800bbe0 	.word	0x0800bbe0

0800afb4 <__multiply>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	4614      	mov	r4, r2
 800afba:	690a      	ldr	r2, [r1, #16]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	bfb8      	it	lt
 800afc2:	460b      	movlt	r3, r1
 800afc4:	460d      	mov	r5, r1
 800afc6:	bfbc      	itt	lt
 800afc8:	4625      	movlt	r5, r4
 800afca:	461c      	movlt	r4, r3
 800afcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800afd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800afd4:	68ab      	ldr	r3, [r5, #8]
 800afd6:	6869      	ldr	r1, [r5, #4]
 800afd8:	eb0a 0709 	add.w	r7, sl, r9
 800afdc:	42bb      	cmp	r3, r7
 800afde:	b085      	sub	sp, #20
 800afe0:	bfb8      	it	lt
 800afe2:	3101      	addlt	r1, #1
 800afe4:	f7ff fed4 	bl	800ad90 <_Balloc>
 800afe8:	b930      	cbnz	r0, 800aff8 <__multiply+0x44>
 800afea:	4602      	mov	r2, r0
 800afec:	4b42      	ldr	r3, [pc, #264]	; (800b0f8 <__multiply+0x144>)
 800afee:	4843      	ldr	r0, [pc, #268]	; (800b0fc <__multiply+0x148>)
 800aff0:	f240 115d 	movw	r1, #349	; 0x15d
 800aff4:	f000 fc08 	bl	800b808 <__assert_func>
 800aff8:	f100 0614 	add.w	r6, r0, #20
 800affc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b000:	4633      	mov	r3, r6
 800b002:	2200      	movs	r2, #0
 800b004:	4543      	cmp	r3, r8
 800b006:	d31e      	bcc.n	800b046 <__multiply+0x92>
 800b008:	f105 0c14 	add.w	ip, r5, #20
 800b00c:	f104 0314 	add.w	r3, r4, #20
 800b010:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b014:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b018:	9202      	str	r2, [sp, #8]
 800b01a:	ebac 0205 	sub.w	r2, ip, r5
 800b01e:	3a15      	subs	r2, #21
 800b020:	f022 0203 	bic.w	r2, r2, #3
 800b024:	3204      	adds	r2, #4
 800b026:	f105 0115 	add.w	r1, r5, #21
 800b02a:	458c      	cmp	ip, r1
 800b02c:	bf38      	it	cc
 800b02e:	2204      	movcc	r2, #4
 800b030:	9201      	str	r2, [sp, #4]
 800b032:	9a02      	ldr	r2, [sp, #8]
 800b034:	9303      	str	r3, [sp, #12]
 800b036:	429a      	cmp	r2, r3
 800b038:	d808      	bhi.n	800b04c <__multiply+0x98>
 800b03a:	2f00      	cmp	r7, #0
 800b03c:	dc55      	bgt.n	800b0ea <__multiply+0x136>
 800b03e:	6107      	str	r7, [r0, #16]
 800b040:	b005      	add	sp, #20
 800b042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b046:	f843 2b04 	str.w	r2, [r3], #4
 800b04a:	e7db      	b.n	800b004 <__multiply+0x50>
 800b04c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b050:	f1ba 0f00 	cmp.w	sl, #0
 800b054:	d020      	beq.n	800b098 <__multiply+0xe4>
 800b056:	f105 0e14 	add.w	lr, r5, #20
 800b05a:	46b1      	mov	r9, r6
 800b05c:	2200      	movs	r2, #0
 800b05e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b062:	f8d9 b000 	ldr.w	fp, [r9]
 800b066:	b2a1      	uxth	r1, r4
 800b068:	fa1f fb8b 	uxth.w	fp, fp
 800b06c:	fb0a b101 	mla	r1, sl, r1, fp
 800b070:	4411      	add	r1, r2
 800b072:	f8d9 2000 	ldr.w	r2, [r9]
 800b076:	0c24      	lsrs	r4, r4, #16
 800b078:	0c12      	lsrs	r2, r2, #16
 800b07a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b07e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b082:	b289      	uxth	r1, r1
 800b084:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b088:	45f4      	cmp	ip, lr
 800b08a:	f849 1b04 	str.w	r1, [r9], #4
 800b08e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b092:	d8e4      	bhi.n	800b05e <__multiply+0xaa>
 800b094:	9901      	ldr	r1, [sp, #4]
 800b096:	5072      	str	r2, [r6, r1]
 800b098:	9a03      	ldr	r2, [sp, #12]
 800b09a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b09e:	3304      	adds	r3, #4
 800b0a0:	f1b9 0f00 	cmp.w	r9, #0
 800b0a4:	d01f      	beq.n	800b0e6 <__multiply+0x132>
 800b0a6:	6834      	ldr	r4, [r6, #0]
 800b0a8:	f105 0114 	add.w	r1, r5, #20
 800b0ac:	46b6      	mov	lr, r6
 800b0ae:	f04f 0a00 	mov.w	sl, #0
 800b0b2:	880a      	ldrh	r2, [r1, #0]
 800b0b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b0b8:	fb09 b202 	mla	r2, r9, r2, fp
 800b0bc:	4492      	add	sl, r2
 800b0be:	b2a4      	uxth	r4, r4
 800b0c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b0c4:	f84e 4b04 	str.w	r4, [lr], #4
 800b0c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800b0cc:	f8be 2000 	ldrh.w	r2, [lr]
 800b0d0:	0c24      	lsrs	r4, r4, #16
 800b0d2:	fb09 2404 	mla	r4, r9, r4, r2
 800b0d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b0da:	458c      	cmp	ip, r1
 800b0dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b0e0:	d8e7      	bhi.n	800b0b2 <__multiply+0xfe>
 800b0e2:	9a01      	ldr	r2, [sp, #4]
 800b0e4:	50b4      	str	r4, [r6, r2]
 800b0e6:	3604      	adds	r6, #4
 800b0e8:	e7a3      	b.n	800b032 <__multiply+0x7e>
 800b0ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1a5      	bne.n	800b03e <__multiply+0x8a>
 800b0f2:	3f01      	subs	r7, #1
 800b0f4:	e7a1      	b.n	800b03a <__multiply+0x86>
 800b0f6:	bf00      	nop
 800b0f8:	0800bb6f 	.word	0x0800bb6f
 800b0fc:	0800bbe0 	.word	0x0800bbe0

0800b100 <__pow5mult>:
 800b100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b104:	4615      	mov	r5, r2
 800b106:	f012 0203 	ands.w	r2, r2, #3
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	d007      	beq.n	800b120 <__pow5mult+0x20>
 800b110:	4c25      	ldr	r4, [pc, #148]	; (800b1a8 <__pow5mult+0xa8>)
 800b112:	3a01      	subs	r2, #1
 800b114:	2300      	movs	r3, #0
 800b116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b11a:	f7ff fe9b 	bl	800ae54 <__multadd>
 800b11e:	4607      	mov	r7, r0
 800b120:	10ad      	asrs	r5, r5, #2
 800b122:	d03d      	beq.n	800b1a0 <__pow5mult+0xa0>
 800b124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b126:	b97c      	cbnz	r4, 800b148 <__pow5mult+0x48>
 800b128:	2010      	movs	r0, #16
 800b12a:	f7fd fef1 	bl	8008f10 <malloc>
 800b12e:	4602      	mov	r2, r0
 800b130:	6270      	str	r0, [r6, #36]	; 0x24
 800b132:	b928      	cbnz	r0, 800b140 <__pow5mult+0x40>
 800b134:	4b1d      	ldr	r3, [pc, #116]	; (800b1ac <__pow5mult+0xac>)
 800b136:	481e      	ldr	r0, [pc, #120]	; (800b1b0 <__pow5mult+0xb0>)
 800b138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b13c:	f000 fb64 	bl	800b808 <__assert_func>
 800b140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b144:	6004      	str	r4, [r0, #0]
 800b146:	60c4      	str	r4, [r0, #12]
 800b148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b150:	b94c      	cbnz	r4, 800b166 <__pow5mult+0x66>
 800b152:	f240 2171 	movw	r1, #625	; 0x271
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ff16 	bl	800af88 <__i2b>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b162:	4604      	mov	r4, r0
 800b164:	6003      	str	r3, [r0, #0]
 800b166:	f04f 0900 	mov.w	r9, #0
 800b16a:	07eb      	lsls	r3, r5, #31
 800b16c:	d50a      	bpl.n	800b184 <__pow5mult+0x84>
 800b16e:	4639      	mov	r1, r7
 800b170:	4622      	mov	r2, r4
 800b172:	4630      	mov	r0, r6
 800b174:	f7ff ff1e 	bl	800afb4 <__multiply>
 800b178:	4639      	mov	r1, r7
 800b17a:	4680      	mov	r8, r0
 800b17c:	4630      	mov	r0, r6
 800b17e:	f7ff fe47 	bl	800ae10 <_Bfree>
 800b182:	4647      	mov	r7, r8
 800b184:	106d      	asrs	r5, r5, #1
 800b186:	d00b      	beq.n	800b1a0 <__pow5mult+0xa0>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	b938      	cbnz	r0, 800b19c <__pow5mult+0x9c>
 800b18c:	4622      	mov	r2, r4
 800b18e:	4621      	mov	r1, r4
 800b190:	4630      	mov	r0, r6
 800b192:	f7ff ff0f 	bl	800afb4 <__multiply>
 800b196:	6020      	str	r0, [r4, #0]
 800b198:	f8c0 9000 	str.w	r9, [r0]
 800b19c:	4604      	mov	r4, r0
 800b19e:	e7e4      	b.n	800b16a <__pow5mult+0x6a>
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0800bd30 	.word	0x0800bd30
 800b1ac:	0800baf9 	.word	0x0800baf9
 800b1b0:	0800bbe0 	.word	0x0800bbe0

0800b1b4 <__lshift>:
 800b1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	6849      	ldr	r1, [r1, #4]
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1c2:	68a3      	ldr	r3, [r4, #8]
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	4691      	mov	r9, r2
 800b1c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1cc:	f108 0601 	add.w	r6, r8, #1
 800b1d0:	42b3      	cmp	r3, r6
 800b1d2:	db0b      	blt.n	800b1ec <__lshift+0x38>
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	f7ff fddb 	bl	800ad90 <_Balloc>
 800b1da:	4605      	mov	r5, r0
 800b1dc:	b948      	cbnz	r0, 800b1f2 <__lshift+0x3e>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	4b28      	ldr	r3, [pc, #160]	; (800b284 <__lshift+0xd0>)
 800b1e2:	4829      	ldr	r0, [pc, #164]	; (800b288 <__lshift+0xd4>)
 800b1e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b1e8:	f000 fb0e 	bl	800b808 <__assert_func>
 800b1ec:	3101      	adds	r1, #1
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	e7ee      	b.n	800b1d0 <__lshift+0x1c>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f100 0114 	add.w	r1, r0, #20
 800b1f8:	f100 0210 	add.w	r2, r0, #16
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	4553      	cmp	r3, sl
 800b200:	db33      	blt.n	800b26a <__lshift+0xb6>
 800b202:	6920      	ldr	r0, [r4, #16]
 800b204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b208:	f104 0314 	add.w	r3, r4, #20
 800b20c:	f019 091f 	ands.w	r9, r9, #31
 800b210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b218:	d02b      	beq.n	800b272 <__lshift+0xbe>
 800b21a:	f1c9 0e20 	rsb	lr, r9, #32
 800b21e:	468a      	mov	sl, r1
 800b220:	2200      	movs	r2, #0
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	fa00 f009 	lsl.w	r0, r0, r9
 800b228:	4302      	orrs	r2, r0
 800b22a:	f84a 2b04 	str.w	r2, [sl], #4
 800b22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b232:	459c      	cmp	ip, r3
 800b234:	fa22 f20e 	lsr.w	r2, r2, lr
 800b238:	d8f3      	bhi.n	800b222 <__lshift+0x6e>
 800b23a:	ebac 0304 	sub.w	r3, ip, r4
 800b23e:	3b15      	subs	r3, #21
 800b240:	f023 0303 	bic.w	r3, r3, #3
 800b244:	3304      	adds	r3, #4
 800b246:	f104 0015 	add.w	r0, r4, #21
 800b24a:	4584      	cmp	ip, r0
 800b24c:	bf38      	it	cc
 800b24e:	2304      	movcc	r3, #4
 800b250:	50ca      	str	r2, [r1, r3]
 800b252:	b10a      	cbz	r2, 800b258 <__lshift+0xa4>
 800b254:	f108 0602 	add.w	r6, r8, #2
 800b258:	3e01      	subs	r6, #1
 800b25a:	4638      	mov	r0, r7
 800b25c:	612e      	str	r6, [r5, #16]
 800b25e:	4621      	mov	r1, r4
 800b260:	f7ff fdd6 	bl	800ae10 <_Bfree>
 800b264:	4628      	mov	r0, r5
 800b266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b26e:	3301      	adds	r3, #1
 800b270:	e7c5      	b.n	800b1fe <__lshift+0x4a>
 800b272:	3904      	subs	r1, #4
 800b274:	f853 2b04 	ldr.w	r2, [r3], #4
 800b278:	f841 2f04 	str.w	r2, [r1, #4]!
 800b27c:	459c      	cmp	ip, r3
 800b27e:	d8f9      	bhi.n	800b274 <__lshift+0xc0>
 800b280:	e7ea      	b.n	800b258 <__lshift+0xa4>
 800b282:	bf00      	nop
 800b284:	0800bb6f 	.word	0x0800bb6f
 800b288:	0800bbe0 	.word	0x0800bbe0

0800b28c <__mcmp>:
 800b28c:	b530      	push	{r4, r5, lr}
 800b28e:	6902      	ldr	r2, [r0, #16]
 800b290:	690c      	ldr	r4, [r1, #16]
 800b292:	1b12      	subs	r2, r2, r4
 800b294:	d10e      	bne.n	800b2b4 <__mcmp+0x28>
 800b296:	f100 0314 	add.w	r3, r0, #20
 800b29a:	3114      	adds	r1, #20
 800b29c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b2a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b2a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b2a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b2ac:	42a5      	cmp	r5, r4
 800b2ae:	d003      	beq.n	800b2b8 <__mcmp+0x2c>
 800b2b0:	d305      	bcc.n	800b2be <__mcmp+0x32>
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	bd30      	pop	{r4, r5, pc}
 800b2b8:	4283      	cmp	r3, r0
 800b2ba:	d3f3      	bcc.n	800b2a4 <__mcmp+0x18>
 800b2bc:	e7fa      	b.n	800b2b4 <__mcmp+0x28>
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c2:	e7f7      	b.n	800b2b4 <__mcmp+0x28>

0800b2c4 <__mdiff>:
 800b2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4617      	mov	r7, r2
 800b2d2:	f7ff ffdb 	bl	800b28c <__mcmp>
 800b2d6:	1e05      	subs	r5, r0, #0
 800b2d8:	d110      	bne.n	800b2fc <__mdiff+0x38>
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7ff fd57 	bl	800ad90 <_Balloc>
 800b2e2:	b930      	cbnz	r0, 800b2f2 <__mdiff+0x2e>
 800b2e4:	4b39      	ldr	r3, [pc, #228]	; (800b3cc <__mdiff+0x108>)
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	f240 2132 	movw	r1, #562	; 0x232
 800b2ec:	4838      	ldr	r0, [pc, #224]	; (800b3d0 <__mdiff+0x10c>)
 800b2ee:	f000 fa8b 	bl	800b808 <__assert_func>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fc:	bfa4      	itt	ge
 800b2fe:	463b      	movge	r3, r7
 800b300:	4627      	movge	r7, r4
 800b302:	4630      	mov	r0, r6
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	bfa6      	itte	ge
 800b308:	461c      	movge	r4, r3
 800b30a:	2500      	movge	r5, #0
 800b30c:	2501      	movlt	r5, #1
 800b30e:	f7ff fd3f 	bl	800ad90 <_Balloc>
 800b312:	b920      	cbnz	r0, 800b31e <__mdiff+0x5a>
 800b314:	4b2d      	ldr	r3, [pc, #180]	; (800b3cc <__mdiff+0x108>)
 800b316:	4602      	mov	r2, r0
 800b318:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b31c:	e7e6      	b.n	800b2ec <__mdiff+0x28>
 800b31e:	693e      	ldr	r6, [r7, #16]
 800b320:	60c5      	str	r5, [r0, #12]
 800b322:	6925      	ldr	r5, [r4, #16]
 800b324:	f107 0114 	add.w	r1, r7, #20
 800b328:	f104 0914 	add.w	r9, r4, #20
 800b32c:	f100 0e14 	add.w	lr, r0, #20
 800b330:	f107 0210 	add.w	r2, r7, #16
 800b334:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b338:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b33c:	46f2      	mov	sl, lr
 800b33e:	2700      	movs	r7, #0
 800b340:	f859 3b04 	ldr.w	r3, [r9], #4
 800b344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b348:	fa1f f883 	uxth.w	r8, r3
 800b34c:	fa17 f78b 	uxtah	r7, r7, fp
 800b350:	0c1b      	lsrs	r3, r3, #16
 800b352:	eba7 0808 	sub.w	r8, r7, r8
 800b356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b35a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b35e:	fa1f f888 	uxth.w	r8, r8
 800b362:	141f      	asrs	r7, r3, #16
 800b364:	454d      	cmp	r5, r9
 800b366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b36a:	f84a 3b04 	str.w	r3, [sl], #4
 800b36e:	d8e7      	bhi.n	800b340 <__mdiff+0x7c>
 800b370:	1b2b      	subs	r3, r5, r4
 800b372:	3b15      	subs	r3, #21
 800b374:	f023 0303 	bic.w	r3, r3, #3
 800b378:	3304      	adds	r3, #4
 800b37a:	3415      	adds	r4, #21
 800b37c:	42a5      	cmp	r5, r4
 800b37e:	bf38      	it	cc
 800b380:	2304      	movcc	r3, #4
 800b382:	4419      	add	r1, r3
 800b384:	4473      	add	r3, lr
 800b386:	469e      	mov	lr, r3
 800b388:	460d      	mov	r5, r1
 800b38a:	4565      	cmp	r5, ip
 800b38c:	d30e      	bcc.n	800b3ac <__mdiff+0xe8>
 800b38e:	f10c 0203 	add.w	r2, ip, #3
 800b392:	1a52      	subs	r2, r2, r1
 800b394:	f022 0203 	bic.w	r2, r2, #3
 800b398:	3903      	subs	r1, #3
 800b39a:	458c      	cmp	ip, r1
 800b39c:	bf38      	it	cc
 800b39e:	2200      	movcc	r2, #0
 800b3a0:	441a      	add	r2, r3
 800b3a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b3a6:	b17b      	cbz	r3, 800b3c8 <__mdiff+0x104>
 800b3a8:	6106      	str	r6, [r0, #16]
 800b3aa:	e7a5      	b.n	800b2f8 <__mdiff+0x34>
 800b3ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800b3b0:	fa17 f488 	uxtah	r4, r7, r8
 800b3b4:	1422      	asrs	r2, r4, #16
 800b3b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b3ba:	b2a4      	uxth	r4, r4
 800b3bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b3c0:	f84e 4b04 	str.w	r4, [lr], #4
 800b3c4:	1417      	asrs	r7, r2, #16
 800b3c6:	e7e0      	b.n	800b38a <__mdiff+0xc6>
 800b3c8:	3e01      	subs	r6, #1
 800b3ca:	e7ea      	b.n	800b3a2 <__mdiff+0xde>
 800b3cc:	0800bb6f 	.word	0x0800bb6f
 800b3d0:	0800bbe0 	.word	0x0800bbe0

0800b3d4 <__d2b>:
 800b3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3d8:	4689      	mov	r9, r1
 800b3da:	2101      	movs	r1, #1
 800b3dc:	ec57 6b10 	vmov	r6, r7, d0
 800b3e0:	4690      	mov	r8, r2
 800b3e2:	f7ff fcd5 	bl	800ad90 <_Balloc>
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	b930      	cbnz	r0, 800b3f8 <__d2b+0x24>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	4b25      	ldr	r3, [pc, #148]	; (800b484 <__d2b+0xb0>)
 800b3ee:	4826      	ldr	r0, [pc, #152]	; (800b488 <__d2b+0xb4>)
 800b3f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b3f4:	f000 fa08 	bl	800b808 <__assert_func>
 800b3f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b3fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b400:	bb35      	cbnz	r5, 800b450 <__d2b+0x7c>
 800b402:	2e00      	cmp	r6, #0
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	d028      	beq.n	800b45a <__d2b+0x86>
 800b408:	4668      	mov	r0, sp
 800b40a:	9600      	str	r6, [sp, #0]
 800b40c:	f7ff fd8c 	bl	800af28 <__lo0bits>
 800b410:	9900      	ldr	r1, [sp, #0]
 800b412:	b300      	cbz	r0, 800b456 <__d2b+0x82>
 800b414:	9a01      	ldr	r2, [sp, #4]
 800b416:	f1c0 0320 	rsb	r3, r0, #32
 800b41a:	fa02 f303 	lsl.w	r3, r2, r3
 800b41e:	430b      	orrs	r3, r1
 800b420:	40c2      	lsrs	r2, r0
 800b422:	6163      	str	r3, [r4, #20]
 800b424:	9201      	str	r2, [sp, #4]
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	61a3      	str	r3, [r4, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bf14      	ite	ne
 800b42e:	2202      	movne	r2, #2
 800b430:	2201      	moveq	r2, #1
 800b432:	6122      	str	r2, [r4, #16]
 800b434:	b1d5      	cbz	r5, 800b46c <__d2b+0x98>
 800b436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b43a:	4405      	add	r5, r0
 800b43c:	f8c9 5000 	str.w	r5, [r9]
 800b440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b444:	f8c8 0000 	str.w	r0, [r8]
 800b448:	4620      	mov	r0, r4
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b454:	e7d5      	b.n	800b402 <__d2b+0x2e>
 800b456:	6161      	str	r1, [r4, #20]
 800b458:	e7e5      	b.n	800b426 <__d2b+0x52>
 800b45a:	a801      	add	r0, sp, #4
 800b45c:	f7ff fd64 	bl	800af28 <__lo0bits>
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	6163      	str	r3, [r4, #20]
 800b464:	2201      	movs	r2, #1
 800b466:	6122      	str	r2, [r4, #16]
 800b468:	3020      	adds	r0, #32
 800b46a:	e7e3      	b.n	800b434 <__d2b+0x60>
 800b46c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b474:	f8c9 0000 	str.w	r0, [r9]
 800b478:	6918      	ldr	r0, [r3, #16]
 800b47a:	f7ff fd35 	bl	800aee8 <__hi0bits>
 800b47e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b482:	e7df      	b.n	800b444 <__d2b+0x70>
 800b484:	0800bb6f 	.word	0x0800bb6f
 800b488:	0800bbe0 	.word	0x0800bbe0

0800b48c <_calloc_r>:
 800b48c:	b513      	push	{r0, r1, r4, lr}
 800b48e:	434a      	muls	r2, r1
 800b490:	4611      	mov	r1, r2
 800b492:	9201      	str	r2, [sp, #4]
 800b494:	f7fd fdb2 	bl	8008ffc <_malloc_r>
 800b498:	4604      	mov	r4, r0
 800b49a:	b118      	cbz	r0, 800b4a4 <_calloc_r+0x18>
 800b49c:	9a01      	ldr	r2, [sp, #4]
 800b49e:	2100      	movs	r1, #0
 800b4a0:	f7fd fd54 	bl	8008f4c <memset>
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	b002      	add	sp, #8
 800b4a8:	bd10      	pop	{r4, pc}

0800b4aa <__sfputc_r>:
 800b4aa:	6893      	ldr	r3, [r2, #8]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	b410      	push	{r4}
 800b4b2:	6093      	str	r3, [r2, #8]
 800b4b4:	da08      	bge.n	800b4c8 <__sfputc_r+0x1e>
 800b4b6:	6994      	ldr	r4, [r2, #24]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	db01      	blt.n	800b4c0 <__sfputc_r+0x16>
 800b4bc:	290a      	cmp	r1, #10
 800b4be:	d103      	bne.n	800b4c8 <__sfputc_r+0x1e>
 800b4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c4:	f7fe bafc 	b.w	8009ac0 <__swbuf_r>
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	1c58      	adds	r0, r3, #1
 800b4cc:	6010      	str	r0, [r2, #0]
 800b4ce:	7019      	strb	r1, [r3, #0]
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <__sfputs_r>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	4614      	mov	r4, r2
 800b4e0:	18d5      	adds	r5, r2, r3
 800b4e2:	42ac      	cmp	r4, r5
 800b4e4:	d101      	bne.n	800b4ea <__sfputs_r+0x12>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e007      	b.n	800b4fa <__sfputs_r+0x22>
 800b4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff ffda 	bl	800b4aa <__sfputc_r>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d1f3      	bne.n	800b4e2 <__sfputs_r+0xa>
 800b4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4fc <_vfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	460d      	mov	r5, r1
 800b502:	b09d      	sub	sp, #116	; 0x74
 800b504:	4614      	mov	r4, r2
 800b506:	4698      	mov	r8, r3
 800b508:	4606      	mov	r6, r0
 800b50a:	b118      	cbz	r0, 800b514 <_vfiprintf_r+0x18>
 800b50c:	6983      	ldr	r3, [r0, #24]
 800b50e:	b90b      	cbnz	r3, 800b514 <_vfiprintf_r+0x18>
 800b510:	f7ff fb28 	bl	800ab64 <__sinit>
 800b514:	4b89      	ldr	r3, [pc, #548]	; (800b73c <_vfiprintf_r+0x240>)
 800b516:	429d      	cmp	r5, r3
 800b518:	d11b      	bne.n	800b552 <_vfiprintf_r+0x56>
 800b51a:	6875      	ldr	r5, [r6, #4]
 800b51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b51e:	07d9      	lsls	r1, r3, #31
 800b520:	d405      	bmi.n	800b52e <_vfiprintf_r+0x32>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	059a      	lsls	r2, r3, #22
 800b526:	d402      	bmi.n	800b52e <_vfiprintf_r+0x32>
 800b528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b52a:	f7ff fbbe 	bl	800acaa <__retarget_lock_acquire_recursive>
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	071b      	lsls	r3, r3, #28
 800b532:	d501      	bpl.n	800b538 <_vfiprintf_r+0x3c>
 800b534:	692b      	ldr	r3, [r5, #16]
 800b536:	b9eb      	cbnz	r3, 800b574 <_vfiprintf_r+0x78>
 800b538:	4629      	mov	r1, r5
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7fe fb12 	bl	8009b64 <__swsetup_r>
 800b540:	b1c0      	cbz	r0, 800b574 <_vfiprintf_r+0x78>
 800b542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b544:	07dc      	lsls	r4, r3, #31
 800b546:	d50e      	bpl.n	800b566 <_vfiprintf_r+0x6a>
 800b548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b54c:	b01d      	add	sp, #116	; 0x74
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	4b7b      	ldr	r3, [pc, #492]	; (800b740 <_vfiprintf_r+0x244>)
 800b554:	429d      	cmp	r5, r3
 800b556:	d101      	bne.n	800b55c <_vfiprintf_r+0x60>
 800b558:	68b5      	ldr	r5, [r6, #8]
 800b55a:	e7df      	b.n	800b51c <_vfiprintf_r+0x20>
 800b55c:	4b79      	ldr	r3, [pc, #484]	; (800b744 <_vfiprintf_r+0x248>)
 800b55e:	429d      	cmp	r5, r3
 800b560:	bf08      	it	eq
 800b562:	68f5      	ldreq	r5, [r6, #12]
 800b564:	e7da      	b.n	800b51c <_vfiprintf_r+0x20>
 800b566:	89ab      	ldrh	r3, [r5, #12]
 800b568:	0598      	lsls	r0, r3, #22
 800b56a:	d4ed      	bmi.n	800b548 <_vfiprintf_r+0x4c>
 800b56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56e:	f7ff fb9d 	bl	800acac <__retarget_lock_release_recursive>
 800b572:	e7e9      	b.n	800b548 <_vfiprintf_r+0x4c>
 800b574:	2300      	movs	r3, #0
 800b576:	9309      	str	r3, [sp, #36]	; 0x24
 800b578:	2320      	movs	r3, #32
 800b57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b582:	2330      	movs	r3, #48	; 0x30
 800b584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b748 <_vfiprintf_r+0x24c>
 800b588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b58c:	f04f 0901 	mov.w	r9, #1
 800b590:	4623      	mov	r3, r4
 800b592:	469a      	mov	sl, r3
 800b594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b598:	b10a      	cbz	r2, 800b59e <_vfiprintf_r+0xa2>
 800b59a:	2a25      	cmp	r2, #37	; 0x25
 800b59c:	d1f9      	bne.n	800b592 <_vfiprintf_r+0x96>
 800b59e:	ebba 0b04 	subs.w	fp, sl, r4
 800b5a2:	d00b      	beq.n	800b5bc <_vfiprintf_r+0xc0>
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f7ff ff94 	bl	800b4d8 <__sfputs_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f000 80aa 	beq.w	800b70a <_vfiprintf_r+0x20e>
 800b5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5b8:	445a      	add	r2, fp
 800b5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80a2 	beq.w	800b70a <_vfiprintf_r+0x20e>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d0:	f10a 0a01 	add.w	sl, sl, #1
 800b5d4:	9304      	str	r3, [sp, #16]
 800b5d6:	9307      	str	r3, [sp, #28]
 800b5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2205      	movs	r2, #5
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	4858      	ldr	r0, [pc, #352]	; (800b748 <_vfiprintf_r+0x24c>)
 800b5e8:	f7f4 fdfa 	bl	80001e0 <memchr>
 800b5ec:	9a04      	ldr	r2, [sp, #16]
 800b5ee:	b9d8      	cbnz	r0, 800b628 <_vfiprintf_r+0x12c>
 800b5f0:	06d1      	lsls	r1, r2, #27
 800b5f2:	bf44      	itt	mi
 800b5f4:	2320      	movmi	r3, #32
 800b5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5fa:	0713      	lsls	r3, r2, #28
 800b5fc:	bf44      	itt	mi
 800b5fe:	232b      	movmi	r3, #43	; 0x2b
 800b600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b604:	f89a 3000 	ldrb.w	r3, [sl]
 800b608:	2b2a      	cmp	r3, #42	; 0x2a
 800b60a:	d015      	beq.n	800b638 <_vfiprintf_r+0x13c>
 800b60c:	9a07      	ldr	r2, [sp, #28]
 800b60e:	4654      	mov	r4, sl
 800b610:	2000      	movs	r0, #0
 800b612:	f04f 0c0a 	mov.w	ip, #10
 800b616:	4621      	mov	r1, r4
 800b618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b61c:	3b30      	subs	r3, #48	; 0x30
 800b61e:	2b09      	cmp	r3, #9
 800b620:	d94e      	bls.n	800b6c0 <_vfiprintf_r+0x1c4>
 800b622:	b1b0      	cbz	r0, 800b652 <_vfiprintf_r+0x156>
 800b624:	9207      	str	r2, [sp, #28]
 800b626:	e014      	b.n	800b652 <_vfiprintf_r+0x156>
 800b628:	eba0 0308 	sub.w	r3, r0, r8
 800b62c:	fa09 f303 	lsl.w	r3, r9, r3
 800b630:	4313      	orrs	r3, r2
 800b632:	9304      	str	r3, [sp, #16]
 800b634:	46a2      	mov	sl, r4
 800b636:	e7d2      	b.n	800b5de <_vfiprintf_r+0xe2>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	1d19      	adds	r1, r3, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	9103      	str	r1, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfbb      	ittet	lt
 800b644:	425b      	neglt	r3, r3
 800b646:	f042 0202 	orrlt.w	r2, r2, #2
 800b64a:	9307      	strge	r3, [sp, #28]
 800b64c:	9307      	strlt	r3, [sp, #28]
 800b64e:	bfb8      	it	lt
 800b650:	9204      	strlt	r2, [sp, #16]
 800b652:	7823      	ldrb	r3, [r4, #0]
 800b654:	2b2e      	cmp	r3, #46	; 0x2e
 800b656:	d10c      	bne.n	800b672 <_vfiprintf_r+0x176>
 800b658:	7863      	ldrb	r3, [r4, #1]
 800b65a:	2b2a      	cmp	r3, #42	; 0x2a
 800b65c:	d135      	bne.n	800b6ca <_vfiprintf_r+0x1ce>
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	1d1a      	adds	r2, r3, #4
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	9203      	str	r2, [sp, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	bfb8      	it	lt
 800b66a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b66e:	3402      	adds	r4, #2
 800b670:	9305      	str	r3, [sp, #20]
 800b672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b758 <_vfiprintf_r+0x25c>
 800b676:	7821      	ldrb	r1, [r4, #0]
 800b678:	2203      	movs	r2, #3
 800b67a:	4650      	mov	r0, sl
 800b67c:	f7f4 fdb0 	bl	80001e0 <memchr>
 800b680:	b140      	cbz	r0, 800b694 <_vfiprintf_r+0x198>
 800b682:	2340      	movs	r3, #64	; 0x40
 800b684:	eba0 000a 	sub.w	r0, r0, sl
 800b688:	fa03 f000 	lsl.w	r0, r3, r0
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	4303      	orrs	r3, r0
 800b690:	3401      	adds	r4, #1
 800b692:	9304      	str	r3, [sp, #16]
 800b694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b698:	482c      	ldr	r0, [pc, #176]	; (800b74c <_vfiprintf_r+0x250>)
 800b69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b69e:	2206      	movs	r2, #6
 800b6a0:	f7f4 fd9e 	bl	80001e0 <memchr>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d03f      	beq.n	800b728 <_vfiprintf_r+0x22c>
 800b6a8:	4b29      	ldr	r3, [pc, #164]	; (800b750 <_vfiprintf_r+0x254>)
 800b6aa:	bb1b      	cbnz	r3, 800b6f4 <_vfiprintf_r+0x1f8>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	3307      	adds	r3, #7
 800b6b0:	f023 0307 	bic.w	r3, r3, #7
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	9303      	str	r3, [sp, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	443b      	add	r3, r7
 800b6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6be:	e767      	b.n	800b590 <_vfiprintf_r+0x94>
 800b6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6c4:	460c      	mov	r4, r1
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	e7a5      	b.n	800b616 <_vfiprintf_r+0x11a>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	3401      	adds	r4, #1
 800b6ce:	9305      	str	r3, [sp, #20]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f04f 0c0a 	mov.w	ip, #10
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6dc:	3a30      	subs	r2, #48	; 0x30
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d903      	bls.n	800b6ea <_vfiprintf_r+0x1ee>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0c5      	beq.n	800b672 <_vfiprintf_r+0x176>
 800b6e6:	9105      	str	r1, [sp, #20]
 800b6e8:	e7c3      	b.n	800b672 <_vfiprintf_r+0x176>
 800b6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e7f0      	b.n	800b6d6 <_vfiprintf_r+0x1da>
 800b6f4:	ab03      	add	r3, sp, #12
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <_vfiprintf_r+0x258>)
 800b6fc:	a904      	add	r1, sp, #16
 800b6fe:	4630      	mov	r0, r6
 800b700:	f7fd fd76 	bl	80091f0 <_printf_float>
 800b704:	4607      	mov	r7, r0
 800b706:	1c78      	adds	r0, r7, #1
 800b708:	d1d6      	bne.n	800b6b8 <_vfiprintf_r+0x1bc>
 800b70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b70c:	07d9      	lsls	r1, r3, #31
 800b70e:	d405      	bmi.n	800b71c <_vfiprintf_r+0x220>
 800b710:	89ab      	ldrh	r3, [r5, #12]
 800b712:	059a      	lsls	r2, r3, #22
 800b714:	d402      	bmi.n	800b71c <_vfiprintf_r+0x220>
 800b716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b718:	f7ff fac8 	bl	800acac <__retarget_lock_release_recursive>
 800b71c:	89ab      	ldrh	r3, [r5, #12]
 800b71e:	065b      	lsls	r3, r3, #25
 800b720:	f53f af12 	bmi.w	800b548 <_vfiprintf_r+0x4c>
 800b724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b726:	e711      	b.n	800b54c <_vfiprintf_r+0x50>
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4b09      	ldr	r3, [pc, #36]	; (800b754 <_vfiprintf_r+0x258>)
 800b730:	a904      	add	r1, sp, #16
 800b732:	4630      	mov	r0, r6
 800b734:	f7fe f800 	bl	8009738 <_printf_i>
 800b738:	e7e4      	b.n	800b704 <_vfiprintf_r+0x208>
 800b73a:	bf00      	nop
 800b73c:	0800bba0 	.word	0x0800bba0
 800b740:	0800bbc0 	.word	0x0800bbc0
 800b744:	0800bb80 	.word	0x0800bb80
 800b748:	0800bd3c 	.word	0x0800bd3c
 800b74c:	0800bd46 	.word	0x0800bd46
 800b750:	080091f1 	.word	0x080091f1
 800b754:	0800b4d9 	.word	0x0800b4d9
 800b758:	0800bd42 	.word	0x0800bd42

0800b75c <__sread>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	f000 f8d6 	bl	800b914 <_read_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	bfab      	itete	ge
 800b76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b76e:	89a3      	ldrhlt	r3, [r4, #12]
 800b770:	181b      	addge	r3, r3, r0
 800b772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b776:	bfac      	ite	ge
 800b778:	6563      	strge	r3, [r4, #84]	; 0x54
 800b77a:	81a3      	strhlt	r3, [r4, #12]
 800b77c:	bd10      	pop	{r4, pc}

0800b77e <__swrite>:
 800b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	461f      	mov	r7, r3
 800b784:	898b      	ldrh	r3, [r1, #12]
 800b786:	05db      	lsls	r3, r3, #23
 800b788:	4605      	mov	r5, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	4616      	mov	r6, r2
 800b78e:	d505      	bpl.n	800b79c <__swrite+0x1e>
 800b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b794:	2302      	movs	r3, #2
 800b796:	2200      	movs	r2, #0
 800b798:	f000 f898 	bl	800b8cc <_lseek_r>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b2:	f000 b817 	b.w	800b7e4 <_write_r>

0800b7b6 <__sseek>:
 800b7b6:	b510      	push	{r4, lr}
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7be:	f000 f885 	bl	800b8cc <_lseek_r>
 800b7c2:	1c43      	adds	r3, r0, #1
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	bf15      	itete	ne
 800b7c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7d2:	81a3      	strheq	r3, [r4, #12]
 800b7d4:	bf18      	it	ne
 800b7d6:	81a3      	strhne	r3, [r4, #12]
 800b7d8:	bd10      	pop	{r4, pc}

0800b7da <__sclose>:
 800b7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7de:	f000 b831 	b.w	800b844 <_close_r>
	...

0800b7e4 <_write_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d07      	ldr	r5, [pc, #28]	; (800b804 <_write_r+0x20>)
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	602a      	str	r2, [r5, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	f7f7 fa09 	bl	8002c0a <_write>
 800b7f8:	1c43      	adds	r3, r0, #1
 800b7fa:	d102      	bne.n	800b802 <_write_r+0x1e>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	b103      	cbz	r3, 800b802 <_write_r+0x1e>
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	bd38      	pop	{r3, r4, r5, pc}
 800b804:	20001cbc 	.word	0x20001cbc

0800b808 <__assert_func>:
 800b808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b80a:	4614      	mov	r4, r2
 800b80c:	461a      	mov	r2, r3
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <__assert_func+0x2c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4605      	mov	r5, r0
 800b814:	68d8      	ldr	r0, [r3, #12]
 800b816:	b14c      	cbz	r4, 800b82c <__assert_func+0x24>
 800b818:	4b07      	ldr	r3, [pc, #28]	; (800b838 <__assert_func+0x30>)
 800b81a:	9100      	str	r1, [sp, #0]
 800b81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b820:	4906      	ldr	r1, [pc, #24]	; (800b83c <__assert_func+0x34>)
 800b822:	462b      	mov	r3, r5
 800b824:	f000 f81e 	bl	800b864 <fiprintf>
 800b828:	f000 f893 	bl	800b952 <abort>
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <__assert_func+0x38>)
 800b82e:	461c      	mov	r4, r3
 800b830:	e7f3      	b.n	800b81a <__assert_func+0x12>
 800b832:	bf00      	nop
 800b834:	20000010 	.word	0x20000010
 800b838:	0800bd4d 	.word	0x0800bd4d
 800b83c:	0800bd5a 	.word	0x0800bd5a
 800b840:	0800bd88 	.word	0x0800bd88

0800b844 <_close_r>:
 800b844:	b538      	push	{r3, r4, r5, lr}
 800b846:	4d06      	ldr	r5, [pc, #24]	; (800b860 <_close_r+0x1c>)
 800b848:	2300      	movs	r3, #0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4608      	mov	r0, r1
 800b84e:	602b      	str	r3, [r5, #0]
 800b850:	f7f7 f9f7 	bl	8002c42 <_close>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_close_r+0x1a>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_close_r+0x1a>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	20001cbc 	.word	0x20001cbc

0800b864 <fiprintf>:
 800b864:	b40e      	push	{r1, r2, r3}
 800b866:	b503      	push	{r0, r1, lr}
 800b868:	4601      	mov	r1, r0
 800b86a:	ab03      	add	r3, sp, #12
 800b86c:	4805      	ldr	r0, [pc, #20]	; (800b884 <fiprintf+0x20>)
 800b86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b872:	6800      	ldr	r0, [r0, #0]
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	f7ff fe41 	bl	800b4fc <_vfiprintf_r>
 800b87a:	b002      	add	sp, #8
 800b87c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b880:	b003      	add	sp, #12
 800b882:	4770      	bx	lr
 800b884:	20000010 	.word	0x20000010

0800b888 <_fstat_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	4d07      	ldr	r5, [pc, #28]	; (800b8a8 <_fstat_r+0x20>)
 800b88c:	2300      	movs	r3, #0
 800b88e:	4604      	mov	r4, r0
 800b890:	4608      	mov	r0, r1
 800b892:	4611      	mov	r1, r2
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	f7f7 f9e0 	bl	8002c5a <_fstat>
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	d102      	bne.n	800b8a4 <_fstat_r+0x1c>
 800b89e:	682b      	ldr	r3, [r5, #0]
 800b8a0:	b103      	cbz	r3, 800b8a4 <_fstat_r+0x1c>
 800b8a2:	6023      	str	r3, [r4, #0]
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20001cbc 	.word	0x20001cbc

0800b8ac <_isatty_r>:
 800b8ac:	b538      	push	{r3, r4, r5, lr}
 800b8ae:	4d06      	ldr	r5, [pc, #24]	; (800b8c8 <_isatty_r+0x1c>)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4608      	mov	r0, r1
 800b8b6:	602b      	str	r3, [r5, #0]
 800b8b8:	f7f7 f9df 	bl	8002c7a <_isatty>
 800b8bc:	1c43      	adds	r3, r0, #1
 800b8be:	d102      	bne.n	800b8c6 <_isatty_r+0x1a>
 800b8c0:	682b      	ldr	r3, [r5, #0]
 800b8c2:	b103      	cbz	r3, 800b8c6 <_isatty_r+0x1a>
 800b8c4:	6023      	str	r3, [r4, #0]
 800b8c6:	bd38      	pop	{r3, r4, r5, pc}
 800b8c8:	20001cbc 	.word	0x20001cbc

0800b8cc <_lseek_r>:
 800b8cc:	b538      	push	{r3, r4, r5, lr}
 800b8ce:	4d07      	ldr	r5, [pc, #28]	; (800b8ec <_lseek_r+0x20>)
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	4608      	mov	r0, r1
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	602a      	str	r2, [r5, #0]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f7f7 f9d8 	bl	8002c90 <_lseek>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_lseek_r+0x1e>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_lseek_r+0x1e>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	20001cbc 	.word	0x20001cbc

0800b8f0 <__ascii_mbtowc>:
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	b901      	cbnz	r1, 800b8f6 <__ascii_mbtowc+0x6>
 800b8f4:	a901      	add	r1, sp, #4
 800b8f6:	b142      	cbz	r2, 800b90a <__ascii_mbtowc+0x1a>
 800b8f8:	b14b      	cbz	r3, 800b90e <__ascii_mbtowc+0x1e>
 800b8fa:	7813      	ldrb	r3, [r2, #0]
 800b8fc:	600b      	str	r3, [r1, #0]
 800b8fe:	7812      	ldrb	r2, [r2, #0]
 800b900:	1e10      	subs	r0, r2, #0
 800b902:	bf18      	it	ne
 800b904:	2001      	movne	r0, #1
 800b906:	b002      	add	sp, #8
 800b908:	4770      	bx	lr
 800b90a:	4610      	mov	r0, r2
 800b90c:	e7fb      	b.n	800b906 <__ascii_mbtowc+0x16>
 800b90e:	f06f 0001 	mvn.w	r0, #1
 800b912:	e7f8      	b.n	800b906 <__ascii_mbtowc+0x16>

0800b914 <_read_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4d07      	ldr	r5, [pc, #28]	; (800b934 <_read_r+0x20>)
 800b918:	4604      	mov	r4, r0
 800b91a:	4608      	mov	r0, r1
 800b91c:	4611      	mov	r1, r2
 800b91e:	2200      	movs	r2, #0
 800b920:	602a      	str	r2, [r5, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	f7f7 f954 	bl	8002bd0 <_read>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_read_r+0x1e>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_read_r+0x1e>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20001cbc 	.word	0x20001cbc

0800b938 <__ascii_wctomb>:
 800b938:	b149      	cbz	r1, 800b94e <__ascii_wctomb+0x16>
 800b93a:	2aff      	cmp	r2, #255	; 0xff
 800b93c:	bf85      	ittet	hi
 800b93e:	238a      	movhi	r3, #138	; 0x8a
 800b940:	6003      	strhi	r3, [r0, #0]
 800b942:	700a      	strbls	r2, [r1, #0]
 800b944:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b948:	bf98      	it	ls
 800b94a:	2001      	movls	r0, #1
 800b94c:	4770      	bx	lr
 800b94e:	4608      	mov	r0, r1
 800b950:	4770      	bx	lr

0800b952 <abort>:
 800b952:	b508      	push	{r3, lr}
 800b954:	2006      	movs	r0, #6
 800b956:	f000 f82b 	bl	800b9b0 <raise>
 800b95a:	2001      	movs	r0, #1
 800b95c:	f7f7 f92e 	bl	8002bbc <_exit>

0800b960 <_raise_r>:
 800b960:	291f      	cmp	r1, #31
 800b962:	b538      	push	{r3, r4, r5, lr}
 800b964:	4604      	mov	r4, r0
 800b966:	460d      	mov	r5, r1
 800b968:	d904      	bls.n	800b974 <_raise_r+0x14>
 800b96a:	2316      	movs	r3, #22
 800b96c:	6003      	str	r3, [r0, #0]
 800b96e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b976:	b112      	cbz	r2, 800b97e <_raise_r+0x1e>
 800b978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b97c:	b94b      	cbnz	r3, 800b992 <_raise_r+0x32>
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 f830 	bl	800b9e4 <_getpid_r>
 800b984:	462a      	mov	r2, r5
 800b986:	4601      	mov	r1, r0
 800b988:	4620      	mov	r0, r4
 800b98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b98e:	f000 b817 	b.w	800b9c0 <_kill_r>
 800b992:	2b01      	cmp	r3, #1
 800b994:	d00a      	beq.n	800b9ac <_raise_r+0x4c>
 800b996:	1c59      	adds	r1, r3, #1
 800b998:	d103      	bne.n	800b9a2 <_raise_r+0x42>
 800b99a:	2316      	movs	r3, #22
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	2001      	movs	r0, #1
 800b9a0:	e7e7      	b.n	800b972 <_raise_r+0x12>
 800b9a2:	2400      	movs	r4, #0
 800b9a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	4798      	blx	r3
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e7e0      	b.n	800b972 <_raise_r+0x12>

0800b9b0 <raise>:
 800b9b0:	4b02      	ldr	r3, [pc, #8]	; (800b9bc <raise+0xc>)
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	f7ff bfd3 	b.w	800b960 <_raise_r>
 800b9ba:	bf00      	nop
 800b9bc:	20000010 	.word	0x20000010

0800b9c0 <_kill_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d07      	ldr	r5, [pc, #28]	; (800b9e0 <_kill_r+0x20>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	f7f7 f8e5 	bl	8002b9c <_kill>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	d102      	bne.n	800b9dc <_kill_r+0x1c>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	b103      	cbz	r3, 800b9dc <_kill_r+0x1c>
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	bf00      	nop
 800b9e0:	20001cbc 	.word	0x20001cbc

0800b9e4 <_getpid_r>:
 800b9e4:	f7f7 b8d2 	b.w	8002b8c <_getpid>

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
